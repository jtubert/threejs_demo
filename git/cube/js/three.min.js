





<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
  <link rel="dns-prefetch" href="https://assets-cdn.github.com">
  <link rel="dns-prefetch" href="https://avatars0.githubusercontent.com">
  <link rel="dns-prefetch" href="https://avatars1.githubusercontent.com">
  <link rel="dns-prefetch" href="https://avatars2.githubusercontent.com">
  <link rel="dns-prefetch" href="https://avatars3.githubusercontent.com">
  <link rel="dns-prefetch" href="https://github-cloud.s3.amazonaws.com">
  <link rel="dns-prefetch" href="https://user-images.githubusercontent.com/">

<meta content="origin-when-cross-origin" name="referrer" />

  <link crossorigin="anonymous" href="https://assets-cdn.github.com/assets/frameworks-bedfc518345498ab3204d330c1727cde7e733526a09cd7df6867f6a231565091.css" integrity="sha256-vt/FGDRUmKsyBNMwwXJ83n5zNSagnNffaGf2ojFWUJE=" media="all" rel="stylesheet" />
  <link crossorigin="anonymous" href="https://assets-cdn.github.com/assets/github-63a53e9762b0d5d8d4f52e5ed8855df0850a00402ac6543862a93f50691230c8.css" integrity="sha256-Y6U+l2Kw1djU9S5e2IVd8IUKAEAqxlQ4Yqk/UGkSMMg=" media="all" rel="stylesheet" />
  
  
  
  

  <meta name="viewport" content="width=device-width">
  
  <title>labs/three.min.js at master Â· jtubert/labs</title>
  <link rel="search" type="application/opensearchdescription+xml" href="/opensearch.xml" title="GitHub">
  <link rel="fluid-icon" href="https://github.com/fluidicon.png" title="GitHub">
  <meta property="fb:app_id" content="1401488693436528">

    
    <meta content="https://avatars0.githubusercontent.com/u/677913?v=4&amp;s=400" property="og:image" /><meta content="GitHub" property="og:site_name" /><meta content="object" property="og:type" /><meta content="jtubert/labs" property="og:title" /><meta content="https://github.com/jtubert/labs" property="og:url" /><meta content="labs" property="og:description" />

  <link rel="assets" href="https://assets-cdn.github.com/">
  <link rel="web-socket" href="wss://live.github.com/_sockets/VjI6MjEwMTEyOTM2OjNmOWY1NTQ5MzM3NGZmMDBhOGVmOTNhNGY3YWM3M2EwYjllZTA2MTg0YjYzZDQ4N2RlMDcxNjE1ZjQ4ZTJhMmU=--56d6c10ccb39f0acd429c8b3b6252bb3310568d1">
  <meta name="pjax-timeout" content="1000">
  <link rel="sudo-modal" href="/sessions/sudo_modal">
  <meta name="request-id" content="D9B5:2BD85:1738713D:22FC8BEA:59D03E2C" data-pjax-transient>
  

  <meta name="selected-link" value="repo_source" data-pjax-transient>

  <meta name="google-site-verification" content="KT5gs8h0wvaagLKAVWq8bbeNwnZZK1r1XQysX3xurLU">
<meta name="google-site-verification" content="ZzhVyEFwb7w3e0-uOTltm8Jsck2F5StVihD0exw2fsA">
    <meta name="google-analytics" content="UA-3769691-2">

<meta content="collector.githubapp.com" name="octolytics-host" /><meta content="github" name="octolytics-app-id" /><meta content="https://collector.githubapp.com/github-external/browser_event" name="octolytics-event-url" /><meta content="D9B5:2BD85:1738713D:22FC8BEA:59D03E2C" name="octolytics-dimension-request_id" /><meta content="sea" name="octolytics-dimension-region_edge" /><meta content="iad" name="octolytics-dimension-region_render" /><meta content="677913" name="octolytics-actor-id" /><meta content="jtubert" name="octolytics-actor-login" /><meta content="cd1580efba0418a536f0f9d02477008564fa20f34f6cc5e94199d3e8b60e7b9c" name="octolytics-actor-hash" />
<meta content="/&lt;user-name&gt;/&lt;repo-name&gt;/blob/show" data-pjax-transient="true" name="analytics-location" />




  <meta class="js-ga-set" name="dimension1" content="Logged In">


  

      <meta name="hostname" content="github.com">
  <meta name="user-login" content="jtubert">

      <meta name="expected-hostname" content="github.com">
    <meta name="js-proxy-site-detection-payload" content="YTdkODhhMWI5Yjg3MmVkNTdmMDQ4Njc5OTE1NWYxMzU0YmZkY2NhMGI2YTI5NDc1YzIxZGZhZTY3Mzk4MDZkOXx7InJlbW90ZV9hZGRyZXNzIjoiNjcuMTY5LjYyLjc3IiwicmVxdWVzdF9pZCI6IkQ5QjU6MkJEODU6MTczODcxM0Q6MjJGQzhCRUE6NTlEMDNFMkMiLCJ0aW1lc3RhbXAiOjE1MDY4MTk2MzUsImhvc3QiOiJnaXRodWIuY29tIn0=">

    <meta name="enabled-features" content="UNIVERSE_BANNER">

  <meta name="html-safe-nonce" content="8873bcb3794209e80f034122a727ffd529959e90">

  <meta http-equiv="x-pjax-version" content="ef1ae5965f157ea6cca26157aaa21ddb">
  

      <link href="https://github.com/jtubert/labs/commits/master.atom?token=AApYGVbOarbso5DGwAjzClbneKIU0wdMks633C1BwA%3D%3D" rel="alternate" title="Recent Commits to labs:master" type="application/atom+xml">

  <meta name="description" content="labs">
  <meta name="go-import" content="github.com/jtubert/labs git https://github.com/jtubert/labs.git">

  <meta content="677913" name="octolytics-dimension-user_id" /><meta content="jtubert" name="octolytics-dimension-user_login" /><meta content="1589404" name="octolytics-dimension-repository_id" /><meta content="jtubert/labs" name="octolytics-dimension-repository_nwo" /><meta content="false" name="octolytics-dimension-repository_public" /><meta content="false" name="octolytics-dimension-repository_is_fork" /><meta content="1589404" name="octolytics-dimension-repository_network_root_id" /><meta content="jtubert/labs" name="octolytics-dimension-repository_network_root_nwo" /><meta content="true" name="octolytics-dimension-repository_explore_github_marketplace_ci_cta_shown" />


    <link rel="canonical" href="https://github.com/jtubert/labs/blob/master/three_js/js/three.min.js" data-pjax-transient>


  <meta name="browser-stats-url" content="https://api.github.com/_private/browser/stats">

  <meta name="browser-errors-url" content="https://api.github.com/_private/browser/errors">

  <link rel="mask-icon" href="https://assets-cdn.github.com/pinned-octocat.svg" color="#000000">
  <link rel="icon" type="image/x-icon" href="https://assets-cdn.github.com/favicon.ico">

<meta name="theme-color" content="#1e2327">


  <meta name="u2f-support" content="true">

  </head>

  <body class="logged-in env-production emoji-size-boost page-blob">
    

  <div class="position-relative js-header-wrapper ">
    <a href="#start-of-content" tabindex="1" class="bg-black text-white p-3 show-on-focus js-skip-to-content">Skip to content</a>
    <div id="js-pjax-loader-bar" class="pjax-loader-bar"><div class="progress"></div></div>

    
    
    



        
<header class="Header  f5" role="banner">
  <div class="d-flex px-3 flex-justify-between container-lg">
    <div class="d-flex flex-justify-between">
      <a class="header-logo-invertocat" href="https://github.com/" data-hotkey="g d" aria-label="Homepage" data-ga-click="Header, go to dashboard, icon:logo">
  <svg aria-hidden="true" class="octicon octicon-mark-github" height="32" version="1.1" viewBox="0 0 16 16" width="32"><path fill-rule="evenodd" d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0 0 16 8c0-4.42-3.58-8-8-8z"/></svg>
</a>


    </div>

    <div class="HeaderMenu d-flex flex-justify-between flex-auto">
      <div class="d-flex">
            <div class="">
              <div class="header-search scoped-search site-scoped-search js-site-search" role="search">
  <!-- '"` --><!-- </textarea></xmp> --></option></form><form accept-charset="UTF-8" action="/jtubert/labs/search" class="js-site-search-form" data-scoped-search-url="/jtubert/labs/search" data-unscoped-search-url="/search" method="get"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /></div>
    <label class="form-control header-search-wrapper js-chromeless-input-container">
        <a href="/jtubert/labs/blob/master/three_js/js/three.min.js" class="header-search-scope no-underline">This repository</a>
      <input type="text"
        class="form-control header-search-input js-site-search-focus js-site-search-field is-clearable"
        data-hotkey="s"
        name="q"
        value=""
        placeholder="Search"
        aria-label="Search this repository"
        data-unscoped-placeholder="Search GitHub"
        data-scoped-placeholder="Search"
        autocapitalize="off">
        <input type="hidden" class="js-site-search-type-field" name="type" >
    </label>
</form></div>

            </div>

          <ul class="d-flex pl-2 flex-items-center text-bold list-style-none" role="navigation">
            <li>
              <a href="/pulls" aria-label="Pull requests you created" class="js-selected-navigation-item HeaderNavlink px-2" data-ga-click="Header, click, Nav menu - item:pulls context:user" data-hotkey="g p" data-selected-links="/pulls /pulls/assigned /pulls/mentioned /pulls">
                Pull requests
</a>            </li>
            <li>
              <a href="/issues" aria-label="Issues you created" class="js-selected-navigation-item HeaderNavlink px-2" data-ga-click="Header, click, Nav menu - item:issues context:user" data-hotkey="g i" data-selected-links="/issues /issues/assigned /issues/mentioned /issues">
                Issues
</a>            </li>
                <li>
                  <a href="/marketplace" class="js-selected-navigation-item HeaderNavlink px-2" data-ga-click="Header, click, Nav menu - item:marketplace context:user" data-selected-links=" /marketplace">
                    Marketplace
</a>                </li>
            <li>
              <a href="/explore" class="js-selected-navigation-item HeaderNavlink px-2" data-ga-click="Header, click, Nav menu - item:explore" data-selected-links="/explore /trending /trending/developers /integrations /integrations/feature/code /integrations/feature/collaborate /integrations/feature/ship showcases showcases_search showcases_landing /explore">
                Explore
</a>            </li>
          </ul>
      </div>

      <div class="d-flex">
        
<ul class="user-nav d-flex flex-items-center list-style-none" id="user-links">
  <li class="dropdown js-menu-container js-header-notifications">
    <span class="d-inline-block  px-2">
      
      <a href="/notifications" aria-label="You have unread notifications" class="notification-indicator tooltipped tooltipped-s  js-socket-channel js-notification-indicator" data-channel="notification-changed:677913" data-ga-click="Header, go to notifications, icon:unread" data-hotkey="g n">
          <span class="mail-status unread"></span>
          <svg aria-hidden="true" class="octicon octicon-bell" height="16" version="1.1" viewBox="0 0 14 16" width="14"><path fill-rule="evenodd" d="M14 12v1H0v-1l.73-.58c.77-.77.81-2.55 1.19-4.42C2.69 3.23 6 2 6 2c0-.55.45-1 1-1s1 .45 1 1c0 0 3.39 1.23 4.16 5 .38 1.88.42 3.66 1.19 4.42l.66.58H14zm-7 4c1.11 0 2-.89 2-2H5c0 1.11.89 2 2 2z"/></svg>
</a>
    </span>
  </li>

  <li class="dropdown js-menu-container">
    <details class="dropdown-details js-dropdown-details d-flex px-2 flex-items-center">
      <summary class="HeaderNavlink"
         aria-label="Create newâ¦"
         data-ga-click="Header, create new, icon:add">
        <svg aria-hidden="true" class="octicon octicon-plus float-left mr-1 mt-1" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 9H7v5H5V9H0V7h5V2h2v5h5z"/></svg>
        <span class="dropdown-caret mt-1"></span>
      </summary>

      <ul class="dropdown-menu dropdown-menu-sw">
        
<a class="dropdown-item" href="/new" data-ga-click="Header, create new repository">
  New repository
</a>

  <a class="dropdown-item" href="/new/import" data-ga-click="Header, import a repository">
    Import repository
  </a>

<a class="dropdown-item" href="https://gist.github.com/" data-ga-click="Header, create new gist">
  New gist
</a>

  <a class="dropdown-item" href="/organizations/new" data-ga-click="Header, create new organization">
    New organization
  </a>



  <div class="dropdown-divider"></div>
  <div class="dropdown-header">
    <span title="jtubert/labs">This repository</span>
  </div>
    <a class="dropdown-item" href="/jtubert/labs/issues/new" data-ga-click="Header, create new issue">
      New issue
    </a>

      </ul>
    </details>
  </li>

  <li class="dropdown js-menu-container">

    <details class="dropdown-details js-dropdown-details d-flex pl-2 flex-items-center">
      <summary class="HeaderNavlink name mt-1"
        aria-label="View profile and more"
        data-ga-click="Header, show menu, icon:avatar">
        <img alt="@jtubert" class="avatar float-left mr-1" src="https://avatars0.githubusercontent.com/u/677913?v=4&amp;s=40" height="20" width="20">
        <span class="dropdown-caret"></span>
      </summary>

      <ul class="dropdown-menu dropdown-menu-sw">
        <li class="dropdown-header header-nav-current-user css-truncate">
          Signed in as <strong class="css-truncate-target">jtubert</strong>
        </li>

        <li class="dropdown-divider"></li>

        <li><a class="dropdown-item" href="/jtubert" data-ga-click="Header, go to profile, text:your profile">
          Your profile
        </a></li>
        <li><a class="dropdown-item" href="/jtubert?tab=stars" data-ga-click="Header, go to starred repos, text:your stars">
          Your stars
        </a></li>
          <li><a class="dropdown-item" href="https://gist.github.com/" data-ga-click="Header, your gists, text:your gists">Your Gists</a></li>

        <li class="dropdown-divider"></li>

        <li><a class="dropdown-item" href="https://help.github.com" data-ga-click="Header, go to help, text:help">
          Help
        </a></li>

        <li><a class="dropdown-item" href="/settings/profile" data-ga-click="Header, go to settings, icon:settings">
          Settings
        </a></li>

        <li><!-- '"` --><!-- </textarea></xmp> --></option></form><form accept-charset="UTF-8" action="/logout" class="logout-form" method="post"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /><input name="authenticity_token" type="hidden" value="PvaAMtMI04SHKr0NRmIu0URt6aXg7EPYPe98kjYuO+atP3TURNjWTn1mbXjsZxcNZ6VkoJI96drz+Lpp4y5KeA==" /></div>
          <button type="submit" class="dropdown-item dropdown-signout" data-ga-click="Header, sign out, icon:logout">
            Sign out
          </button>
        </form></li>
      </ul>
    </details>
  </li>
</ul>


        <!-- '"` --><!-- </textarea></xmp> --></option></form><form accept-charset="UTF-8" action="/logout" class="sr-only right-0" method="post"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /><input name="authenticity_token" type="hidden" value="mOyAiame8SeMXXXwEtTT7CfCtVpHNkwjBAshniIuyrMLJXRvPk707XYRpYW40eowBAo4XzXn5iHKHOdl9y67LQ==" /></div>
          <button type="submit" class="dropdown-item dropdown-signout" data-ga-click="Header, sign out, icon:logout">
            Sign out
          </button>
</form>      </div>
    </div>
  </div>
</header>


      

  </div>

  <div id="start-of-content" class="show-on-focus"></div>

    <div id="js-flash-container">
</div>



  <div role="main">
        <div itemscope itemtype="http://schema.org/SoftwareSourceCode">
    <div id="js-repo-pjax-container" data-pjax-container>
      





    <div class="pagehead repohead instapaper_ignore readability-menu experiment-repo-nav">
      <div class="container repohead-details-container">

        <ul class="pagehead-actions">
  <li>
        <!-- '"` --><!-- </textarea></xmp> --></option></form><form accept-charset="UTF-8" action="/notifications/subscribe" class="js-social-container" data-autosubmit="true" data-remote="true" method="post"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /><input name="authenticity_token" type="hidden" value="xH+JvQZfnUgvtlTwZqtM0yZsOKdJ5u7o5kyqx06bBqSGBq0mZGOvJ69AVi7qa6hwBSPG8EC4SJKl/viSbXljGg==" /></div>      <input class="form-control" id="repository_id" name="repository_id" type="hidden" value="1589404" />

        <div class="select-menu js-menu-container js-select-menu">
          <a href="/jtubert/labs/subscription"
            class="btn btn-sm btn-with-count select-menu-button js-menu-target"
            role="button"
            aria-haspopup="true"
            aria-expanded="false"
            aria-label="Toggle repository notifications menu"
            data-ga-click="Repository, click Watch settings, action:blob#show">
            <span class="js-select-button">
                <svg aria-hidden="true" class="octicon octicon-eye" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M8.06 2C3 2 0 8 0 8s3 6 8.06 6C13 14 16 8 16 8s-3-6-7.94-6zM8 12c-2.2 0-4-1.78-4-4 0-2.2 1.8-4 4-4 2.22 0 4 1.8 4 4 0 2.22-1.78 4-4 4zm2-4c0 1.11-.89 2-2 2-1.11 0-2-.89-2-2 0-1.11.89-2 2-2 1.11 0 2 .89 2 2z"/></svg>
                Unwatch
            </span>
          </a>
            <a class="social-count js-social-count"
              href="/jtubert/labs/watchers"
              aria-label="1 user is watching this repository">
              1
            </a>

        <div class="select-menu-modal-holder">
          <div class="select-menu-modal subscription-menu-modal js-menu-content">
            <div class="select-menu-header js-navigation-enable" tabindex="-1">
              <svg aria-label="Close" class="octicon octicon-x js-menu-close" height="16" role="img" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M7.48 8l3.75 3.75-1.48 1.48L6 9.48l-3.75 3.75-1.48-1.48L4.52 8 .77 4.25l1.48-1.48L6 6.52l3.75-3.75 1.48 1.48z"/></svg>
              <span class="select-menu-title">Notifications</span>
            </div>

              <div class="select-menu-list js-navigation-container" role="menu">

                <div class="select-menu-item js-navigation-item " role="menuitem" tabindex="0">
                  <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
                  <div class="select-menu-item-text">
                    <input id="do_included" name="do" type="radio" value="included" />
                    <span class="select-menu-item-heading">Not watching</span>
                    <span class="description">Be notified when participating or @mentioned.</span>
                    <span class="js-select-button-text hidden-select-button-text">
                      <svg aria-hidden="true" class="octicon octicon-eye" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M8.06 2C3 2 0 8 0 8s3 6 8.06 6C13 14 16 8 16 8s-3-6-7.94-6zM8 12c-2.2 0-4-1.78-4-4 0-2.2 1.8-4 4-4 2.22 0 4 1.8 4 4 0 2.22-1.78 4-4 4zm2-4c0 1.11-.89 2-2 2-1.11 0-2-.89-2-2 0-1.11.89-2 2-2 1.11 0 2 .89 2 2z"/></svg>
                      Watch
                    </span>
                  </div>
                </div>

                <div class="select-menu-item js-navigation-item selected" role="menuitem" tabindex="0">
                  <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
                  <div class="select-menu-item-text">
                    <input checked="checked" id="do_subscribed" name="do" type="radio" value="subscribed" />
                    <span class="select-menu-item-heading">Watching</span>
                    <span class="description">Be notified of all conversations.</span>
                    <span class="js-select-button-text hidden-select-button-text">
                      <svg aria-hidden="true" class="octicon octicon-eye" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M8.06 2C3 2 0 8 0 8s3 6 8.06 6C13 14 16 8 16 8s-3-6-7.94-6zM8 12c-2.2 0-4-1.78-4-4 0-2.2 1.8-4 4-4 2.22 0 4 1.8 4 4 0 2.22-1.78 4-4 4zm2-4c0 1.11-.89 2-2 2-1.11 0-2-.89-2-2 0-1.11.89-2 2-2 1.11 0 2 .89 2 2z"/></svg>
                        Unwatch
                    </span>
                  </div>
                </div>

                <div class="select-menu-item js-navigation-item " role="menuitem" tabindex="0">
                  <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
                  <div class="select-menu-item-text">
                    <input id="do_ignore" name="do" type="radio" value="ignore" />
                    <span class="select-menu-item-heading">Ignoring</span>
                    <span class="description">Never be notified.</span>
                    <span class="js-select-button-text hidden-select-button-text">
                      <svg aria-hidden="true" class="octicon octicon-mute" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M8 2.81v10.38c0 .67-.81 1-1.28.53L3 10H1c-.55 0-1-.45-1-1V7c0-.55.45-1 1-1h2l3.72-3.72C7.19 1.81 8 2.14 8 2.81zm7.53 3.22l-1.06-1.06-1.97 1.97-1.97-1.97-1.06 1.06L11.44 8 9.47 9.97l1.06 1.06 1.97-1.97 1.97 1.97 1.06-1.06L13.56 8l1.97-1.97z"/></svg>
                        Stop ignoring
                    </span>
                  </div>
                </div>

              </div>

            </div>
          </div>
        </div>
</form>
  </li>

  <li>
    
  <div class="js-toggler-container js-social-container starring-container on">
    <!-- '"` --><!-- </textarea></xmp> --></option></form><form accept-charset="UTF-8" action="/jtubert/labs/unstar" class="starred" data-remote="true" method="post"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /><input name="authenticity_token" type="hidden" value="mR25pzW/gReueaYLUsIgMs9dScTTQf2o6vTJyeV7EUJjLSPSWWnn7ERaqHGHKJQ32V3wGcGnQxw0IaJFVEyd0w==" /></div>
      <button
        type="submit"
        class="btn btn-sm btn-with-count js-toggler-target"
        aria-label="Unstar this repository" title="Unstar jtubert/labs"
        data-ga-click="Repository, click unstar button, action:blob#show; text:Unstar">
        <svg aria-hidden="true" class="octicon octicon-star" height="16" version="1.1" viewBox="0 0 14 16" width="14"><path fill-rule="evenodd" d="M14 6l-4.9-.64L7 1 4.9 5.36 0 6l3.6 3.26L2.67 14 7 11.67 11.33 14l-.93-4.74z"/></svg>
        Unstar
      </button>
        <a class="social-count js-social-count" href="/jtubert/labs/stargazers"
           aria-label="1 user starred this repository">
          1
        </a>
</form>
    <!-- '"` --><!-- </textarea></xmp> --></option></form><form accept-charset="UTF-8" action="/jtubert/labs/star" class="unstarred" data-remote="true" method="post"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /><input name="authenticity_token" type="hidden" value="BmgGErGamhUYN58d6+EVs45W+bc6IJxZvLgvOoO/1Bcp0Q0g+v2b3CfbfCi1V1S1OnIgrKj+vLVHAHYhdhwcBw==" /></div>
      <button
        type="submit"
        class="btn btn-sm btn-with-count js-toggler-target"
        aria-label="Star this repository" title="Star jtubert/labs"
        data-ga-click="Repository, click star button, action:blob#show; text:Star">
        <svg aria-hidden="true" class="octicon octicon-star" height="16" version="1.1" viewBox="0 0 14 16" width="14"><path fill-rule="evenodd" d="M14 6l-4.9-.64L7 1 4.9 5.36 0 6l3.6 3.26L2.67 14 7 11.67 11.33 14l-.93-4.74z"/></svg>
        Star
      </button>
        <a class="social-count js-social-count" href="/jtubert/labs/stargazers"
           aria-label="1 user starred this repository">
          1
        </a>
</form>  </div>

  </li>

  <li>
          <a href="#fork-destination-box" class="btn btn-sm btn-with-count"
              title="Fork your own copy of jtubert/labs to your account"
              aria-label="Fork your own copy of jtubert/labs to your account"
              rel="facebox"
              data-ga-click="Repository, show fork modal, action:blob#show; text:Fork">
              <svg aria-hidden="true" class="octicon octicon-repo-forked" height="16" version="1.1" viewBox="0 0 10 16" width="10"><path fill-rule="evenodd" d="M8 1a1.993 1.993 0 0 0-1 3.72V6L5 8 3 6V4.72A1.993 1.993 0 0 0 2 1a1.993 1.993 0 0 0-1 3.72V6.5l3 3v1.78A1.993 1.993 0 0 0 5 15a1.993 1.993 0 0 0 1-3.72V9.5l3-3V4.72A1.993 1.993 0 0 0 8 1zM2 4.2C1.34 4.2.8 3.65.8 3c0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2zm3 10c-.66 0-1.2-.55-1.2-1.2 0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2zm3-10c-.66 0-1.2-.55-1.2-1.2 0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2z"/></svg>
            Fork
          </a>

          <div id="fork-destination-box" style="display: none;">
            <h2 class="facebox-header" data-facebox-id="facebox-header">Where should we fork this repository?</h2>
            <include-fragment src=""
                class="js-fork-select-fragment fork-select-fragment"
                data-url="/jtubert/labs/fork?fragment=1">
              <img alt="Loading" height="64" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-128.gif" width="64" />
            </include-fragment>
          </div>

    <a href="/jtubert/labs/network" class="social-count"
       aria-label="0 users forked this repository">
      0
    </a>
  </li>
</ul>

        <h1 class="private ">
  <svg aria-hidden="true" class="octicon octicon-lock" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M4 13H3v-1h1v1zm8-6v7c0 .55-.45 1-1 1H1c-.55 0-1-.45-1-1V7c0-.55.45-1 1-1h1V4c0-2.2 1.8-4 4-4s4 1.8 4 4v2h1c.55 0 1 .45 1 1zM3.8 6h4.41V4c0-1.22-.98-2.2-2.2-2.2-1.22 0-2.2.98-2.2 2.2v2H3.8zM11 7H2v7h9V7zM4 8H3v1h1V8zm0 2H3v1h1v-1z"/></svg>
  <span class="author" itemprop="author"><a href="/jtubert" class="url fn" rel="author">jtubert</a></span><!--
--><span class="path-divider">/</span><!--
--><strong itemprop="name"><a href="/jtubert/labs" data-pjax="#js-repo-pjax-container">labs</a></strong>
    <span class="Label Label--outline v-align-middle">Private</span>

</h1>

      </div>
      <div class="container">
        
<nav class="reponav js-repo-nav js-sidenav-container-pjax"
     itemscope
     itemtype="http://schema.org/BreadcrumbList"
     role="navigation"
     data-pjax="#js-repo-pjax-container">

  <span itemscope itemtype="http://schema.org/ListItem" itemprop="itemListElement">
    <a href="/jtubert/labs" class="js-selected-navigation-item selected reponav-item" data-hotkey="g c" data-selected-links="repo_source repo_downloads repo_commits repo_releases repo_tags repo_branches /jtubert/labs" itemprop="url">
      <svg aria-hidden="true" class="octicon octicon-code" height="16" version="1.1" viewBox="0 0 14 16" width="14"><path fill-rule="evenodd" d="M9.5 3L8 4.5 11.5 8 8 11.5 9.5 13 14 8 9.5 3zm-5 0L0 8l4.5 5L6 11.5 2.5 8 6 4.5 4.5 3z"/></svg>
      <span itemprop="name">Code</span>
      <meta itemprop="position" content="1">
</a>  </span>

    <span itemscope itemtype="http://schema.org/ListItem" itemprop="itemListElement">
      <a href="/jtubert/labs/issues" class="js-selected-navigation-item reponav-item" data-hotkey="g i" data-selected-links="repo_issues repo_labels repo_milestones /jtubert/labs/issues" itemprop="url">
        <svg aria-hidden="true" class="octicon octicon-issue-opened" height="16" version="1.1" viewBox="0 0 14 16" width="14"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"/></svg>
        <span itemprop="name">Issues</span>
        <span class="Counter">0</span>
        <meta itemprop="position" content="2">
</a>    </span>

  <span itemscope itemtype="http://schema.org/ListItem" itemprop="itemListElement">
    <a href="/jtubert/labs/pulls" class="js-selected-navigation-item reponav-item" data-hotkey="g p" data-selected-links="repo_pulls /jtubert/labs/pulls" itemprop="url">
      <svg aria-hidden="true" class="octicon octicon-git-pull-request" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M11 11.28V5c-.03-.78-.34-1.47-.94-2.06C9.46 2.35 8.78 2.03 8 2H7V0L4 3l3 3V4h1c.27.02.48.11.69.31.21.2.3.42.31.69v6.28A1.993 1.993 0 0 0 10 15a1.993 1.993 0 0 0 1-3.72zm-1 2.92c-.66 0-1.2-.55-1.2-1.2 0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2zM4 3c0-1.11-.89-2-2-2a1.993 1.993 0 0 0-1 3.72v6.56A1.993 1.993 0 0 0 2 15a1.993 1.993 0 0 0 1-3.72V4.72c.59-.34 1-.98 1-1.72zm-.8 10c0 .66-.55 1.2-1.2 1.2-.65 0-1.2-.55-1.2-1.2 0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2zM2 4.2C1.34 4.2.8 3.65.8 3c0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2z"/></svg>
      <span itemprop="name">Pull requests</span>
      <span class="Counter">0</span>
      <meta itemprop="position" content="3">
</a>  </span>

    <a href="/jtubert/labs/projects" class="js-selected-navigation-item reponav-item" data-hotkey="g b" data-selected-links="repo_projects new_repo_project repo_project /jtubert/labs/projects">
      <svg aria-hidden="true" class="octicon octicon-project" height="16" version="1.1" viewBox="0 0 15 16" width="15"><path fill-rule="evenodd" d="M10 12h3V2h-3v10zm-4-2h3V2H6v8zm-4 4h3V2H2v12zm-1 1h13V1H1v14zM14 0H1a1 1 0 0 0-1 1v14a1 1 0 0 0 1 1h13a1 1 0 0 0 1-1V1a1 1 0 0 0-1-1z"/></svg>
      Projects
      <span class="Counter" >0</span>
</a>
    <a href="/jtubert/labs/wiki" class="js-selected-navigation-item reponav-item" data-hotkey="g w" data-selected-links="repo_wiki /jtubert/labs/wiki">
      <svg aria-hidden="true" class="octicon octicon-book" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M3 5h4v1H3V5zm0 3h4V7H3v1zm0 2h4V9H3v1zm11-5h-4v1h4V5zm0 2h-4v1h4V7zm0 2h-4v1h4V9zm2-6v9c0 .55-.45 1-1 1H9.5l-1 1-1-1H2c-.55 0-1-.45-1-1V3c0-.55.45-1 1-1h5.5l1 1 1-1H15c.55 0 1 .45 1 1zm-8 .5L7.5 3H2v9h6V3.5zm7-.5H9.5l-.5.5V12h6V3z"/></svg>
      Wiki
</a>
      <a href="/jtubert/labs/settings" class="js-selected-navigation-item reponav-item" data-selected-links="repo_settings repo_branch_settings hooks integration_installations /jtubert/labs/settings">
        <svg aria-hidden="true" class="octicon octicon-gear" height="16" version="1.1" viewBox="0 0 14 16" width="14"><path fill-rule="evenodd" d="M14 8.77v-1.6l-1.94-.64-.45-1.09.88-1.84-1.13-1.13-1.81.91-1.09-.45-.69-1.92h-1.6l-.63 1.94-1.11.45-1.84-.88-1.13 1.13.91 1.81-.45 1.09L0 7.23v1.59l1.94.64.45 1.09-.88 1.84 1.13 1.13 1.81-.91 1.09.45.69 1.92h1.59l.63-1.94 1.11-.45 1.84.88 1.13-1.13-.92-1.81.47-1.09L14 8.75v.02zM7 11c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3z"/></svg>
        Settings
</a>
    <div class="reponav-dropdown js-menu-container">
      <button type="button" class="btn-link reponav-item reponav-dropdown js-menu-target " data-no-toggle aria-expanded="false" aria-haspopup="true">
        Insights
        <svg aria-hidden="true" class="octicon octicon-triangle-down v-align-middle text-gray" height="11" version="1.1" viewBox="0 0 12 16" width="8"><path fill-rule="evenodd" d="M0 5l6 6 6-6z"/></svg>
      </button>
      <div class="dropdown-menu-content js-menu-content">
        <div class="dropdown-menu dropdown-menu-sw">
          <a class="dropdown-item" href="/jtubert/labs/pulse" data-skip-pjax>
            <svg aria-hidden="true" class="octicon octicon-pulse" height="16" version="1.1" viewBox="0 0 14 16" width="14"><path fill-rule="evenodd" d="M11.5 8L8.8 5.4 6.6 8.5 5.5 1.6 2.38 8H0v2h3.6l.9-1.8.9 5.4L9 8.5l1.6 1.5H14V8z"/></svg>
            Pulse
          </a>
          <a class="dropdown-item" href="/jtubert/labs/graphs" data-skip-pjax>
            <svg aria-hidden="true" class="octicon octicon-graph" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M16 14v1H0V0h1v14h15zM5 13H3V8h2v5zm4 0H7V3h2v10zm4 0h-2V6h2v7z"/></svg>
            Graphs
          </a>
        </div>
      </div>
    </div>
</nav>

      </div>
    </div>

<div class="container new-discussion-timeline experiment-repo-nav">
  <div class="repository-content">

    
  <a href="/jtubert/labs/blob/acf1b9f277a9bd511141f7075552754fcfa072d7/three_js/js/three.min.js" class="d-none js-permalink-shortcut" data-hotkey="y">Permalink</a>

  <!-- blob contrib key: blob_contributors:v21:3261dfa8f77334e18641585eb38ec55d -->

  <div class="file-navigation js-zeroclipboard-container">
    
<div class="select-menu branch-select-menu js-menu-container js-select-menu float-left">
  <button class=" btn btn-sm select-menu-button js-menu-target css-truncate" data-hotkey="w"
    
    type="button" aria-label="Switch branches or tags" aria-expanded="false" aria-haspopup="true">
      <i>Branch:</i>
      <span class="js-select-button css-truncate-target">master</span>
  </button>

  <div class="select-menu-modal-holder js-menu-content js-navigation-container" data-pjax>

    <div class="select-menu-modal">
      <div class="select-menu-header">
        <svg aria-label="Close" class="octicon octicon-x js-menu-close" height="16" role="img" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M7.48 8l3.75 3.75-1.48 1.48L6 9.48l-3.75 3.75-1.48-1.48L4.52 8 .77 4.25l1.48-1.48L6 6.52l3.75-3.75 1.48 1.48z"/></svg>
        <span class="select-menu-title">Switch branches/tags</span>
      </div>

      <div class="select-menu-filters">
        <div class="select-menu-text-filter">
          <input type="text" aria-label="Find or create a branchâ¦" id="context-commitish-filter-field" class="form-control js-filterable-field js-navigation-enable" placeholder="Find or create a branchâ¦">
        </div>
        <div class="select-menu-tabs">
          <ul>
            <li class="select-menu-tab">
              <a href="#" data-tab-filter="branches" data-filter-placeholder="Find or create a branchâ¦" class="js-select-menu-tab" role="tab">Branches</a>
            </li>
            <li class="select-menu-tab">
              <a href="#" data-tab-filter="tags" data-filter-placeholder="Find a tagâ¦" class="js-select-menu-tab" role="tab">Tags</a>
            </li>
          </ul>
        </div>
      </div>

      <div class="select-menu-list select-menu-tab-bucket js-select-menu-tab-bucket" data-tab-filter="branches" role="menu">

        <div data-filterable-for="context-commitish-filter-field" data-filterable-type="substring">


            <a class="select-menu-item js-navigation-item js-navigation-open "
               href="/jtubert/labs/blob/gh-pages/three_js/js/three.min.js"
               data-name="gh-pages"
               data-skip-pjax="true"
               rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target js-select-menu-filter-text">
                gh-pages
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open selected"
               href="/jtubert/labs/blob/master/three_js/js/three.min.js"
               data-name="master"
               data-skip-pjax="true"
               rel="nofollow">
              <svg aria-hidden="true" class="octicon octicon-check select-menu-item-icon" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target js-select-menu-filter-text">
                master
              </span>
            </a>
        </div>

          <!-- '"` --><!-- </textarea></xmp> --></option></form><form accept-charset="UTF-8" action="/jtubert/labs/branches" class="js-create-branch select-menu-item select-menu-new-item-form js-navigation-item js-new-item-form" method="post"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /><input name="authenticity_token" type="hidden" value="iUjTLs7LsvR/GgpM3zRRu8aBA4Y5gngM7dJFQQGW5WZ0/gOkxcw7lsMoMWCONe0g8LWuQtyUsZMePlnU4kakXg==" /></div>
          <svg aria-hidden="true" class="octicon octicon-git-branch select-menu-item-icon" height="16" version="1.1" viewBox="0 0 10 16" width="10"><path fill-rule="evenodd" d="M10 5c0-1.11-.89-2-2-2a1.993 1.993 0 0 0-1 3.72v.3c-.02.52-.23.98-.63 1.38-.4.4-.86.61-1.38.63-.83.02-1.48.16-2 .45V4.72a1.993 1.993 0 0 0-1-3.72C.88 1 0 1.89 0 3a2 2 0 0 0 1 1.72v6.56c-.59.35-1 .99-1 1.72 0 1.11.89 2 2 2 1.11 0 2-.89 2-2 0-.53-.2-1-.53-1.36.09-.06.48-.41.59-.47.25-.11.56-.17.94-.17 1.05-.05 1.95-.45 2.75-1.25S8.95 7.77 9 6.73h-.02C9.59 6.37 10 5.73 10 5zM2 1.8c.66 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2C1.35 4.2.8 3.65.8 3c0-.65.55-1.2 1.2-1.2zm0 12.41c-.66 0-1.2-.55-1.2-1.2 0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2zm6-8c-.66 0-1.2-.55-1.2-1.2 0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2z"/></svg>
            <div class="select-menu-item-text">
              <span class="select-menu-item-heading">Create branch: <span class="js-new-item-name"></span></span>
              <span class="description">from âmasterâ</span>
            </div>
            <input type="hidden" name="name" id="name" class="js-new-item-value">
            <input type="hidden" name="branch" id="branch" value="master">
            <input type="hidden" name="path" id="path" value="three_js/js/three.min.js">
</form>
      </div>

      <div class="select-menu-list select-menu-tab-bucket js-select-menu-tab-bucket" data-tab-filter="tags">
        <div data-filterable-for="context-commitish-filter-field" data-filterable-type="substring">


        </div>

        <div class="select-menu-no-results">Nothing to show</div>
      </div>

    </div>
  </div>
</div>

    <div class="BtnGroup float-right">
      <a href="/jtubert/labs/find/master"
            class="js-pjax-capture-input btn btn-sm BtnGroup-item"
            data-pjax
            data-hotkey="t">
        Find file
      </a>
      <button aria-label="Copy file path to clipboard" class="js-zeroclipboard btn btn-sm BtnGroup-item tooltipped tooltipped-s" data-copied-hint="Copied!" type="button">Copy path</button>
    </div>
    <div class="breadcrumb js-zeroclipboard-target">
      <span class="repo-root js-repo-root"><span class="js-path-segment"><a href="/jtubert/labs"><span>labs</span></a></span></span><span class="separator">/</span><span class="js-path-segment"><a href="/jtubert/labs/tree/master/three_js"><span>three_js</span></a></span><span class="separator">/</span><span class="js-path-segment"><a href="/jtubert/labs/tree/master/three_js/js"><span>js</span></a></span><span class="separator">/</span><strong class="final-path">three.min.js</strong>
    </div>
  </div>


  <include-fragment class="commit-tease" src="/jtubert/labs/contributors/master/three_js/js/three.min.js">
    <div>
      Fetching contributors&hellip;
    </div>

    <div class="commit-tease-contributors">
      <img alt="" class="loader-loading float-left" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32-EAF2F5.gif" width="16" />
      <span class="loader-error">Cannot retrieve contributors at this time</span>
    </div>
</include-fragment>

  <div class="file">
    <div class="file-header">
  <div class="file-actions">

    <div class="BtnGroup">
      <a href="/jtubert/labs/raw/master/three_js/js/three.min.js" class="btn btn-sm BtnGroup-item" id="raw-url">Raw</a>
        <a href="/jtubert/labs/blame/master/three_js/js/three.min.js" class="btn btn-sm js-update-url-with-hash BtnGroup-item" data-hotkey="b">Blame</a>
      <a href="/jtubert/labs/commits/master/three_js/js/three.min.js" class="btn btn-sm BtnGroup-item" rel="nofollow">History</a>
    </div>

        <a class="btn-octicon tooltipped tooltipped-nw"
           href="github-mac://openRepo/https://github.com/jtubert/labs?branch=master&amp;filepath=three_js%2Fjs%2Fthree.min.js"
           aria-label="Open this file in GitHub Desktop"
           data-ga-click="Repository, open with desktop, type:mac">
            <svg aria-hidden="true" class="octicon octicon-device-desktop" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M15 2H1c-.55 0-1 .45-1 1v9c0 .55.45 1 1 1h5.34c-.25.61-.86 1.39-2.34 2h8c-1.48-.61-2.09-1.39-2.34-2H15c.55 0 1-.45 1-1V3c0-.55-.45-1-1-1zm0 9H1V3h14v8z"/></svg>
        </a>

        <!-- '"` --><!-- </textarea></xmp> --></option></form><form accept-charset="UTF-8" action="/jtubert/labs/edit/master/three_js/js/three.min.js" class="inline-form js-update-url-with-hash" method="post"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /><input name="authenticity_token" type="hidden" value="jkuemV71uI8JuR6hyKw5aLrrytNZh3DiMI1+r1JhrRAzAZUSlPMWLahsswKFCgpRX3AK0B6qDezdONLTVqkBIQ==" /></div>
          <button class="btn-octicon tooltipped tooltipped-nw" type="submit"
            aria-label="Edit this file" data-hotkey="e" data-disable-with>
            <svg aria-hidden="true" class="octicon octicon-pencil" height="16" version="1.1" viewBox="0 0 14 16" width="14"><path fill-rule="evenodd" d="M0 12v3h3l8-8-3-3-8 8zm3 2H1v-2h1v1h1v1zm10.3-9.3L12 6 9 3l1.3-1.3a.996.996 0 0 1 1.41 0l1.59 1.59c.39.39.39 1.02 0 1.41z"/></svg>
          </button>
</form>        <!-- '"` --><!-- </textarea></xmp> --></option></form><form accept-charset="UTF-8" action="/jtubert/labs/delete/master/three_js/js/three.min.js" class="inline-form" method="post"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /><input name="authenticity_token" type="hidden" value="XmWibfFbKDstc3YA4hZfokz+gc0VELDXs21WUoA7dzL8QNdjwp6kMp8ria6jCDDtxDLTPcuH3z5aMvQXhDCjEQ==" /></div>
          <button class="btn-octicon btn-octicon-danger tooltipped tooltipped-nw" type="submit"
            aria-label="Delete this file" data-disable-with>
            <svg aria-hidden="true" class="octicon octicon-trashcan" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M11 2H9c0-.55-.45-1-1-1H5c-.55 0-1 .45-1 1H2c-.55 0-1 .45-1 1v1c0 .55.45 1 1 1v9c0 .55.45 1 1 1h7c.55 0 1-.45 1-1V5c.55 0 1-.45 1-1V3c0-.55-.45-1-1-1zm-1 12H3V5h1v8h1V5h1v8h1V5h1v8h1V5h1v9zm1-10H2V3h9v1z"/></svg>
          </button>
</form>  </div>

  <div class="file-info">
      743 lines (742 sloc)
      <span class="file-info-divider"></span>
    371 KB
  </div>
</div>

    

  <div itemprop="text" class="blob-wrapper data type-javascript">
      <table class="highlight tab-size js-file-line-container" data-tab-size="8">
      <tr>
        <td id="L1" class="blob-num js-line-number" data-line-number="1"></td>
        <td id="LC1" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> three.min.js - http://github.com/mrdoob/three.js</span></td>
      </tr>
      <tr>
        <td id="L2" class="blob-num js-line-number" data-line-number="2"></td>
        <td id="LC2" class="blob-code blob-code-inner js-file-line"><span class="pl-s"><span class="pl-pds">&#39;</span>use strict<span class="pl-pds">&#39;</span></span>;<span class="pl-k">var</span> <span class="pl-c1">THREE</span><span class="pl-k">=</span><span class="pl-c1">THREE</span><span class="pl-k">||</span>{<span class="pl-c1">REVISION</span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>52<span class="pl-pds">&quot;</span></span>};<span class="pl-smi">self</span>.<span class="pl-smi">console</span><span class="pl-k">=</span><span class="pl-smi">self</span>.<span class="pl-smi">console</span><span class="pl-k">||</span>{<span class="pl-en">info</span><span class="pl-k">:</span><span class="pl-k">function</span>(){},<span class="pl-en">log</span><span class="pl-k">:</span><span class="pl-k">function</span>(){},<span class="pl-en">debug</span><span class="pl-k">:</span><span class="pl-k">function</span>(){},<span class="pl-en">warn</span><span class="pl-k">:</span><span class="pl-k">function</span>(){},<span class="pl-en">error</span><span class="pl-k">:</span><span class="pl-k">function</span>(){}};<span class="pl-smi">self</span>.<span class="pl-smi">Int32Array</span><span class="pl-k">=</span><span class="pl-smi">self</span>.<span class="pl-smi">Int32Array</span><span class="pl-k">||</span><span class="pl-c1">Array</span>;<span class="pl-smi">self</span>.<span class="pl-smi">Float32Array</span><span class="pl-k">=</span><span class="pl-smi">self</span>.<span class="pl-smi">Float32Array</span><span class="pl-k">||</span><span class="pl-c1">Array</span>;<span class="pl-c1">String</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">startsWith</span><span class="pl-k">=</span><span class="pl-c1">String</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">startsWith</span><span class="pl-k">||</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-c1">slice</span>(<span class="pl-c1">0</span>,<span class="pl-smi">a</span>.<span class="pl-c1">length</span>)<span class="pl-k">===</span>a};<span class="pl-c1">String</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">endsWith</span><span class="pl-k">=</span><span class="pl-c1">String</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">endsWith</span><span class="pl-k">||</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">String</span>(a),b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">lastIndexOf</span>(a);<span class="pl-k">return</span>(<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">&lt;</span>b<span class="pl-k">&amp;&amp;</span>b)<span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>};</td>
      </tr>
      <tr>
        <td id="L3" class="blob-num js-line-number" data-line-number="3"></td>
        <td id="LC3" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">String</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">trim</span><span class="pl-k">=</span><span class="pl-c1">String</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">trim</span><span class="pl-k">||</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-c1">replace</span>(<span class="pl-sr"><span class="pl-pds">/</span><span class="pl-k">^</span><span class="pl-c1">\s</span><span class="pl-k">+</span><span class="pl-k">|</span><span class="pl-c1">\s</span><span class="pl-k">+</span><span class="pl-k">$</span><span class="pl-pds">/</span>g</span>,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>)};</td>
      </tr>
      <tr>
        <td id="L4" class="blob-num js-line-number" data-line-number="4"></td>
        <td id="LC4" class="blob-code blob-code-inner js-file-line">(<span class="pl-k">function</span>(){<span class="pl-k">for</span>(<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">0</span>,b<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>ms<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>moz<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>webkit<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>o<span class="pl-pds">&quot;</span></span>],c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;!</span><span class="pl-c1">window</span>.<span class="pl-smi">requestAnimationFrame</span>;<span class="pl-k">++</span>c)<span class="pl-c1">window</span>.<span class="pl-smi">requestAnimationFrame</span><span class="pl-k">=</span><span class="pl-c1">window</span>[b[c]<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>RequestAnimationFrame<span class="pl-pds">&quot;</span></span>],<span class="pl-c1">window</span>.<span class="pl-smi">cancelAnimationFrame</span><span class="pl-k">=</span><span class="pl-c1">window</span>[b[c]<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>CancelAnimationFrame<span class="pl-pds">&quot;</span></span>]<span class="pl-k">||</span><span class="pl-c1">window</span>[b[c]<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>CancelRequestAnimationFrame<span class="pl-pds">&quot;</span></span>];<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-c1">window</span>.<span class="pl-smi">requestAnimationFrame</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">window</span>.<span class="pl-en">requestAnimationFrame</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">Date</span>.<span class="pl-en">now</span>(),f<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-c1">0</span>,<span class="pl-c1">16</span><span class="pl-k">-</span>(c<span class="pl-k">-</span>a)),g<span class="pl-k">=</span><span class="pl-c1">window</span>.<span class="pl-en">setTimeout</span>(<span class="pl-k">function</span>(){<span class="pl-en">b</span>(c<span class="pl-k">+</span>f)},f);a<span class="pl-k">=</span>c<span class="pl-k">+</span>f;<span class="pl-k">return</span> g});<span class="pl-c1">window</span>.<span class="pl-smi">cancelAnimationFrame</span><span class="pl-k">=</span><span class="pl-c1">window</span>.<span class="pl-smi">cancelAnimationFrame</span><span class="pl-k">||</span></td>
      </tr>
      <tr>
        <td id="L5" class="blob-num js-line-number" data-line-number="5"></td>
        <td id="LC5" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">window</span>.<span class="pl-en">clearTimeout</span>(a)}})();<span class="pl-c1">THREE</span>.<span class="pl-smi">FrontSide</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">BackSide</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">DoubleSide</span><span class="pl-k">=</span><span class="pl-c1">2</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">NoShading</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">FlatShading</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">SmoothShading</span><span class="pl-k">=</span><span class="pl-c1">2</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">NoColors</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">FaceColors</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">VertexColors</span><span class="pl-k">=</span><span class="pl-c1">2</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">NoBlending</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">NormalBlending</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">AdditiveBlending</span><span class="pl-k">=</span><span class="pl-c1">2</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">SubtractiveBlending</span><span class="pl-k">=</span><span class="pl-c1">3</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">MultiplyBlending</span><span class="pl-k">=</span><span class="pl-c1">4</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">CustomBlending</span><span class="pl-k">=</span><span class="pl-c1">5</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">AddEquation</span><span class="pl-k">=</span><span class="pl-c1">100</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">SubtractEquation</span><span class="pl-k">=</span><span class="pl-c1">101</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">ReverseSubtractEquation</span><span class="pl-k">=</span><span class="pl-c1">102</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">ZeroFactor</span><span class="pl-k">=</span><span class="pl-c1">200</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">OneFactor</span><span class="pl-k">=</span><span class="pl-c1">201</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">SrcColorFactor</span><span class="pl-k">=</span><span class="pl-c1">202</span>;</td>
      </tr>
      <tr>
        <td id="L6" class="blob-num js-line-number" data-line-number="6"></td>
        <td id="LC6" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">OneMinusSrcColorFactor</span><span class="pl-k">=</span><span class="pl-c1">203</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">SrcAlphaFactor</span><span class="pl-k">=</span><span class="pl-c1">204</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">OneMinusSrcAlphaFactor</span><span class="pl-k">=</span><span class="pl-c1">205</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">DstAlphaFactor</span><span class="pl-k">=</span><span class="pl-c1">206</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">OneMinusDstAlphaFactor</span><span class="pl-k">=</span><span class="pl-c1">207</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">DstColorFactor</span><span class="pl-k">=</span><span class="pl-c1">208</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">OneMinusDstColorFactor</span><span class="pl-k">=</span><span class="pl-c1">209</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">SrcAlphaSaturateFactor</span><span class="pl-k">=</span><span class="pl-c1">210</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">MultiplyOperation</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">MixOperation</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">THREE</span>.<span class="pl-en">UVMapping</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">THREE</span>.<span class="pl-en">CubeReflectionMapping</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">THREE</span>.<span class="pl-en">CubeRefractionMapping</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">THREE</span>.<span class="pl-en">SphericalReflectionMapping</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">THREE</span>.<span class="pl-en">SphericalRefractionMapping</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};</td>
      </tr>
      <tr>
        <td id="L7" class="blob-num js-line-number" data-line-number="7"></td>
        <td id="LC7" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">RepeatWrapping</span><span class="pl-k">=</span><span class="pl-c1">1E3</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">ClampToEdgeWrapping</span><span class="pl-k">=</span><span class="pl-c1">1001</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">MirroredRepeatWrapping</span><span class="pl-k">=</span><span class="pl-c1">1002</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">NearestFilter</span><span class="pl-k">=</span><span class="pl-c1">1003</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">NearestMipMapNearestFilter</span><span class="pl-k">=</span><span class="pl-c1">1004</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">NearestMipMapLinearFilter</span><span class="pl-k">=</span><span class="pl-c1">1005</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">LinearFilter</span><span class="pl-k">=</span><span class="pl-c1">1006</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">LinearMipMapNearestFilter</span><span class="pl-k">=</span><span class="pl-c1">1007</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">LinearMipMapLinearFilter</span><span class="pl-k">=</span><span class="pl-c1">1008</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">UnsignedByteType</span><span class="pl-k">=</span><span class="pl-c1">1009</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">ByteType</span><span class="pl-k">=</span><span class="pl-c1">1010</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">ShortType</span><span class="pl-k">=</span><span class="pl-c1">1011</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">UnsignedShortType</span><span class="pl-k">=</span><span class="pl-c1">1012</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">IntType</span><span class="pl-k">=</span><span class="pl-c1">1013</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">UnsignedIntType</span><span class="pl-k">=</span><span class="pl-c1">1014</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">FloatType</span><span class="pl-k">=</span><span class="pl-c1">1015</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">UnsignedShort4444Type</span><span class="pl-k">=</span><span class="pl-c1">1016</span>;</td>
      </tr>
      <tr>
        <td id="L8" class="blob-num js-line-number" data-line-number="8"></td>
        <td id="LC8" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">UnsignedShort5551Type</span><span class="pl-k">=</span><span class="pl-c1">1017</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">UnsignedShort565Type</span><span class="pl-k">=</span><span class="pl-c1">1018</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">AlphaFormat</span><span class="pl-k">=</span><span class="pl-c1">1019</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">RGBFormat</span><span class="pl-k">=</span><span class="pl-c1">1020</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">RGBAFormat</span><span class="pl-k">=</span><span class="pl-c1">1021</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">LuminanceFormat</span><span class="pl-k">=</span><span class="pl-c1">1022</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">LuminanceAlphaFormat</span><span class="pl-k">=</span><span class="pl-c1">1023</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">RGB_S3TC_DXT1_Format</span><span class="pl-k">=</span><span class="pl-c1">2001</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">RGBA_S3TC_DXT1_Format</span><span class="pl-k">=</span><span class="pl-c1">2002</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">RGBA_S3TC_DXT3_Format</span><span class="pl-k">=</span><span class="pl-c1">2003</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">RGBA_S3TC_DXT5_Format</span><span class="pl-k">=</span><span class="pl-c1">2004</span>;<span class="pl-c1">THREE</span>.<span class="pl-en">Clock</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">autoStart</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">elapsedTime</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">oldTime</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">startTime</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">running</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>};</td>
      </tr>
      <tr>
        <td id="L9" class="blob-num js-line-number" data-line-number="9"></td>
        <td id="LC9" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Clock</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">start</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">oldTime</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">startTime</span><span class="pl-k">=</span><span class="pl-c1">Date</span>.<span class="pl-en">now</span>();<span class="pl-c1">this</span>.<span class="pl-smi">running</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">Clock</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">stop</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-en">getElapsedTime</span>();<span class="pl-c1">this</span>.<span class="pl-smi">running</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">Clock</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getElapsedTime</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">elapsedTime</span><span class="pl-k">+=</span><span class="pl-c1">this</span>.<span class="pl-en">getDelta</span>()};<span class="pl-c1">THREE</span>.<span class="pl-smi">Clock</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getDelta</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">autoStart</span><span class="pl-k">&amp;&amp;!</span><span class="pl-c1">this</span>.<span class="pl-smi">running</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-c1">start</span>();<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">running</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">Date</span>.<span class="pl-en">now</span>(),a<span class="pl-k">=</span><span class="pl-c1">0.001</span><span class="pl-k">*</span>(b<span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">oldTime</span>);<span class="pl-c1">this</span>.<span class="pl-smi">oldTime</span><span class="pl-k">=</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">elapsedTime</span><span class="pl-k">+=</span>a}<span class="pl-k">return</span> a};</td>
      </tr>
      <tr>
        <td id="L10" class="blob-num js-line-number" data-line-number="10"></td>
        <td id="LC10" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">Color</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-en">setHex</span>(a);<span class="pl-k">return</span> <span class="pl-c1">this</span>};</td>
      </tr>
      <tr>
        <td id="L11" class="blob-num js-line-number" data-line-number="11"></td>
        <td id="LC11" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Color</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.Color,r:1,g:1,b:1,copy:<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">r</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">r</span>;<span class="pl-c1">this</span>.<span class="pl-smi">g</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">g</span>;<span class="pl-c1">this</span>.<span class="pl-smi">b</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">b</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">copyGammaToLinear</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">r</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">r</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">r</span>;<span class="pl-c1">this</span>.<span class="pl-smi">g</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">g</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">g</span>;<span class="pl-c1">this</span>.<span class="pl-smi">b</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">b</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">b</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">copyLinearToGamma</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">r</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-smi">a</span>.<span class="pl-smi">r</span>);<span class="pl-c1">this</span>.<span class="pl-smi">g</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-smi">a</span>.<span class="pl-smi">g</span>);<span class="pl-c1">this</span>.<span class="pl-smi">b</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-smi">a</span>.<span class="pl-smi">b</span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">convertGammaToLinear</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">r</span>,b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">g</span>,c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">b</span>;<span class="pl-c1">this</span>.<span class="pl-smi">r</span><span class="pl-k">=</span>a<span class="pl-k">*</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">g</span><span class="pl-k">=</span>b<span class="pl-k">*</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">b</span><span class="pl-k">=</span>c<span class="pl-k">*</span>c;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">convertLinearToGamma</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">r</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-c1">this</span>.<span class="pl-smi">r</span>);<span class="pl-c1">this</span>.<span class="pl-smi">g</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-c1">this</span>.<span class="pl-smi">g</span>);</td>
      </tr>
      <tr>
        <td id="L12" class="blob-num js-line-number" data-line-number="12"></td>
        <td id="LC12" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">b</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-c1">this</span>.<span class="pl-smi">b</span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">setRGB</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">this</span>.<span class="pl-smi">r</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">g</span><span class="pl-k">=</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">b</span><span class="pl-k">=</span>c;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">setHSV</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">var</span> d,e,f;<span class="pl-c1">0</span><span class="pl-k">===</span>c<span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-smi">r</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">g</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">b</span><span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">:</span>(d<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-c1">6</span><span class="pl-k">*</span>a),e<span class="pl-k">=</span><span class="pl-c1">6</span><span class="pl-k">*</span>a<span class="pl-k">-</span>d,a<span class="pl-k">=</span>c<span class="pl-k">*</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>b),f<span class="pl-k">=</span>c<span class="pl-k">*</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>b<span class="pl-k">*</span>e),b<span class="pl-k">=</span>c<span class="pl-k">*</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>b<span class="pl-k">*</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>e)),<span class="pl-c1">0</span><span class="pl-k">===</span>d<span class="pl-k">?</span>(<span class="pl-c1">this</span>.<span class="pl-smi">r</span><span class="pl-k">=</span>c,<span class="pl-c1">this</span>.<span class="pl-smi">g</span><span class="pl-k">=</span>b,<span class="pl-c1">this</span>.<span class="pl-smi">b</span><span class="pl-k">=</span>a)<span class="pl-k">:</span><span class="pl-c1">1</span><span class="pl-k">===</span>d<span class="pl-k">?</span>(<span class="pl-c1">this</span>.<span class="pl-smi">r</span><span class="pl-k">=</span>f,<span class="pl-c1">this</span>.<span class="pl-smi">g</span><span class="pl-k">=</span>c,<span class="pl-c1">this</span>.<span class="pl-smi">b</span><span class="pl-k">=</span>a)<span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">===</span>d<span class="pl-k">?</span>(<span class="pl-c1">this</span>.<span class="pl-smi">r</span><span class="pl-k">=</span>a,<span class="pl-c1">this</span>.<span class="pl-smi">g</span><span class="pl-k">=</span>c,<span class="pl-c1">this</span>.<span class="pl-smi">b</span><span class="pl-k">=</span>b)<span class="pl-k">:</span><span class="pl-c1">3</span><span class="pl-k">===</span>d<span class="pl-k">?</span>(<span class="pl-c1">this</span>.<span class="pl-smi">r</span><span class="pl-k">=</span>a,<span class="pl-c1">this</span>.<span class="pl-smi">g</span><span class="pl-k">=</span>f,<span class="pl-c1">this</span>.<span class="pl-smi">b</span><span class="pl-k">=</span>c)<span class="pl-k">:</span><span class="pl-c1">4</span><span class="pl-k">===</span>d<span class="pl-k">?</span>(<span class="pl-c1">this</span>.<span class="pl-smi">r</span><span class="pl-k">=</span>b,<span class="pl-c1">this</span>.<span class="pl-smi">g</span><span class="pl-k">=</span>a,<span class="pl-c1">this</span>.<span class="pl-smi">b</span><span class="pl-k">=</span>c)<span class="pl-k">:</span><span class="pl-c1">5</span><span class="pl-k">===</span>d<span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">this</span>.<span class="pl-smi">r</span><span class="pl-k">=</span>c,<span class="pl-c1">this</span>.<span class="pl-smi">g</span><span class="pl-k">=</span>a,<span class="pl-c1">this</span>.<span class="pl-smi">b</span><span class="pl-k">=</span>f));<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">setHex</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(a);<span class="pl-c1">this</span>.<span class="pl-smi">r</span><span class="pl-k">=</span>(a<span class="pl-k">&gt;&gt;</span><span class="pl-c1">16</span><span class="pl-k">&amp;</span></td>
      </tr>
      <tr>
        <td id="L13" class="blob-num js-line-number" data-line-number="13"></td>
        <td id="LC13" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">255</span>)<span class="pl-k">/</span><span class="pl-c1">255</span>;<span class="pl-c1">this</span>.<span class="pl-smi">g</span><span class="pl-k">=</span>(a<span class="pl-k">&gt;&gt;</span><span class="pl-c1">8</span><span class="pl-k">&amp;</span><span class="pl-c1">255</span>)<span class="pl-k">/</span><span class="pl-c1">255</span>;<span class="pl-c1">this</span>.<span class="pl-smi">b</span><span class="pl-k">=</span>(a<span class="pl-k">&amp;</span><span class="pl-c1">255</span>)<span class="pl-k">/</span><span class="pl-c1">255</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">lerpSelf</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-smi">r</span><span class="pl-k">+=</span>(<span class="pl-smi">a</span>.<span class="pl-smi">r</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">r</span>)<span class="pl-k">*</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">g</span><span class="pl-k">+=</span>(<span class="pl-smi">a</span>.<span class="pl-smi">g</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">g</span>)<span class="pl-k">*</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">b</span><span class="pl-k">+=</span>(<span class="pl-smi">a</span>.<span class="pl-smi">b</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">b</span>)<span class="pl-k">*</span>b;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">getHex</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">255</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">r</span><span class="pl-k">&lt;&lt;</span><span class="pl-c1">16</span><span class="pl-k">^</span><span class="pl-c1">255</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">g</span><span class="pl-k">&lt;&lt;</span><span class="pl-c1">8</span><span class="pl-k">^</span><span class="pl-c1">255</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">b</span><span class="pl-k">&lt;&lt;</span><span class="pl-c1">0</span>},<span class="pl-en">getContextStyle</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span><span class="pl-s"><span class="pl-pds">&quot;</span>rgb(<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>(<span class="pl-c1">255</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">r</span><span class="pl-k">|</span><span class="pl-c1">0</span>)<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>,<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>(<span class="pl-c1">255</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">g</span><span class="pl-k">|</span><span class="pl-c1">0</span>)<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>,<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>(<span class="pl-c1">255</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">b</span><span class="pl-k">|</span><span class="pl-c1">0</span>)<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>)<span class="pl-pds">&quot;</span></span>},<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>).<span class="pl-en">setRGB</span>(<span class="pl-c1">this</span>.<span class="pl-smi">r</span>,<span class="pl-c1">this</span>.<span class="pl-smi">g</span>,<span class="pl-c1">this</span>.<span class="pl-smi">b</span>)}};<span class="pl-c1">THREE</span>.<span class="pl-en">Vector2</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a<span class="pl-k">||</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>b<span class="pl-k">||</span><span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L14" class="blob-num js-line-number" data-line-number="14"></td>
        <td id="LC14" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Vector2</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.Vector2,set:<span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>b;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">copy</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">add</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">b</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-smi">b</span>.<span class="pl-c1">y</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">addSelf</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">sub</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">b</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">b</span>.<span class="pl-c1">y</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">subSelf</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">-=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">-=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">multiplyScalar</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">*=</span>a;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">*=</span>a;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">divideScalar</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">?</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">/=</span>a,<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">/=</span>a)<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-c1">set</span>(<span class="pl-c1">0</span>,</td>
      </tr>
      <tr>
        <td id="L15" class="blob-num js-line-number" data-line-number="15"></td>
        <td id="LC15" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">negate</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">multiplyScalar</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>)},<span class="pl-en">dot</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>},<span class="pl-en">lengthSq</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span>},<span class="pl-en">length</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-c1">this</span>.<span class="pl-en">lengthSq</span>())},<span class="pl-en">normalize</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">divideScalar</span>(<span class="pl-c1">this</span>.<span class="pl-c1">length</span>())},<span class="pl-en">distanceTo</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-c1">this</span>.<span class="pl-en">distanceToSquared</span>(a))},<span class="pl-en">distanceToSquared</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>,a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>;<span class="pl-k">return</span> b<span class="pl-k">*</span>b<span class="pl-k">+</span>a<span class="pl-k">*</span>a},<span class="pl-en">setLength</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-c1">normalize</span>().<span class="pl-en">multiplyScalar</span>(a)},<span class="pl-en">lerpSelf</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,</td>
      </tr>
      <tr>
        <td id="L16" class="blob-num js-line-number" data-line-number="16"></td>
        <td id="LC16" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span>(<span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span>)<span class="pl-k">*</span>b;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span>(<span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span>)<span class="pl-k">*</span>b;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">equals</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span>},<span class="pl-en">isZero</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">lengthSq</span>()<span class="pl-k">&lt;</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-c1">1E-4</span>)},<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span>,<span class="pl-c1">this</span>.<span class="pl-c1">y</span>)}};<span class="pl-c1">THREE</span>.<span class="pl-en">Vector3</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a<span class="pl-k">||</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>b<span class="pl-k">||</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>c<span class="pl-k">||</span><span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L17" class="blob-num js-line-number" data-line-number="17"></td>
        <td id="LC17" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Vector3</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.Vector3,set:<span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>b;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>c;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">setX</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">setY</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>a;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">setZ</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>a;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">copy</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">add</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">b</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-smi">b</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">+</span><span class="pl-smi">b</span>.<span class="pl-c1">z</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">addSelf</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">+=</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">addScalar</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span>a;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span>a;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">+=</span>a;<span class="pl-k">return</span> <span class="pl-c1">this</span>},</td>
      </tr>
      <tr>
        <td id="L18" class="blob-num js-line-number" data-line-number="18"></td>
        <td id="LC18" class="blob-code blob-code-inner js-file-line"><span class="pl-en">sub</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">b</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">b</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">-</span><span class="pl-smi">b</span>.<span class="pl-c1">z</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">subSelf</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">-=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">-=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">-=</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">multiply</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">b</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">b</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">*</span><span class="pl-smi">b</span>.<span class="pl-c1">z</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">multiplySelf</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">*=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">*=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">*=</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">multiplyScalar</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">*=</span>a;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">*=</span>a;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">*=</span>a;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">divideSelf</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">/=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">/=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">/=</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">divideScalar</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">?</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">/=</span>a,<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">/=</span>a,<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">/=</span>a)<span class="pl-k">:</span></td>
      </tr>
      <tr>
        <td id="L19" class="blob-num js-line-number" data-line-number="19"></td>
        <td id="LC19" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">negate</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">multiplyScalar</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>)},<span class="pl-en">dot</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>},<span class="pl-en">lengthSq</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-c1">z</span>},<span class="pl-en">length</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-c1">this</span>.<span class="pl-en">lengthSq</span>())},<span class="pl-en">lengthManhattan</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span>)<span class="pl-k">+</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(<span class="pl-c1">this</span>.<span class="pl-c1">y</span>)<span class="pl-k">+</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(<span class="pl-c1">this</span>.<span class="pl-c1">z</span>)},<span class="pl-en">normalize</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">divideScalar</span>(<span class="pl-c1">this</span>.<span class="pl-c1">length</span>())},<span class="pl-en">setLength</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-c1">normalize</span>().<span class="pl-en">multiplyScalar</span>(a)},<span class="pl-en">lerpSelf</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span></td>
      </tr>
      <tr>
        <td id="L20" class="blob-num js-line-number" data-line-number="20"></td>
        <td id="LC20" class="blob-code blob-code-inner js-file-line">(<span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span>)<span class="pl-k">*</span>b;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span>(<span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span>)<span class="pl-k">*</span>b;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">+=</span>(<span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-c1">z</span>)<span class="pl-k">*</span>b;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">cross</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">b</span>.<span class="pl-c1">z</span><span class="pl-k">-</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">*</span><span class="pl-smi">b</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">*</span><span class="pl-smi">b</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">b</span>.<span class="pl-c1">z</span>;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">b</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">b</span>.<span class="pl-c1">x</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">crossSelf</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span>,c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span>,d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">z</span>;<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>c<span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">-</span>d<span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>d<span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">-</span>b<span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>b<span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>c<span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">angleTo</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">acos</span>(<span class="pl-c1">this</span>.<span class="pl-en">dot</span>(a)<span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-c1">length</span>()<span class="pl-k">/</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>())},<span class="pl-en">distanceTo</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-c1">this</span>.<span class="pl-en">distanceToSquared</span>(a))},<span class="pl-en">distanceToSquared</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>).<span class="pl-c1">sub</span>(<span class="pl-c1">this</span>,</td>
      </tr>
      <tr>
        <td id="L21" class="blob-num js-line-number" data-line-number="21"></td>
        <td id="LC21" class="blob-code blob-code-inner js-file-line">a).<span class="pl-en">lengthSq</span>()},<span class="pl-en">getPositionFromMatrix</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">12</span>];<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">13</span>];<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">14</span>];<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">setEulerFromRotationMatrix</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">function</span> <span class="pl-en">c</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(a,<span class="pl-k">-</span><span class="pl-c1">1</span>),<span class="pl-c1">1</span>)}<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">elements</span>,e<span class="pl-k">=</span>d[<span class="pl-c1">0</span>],f<span class="pl-k">=</span>d[<span class="pl-c1">4</span>],g<span class="pl-k">=</span>d[<span class="pl-c1">8</span>],h<span class="pl-k">=</span>d[<span class="pl-c1">1</span>],i<span class="pl-k">=</span>d[<span class="pl-c1">5</span>],j<span class="pl-k">=</span>d[<span class="pl-c1">9</span>],l<span class="pl-k">=</span>d[<span class="pl-c1">2</span>],m<span class="pl-k">=</span>d[<span class="pl-c1">6</span>],d<span class="pl-k">=</span>d[<span class="pl-c1">10</span>];<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">||</span><span class="pl-s"><span class="pl-pds">&quot;</span>XYZ<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>b<span class="pl-k">?</span>(<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">asin</span>(<span class="pl-en">c</span>(g)),<span class="pl-c1">0.99999</span><span class="pl-k">&gt;</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(g)<span class="pl-k">?</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(<span class="pl-k">-</span>j,d),<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(<span class="pl-k">-</span>f,e))<span class="pl-k">:</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(m,i),<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">0</span>))<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>YXZ<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>b<span class="pl-k">?</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">asin</span>(<span class="pl-k">-</span><span class="pl-en">c</span>(j)),<span class="pl-c1">0.99999</span><span class="pl-k">&gt;</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(j)<span class="pl-k">?</span></td>
      </tr>
      <tr>
        <td id="L22" class="blob-num js-line-number" data-line-number="22"></td>
        <td id="LC22" class="blob-code blob-code-inner js-file-line">(<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(g,d),<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(h,i))<span class="pl-k">:</span>(<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(<span class="pl-k">-</span>l,e),<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">0</span>))<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>ZXY<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>b<span class="pl-k">?</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">asin</span>(<span class="pl-en">c</span>(m)),<span class="pl-c1">0.99999</span><span class="pl-k">&gt;</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(m)<span class="pl-k">?</span>(<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(<span class="pl-k">-</span>l,d),<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(<span class="pl-k">-</span>f,i))<span class="pl-k">:</span>(<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(h,e)))<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>ZYX<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>b<span class="pl-k">?</span>(<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">asin</span>(<span class="pl-k">-</span><span class="pl-en">c</span>(l)),<span class="pl-c1">0.99999</span><span class="pl-k">&gt;</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(l)<span class="pl-k">?</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(m,d),<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(h,e))<span class="pl-k">:</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(<span class="pl-k">-</span>f,i)))<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>YZX<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>b<span class="pl-k">?</span>(<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">asin</span>(<span class="pl-en">c</span>(h)),<span class="pl-c1">0.99999</span><span class="pl-k">&gt;</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(h)<span class="pl-k">?</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(<span class="pl-k">-</span>j,i),<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(<span class="pl-k">-</span>l,e))<span class="pl-k">:</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(g,d)))<span class="pl-k">:</span></td>
      </tr>
      <tr>
        <td id="L23" class="blob-num js-line-number" data-line-number="23"></td>
        <td id="LC23" class="blob-code blob-code-inner js-file-line"><span class="pl-s"><span class="pl-pds">&quot;</span>XZY<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">asin</span>(<span class="pl-k">-</span><span class="pl-en">c</span>(f)),<span class="pl-c1">0.99999</span><span class="pl-k">&gt;</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(f)<span class="pl-k">?</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(m,i),<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(g,e))<span class="pl-k">:</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(<span class="pl-k">-</span>j,d),<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0</span>));<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">setEulerFromQuaternion</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">function</span> <span class="pl-en">c</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(a,<span class="pl-k">-</span><span class="pl-c1">1</span>),<span class="pl-c1">1</span>)}<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>,e<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>,f<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>,g<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">w</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">w</span>;<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">||</span><span class="pl-s"><span class="pl-pds">&quot;</span>XYZ<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>b<span class="pl-k">?</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(<span class="pl-c1">2</span><span class="pl-k">*</span>(<span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">w</span><span class="pl-k">-</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>),g<span class="pl-k">-</span>d<span class="pl-k">-</span>e<span class="pl-k">+</span>f),<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">asin</span>(<span class="pl-en">c</span>(<span class="pl-c1">2</span><span class="pl-k">*</span>(<span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">+</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">w</span>))),<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(<span class="pl-c1">2</span><span class="pl-k">*</span>(<span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">w</span><span class="pl-k">-</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>),g<span class="pl-k">+</span>d<span class="pl-k">-</span>e<span class="pl-k">-</span>f))<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>YXZ<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>b<span class="pl-k">?</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">asin</span>(<span class="pl-en">c</span>(<span class="pl-c1">2</span><span class="pl-k">*</span>(<span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">w</span><span class="pl-k">-</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>))),<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(<span class="pl-c1">2</span><span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L24" class="blob-num js-line-number" data-line-number="24"></td>
        <td id="LC24" class="blob-code blob-code-inner js-file-line">(<span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">+</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">w</span>),g<span class="pl-k">-</span>d<span class="pl-k">-</span>e<span class="pl-k">+</span>f),<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(<span class="pl-c1">2</span><span class="pl-k">*</span>(<span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">w</span>),g<span class="pl-k">-</span>d<span class="pl-k">+</span>e<span class="pl-k">-</span>f))<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>ZXY<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>b<span class="pl-k">?</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">asin</span>(<span class="pl-en">c</span>(<span class="pl-c1">2</span><span class="pl-k">*</span>(<span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">w</span><span class="pl-k">+</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>))),<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(<span class="pl-c1">2</span><span class="pl-k">*</span>(<span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">w</span><span class="pl-k">-</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>),g<span class="pl-k">-</span>d<span class="pl-k">-</span>e<span class="pl-k">+</span>f),<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(<span class="pl-c1">2</span><span class="pl-k">*</span>(<span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">w</span><span class="pl-k">-</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>),g<span class="pl-k">-</span>d<span class="pl-k">+</span>e<span class="pl-k">-</span>f))<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>ZYX<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>b<span class="pl-k">?</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(<span class="pl-c1">2</span><span class="pl-k">*</span>(<span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">w</span><span class="pl-k">+</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>),g<span class="pl-k">-</span>d<span class="pl-k">-</span>e<span class="pl-k">+</span>f),<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">asin</span>(<span class="pl-en">c</span>(<span class="pl-c1">2</span><span class="pl-k">*</span>(<span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">w</span><span class="pl-k">-</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>))),<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(<span class="pl-c1">2</span><span class="pl-k">*</span>(<span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">w</span>),g<span class="pl-k">+</span>d<span class="pl-k">-</span>e<span class="pl-k">-</span>f))<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>YZX<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>b<span class="pl-k">?</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(<span class="pl-c1">2</span><span class="pl-k">*</span>(<span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">w</span><span class="pl-k">-</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>),g<span class="pl-k">-</span>d<span class="pl-k">+</span>e<span class="pl-k">-</span>f),<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(<span class="pl-c1">2</span><span class="pl-k">*</span>(<span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">w</span><span class="pl-k">-</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>),g<span class="pl-k">+</span>d<span class="pl-k">-</span>e<span class="pl-k">-</span>f),<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">asin</span>(<span class="pl-en">c</span>(<span class="pl-c1">2</span><span class="pl-k">*</span>(<span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L25" class="blob-num js-line-number" data-line-number="25"></td>
        <td id="LC25" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">w</span>))))<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>XZY<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(<span class="pl-c1">2</span><span class="pl-k">*</span>(<span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">w</span><span class="pl-k">+</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>),g<span class="pl-k">-</span>d<span class="pl-k">+</span>e<span class="pl-k">-</span>f),<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(<span class="pl-c1">2</span><span class="pl-k">*</span>(<span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">+</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">w</span>),g<span class="pl-k">+</span>d<span class="pl-k">-</span>e<span class="pl-k">-</span>f),<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">asin</span>(<span class="pl-en">c</span>(<span class="pl-c1">2</span><span class="pl-k">*</span>(<span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">w</span><span class="pl-k">-</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>))));<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">getScaleFromMatrix</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">set</span>(<span class="pl-smi">a</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">0</span>],<span class="pl-smi">a</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">1</span>],<span class="pl-smi">a</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">2</span>]).<span class="pl-c1">length</span>(),c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">set</span>(<span class="pl-smi">a</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">4</span>],<span class="pl-smi">a</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">5</span>],<span class="pl-smi">a</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">6</span>]).<span class="pl-c1">length</span>(),a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">set</span>(<span class="pl-smi">a</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">8</span>],<span class="pl-smi">a</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">9</span>],<span class="pl-smi">a</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">10</span>]).<span class="pl-c1">length</span>();<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>b;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>c;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>a;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">equals</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-c1">z</span>},</td>
      </tr>
      <tr>
        <td id="L26" class="blob-num js-line-number" data-line-number="26"></td>
        <td id="LC26" class="blob-code blob-code-inner js-file-line"><span class="pl-en">isZero</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">lengthSq</span>()<span class="pl-k">&lt;</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-c1">1E-4</span>)},<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span>,<span class="pl-c1">this</span>.<span class="pl-c1">y</span>,<span class="pl-c1">this</span>.<span class="pl-c1">z</span>)}};<span class="pl-c1">THREE</span>.<span class="pl-en">Vector4</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a<span class="pl-k">||</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>b<span class="pl-k">||</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>c<span class="pl-k">||</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>d<span class="pl-k">?</span>d<span class="pl-k">:</span><span class="pl-c1">1</span>};</td>
      </tr>
      <tr>
        <td id="L27" class="blob-num js-line-number" data-line-number="27"></td>
        <td id="LC27" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Vector4</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.Vector4,set:<span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>b;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>c;<span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">=</span>d;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">copy</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>;<span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">w</span><span class="pl-k">?</span><span class="pl-smi">a</span>.<span class="pl-smi">w</span><span class="pl-k">:</span><span class="pl-c1">1</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">add</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">b</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-smi">b</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">+</span><span class="pl-smi">b</span>.<span class="pl-c1">z</span>;<span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">w</span><span class="pl-k">+</span><span class="pl-smi">b</span>.<span class="pl-smi">w</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">addSelf</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">+=</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>;<span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">+=</span><span class="pl-smi">a</span>.<span class="pl-smi">w</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">sub</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">b</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">b</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">-</span><span class="pl-smi">b</span>.<span class="pl-c1">z</span>;<span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">w</span><span class="pl-k">-</span><span class="pl-smi">b</span>.<span class="pl-smi">w</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">subSelf</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">-=</span></td>
      </tr>
      <tr>
        <td id="L28" class="blob-num js-line-number" data-line-number="28"></td>
        <td id="LC28" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">a</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">-=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">-=</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>;<span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">-=</span><span class="pl-smi">a</span>.<span class="pl-smi">w</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">multiplyScalar</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">*=</span>a;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">*=</span>a;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">*=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">*=</span>a;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">divideScalar</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">?</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">/=</span>a,<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">/=</span>a,<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">/=</span>a,<span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">/=</span>a)<span class="pl-k">:</span>(<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">=</span><span class="pl-c1">1</span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">negate</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">multiplyScalar</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>)},<span class="pl-en">dot</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">w</span>},<span class="pl-en">lengthSq</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">dot</span>(<span class="pl-c1">this</span>)},<span class="pl-en">length</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-c1">this</span>.<span class="pl-en">lengthSq</span>())},<span class="pl-en">lengthManhattan</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span>)<span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L29" class="blob-num js-line-number" data-line-number="29"></td>
        <td id="LC29" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(<span class="pl-c1">this</span>.<span class="pl-c1">y</span>)<span class="pl-k">+</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(<span class="pl-c1">this</span>.<span class="pl-c1">z</span>)<span class="pl-k">+</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(<span class="pl-c1">this</span>.<span class="pl-smi">w</span>)},<span class="pl-en">normalize</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">divideScalar</span>(<span class="pl-c1">this</span>.<span class="pl-c1">length</span>())},<span class="pl-en">setLength</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-c1">normalize</span>().<span class="pl-en">multiplyScalar</span>(a)},<span class="pl-en">lerpSelf</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span>(<span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span>)<span class="pl-k">*</span>b;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span>(<span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span>)<span class="pl-k">*</span>b;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">+=</span>(<span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-c1">z</span>)<span class="pl-k">*</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">+=</span>(<span class="pl-smi">a</span>.<span class="pl-smi">w</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">w</span>)<span class="pl-k">*</span>b;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.Vector4</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span>,<span class="pl-c1">this</span>.<span class="pl-c1">y</span>,<span class="pl-c1">this</span>.<span class="pl-c1">z</span>,<span class="pl-c1">this</span>.<span class="pl-smi">w</span>)},<span class="pl-en">setAxisAngleFromQuaternion</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">acos</span>(<span class="pl-smi">a</span>.<span class="pl-smi">w</span>);<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-c1">1</span><span class="pl-k">-</span><span class="pl-smi">a</span>.<span class="pl-smi">w</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">w</span>);<span class="pl-c1">1E-4</span><span class="pl-k">&gt;</span>b<span class="pl-k">?</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">1</span>,<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0</span>)<span class="pl-k">:</span></td>
      </tr>
      <tr>
        <td id="L30" class="blob-num js-line-number" data-line-number="30"></td>
        <td id="LC30" class="blob-code blob-code-inner js-file-line">(<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">/</span>b,<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">/</span>b,<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">/</span>b);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">setAxisAngleFromRotationMatrix</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b,c,d,a<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">elements</span>,e<span class="pl-k">=</span>a[<span class="pl-c1">0</span>];d<span class="pl-k">=</span>a[<span class="pl-c1">4</span>];<span class="pl-k">var</span> f<span class="pl-k">=</span>a[<span class="pl-c1">8</span>],g<span class="pl-k">=</span>a[<span class="pl-c1">1</span>],h<span class="pl-k">=</span>a[<span class="pl-c1">5</span>],i<span class="pl-k">=</span>a[<span class="pl-c1">9</span>];c<span class="pl-k">=</span>a[<span class="pl-c1">2</span>];b<span class="pl-k">=</span>a[<span class="pl-c1">6</span>];<span class="pl-k">var</span> j<span class="pl-k">=</span>a[<span class="pl-c1">10</span>];<span class="pl-k">if</span>(<span class="pl-c1">0.01</span><span class="pl-k">&gt;</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(d<span class="pl-k">-</span>g)<span class="pl-k">&amp;&amp;</span><span class="pl-c1">0.01</span><span class="pl-k">&gt;</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(f<span class="pl-k">-</span>c)<span class="pl-k">&amp;&amp;</span><span class="pl-c1">0.01</span><span class="pl-k">&gt;</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(i<span class="pl-k">-</span>b)){<span class="pl-k">if</span>(<span class="pl-c1">0.1</span><span class="pl-k">&gt;</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(d<span class="pl-k">+</span>g)<span class="pl-k">&amp;&amp;</span><span class="pl-c1">0.1</span><span class="pl-k">&gt;</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(f<span class="pl-k">+</span>c)<span class="pl-k">&amp;&amp;</span><span class="pl-c1">0.1</span><span class="pl-k">&gt;</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(i<span class="pl-k">+</span>b)<span class="pl-k">&amp;&amp;</span><span class="pl-c1">0.1</span><span class="pl-k">&gt;</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(e<span class="pl-k">+</span>h<span class="pl-k">+</span>j<span class="pl-k">-</span><span class="pl-c1">3</span>))<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-c1">set</span>(<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>),<span class="pl-c1">this</span>;a<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span>;e<span class="pl-k">=</span>(e<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span><span class="pl-c1">2</span>;h<span class="pl-k">=</span>(h<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span><span class="pl-c1">2</span>;j<span class="pl-k">=</span>(j<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span><span class="pl-c1">2</span>;d<span class="pl-k">=</span>(d<span class="pl-k">+</span>g)<span class="pl-k">/</span><span class="pl-c1">4</span>;f<span class="pl-k">=</span>(f<span class="pl-k">+</span>c)<span class="pl-k">/</span><span class="pl-c1">4</span>;i<span class="pl-k">=</span>(i<span class="pl-k">+</span>b)<span class="pl-k">/</span><span class="pl-c1">4</span>;e<span class="pl-k">&gt;</span>h<span class="pl-k">&amp;&amp;</span>e<span class="pl-k">&gt;</span>j<span class="pl-k">?</span><span class="pl-c1">0.01</span><span class="pl-k">&gt;</span>e<span class="pl-k">?</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>,d<span class="pl-k">=</span>c<span class="pl-k">=</span><span class="pl-c1">0.707106781</span>)<span class="pl-k">:</span>(b<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(e),c<span class="pl-k">=</span>d<span class="pl-k">/</span>b,d<span class="pl-k">=</span>f<span class="pl-k">/</span></td>
      </tr>
      <tr>
        <td id="L31" class="blob-num js-line-number" data-line-number="31"></td>
        <td id="LC31" class="blob-code blob-code-inner js-file-line">b)<span class="pl-k">:</span>h<span class="pl-k">&gt;</span>j<span class="pl-k">?</span><span class="pl-c1">0.01</span><span class="pl-k">&gt;</span>h<span class="pl-k">?</span>(b<span class="pl-k">=</span><span class="pl-c1">0.707106781</span>,c<span class="pl-k">=</span><span class="pl-c1">0</span>,d<span class="pl-k">=</span><span class="pl-c1">0.707106781</span>)<span class="pl-k">:</span>(c<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(h),b<span class="pl-k">=</span>d<span class="pl-k">/</span>c,d<span class="pl-k">=</span>i<span class="pl-k">/</span>c)<span class="pl-k">:</span><span class="pl-c1">0.01</span><span class="pl-k">&gt;</span>j<span class="pl-k">?</span>(c<span class="pl-k">=</span>b<span class="pl-k">=</span><span class="pl-c1">0.707106781</span>,d<span class="pl-k">=</span><span class="pl-c1">0</span>)<span class="pl-k">:</span>(d<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(j),b<span class="pl-k">=</span>f<span class="pl-k">/</span>d,c<span class="pl-k">=</span>i<span class="pl-k">/</span>d);<span class="pl-c1">this</span>.<span class="pl-c1">set</span>(b,c,d,a);<span class="pl-k">return</span> <span class="pl-c1">this</span>}a<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>((b<span class="pl-k">-</span>i)<span class="pl-k">*</span>(b<span class="pl-k">-</span>i)<span class="pl-k">+</span>(f<span class="pl-k">-</span>c)<span class="pl-k">*</span>(f<span class="pl-k">-</span>c)<span class="pl-k">+</span>(g<span class="pl-k">-</span>d)<span class="pl-k">*</span>(g<span class="pl-k">-</span>d));<span class="pl-c1">0.001</span><span class="pl-k">&gt;</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(a)<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-c1">1</span>);<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>(b<span class="pl-k">-</span>i)<span class="pl-k">/</span>a;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>(f<span class="pl-k">-</span>c)<span class="pl-k">/</span>a;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>(g<span class="pl-k">-</span>d)<span class="pl-k">/</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">acos</span>((e<span class="pl-k">+</span>h<span class="pl-k">+</span>j<span class="pl-k">-</span><span class="pl-c1">1</span>)<span class="pl-k">/</span><span class="pl-c1">2</span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>}};<span class="pl-c1">THREE</span>.<span class="pl-en">Matrix3</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-c1">elements</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">9</span>)};</td>
      </tr>
      <tr>
        <td id="L32" class="blob-num js-line-number" data-line-number="32"></td>
        <td id="LC32" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Matrix3</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.Matrix3,getInverse:<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">elements</span>,a<span class="pl-k">=</span>b[<span class="pl-c1">10</span>]<span class="pl-k">*</span>b[<span class="pl-c1">5</span>]<span class="pl-k">-</span>b[<span class="pl-c1">6</span>]<span class="pl-k">*</span>b[<span class="pl-c1">9</span>],c<span class="pl-k">=</span><span class="pl-k">-</span>b[<span class="pl-c1">10</span>]<span class="pl-k">*</span>b[<span class="pl-c1">1</span>]<span class="pl-k">+</span>b[<span class="pl-c1">2</span>]<span class="pl-k">*</span>b[<span class="pl-c1">9</span>],d<span class="pl-k">=</span>b[<span class="pl-c1">6</span>]<span class="pl-k">*</span>b[<span class="pl-c1">1</span>]<span class="pl-k">-</span>b[<span class="pl-c1">2</span>]<span class="pl-k">*</span>b[<span class="pl-c1">5</span>],e<span class="pl-k">=</span><span class="pl-k">-</span>b[<span class="pl-c1">10</span>]<span class="pl-k">*</span>b[<span class="pl-c1">4</span>]<span class="pl-k">+</span>b[<span class="pl-c1">6</span>]<span class="pl-k">*</span>b[<span class="pl-c1">8</span>],f<span class="pl-k">=</span>b[<span class="pl-c1">10</span>]<span class="pl-k">*</span>b[<span class="pl-c1">0</span>]<span class="pl-k">-</span>b[<span class="pl-c1">2</span>]<span class="pl-k">*</span>b[<span class="pl-c1">8</span>],g<span class="pl-k">=</span><span class="pl-k">-</span>b[<span class="pl-c1">6</span>]<span class="pl-k">*</span>b[<span class="pl-c1">0</span>]<span class="pl-k">+</span>b[<span class="pl-c1">2</span>]<span class="pl-k">*</span>b[<span class="pl-c1">4</span>],h<span class="pl-k">=</span>b[<span class="pl-c1">9</span>]<span class="pl-k">*</span>b[<span class="pl-c1">4</span>]<span class="pl-k">-</span>b[<span class="pl-c1">5</span>]<span class="pl-k">*</span>b[<span class="pl-c1">8</span>],i<span class="pl-k">=</span><span class="pl-k">-</span>b[<span class="pl-c1">9</span>]<span class="pl-k">*</span>b[<span class="pl-c1">0</span>]<span class="pl-k">+</span>b[<span class="pl-c1">1</span>]<span class="pl-k">*</span>b[<span class="pl-c1">8</span>],j<span class="pl-k">=</span>b[<span class="pl-c1">5</span>]<span class="pl-k">*</span>b[<span class="pl-c1">0</span>]<span class="pl-k">-</span>b[<span class="pl-c1">1</span>]<span class="pl-k">*</span>b[<span class="pl-c1">4</span>],b<span class="pl-k">=</span>b[<span class="pl-c1">0</span>]<span class="pl-k">*</span>a<span class="pl-k">+</span>b[<span class="pl-c1">1</span>]<span class="pl-k">*</span>e<span class="pl-k">+</span>b[<span class="pl-c1">2</span>]<span class="pl-k">*</span>h;<span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span><span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>Matrix3.getInverse(): determinant == 0<span class="pl-pds">&quot;</span></span>);<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>b,l<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>;l[<span class="pl-c1">0</span>]<span class="pl-k">=</span>b<span class="pl-k">*</span>a;l[<span class="pl-c1">1</span>]<span class="pl-k">=</span>b<span class="pl-k">*</span>c;l[<span class="pl-c1">2</span>]<span class="pl-k">=</span>b<span class="pl-k">*</span>d;l[<span class="pl-c1">3</span>]<span class="pl-k">=</span>b<span class="pl-k">*</span>e;l[<span class="pl-c1">4</span>]<span class="pl-k">=</span>b<span class="pl-k">*</span>f;l[<span class="pl-c1">5</span>]<span class="pl-k">=</span>b<span class="pl-k">*</span>g;l[<span class="pl-c1">6</span>]<span class="pl-k">=</span>b<span class="pl-k">*</span>h;l[<span class="pl-c1">7</span>]<span class="pl-k">=</span>b<span class="pl-k">*</span>i;l[<span class="pl-c1">8</span>]<span class="pl-k">=</span>b<span class="pl-k">*</span>j;<span class="pl-k">return</span> <span class="pl-c1">this</span>},</td>
      </tr>
      <tr>
        <td id="L33" class="blob-num js-line-number" data-line-number="33"></td>
        <td id="LC33" class="blob-code blob-code-inner js-file-line"><span class="pl-en">transpose</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a,b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>;a<span class="pl-k">=</span>b[<span class="pl-c1">1</span>];b[<span class="pl-c1">1</span>]<span class="pl-k">=</span>b[<span class="pl-c1">3</span>];b[<span class="pl-c1">3</span>]<span class="pl-k">=</span>a;a<span class="pl-k">=</span>b[<span class="pl-c1">2</span>];b[<span class="pl-c1">2</span>]<span class="pl-k">=</span>b[<span class="pl-c1">6</span>];b[<span class="pl-c1">6</span>]<span class="pl-k">=</span>a;a<span class="pl-k">=</span>b[<span class="pl-c1">5</span>];b[<span class="pl-c1">5</span>]<span class="pl-k">=</span>b[<span class="pl-c1">7</span>];b[<span class="pl-c1">7</span>]<span class="pl-k">=</span>a;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">transposeIntoArray</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">m</span>;a[<span class="pl-c1">0</span>]<span class="pl-k">=</span>b[<span class="pl-c1">0</span>];a[<span class="pl-c1">1</span>]<span class="pl-k">=</span>b[<span class="pl-c1">3</span>];a[<span class="pl-c1">2</span>]<span class="pl-k">=</span>b[<span class="pl-c1">6</span>];a[<span class="pl-c1">3</span>]<span class="pl-k">=</span>b[<span class="pl-c1">1</span>];a[<span class="pl-c1">4</span>]<span class="pl-k">=</span>b[<span class="pl-c1">4</span>];a[<span class="pl-c1">5</span>]<span class="pl-k">=</span>b[<span class="pl-c1">7</span>];a[<span class="pl-c1">6</span>]<span class="pl-k">=</span>b[<span class="pl-c1">2</span>];a[<span class="pl-c1">7</span>]<span class="pl-k">=</span>b[<span class="pl-c1">5</span>];a[<span class="pl-c1">8</span>]<span class="pl-k">=</span>b[<span class="pl-c1">8</span>];<span class="pl-k">return</span> <span class="pl-c1">this</span>}};<span class="pl-c1">THREE</span>.<span class="pl-en">Matrix4</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>,<span class="pl-smi">g</span>,<span class="pl-smi">h</span>,<span class="pl-smi">i</span>,<span class="pl-smi">j</span>,<span class="pl-smi">l</span>,<span class="pl-smi">m</span>,<span class="pl-smi">n</span>,<span class="pl-smi">p</span>,<span class="pl-smi">o</span>,<span class="pl-smi">q</span>){<span class="pl-c1">this</span>.<span class="pl-c1">elements</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">16</span>);<span class="pl-c1">this</span>.<span class="pl-c1">set</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-c1">1</span>,b<span class="pl-k">||</span><span class="pl-c1">0</span>,c<span class="pl-k">||</span><span class="pl-c1">0</span>,d<span class="pl-k">||</span><span class="pl-c1">0</span>,e<span class="pl-k">||</span><span class="pl-c1">0</span>,<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>f<span class="pl-k">?</span>f<span class="pl-k">:</span><span class="pl-c1">1</span>,g<span class="pl-k">||</span><span class="pl-c1">0</span>,h<span class="pl-k">||</span><span class="pl-c1">0</span>,i<span class="pl-k">||</span><span class="pl-c1">0</span>,j<span class="pl-k">||</span><span class="pl-c1">0</span>,<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>l<span class="pl-k">?</span>l<span class="pl-k">:</span><span class="pl-c1">1</span>,m<span class="pl-k">||</span><span class="pl-c1">0</span>,n<span class="pl-k">||</span><span class="pl-c1">0</span>,p<span class="pl-k">||</span><span class="pl-c1">0</span>,o<span class="pl-k">||</span><span class="pl-c1">0</span>,<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>q<span class="pl-k">?</span>q<span class="pl-k">:</span><span class="pl-c1">1</span>)};</td>
      </tr>
      <tr>
        <td id="L34" class="blob-num js-line-number" data-line-number="34"></td>
        <td id="LC34" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Matrix4</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.Matrix4,set:<span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>,<span class="pl-smi">g</span>,<span class="pl-smi">h</span>,<span class="pl-smi">i</span>,<span class="pl-smi">j</span>,<span class="pl-smi">l</span>,<span class="pl-smi">m</span>,<span class="pl-smi">n</span>,<span class="pl-smi">p</span>,<span class="pl-smi">o</span>,<span class="pl-smi">q</span>){<span class="pl-k">var</span> r<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>;r[<span class="pl-c1">0</span>]<span class="pl-k">=</span>a;r[<span class="pl-c1">4</span>]<span class="pl-k">=</span>b;r[<span class="pl-c1">8</span>]<span class="pl-k">=</span>c;r[<span class="pl-c1">12</span>]<span class="pl-k">=</span>d;r[<span class="pl-c1">1</span>]<span class="pl-k">=</span>e;r[<span class="pl-c1">5</span>]<span class="pl-k">=</span>f;r[<span class="pl-c1">9</span>]<span class="pl-k">=</span>g;r[<span class="pl-c1">13</span>]<span class="pl-k">=</span>h;r[<span class="pl-c1">2</span>]<span class="pl-k">=</span>i;r[<span class="pl-c1">6</span>]<span class="pl-k">=</span>j;r[<span class="pl-c1">10</span>]<span class="pl-k">=</span>l;r[<span class="pl-c1">14</span>]<span class="pl-k">=</span>m;r[<span class="pl-c1">3</span>]<span class="pl-k">=</span>n;r[<span class="pl-c1">7</span>]<span class="pl-k">=</span>p;r[<span class="pl-c1">11</span>]<span class="pl-k">=</span>o;r[<span class="pl-c1">15</span>]<span class="pl-k">=</span>q;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">identity</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-c1">set</span>(<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">copy</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">elements</span>;<span class="pl-c1">this</span>.<span class="pl-c1">set</span>(a[<span class="pl-c1">0</span>],a[<span class="pl-c1">4</span>],a[<span class="pl-c1">8</span>],a[<span class="pl-c1">12</span>],a[<span class="pl-c1">1</span>],a[<span class="pl-c1">5</span>],a[<span class="pl-c1">9</span>],a[<span class="pl-c1">13</span>],a[<span class="pl-c1">2</span>],a[<span class="pl-c1">6</span>],a[<span class="pl-c1">10</span>],a[<span class="pl-c1">14</span>],a[<span class="pl-c1">3</span>],a[<span class="pl-c1">7</span>],a[<span class="pl-c1">11</span>],a[<span class="pl-c1">15</span>]);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">lookAt</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>,</td>
      </tr>
      <tr>
        <td id="L35" class="blob-num js-line-number" data-line-number="35"></td>
        <td id="LC35" class="blob-code blob-code-inner js-file-line">e<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Matrix4</span>.<span class="pl-smi">__v1</span>,f<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Matrix4</span>.<span class="pl-smi">__v2</span>,g<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Matrix4</span>.<span class="pl-smi">__v3</span>;<span class="pl-smi">g</span>.<span class="pl-c1">sub</span>(a,b).<span class="pl-c1">normalize</span>();<span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">g</span>.<span class="pl-c1">length</span>()<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">g</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">1</span>);<span class="pl-smi">e</span>.<span class="pl-en">cross</span>(c,g).<span class="pl-c1">normalize</span>();<span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">e</span>.<span class="pl-c1">length</span>()<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">g</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-c1">1E-4</span>,<span class="pl-smi">e</span>.<span class="pl-en">cross</span>(c,g).<span class="pl-c1">normalize</span>());<span class="pl-smi">f</span>.<span class="pl-en">cross</span>(g,e);d[<span class="pl-c1">0</span>]<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-c1">x</span>;d[<span class="pl-c1">4</span>]<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">x</span>;d[<span class="pl-c1">8</span>]<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-c1">x</span>;d[<span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-c1">y</span>;d[<span class="pl-c1">5</span>]<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">y</span>;d[<span class="pl-c1">9</span>]<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-c1">y</span>;d[<span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-c1">z</span>;d[<span class="pl-c1">6</span>]<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">z</span>;d[<span class="pl-c1">10</span>]<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-c1">z</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">multiply</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">elements</span>,d<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">elements</span>,e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>,f<span class="pl-k">=</span>c[<span class="pl-c1">0</span>],g<span class="pl-k">=</span>c[<span class="pl-c1">4</span>],h<span class="pl-k">=</span>c[<span class="pl-c1">8</span>],i<span class="pl-k">=</span>c[<span class="pl-c1">12</span>],j<span class="pl-k">=</span>c[<span class="pl-c1">1</span>],l<span class="pl-k">=</span>c[<span class="pl-c1">5</span>],m<span class="pl-k">=</span>c[<span class="pl-c1">9</span>],n<span class="pl-k">=</span>c[<span class="pl-c1">13</span>],p<span class="pl-k">=</span>c[<span class="pl-c1">2</span>],o<span class="pl-k">=</span>c[<span class="pl-c1">6</span>],q<span class="pl-k">=</span>c[<span class="pl-c1">10</span>],r<span class="pl-k">=</span>c[<span class="pl-c1">14</span>],t<span class="pl-k">=</span>c[<span class="pl-c1">3</span>],<span class="pl-c1">B</span><span class="pl-k">=</span>c[<span class="pl-c1">7</span>],u<span class="pl-k">=</span>c[<span class="pl-c1">11</span>],c<span class="pl-k">=</span>c[<span class="pl-c1">15</span>],s<span class="pl-k">=</span>d[<span class="pl-c1">0</span>],z<span class="pl-k">=</span>d[<span class="pl-c1">4</span>],<span class="pl-c1">A</span><span class="pl-k">=</span>d[<span class="pl-c1">8</span>],</td>
      </tr>
      <tr>
        <td id="L36" class="blob-num js-line-number" data-line-number="36"></td>
        <td id="LC36" class="blob-code blob-code-inner js-file-line">v<span class="pl-k">=</span>d[<span class="pl-c1">12</span>],y<span class="pl-k">=</span>d[<span class="pl-c1">1</span>],<span class="pl-c1">C</span><span class="pl-k">=</span>d[<span class="pl-c1">5</span>],<span class="pl-c1">G</span><span class="pl-k">=</span>d[<span class="pl-c1">9</span>],<span class="pl-c1">H</span><span class="pl-k">=</span>d[<span class="pl-c1">13</span>],<span class="pl-c1">J</span><span class="pl-k">=</span>d[<span class="pl-c1">2</span>],<span class="pl-c1">E</span><span class="pl-k">=</span>d[<span class="pl-c1">6</span>],<span class="pl-c1">M</span><span class="pl-k">=</span>d[<span class="pl-c1">10</span>],<span class="pl-c1">K</span><span class="pl-k">=</span>d[<span class="pl-c1">14</span>],<span class="pl-c1">F</span><span class="pl-k">=</span>d[<span class="pl-c1">3</span>],<span class="pl-c1">I</span><span class="pl-k">=</span>d[<span class="pl-c1">7</span>],<span class="pl-c1">L</span><span class="pl-k">=</span>d[<span class="pl-c1">11</span>],d<span class="pl-k">=</span>d[<span class="pl-c1">15</span>];e[<span class="pl-c1">0</span>]<span class="pl-k">=</span>f<span class="pl-k">*</span>s<span class="pl-k">+</span>g<span class="pl-k">*</span>y<span class="pl-k">+</span>h<span class="pl-k">*</span><span class="pl-c1">J</span><span class="pl-k">+</span>i<span class="pl-k">*</span><span class="pl-c1">F</span>;e[<span class="pl-c1">4</span>]<span class="pl-k">=</span>f<span class="pl-k">*</span>z<span class="pl-k">+</span>g<span class="pl-k">*</span><span class="pl-c1">C</span><span class="pl-k">+</span>h<span class="pl-k">*</span><span class="pl-c1">E</span><span class="pl-k">+</span>i<span class="pl-k">*</span><span class="pl-c1">I</span>;e[<span class="pl-c1">8</span>]<span class="pl-k">=</span>f<span class="pl-k">*</span><span class="pl-c1">A</span><span class="pl-k">+</span>g<span class="pl-k">*</span><span class="pl-c1">G</span><span class="pl-k">+</span>h<span class="pl-k">*</span><span class="pl-c1">M</span><span class="pl-k">+</span>i<span class="pl-k">*</span><span class="pl-c1">L</span>;e[<span class="pl-c1">12</span>]<span class="pl-k">=</span>f<span class="pl-k">*</span>v<span class="pl-k">+</span>g<span class="pl-k">*</span><span class="pl-c1">H</span><span class="pl-k">+</span>h<span class="pl-k">*</span><span class="pl-c1">K</span><span class="pl-k">+</span>i<span class="pl-k">*</span>d;e[<span class="pl-c1">1</span>]<span class="pl-k">=</span>j<span class="pl-k">*</span>s<span class="pl-k">+</span>l<span class="pl-k">*</span>y<span class="pl-k">+</span>m<span class="pl-k">*</span><span class="pl-c1">J</span><span class="pl-k">+</span>n<span class="pl-k">*</span><span class="pl-c1">F</span>;e[<span class="pl-c1">5</span>]<span class="pl-k">=</span>j<span class="pl-k">*</span>z<span class="pl-k">+</span>l<span class="pl-k">*</span><span class="pl-c1">C</span><span class="pl-k">+</span>m<span class="pl-k">*</span><span class="pl-c1">E</span><span class="pl-k">+</span>n<span class="pl-k">*</span><span class="pl-c1">I</span>;e[<span class="pl-c1">9</span>]<span class="pl-k">=</span>j<span class="pl-k">*</span><span class="pl-c1">A</span><span class="pl-k">+</span>l<span class="pl-k">*</span><span class="pl-c1">G</span><span class="pl-k">+</span>m<span class="pl-k">*</span><span class="pl-c1">M</span><span class="pl-k">+</span>n<span class="pl-k">*</span><span class="pl-c1">L</span>;e[<span class="pl-c1">13</span>]<span class="pl-k">=</span>j<span class="pl-k">*</span>v<span class="pl-k">+</span>l<span class="pl-k">*</span><span class="pl-c1">H</span><span class="pl-k">+</span>m<span class="pl-k">*</span><span class="pl-c1">K</span><span class="pl-k">+</span>n<span class="pl-k">*</span>d;e[<span class="pl-c1">2</span>]<span class="pl-k">=</span>p<span class="pl-k">*</span>s<span class="pl-k">+</span>o<span class="pl-k">*</span>y<span class="pl-k">+</span>q<span class="pl-k">*</span><span class="pl-c1">J</span><span class="pl-k">+</span>r<span class="pl-k">*</span><span class="pl-c1">F</span>;e[<span class="pl-c1">6</span>]<span class="pl-k">=</span>p<span class="pl-k">*</span>z<span class="pl-k">+</span>o<span class="pl-k">*</span><span class="pl-c1">C</span><span class="pl-k">+</span>q<span class="pl-k">*</span><span class="pl-c1">E</span><span class="pl-k">+</span>r<span class="pl-k">*</span><span class="pl-c1">I</span>;e[<span class="pl-c1">10</span>]<span class="pl-k">=</span>p<span class="pl-k">*</span><span class="pl-c1">A</span><span class="pl-k">+</span>o<span class="pl-k">*</span><span class="pl-c1">G</span><span class="pl-k">+</span>q<span class="pl-k">*</span><span class="pl-c1">M</span><span class="pl-k">+</span>r<span class="pl-k">*</span><span class="pl-c1">L</span>;e[<span class="pl-c1">14</span>]<span class="pl-k">=</span>p<span class="pl-k">*</span>v<span class="pl-k">+</span>o<span class="pl-k">*</span><span class="pl-c1">H</span><span class="pl-k">+</span>q<span class="pl-k">*</span><span class="pl-c1">K</span><span class="pl-k">+</span>r<span class="pl-k">*</span>d;e[<span class="pl-c1">3</span>]<span class="pl-k">=</span>t<span class="pl-k">*</span>s<span class="pl-k">+</span><span class="pl-c1">B</span><span class="pl-k">*</span>y<span class="pl-k">+</span>u<span class="pl-k">*</span><span class="pl-c1">J</span><span class="pl-k">+</span>c<span class="pl-k">*</span><span class="pl-c1">F</span>;e[<span class="pl-c1">7</span>]<span class="pl-k">=</span>t<span class="pl-k">*</span>z<span class="pl-k">+</span><span class="pl-c1">B</span><span class="pl-k">*</span><span class="pl-c1">C</span><span class="pl-k">+</span>u<span class="pl-k">*</span><span class="pl-c1">E</span><span class="pl-k">+</span>c<span class="pl-k">*</span><span class="pl-c1">I</span>;e[<span class="pl-c1">11</span>]<span class="pl-k">=</span>t<span class="pl-k">*</span><span class="pl-c1">A</span><span class="pl-k">+</span><span class="pl-c1">B</span><span class="pl-k">*</span><span class="pl-c1">G</span><span class="pl-k">+</span>u<span class="pl-k">*</span><span class="pl-c1">M</span><span class="pl-k">+</span>c<span class="pl-k">*</span><span class="pl-c1">L</span>;e[<span class="pl-c1">15</span>]<span class="pl-k">=</span>t<span class="pl-k">*</span>v<span class="pl-k">+</span><span class="pl-c1">B</span><span class="pl-k">*</span><span class="pl-c1">H</span><span class="pl-k">+</span>u<span class="pl-k">*</span><span class="pl-c1">K</span><span class="pl-k">+</span>c<span class="pl-k">*</span>d;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">multiplySelf</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">multiply</span>(<span class="pl-c1">this</span>,</td>
      </tr>
      <tr>
        <td id="L37" class="blob-num js-line-number" data-line-number="37"></td>
        <td id="LC37" class="blob-code blob-code-inner js-file-line">a)},<span class="pl-en">multiplyToArray</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>;<span class="pl-c1">this</span>.<span class="pl-en">multiply</span>(a,b);c[<span class="pl-c1">0</span>]<span class="pl-k">=</span>d[<span class="pl-c1">0</span>];c[<span class="pl-c1">1</span>]<span class="pl-k">=</span>d[<span class="pl-c1">1</span>];c[<span class="pl-c1">2</span>]<span class="pl-k">=</span>d[<span class="pl-c1">2</span>];c[<span class="pl-c1">3</span>]<span class="pl-k">=</span>d[<span class="pl-c1">3</span>];c[<span class="pl-c1">4</span>]<span class="pl-k">=</span>d[<span class="pl-c1">4</span>];c[<span class="pl-c1">5</span>]<span class="pl-k">=</span>d[<span class="pl-c1">5</span>];c[<span class="pl-c1">6</span>]<span class="pl-k">=</span>d[<span class="pl-c1">6</span>];c[<span class="pl-c1">7</span>]<span class="pl-k">=</span>d[<span class="pl-c1">7</span>];c[<span class="pl-c1">8</span>]<span class="pl-k">=</span>d[<span class="pl-c1">8</span>];c[<span class="pl-c1">9</span>]<span class="pl-k">=</span>d[<span class="pl-c1">9</span>];c[<span class="pl-c1">10</span>]<span class="pl-k">=</span>d[<span class="pl-c1">10</span>];c[<span class="pl-c1">11</span>]<span class="pl-k">=</span>d[<span class="pl-c1">11</span>];c[<span class="pl-c1">12</span>]<span class="pl-k">=</span>d[<span class="pl-c1">12</span>];c[<span class="pl-c1">13</span>]<span class="pl-k">=</span>d[<span class="pl-c1">13</span>];c[<span class="pl-c1">14</span>]<span class="pl-k">=</span>d[<span class="pl-c1">14</span>];c[<span class="pl-c1">15</span>]<span class="pl-k">=</span>d[<span class="pl-c1">15</span>];<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">multiplyScalar</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>;b[<span class="pl-c1">0</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">4</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">8</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">12</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">1</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">5</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">9</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">13</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">2</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">6</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">10</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">14</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">3</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">7</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">11</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">15</span>]<span class="pl-k">*=</span>a;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">multiplyVector3</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>,</td>
      </tr>
      <tr>
        <td id="L38" class="blob-num js-line-number" data-line-number="38"></td>
        <td id="LC38" class="blob-code blob-code-inner js-file-line">c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>,d<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>,e<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>,f<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>(b[<span class="pl-c1">3</span>]<span class="pl-k">*</span>c<span class="pl-k">+</span>b[<span class="pl-c1">7</span>]<span class="pl-k">*</span>d<span class="pl-k">+</span>b[<span class="pl-c1">11</span>]<span class="pl-k">*</span>e<span class="pl-k">+</span>b[<span class="pl-c1">15</span>]);<span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>(b[<span class="pl-c1">0</span>]<span class="pl-k">*</span>c<span class="pl-k">+</span>b[<span class="pl-c1">4</span>]<span class="pl-k">*</span>d<span class="pl-k">+</span>b[<span class="pl-c1">8</span>]<span class="pl-k">*</span>e<span class="pl-k">+</span>b[<span class="pl-c1">12</span>])<span class="pl-k">*</span>f;<span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>(b[<span class="pl-c1">1</span>]<span class="pl-k">*</span>c<span class="pl-k">+</span>b[<span class="pl-c1">5</span>]<span class="pl-k">*</span>d<span class="pl-k">+</span>b[<span class="pl-c1">9</span>]<span class="pl-k">*</span>e<span class="pl-k">+</span>b[<span class="pl-c1">13</span>])<span class="pl-k">*</span>f;<span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>(b[<span class="pl-c1">2</span>]<span class="pl-k">*</span>c<span class="pl-k">+</span>b[<span class="pl-c1">6</span>]<span class="pl-k">*</span>d<span class="pl-k">+</span>b[<span class="pl-c1">10</span>]<span class="pl-k">*</span>e<span class="pl-k">+</span>b[<span class="pl-c1">14</span>])<span class="pl-k">*</span>f;<span class="pl-k">return</span> a},<span class="pl-en">multiplyVector4</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>,c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>,d<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>,e<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>,f<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">w</span>;<span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>b[<span class="pl-c1">0</span>]<span class="pl-k">*</span>c<span class="pl-k">+</span>b[<span class="pl-c1">4</span>]<span class="pl-k">*</span>d<span class="pl-k">+</span>b[<span class="pl-c1">8</span>]<span class="pl-k">*</span>e<span class="pl-k">+</span>b[<span class="pl-c1">12</span>]<span class="pl-k">*</span>f;<span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>b[<span class="pl-c1">1</span>]<span class="pl-k">*</span>c<span class="pl-k">+</span>b[<span class="pl-c1">5</span>]<span class="pl-k">*</span>d<span class="pl-k">+</span>b[<span class="pl-c1">9</span>]<span class="pl-k">*</span>e<span class="pl-k">+</span>b[<span class="pl-c1">13</span>]<span class="pl-k">*</span>f;<span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>b[<span class="pl-c1">2</span>]<span class="pl-k">*</span>c<span class="pl-k">+</span>b[<span class="pl-c1">6</span>]<span class="pl-k">*</span>d<span class="pl-k">+</span>b[<span class="pl-c1">10</span>]<span class="pl-k">*</span>e<span class="pl-k">+</span>b[<span class="pl-c1">14</span>]<span class="pl-k">*</span>f;<span class="pl-smi">a</span>.<span class="pl-smi">w</span><span class="pl-k">=</span>b[<span class="pl-c1">3</span>]<span class="pl-k">*</span>c<span class="pl-k">+</span>b[<span class="pl-c1">7</span>]<span class="pl-k">*</span>d<span class="pl-k">+</span>b[<span class="pl-c1">11</span>]<span class="pl-k">*</span>e<span class="pl-k">+</span>b[<span class="pl-c1">15</span>]<span class="pl-k">*</span>f;<span class="pl-k">return</span> a},<span class="pl-en">multiplyVector3Array</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Matrix4</span>.<span class="pl-smi">__v1</span>,c<span class="pl-k">=</span><span class="pl-c1">0</span>,d<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>d;c<span class="pl-k">+=</span><span class="pl-c1">3</span>)<span class="pl-smi">b</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a[c],<span class="pl-smi">b</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>a[c<span class="pl-k">+</span><span class="pl-c1">1</span>],<span class="pl-smi">b</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>a[c<span class="pl-k">+</span><span class="pl-c1">2</span>],</td>
      </tr>
      <tr>
        <td id="L39" class="blob-num js-line-number" data-line-number="39"></td>
        <td id="LC39" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-en">multiplyVector3</span>(b),a[c]<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">x</span>,a[c<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">y</span>,a[c<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">z</span>;<span class="pl-k">return</span> a},<span class="pl-en">rotateAxis</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>,c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>,d<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>,e<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>;<span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>c<span class="pl-k">*</span>b[<span class="pl-c1">0</span>]<span class="pl-k">+</span>d<span class="pl-k">*</span>b[<span class="pl-c1">4</span>]<span class="pl-k">+</span>e<span class="pl-k">*</span>b[<span class="pl-c1">8</span>];<span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>c<span class="pl-k">*</span>b[<span class="pl-c1">1</span>]<span class="pl-k">+</span>d<span class="pl-k">*</span>b[<span class="pl-c1">5</span>]<span class="pl-k">+</span>e<span class="pl-k">*</span>b[<span class="pl-c1">9</span>];<span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>c<span class="pl-k">*</span>b[<span class="pl-c1">2</span>]<span class="pl-k">+</span>d<span class="pl-k">*</span>b[<span class="pl-c1">6</span>]<span class="pl-k">+</span>e<span class="pl-k">*</span>b[<span class="pl-c1">10</span>];<span class="pl-smi">a</span>.<span class="pl-c1">normalize</span>();<span class="pl-k">return</span> a},<span class="pl-en">crossVector</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>,c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector4</span>;<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>b[<span class="pl-c1">0</span>]<span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>b[<span class="pl-c1">4</span>]<span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>b[<span class="pl-c1">8</span>]<span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">+</span>b[<span class="pl-c1">12</span>]<span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">w</span>;<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>b[<span class="pl-c1">1</span>]<span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>b[<span class="pl-c1">5</span>]<span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>b[<span class="pl-c1">9</span>]<span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">+</span>b[<span class="pl-c1">13</span>]<span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">w</span>;<span class="pl-smi">c</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>b[<span class="pl-c1">2</span>]<span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>b[<span class="pl-c1">6</span>]<span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>b[<span class="pl-c1">10</span>]<span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">+</span>b[<span class="pl-c1">14</span>]<span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">w</span>;<span class="pl-smi">c</span>.<span class="pl-smi">w</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">w</span><span class="pl-k">?</span>b[<span class="pl-c1">3</span>]<span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>b[<span class="pl-c1">7</span>]<span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>b[<span class="pl-c1">11</span>]<span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">+</span>b[<span class="pl-c1">15</span>]<span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">w</span><span class="pl-k">:</span><span class="pl-c1">1</span>;<span class="pl-k">return</span> c},<span class="pl-en">determinant</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L40" class="blob-num js-line-number" data-line-number="40"></td>
        <td id="LC40" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>,b<span class="pl-k">=</span>a[<span class="pl-c1">0</span>],c<span class="pl-k">=</span>a[<span class="pl-c1">4</span>],d<span class="pl-k">=</span>a[<span class="pl-c1">8</span>],e<span class="pl-k">=</span>a[<span class="pl-c1">12</span>],f<span class="pl-k">=</span>a[<span class="pl-c1">1</span>],g<span class="pl-k">=</span>a[<span class="pl-c1">5</span>],h<span class="pl-k">=</span>a[<span class="pl-c1">9</span>],i<span class="pl-k">=</span>a[<span class="pl-c1">13</span>],j<span class="pl-k">=</span>a[<span class="pl-c1">2</span>],l<span class="pl-k">=</span>a[<span class="pl-c1">6</span>],m<span class="pl-k">=</span>a[<span class="pl-c1">10</span>],n<span class="pl-k">=</span>a[<span class="pl-c1">14</span>],p<span class="pl-k">=</span>a[<span class="pl-c1">3</span>],o<span class="pl-k">=</span>a[<span class="pl-c1">7</span>],q<span class="pl-k">=</span>a[<span class="pl-c1">11</span>],a<span class="pl-k">=</span>a[<span class="pl-c1">15</span>];<span class="pl-k">return</span> e<span class="pl-k">*</span>h<span class="pl-k">*</span>l<span class="pl-k">*</span>p<span class="pl-k">-</span>d<span class="pl-k">*</span>i<span class="pl-k">*</span>l<span class="pl-k">*</span>p<span class="pl-k">-</span>e<span class="pl-k">*</span>g<span class="pl-k">*</span>m<span class="pl-k">*</span>p<span class="pl-k">+</span>c<span class="pl-k">*</span>i<span class="pl-k">*</span>m<span class="pl-k">*</span>p<span class="pl-k">+</span>d<span class="pl-k">*</span>g<span class="pl-k">*</span>n<span class="pl-k">*</span>p<span class="pl-k">-</span>c<span class="pl-k">*</span>h<span class="pl-k">*</span>n<span class="pl-k">*</span>p<span class="pl-k">-</span>e<span class="pl-k">*</span>h<span class="pl-k">*</span>j<span class="pl-k">*</span>o<span class="pl-k">+</span>d<span class="pl-k">*</span>i<span class="pl-k">*</span>j<span class="pl-k">*</span>o<span class="pl-k">+</span>e<span class="pl-k">*</span>f<span class="pl-k">*</span>m<span class="pl-k">*</span>o<span class="pl-k">-</span>b<span class="pl-k">*</span>i<span class="pl-k">*</span>m<span class="pl-k">*</span>o<span class="pl-k">-</span>d<span class="pl-k">*</span>f<span class="pl-k">*</span>n<span class="pl-k">*</span>o<span class="pl-k">+</span>b<span class="pl-k">*</span>h<span class="pl-k">*</span>n<span class="pl-k">*</span>o<span class="pl-k">+</span>e<span class="pl-k">*</span>g<span class="pl-k">*</span>j<span class="pl-k">*</span>q<span class="pl-k">-</span>c<span class="pl-k">*</span>i<span class="pl-k">*</span>j<span class="pl-k">*</span>q<span class="pl-k">-</span>e<span class="pl-k">*</span>f<span class="pl-k">*</span>l<span class="pl-k">*</span>q<span class="pl-k">+</span>b<span class="pl-k">*</span>i<span class="pl-k">*</span>l<span class="pl-k">*</span>q<span class="pl-k">+</span>c<span class="pl-k">*</span>f<span class="pl-k">*</span>n<span class="pl-k">*</span>q<span class="pl-k">-</span>b<span class="pl-k">*</span>g<span class="pl-k">*</span>n<span class="pl-k">*</span>q<span class="pl-k">-</span>d<span class="pl-k">*</span>g<span class="pl-k">*</span>j<span class="pl-k">*</span>a<span class="pl-k">+</span>c<span class="pl-k">*</span>h<span class="pl-k">*</span>j<span class="pl-k">*</span>a<span class="pl-k">+</span>d<span class="pl-k">*</span>f<span class="pl-k">*</span>l<span class="pl-k">*</span>a<span class="pl-k">-</span>b<span class="pl-k">*</span>h<span class="pl-k">*</span>l<span class="pl-k">*</span>a<span class="pl-k">-</span>c<span class="pl-k">*</span>f<span class="pl-k">*</span>m<span class="pl-k">*</span>a<span class="pl-k">+</span>b<span class="pl-k">*</span>g<span class="pl-k">*</span>m<span class="pl-k">*</span>a},<span class="pl-en">transpose</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>,b;b<span class="pl-k">=</span>a[<span class="pl-c1">1</span>];a[<span class="pl-c1">1</span>]<span class="pl-k">=</span>a[<span class="pl-c1">4</span>];a[<span class="pl-c1">4</span>]<span class="pl-k">=</span>b;b<span class="pl-k">=</span>a[<span class="pl-c1">2</span>];a[<span class="pl-c1">2</span>]<span class="pl-k">=</span>a[<span class="pl-c1">8</span>];a[<span class="pl-c1">8</span>]<span class="pl-k">=</span>b;b<span class="pl-k">=</span>a[<span class="pl-c1">6</span>];a[<span class="pl-c1">6</span>]<span class="pl-k">=</span>a[<span class="pl-c1">9</span>];a[<span class="pl-c1">9</span>]<span class="pl-k">=</span>b;b<span class="pl-k">=</span>a[<span class="pl-c1">3</span>];a[<span class="pl-c1">3</span>]<span class="pl-k">=</span>a[<span class="pl-c1">12</span>];a[<span class="pl-c1">12</span>]<span class="pl-k">=</span>b;b<span class="pl-k">=</span>a[<span class="pl-c1">7</span>];a[<span class="pl-c1">7</span>]<span class="pl-k">=</span>a[<span class="pl-c1">13</span>];a[<span class="pl-c1">13</span>]<span class="pl-k">=</span>b;b<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L41" class="blob-num js-line-number" data-line-number="41"></td>
        <td id="LC41" class="blob-code blob-code-inner js-file-line">a[<span class="pl-c1">11</span>];a[<span class="pl-c1">11</span>]<span class="pl-k">=</span>a[<span class="pl-c1">14</span>];a[<span class="pl-c1">14</span>]<span class="pl-k">=</span>b;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">flattenToArray</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>;a[<span class="pl-c1">0</span>]<span class="pl-k">=</span>b[<span class="pl-c1">0</span>];a[<span class="pl-c1">1</span>]<span class="pl-k">=</span>b[<span class="pl-c1">1</span>];a[<span class="pl-c1">2</span>]<span class="pl-k">=</span>b[<span class="pl-c1">2</span>];a[<span class="pl-c1">3</span>]<span class="pl-k">=</span>b[<span class="pl-c1">3</span>];a[<span class="pl-c1">4</span>]<span class="pl-k">=</span>b[<span class="pl-c1">4</span>];a[<span class="pl-c1">5</span>]<span class="pl-k">=</span>b[<span class="pl-c1">5</span>];a[<span class="pl-c1">6</span>]<span class="pl-k">=</span>b[<span class="pl-c1">6</span>];a[<span class="pl-c1">7</span>]<span class="pl-k">=</span>b[<span class="pl-c1">7</span>];a[<span class="pl-c1">8</span>]<span class="pl-k">=</span>b[<span class="pl-c1">8</span>];a[<span class="pl-c1">9</span>]<span class="pl-k">=</span>b[<span class="pl-c1">9</span>];a[<span class="pl-c1">10</span>]<span class="pl-k">=</span>b[<span class="pl-c1">10</span>];a[<span class="pl-c1">11</span>]<span class="pl-k">=</span>b[<span class="pl-c1">11</span>];a[<span class="pl-c1">12</span>]<span class="pl-k">=</span>b[<span class="pl-c1">12</span>];a[<span class="pl-c1">13</span>]<span class="pl-k">=</span>b[<span class="pl-c1">13</span>];a[<span class="pl-c1">14</span>]<span class="pl-k">=</span>b[<span class="pl-c1">14</span>];a[<span class="pl-c1">15</span>]<span class="pl-k">=</span>b[<span class="pl-c1">15</span>];<span class="pl-k">return</span> a},<span class="pl-en">flattenToArrayOffset</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>;a[b]<span class="pl-k">=</span>c[<span class="pl-c1">0</span>];a[b<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>c[<span class="pl-c1">1</span>];a[b<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span>c[<span class="pl-c1">2</span>];a[b<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span>c[<span class="pl-c1">3</span>];a[b<span class="pl-k">+</span><span class="pl-c1">4</span>]<span class="pl-k">=</span>c[<span class="pl-c1">4</span>];a[b<span class="pl-k">+</span><span class="pl-c1">5</span>]<span class="pl-k">=</span>c[<span class="pl-c1">5</span>];a[b<span class="pl-k">+</span><span class="pl-c1">6</span>]<span class="pl-k">=</span>c[<span class="pl-c1">6</span>];a[b<span class="pl-k">+</span><span class="pl-c1">7</span>]<span class="pl-k">=</span>c[<span class="pl-c1">7</span>];a[b<span class="pl-k">+</span><span class="pl-c1">8</span>]<span class="pl-k">=</span>c[<span class="pl-c1">8</span>];a[b<span class="pl-k">+</span><span class="pl-c1">9</span>]<span class="pl-k">=</span>c[<span class="pl-c1">9</span>];a[b<span class="pl-k">+</span><span class="pl-c1">10</span>]<span class="pl-k">=</span>c[<span class="pl-c1">10</span>];a[b<span class="pl-k">+</span><span class="pl-c1">11</span>]<span class="pl-k">=</span>c[<span class="pl-c1">11</span>];a[b<span class="pl-k">+</span><span class="pl-c1">12</span>]<span class="pl-k">=</span>c[<span class="pl-c1">12</span>];a[b<span class="pl-k">+</span><span class="pl-c1">13</span>]<span class="pl-k">=</span>c[<span class="pl-c1">13</span>];a[b<span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L42" class="blob-num js-line-number" data-line-number="42"></td>
        <td id="LC42" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">14</span>]<span class="pl-k">=</span>c[<span class="pl-c1">14</span>];a[b<span class="pl-k">+</span><span class="pl-c1">15</span>]<span class="pl-k">=</span>c[<span class="pl-c1">15</span>];<span class="pl-k">return</span> a},<span class="pl-en">getPosition</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>;<span class="pl-k">return</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Matrix4</span>.<span class="pl-smi">__v1</span>.<span class="pl-c1">set</span>(a[<span class="pl-c1">12</span>],a[<span class="pl-c1">13</span>],a[<span class="pl-c1">14</span>])},<span class="pl-en">setPosition</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>;b[<span class="pl-c1">12</span>]<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>;b[<span class="pl-c1">13</span>]<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>;b[<span class="pl-c1">14</span>]<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">getColumnX</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>;<span class="pl-k">return</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Matrix4</span>.<span class="pl-smi">__v1</span>.<span class="pl-c1">set</span>(a[<span class="pl-c1">0</span>],a[<span class="pl-c1">1</span>],a[<span class="pl-c1">2</span>])},<span class="pl-en">getColumnY</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>;<span class="pl-k">return</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Matrix4</span>.<span class="pl-smi">__v1</span>.<span class="pl-c1">set</span>(a[<span class="pl-c1">4</span>],a[<span class="pl-c1">5</span>],a[<span class="pl-c1">6</span>])},<span class="pl-en">getColumnZ</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>;<span class="pl-k">return</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Matrix4</span>.<span class="pl-smi">__v1</span>.<span class="pl-c1">set</span>(a[<span class="pl-c1">8</span>],a[<span class="pl-c1">9</span>],a[<span class="pl-c1">10</span>])},<span class="pl-en">getInverse</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L43" class="blob-num js-line-number" data-line-number="43"></td>
        <td id="LC43" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>,c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">elements</span>,d<span class="pl-k">=</span>c[<span class="pl-c1">0</span>],e<span class="pl-k">=</span>c[<span class="pl-c1">4</span>],f<span class="pl-k">=</span>c[<span class="pl-c1">8</span>],g<span class="pl-k">=</span>c[<span class="pl-c1">12</span>],h<span class="pl-k">=</span>c[<span class="pl-c1">1</span>],i<span class="pl-k">=</span>c[<span class="pl-c1">5</span>],j<span class="pl-k">=</span>c[<span class="pl-c1">9</span>],l<span class="pl-k">=</span>c[<span class="pl-c1">13</span>],m<span class="pl-k">=</span>c[<span class="pl-c1">2</span>],n<span class="pl-k">=</span>c[<span class="pl-c1">6</span>],p<span class="pl-k">=</span>c[<span class="pl-c1">10</span>],o<span class="pl-k">=</span>c[<span class="pl-c1">14</span>],q<span class="pl-k">=</span>c[<span class="pl-c1">3</span>],r<span class="pl-k">=</span>c[<span class="pl-c1">7</span>],t<span class="pl-k">=</span>c[<span class="pl-c1">11</span>],c<span class="pl-k">=</span>c[<span class="pl-c1">15</span>];b[<span class="pl-c1">0</span>]<span class="pl-k">=</span>j<span class="pl-k">*</span>o<span class="pl-k">*</span>r<span class="pl-k">-</span>l<span class="pl-k">*</span>p<span class="pl-k">*</span>r<span class="pl-k">+</span>l<span class="pl-k">*</span>n<span class="pl-k">*</span>t<span class="pl-k">-</span>i<span class="pl-k">*</span>o<span class="pl-k">*</span>t<span class="pl-k">-</span>j<span class="pl-k">*</span>n<span class="pl-k">*</span>c<span class="pl-k">+</span>i<span class="pl-k">*</span>p<span class="pl-k">*</span>c;b[<span class="pl-c1">4</span>]<span class="pl-k">=</span>g<span class="pl-k">*</span>p<span class="pl-k">*</span>r<span class="pl-k">-</span>f<span class="pl-k">*</span>o<span class="pl-k">*</span>r<span class="pl-k">-</span>g<span class="pl-k">*</span>n<span class="pl-k">*</span>t<span class="pl-k">+</span>e<span class="pl-k">*</span>o<span class="pl-k">*</span>t<span class="pl-k">+</span>f<span class="pl-k">*</span>n<span class="pl-k">*</span>c<span class="pl-k">-</span>e<span class="pl-k">*</span>p<span class="pl-k">*</span>c;b[<span class="pl-c1">8</span>]<span class="pl-k">=</span>f<span class="pl-k">*</span>l<span class="pl-k">*</span>r<span class="pl-k">-</span>g<span class="pl-k">*</span>j<span class="pl-k">*</span>r<span class="pl-k">+</span>g<span class="pl-k">*</span>i<span class="pl-k">*</span>t<span class="pl-k">-</span>e<span class="pl-k">*</span>l<span class="pl-k">*</span>t<span class="pl-k">-</span>f<span class="pl-k">*</span>i<span class="pl-k">*</span>c<span class="pl-k">+</span>e<span class="pl-k">*</span>j<span class="pl-k">*</span>c;b[<span class="pl-c1">12</span>]<span class="pl-k">=</span>g<span class="pl-k">*</span>j<span class="pl-k">*</span>n<span class="pl-k">-</span>f<span class="pl-k">*</span>l<span class="pl-k">*</span>n<span class="pl-k">-</span>g<span class="pl-k">*</span>i<span class="pl-k">*</span>p<span class="pl-k">+</span>e<span class="pl-k">*</span>l<span class="pl-k">*</span>p<span class="pl-k">+</span>f<span class="pl-k">*</span>i<span class="pl-k">*</span>o<span class="pl-k">-</span>e<span class="pl-k">*</span>j<span class="pl-k">*</span>o;b[<span class="pl-c1">1</span>]<span class="pl-k">=</span>l<span class="pl-k">*</span>p<span class="pl-k">*</span>q<span class="pl-k">-</span>j<span class="pl-k">*</span>o<span class="pl-k">*</span>q<span class="pl-k">-</span>l<span class="pl-k">*</span>m<span class="pl-k">*</span>t<span class="pl-k">+</span>h<span class="pl-k">*</span>o<span class="pl-k">*</span>t<span class="pl-k">+</span>j<span class="pl-k">*</span>m<span class="pl-k">*</span>c<span class="pl-k">-</span>h<span class="pl-k">*</span>p<span class="pl-k">*</span>c;b[<span class="pl-c1">5</span>]<span class="pl-k">=</span>f<span class="pl-k">*</span>o<span class="pl-k">*</span>q<span class="pl-k">-</span>g<span class="pl-k">*</span>p<span class="pl-k">*</span>q<span class="pl-k">+</span>g<span class="pl-k">*</span>m<span class="pl-k">*</span>t<span class="pl-k">-</span>d<span class="pl-k">*</span>o<span class="pl-k">*</span>t<span class="pl-k">-</span>f<span class="pl-k">*</span>m<span class="pl-k">*</span>c<span class="pl-k">+</span>d<span class="pl-k">*</span>p<span class="pl-k">*</span>c;b[<span class="pl-c1">9</span>]<span class="pl-k">=</span>g<span class="pl-k">*</span>j<span class="pl-k">*</span>q<span class="pl-k">-</span>f<span class="pl-k">*</span>l<span class="pl-k">*</span>q<span class="pl-k">-</span>g<span class="pl-k">*</span>h<span class="pl-k">*</span>t<span class="pl-k">+</span>d<span class="pl-k">*</span>l<span class="pl-k">*</span>t<span class="pl-k">+</span>f<span class="pl-k">*</span>h<span class="pl-k">*</span>c<span class="pl-k">-</span>d<span class="pl-k">*</span>j<span class="pl-k">*</span>c;b[<span class="pl-c1">13</span>]<span class="pl-k">=</span>f<span class="pl-k">*</span>l<span class="pl-k">*</span>m<span class="pl-k">-</span>g<span class="pl-k">*</span>j<span class="pl-k">*</span>m<span class="pl-k">+</span>g<span class="pl-k">*</span>h<span class="pl-k">*</span>p<span class="pl-k">-</span>d<span class="pl-k">*</span>l<span class="pl-k">*</span>p<span class="pl-k">-</span>f<span class="pl-k">*</span>h<span class="pl-k">*</span>o<span class="pl-k">+</span>d<span class="pl-k">*</span>j<span class="pl-k">*</span>o;b[<span class="pl-c1">2</span>]<span class="pl-k">=</span>i<span class="pl-k">*</span>o<span class="pl-k">*</span>q<span class="pl-k">-</span>l<span class="pl-k">*</span>n<span class="pl-k">*</span>q<span class="pl-k">+</span>l<span class="pl-k">*</span>m<span class="pl-k">*</span>r<span class="pl-k">-</span>h<span class="pl-k">*</span>o<span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L44" class="blob-num js-line-number" data-line-number="44"></td>
        <td id="LC44" class="blob-code blob-code-inner js-file-line">r<span class="pl-k">-</span>i<span class="pl-k">*</span>m<span class="pl-k">*</span>c<span class="pl-k">+</span>h<span class="pl-k">*</span>n<span class="pl-k">*</span>c;b[<span class="pl-c1">6</span>]<span class="pl-k">=</span>g<span class="pl-k">*</span>n<span class="pl-k">*</span>q<span class="pl-k">-</span>e<span class="pl-k">*</span>o<span class="pl-k">*</span>q<span class="pl-k">-</span>g<span class="pl-k">*</span>m<span class="pl-k">*</span>r<span class="pl-k">+</span>d<span class="pl-k">*</span>o<span class="pl-k">*</span>r<span class="pl-k">+</span>e<span class="pl-k">*</span>m<span class="pl-k">*</span>c<span class="pl-k">-</span>d<span class="pl-k">*</span>n<span class="pl-k">*</span>c;b[<span class="pl-c1">10</span>]<span class="pl-k">=</span>e<span class="pl-k">*</span>l<span class="pl-k">*</span>q<span class="pl-k">-</span>g<span class="pl-k">*</span>i<span class="pl-k">*</span>q<span class="pl-k">+</span>g<span class="pl-k">*</span>h<span class="pl-k">*</span>r<span class="pl-k">-</span>d<span class="pl-k">*</span>l<span class="pl-k">*</span>r<span class="pl-k">-</span>e<span class="pl-k">*</span>h<span class="pl-k">*</span>c<span class="pl-k">+</span>d<span class="pl-k">*</span>i<span class="pl-k">*</span>c;b[<span class="pl-c1">14</span>]<span class="pl-k">=</span>g<span class="pl-k">*</span>i<span class="pl-k">*</span>m<span class="pl-k">-</span>e<span class="pl-k">*</span>l<span class="pl-k">*</span>m<span class="pl-k">-</span>g<span class="pl-k">*</span>h<span class="pl-k">*</span>n<span class="pl-k">+</span>d<span class="pl-k">*</span>l<span class="pl-k">*</span>n<span class="pl-k">+</span>e<span class="pl-k">*</span>h<span class="pl-k">*</span>o<span class="pl-k">-</span>d<span class="pl-k">*</span>i<span class="pl-k">*</span>o;b[<span class="pl-c1">3</span>]<span class="pl-k">=</span>j<span class="pl-k">*</span>n<span class="pl-k">*</span>q<span class="pl-k">-</span>i<span class="pl-k">*</span>p<span class="pl-k">*</span>q<span class="pl-k">-</span>j<span class="pl-k">*</span>m<span class="pl-k">*</span>r<span class="pl-k">+</span>h<span class="pl-k">*</span>p<span class="pl-k">*</span>r<span class="pl-k">+</span>i<span class="pl-k">*</span>m<span class="pl-k">*</span>t<span class="pl-k">-</span>h<span class="pl-k">*</span>n<span class="pl-k">*</span>t;b[<span class="pl-c1">7</span>]<span class="pl-k">=</span>e<span class="pl-k">*</span>p<span class="pl-k">*</span>q<span class="pl-k">-</span>f<span class="pl-k">*</span>n<span class="pl-k">*</span>q<span class="pl-k">+</span>f<span class="pl-k">*</span>m<span class="pl-k">*</span>r<span class="pl-k">-</span>d<span class="pl-k">*</span>p<span class="pl-k">*</span>r<span class="pl-k">-</span>e<span class="pl-k">*</span>m<span class="pl-k">*</span>t<span class="pl-k">+</span>d<span class="pl-k">*</span>n<span class="pl-k">*</span>t;b[<span class="pl-c1">11</span>]<span class="pl-k">=</span>f<span class="pl-k">*</span>i<span class="pl-k">*</span>q<span class="pl-k">-</span>e<span class="pl-k">*</span>j<span class="pl-k">*</span>q<span class="pl-k">-</span>f<span class="pl-k">*</span>h<span class="pl-k">*</span>r<span class="pl-k">+</span>d<span class="pl-k">*</span>j<span class="pl-k">*</span>r<span class="pl-k">+</span>e<span class="pl-k">*</span>h<span class="pl-k">*</span>t<span class="pl-k">-</span>d<span class="pl-k">*</span>i<span class="pl-k">*</span>t;b[<span class="pl-c1">15</span>]<span class="pl-k">=</span>e<span class="pl-k">*</span>j<span class="pl-k">*</span>m<span class="pl-k">-</span>f<span class="pl-k">*</span>i<span class="pl-k">*</span>m<span class="pl-k">+</span>f<span class="pl-k">*</span>h<span class="pl-k">*</span>n<span class="pl-k">-</span>d<span class="pl-k">*</span>j<span class="pl-k">*</span>n<span class="pl-k">-</span>e<span class="pl-k">*</span>h<span class="pl-k">*</span>p<span class="pl-k">+</span>d<span class="pl-k">*</span>i<span class="pl-k">*</span>p;<span class="pl-c1">this</span>.<span class="pl-en">multiplyScalar</span>(<span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-smi">a</span>.<span class="pl-en">determinant</span>());<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">setRotationFromEuler</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>,d<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>,e<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>,f<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>,g<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(d),d<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(d),h<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(e),e<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(e),i<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(f),f<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L45" class="blob-num js-line-number" data-line-number="45"></td>
        <td id="LC45" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(f);<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">||</span><span class="pl-s"><span class="pl-pds">&quot;</span>XYZ<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>b){<span class="pl-k">var</span> j<span class="pl-k">=</span>g<span class="pl-k">*</span>i,l<span class="pl-k">=</span>g<span class="pl-k">*</span>f,m<span class="pl-k">=</span>d<span class="pl-k">*</span>i,n<span class="pl-k">=</span>d<span class="pl-k">*</span>f;c[<span class="pl-c1">0</span>]<span class="pl-k">=</span>h<span class="pl-k">*</span>i;c[<span class="pl-c1">4</span>]<span class="pl-k">=</span><span class="pl-k">-</span>h<span class="pl-k">*</span>f;c[<span class="pl-c1">8</span>]<span class="pl-k">=</span>e;c[<span class="pl-c1">1</span>]<span class="pl-k">=</span>l<span class="pl-k">+</span>m<span class="pl-k">*</span>e;c[<span class="pl-c1">5</span>]<span class="pl-k">=</span>j<span class="pl-k">-</span>n<span class="pl-k">*</span>e;c[<span class="pl-c1">9</span>]<span class="pl-k">=</span><span class="pl-k">-</span>d<span class="pl-k">*</span>h;c[<span class="pl-c1">2</span>]<span class="pl-k">=</span>n<span class="pl-k">-</span>j<span class="pl-k">*</span>e;c[<span class="pl-c1">6</span>]<span class="pl-k">=</span>m<span class="pl-k">+</span>l<span class="pl-k">*</span>e;c[<span class="pl-c1">10</span>]<span class="pl-k">=</span>g<span class="pl-k">*</span>h}<span class="pl-k">else</span><span class="pl-s"><span class="pl-pds">&quot;</span>YXZ<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>b<span class="pl-k">?</span>(j<span class="pl-k">=</span>h<span class="pl-k">*</span>i,l<span class="pl-k">=</span>h<span class="pl-k">*</span>f,m<span class="pl-k">=</span>e<span class="pl-k">*</span>i,n<span class="pl-k">=</span>e<span class="pl-k">*</span>f,c[<span class="pl-c1">0</span>]<span class="pl-k">=</span>j<span class="pl-k">+</span>n<span class="pl-k">*</span>d,c[<span class="pl-c1">4</span>]<span class="pl-k">=</span>m<span class="pl-k">*</span>d<span class="pl-k">-</span>l,c[<span class="pl-c1">8</span>]<span class="pl-k">=</span>g<span class="pl-k">*</span>e,c[<span class="pl-c1">1</span>]<span class="pl-k">=</span>g<span class="pl-k">*</span>f,c[<span class="pl-c1">5</span>]<span class="pl-k">=</span>g<span class="pl-k">*</span>i,c[<span class="pl-c1">9</span>]<span class="pl-k">=</span><span class="pl-k">-</span>d,c[<span class="pl-c1">2</span>]<span class="pl-k">=</span>l<span class="pl-k">*</span>d<span class="pl-k">-</span>m,c[<span class="pl-c1">6</span>]<span class="pl-k">=</span>n<span class="pl-k">+</span>j<span class="pl-k">*</span>d,c[<span class="pl-c1">10</span>]<span class="pl-k">=</span>g<span class="pl-k">*</span>h)<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>ZXY<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>b<span class="pl-k">?</span>(j<span class="pl-k">=</span>h<span class="pl-k">*</span>i,l<span class="pl-k">=</span>h<span class="pl-k">*</span>f,m<span class="pl-k">=</span>e<span class="pl-k">*</span>i,n<span class="pl-k">=</span>e<span class="pl-k">*</span>f,c[<span class="pl-c1">0</span>]<span class="pl-k">=</span>j<span class="pl-k">-</span>n<span class="pl-k">*</span>d,c[<span class="pl-c1">4</span>]<span class="pl-k">=</span><span class="pl-k">-</span>g<span class="pl-k">*</span>f,c[<span class="pl-c1">8</span>]<span class="pl-k">=</span>m<span class="pl-k">+</span>l<span class="pl-k">*</span>d,c[<span class="pl-c1">1</span>]<span class="pl-k">=</span>l<span class="pl-k">+</span>m<span class="pl-k">*</span>d,c[<span class="pl-c1">5</span>]<span class="pl-k">=</span>g<span class="pl-k">*</span>i,c[<span class="pl-c1">9</span>]<span class="pl-k">=</span>n<span class="pl-k">-</span>j<span class="pl-k">*</span>d,c[<span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-k">-</span>g<span class="pl-k">*</span>e,c[<span class="pl-c1">6</span>]<span class="pl-k">=</span>d,c[<span class="pl-c1">10</span>]<span class="pl-k">=</span>g<span class="pl-k">*</span>h)<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>ZYX<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>b<span class="pl-k">?</span>(j<span class="pl-k">=</span>g<span class="pl-k">*</span>i,l<span class="pl-k">=</span>g<span class="pl-k">*</span>f,m<span class="pl-k">=</span>d<span class="pl-k">*</span>i,n<span class="pl-k">=</span>d<span class="pl-k">*</span>f,c[<span class="pl-c1">0</span>]<span class="pl-k">=</span>h<span class="pl-k">*</span>i,c[<span class="pl-c1">4</span>]<span class="pl-k">=</span>m<span class="pl-k">*</span>e<span class="pl-k">-</span>l,c[<span class="pl-c1">8</span>]<span class="pl-k">=</span>j<span class="pl-k">*</span>e<span class="pl-k">+</span>n,c[<span class="pl-c1">1</span>]<span class="pl-k">=</span>h<span class="pl-k">*</span>f,c[<span class="pl-c1">5</span>]<span class="pl-k">=</span>n<span class="pl-k">*</span>e<span class="pl-k">+</span>j,c[<span class="pl-c1">9</span>]<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L46" class="blob-num js-line-number" data-line-number="46"></td>
        <td id="LC46" class="blob-code blob-code-inner js-file-line">l<span class="pl-k">*</span>e<span class="pl-k">-</span>m,c[<span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-k">-</span>e,c[<span class="pl-c1">6</span>]<span class="pl-k">=</span>d<span class="pl-k">*</span>h,c[<span class="pl-c1">10</span>]<span class="pl-k">=</span>g<span class="pl-k">*</span>h)<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>YZX<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>b<span class="pl-k">?</span>(j<span class="pl-k">=</span>g<span class="pl-k">*</span>h,l<span class="pl-k">=</span>g<span class="pl-k">*</span>e,m<span class="pl-k">=</span>d<span class="pl-k">*</span>h,n<span class="pl-k">=</span>d<span class="pl-k">*</span>e,c[<span class="pl-c1">0</span>]<span class="pl-k">=</span>h<span class="pl-k">*</span>i,c[<span class="pl-c1">4</span>]<span class="pl-k">=</span>n<span class="pl-k">-</span>j<span class="pl-k">*</span>f,c[<span class="pl-c1">8</span>]<span class="pl-k">=</span>m<span class="pl-k">*</span>f<span class="pl-k">+</span>l,c[<span class="pl-c1">1</span>]<span class="pl-k">=</span>f,c[<span class="pl-c1">5</span>]<span class="pl-k">=</span>g<span class="pl-k">*</span>i,c[<span class="pl-c1">9</span>]<span class="pl-k">=</span><span class="pl-k">-</span>d<span class="pl-k">*</span>i,c[<span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-k">-</span>e<span class="pl-k">*</span>i,c[<span class="pl-c1">6</span>]<span class="pl-k">=</span>l<span class="pl-k">*</span>f<span class="pl-k">+</span>m,c[<span class="pl-c1">10</span>]<span class="pl-k">=</span>j<span class="pl-k">-</span>n<span class="pl-k">*</span>f)<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>XZY<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span>(j<span class="pl-k">=</span>g<span class="pl-k">*</span>h,l<span class="pl-k">=</span>g<span class="pl-k">*</span>e,m<span class="pl-k">=</span>d<span class="pl-k">*</span>h,n<span class="pl-k">=</span>d<span class="pl-k">*</span>e,c[<span class="pl-c1">0</span>]<span class="pl-k">=</span>h<span class="pl-k">*</span>i,c[<span class="pl-c1">4</span>]<span class="pl-k">=</span><span class="pl-k">-</span>f,c[<span class="pl-c1">8</span>]<span class="pl-k">=</span>e<span class="pl-k">*</span>i,c[<span class="pl-c1">1</span>]<span class="pl-k">=</span>j<span class="pl-k">*</span>f<span class="pl-k">+</span>n,c[<span class="pl-c1">5</span>]<span class="pl-k">=</span>g<span class="pl-k">*</span>i,c[<span class="pl-c1">9</span>]<span class="pl-k">=</span>l<span class="pl-k">*</span>f<span class="pl-k">-</span>m,c[<span class="pl-c1">2</span>]<span class="pl-k">=</span>m<span class="pl-k">*</span>f<span class="pl-k">-</span>l,c[<span class="pl-c1">6</span>]<span class="pl-k">=</span>d<span class="pl-k">*</span>i,c[<span class="pl-c1">10</span>]<span class="pl-k">=</span>n<span class="pl-k">*</span>f<span class="pl-k">+</span>j);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">setRotationFromQuaternion</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>,c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>,d<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>,e<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>,f<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">w</span>,g<span class="pl-k">=</span>c<span class="pl-k">+</span>c,h<span class="pl-k">=</span>d<span class="pl-k">+</span>d,i<span class="pl-k">=</span>e<span class="pl-k">+</span>e,a<span class="pl-k">=</span>c<span class="pl-k">*</span>g,j<span class="pl-k">=</span>c<span class="pl-k">*</span>h,c<span class="pl-k">=</span>c<span class="pl-k">*</span>i,l<span class="pl-k">=</span>d<span class="pl-k">*</span>h,d<span class="pl-k">=</span>d<span class="pl-k">*</span>i,e<span class="pl-k">=</span>e<span class="pl-k">*</span>i,g<span class="pl-k">=</span>f<span class="pl-k">*</span>g,h<span class="pl-k">=</span>f<span class="pl-k">*</span>h,f<span class="pl-k">=</span>f<span class="pl-k">*</span>i;b[<span class="pl-c1">0</span>]<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">-</span>(l<span class="pl-k">+</span>e);b[<span class="pl-c1">4</span>]<span class="pl-k">=</span>j<span class="pl-k">-</span>f;b[<span class="pl-c1">8</span>]<span class="pl-k">=</span>c<span class="pl-k">+</span>h;b[<span class="pl-c1">1</span>]<span class="pl-k">=</span>j<span class="pl-k">+</span>f;b[<span class="pl-c1">5</span>]<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">-</span>(a<span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L47" class="blob-num js-line-number" data-line-number="47"></td>
        <td id="LC47" class="blob-code blob-code-inner js-file-line">e);b[<span class="pl-c1">9</span>]<span class="pl-k">=</span>d<span class="pl-k">-</span>g;b[<span class="pl-c1">2</span>]<span class="pl-k">=</span>c<span class="pl-k">-</span>h;b[<span class="pl-c1">6</span>]<span class="pl-k">=</span>d<span class="pl-k">+</span>g;b[<span class="pl-c1">10</span>]<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">-</span>(a<span class="pl-k">+</span>l);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">compose</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>,e<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Matrix4</span>.<span class="pl-smi">__m1</span>,f<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Matrix4</span>.<span class="pl-smi">__m2</span>;<span class="pl-smi">e</span>.<span class="pl-en">identity</span>();<span class="pl-smi">e</span>.<span class="pl-en">setRotationFromQuaternion</span>(b);<span class="pl-smi">f</span>.<span class="pl-en">makeScale</span>(<span class="pl-smi">c</span>.<span class="pl-c1">x</span>,<span class="pl-smi">c</span>.<span class="pl-c1">y</span>,<span class="pl-smi">c</span>.<span class="pl-c1">z</span>);<span class="pl-c1">this</span>.<span class="pl-en">multiply</span>(e,f);d[<span class="pl-c1">12</span>]<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>;d[<span class="pl-c1">13</span>]<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>;d[<span class="pl-c1">14</span>]<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">decompose</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>,e<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Matrix4</span>.<span class="pl-smi">__v1</span>,f<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Matrix4</span>.<span class="pl-smi">__v2</span>,g<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Matrix4</span>.<span class="pl-smi">__v3</span>;<span class="pl-smi">e</span>.<span class="pl-c1">set</span>(d[<span class="pl-c1">0</span>],d[<span class="pl-c1">1</span>],d[<span class="pl-c1">2</span>]);<span class="pl-smi">f</span>.<span class="pl-c1">set</span>(d[<span class="pl-c1">4</span>],d[<span class="pl-c1">5</span>],d[<span class="pl-c1">6</span>]);<span class="pl-smi">g</span>.<span class="pl-c1">set</span>(d[<span class="pl-c1">8</span>],d[<span class="pl-c1">9</span>],d[<span class="pl-c1">10</span>]);a<span class="pl-k">=</span>a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Vector3</span><span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;b<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L48" class="blob-num js-line-number" data-line-number="48"></td>
        <td id="LC48" class="blob-code blob-code-inner js-file-line">b <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Quaternion</span><span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Quaternion</span>;c<span class="pl-k">=</span>c <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Vector3</span><span class="pl-k">?</span>c<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-c1">length</span>();<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">length</span>();<span class="pl-smi">c</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-c1">length</span>();<span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>d[<span class="pl-c1">12</span>];<span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>d[<span class="pl-c1">13</span>];<span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>d[<span class="pl-c1">14</span>];d<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Matrix4</span>.<span class="pl-smi">__m1</span>;<span class="pl-smi">d</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>);<span class="pl-smi">d</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">0</span>]<span class="pl-k">/=</span><span class="pl-smi">c</span>.<span class="pl-c1">x</span>;<span class="pl-smi">d</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">1</span>]<span class="pl-k">/=</span><span class="pl-smi">c</span>.<span class="pl-c1">x</span>;<span class="pl-smi">d</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">2</span>]<span class="pl-k">/=</span><span class="pl-smi">c</span>.<span class="pl-c1">x</span>;<span class="pl-smi">d</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">4</span>]<span class="pl-k">/=</span><span class="pl-smi">c</span>.<span class="pl-c1">y</span>;<span class="pl-smi">d</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">5</span>]<span class="pl-k">/=</span><span class="pl-smi">c</span>.<span class="pl-c1">y</span>;<span class="pl-smi">d</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">6</span>]<span class="pl-k">/=</span><span class="pl-smi">c</span>.<span class="pl-c1">y</span>;<span class="pl-smi">d</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">8</span>]<span class="pl-k">/=</span><span class="pl-smi">c</span>.<span class="pl-c1">z</span>;<span class="pl-smi">d</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">9</span>]<span class="pl-k">/=</span><span class="pl-smi">c</span>.<span class="pl-c1">z</span>;<span class="pl-smi">d</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">10</span>]<span class="pl-k">/=</span><span class="pl-smi">c</span>.<span class="pl-c1">z</span>;<span class="pl-smi">b</span>.<span class="pl-en">setFromRotationMatrix</span>(d);<span class="pl-k">return</span>[a,b,c]},<span class="pl-en">extractPosition</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>,a<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">elements</span>;b[<span class="pl-c1">12</span>]<span class="pl-k">=</span>a[<span class="pl-c1">12</span>];b[<span class="pl-c1">13</span>]<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L49" class="blob-num js-line-number" data-line-number="49"></td>
        <td id="LC49" class="blob-code blob-code-inner js-file-line">a[<span class="pl-c1">13</span>];b[<span class="pl-c1">14</span>]<span class="pl-k">=</span>a[<span class="pl-c1">14</span>];<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">extractRotation</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>,a<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">elements</span>,c<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Matrix4</span>.<span class="pl-smi">__v1</span>,d<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-smi">c</span>.<span class="pl-c1">set</span>(a[<span class="pl-c1">0</span>],a[<span class="pl-c1">1</span>],a[<span class="pl-c1">2</span>]).<span class="pl-c1">length</span>(),e<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-smi">c</span>.<span class="pl-c1">set</span>(a[<span class="pl-c1">4</span>],a[<span class="pl-c1">5</span>],a[<span class="pl-c1">6</span>]).<span class="pl-c1">length</span>(),c<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-smi">c</span>.<span class="pl-c1">set</span>(a[<span class="pl-c1">8</span>],a[<span class="pl-c1">9</span>],a[<span class="pl-c1">10</span>]).<span class="pl-c1">length</span>();b[<span class="pl-c1">0</span>]<span class="pl-k">=</span>a[<span class="pl-c1">0</span>]<span class="pl-k">*</span>d;b[<span class="pl-c1">1</span>]<span class="pl-k">=</span>a[<span class="pl-c1">1</span>]<span class="pl-k">*</span>d;b[<span class="pl-c1">2</span>]<span class="pl-k">=</span>a[<span class="pl-c1">2</span>]<span class="pl-k">*</span>d;b[<span class="pl-c1">4</span>]<span class="pl-k">=</span>a[<span class="pl-c1">4</span>]<span class="pl-k">*</span>e;b[<span class="pl-c1">5</span>]<span class="pl-k">=</span>a[<span class="pl-c1">5</span>]<span class="pl-k">*</span>e;b[<span class="pl-c1">6</span>]<span class="pl-k">=</span>a[<span class="pl-c1">6</span>]<span class="pl-k">*</span>e;b[<span class="pl-c1">8</span>]<span class="pl-k">=</span>a[<span class="pl-c1">8</span>]<span class="pl-k">*</span>c;b[<span class="pl-c1">9</span>]<span class="pl-k">=</span>a[<span class="pl-c1">9</span>]<span class="pl-k">*</span>c;b[<span class="pl-c1">10</span>]<span class="pl-k">=</span>a[<span class="pl-c1">10</span>]<span class="pl-k">*</span>c;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">translate</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>,c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>,d<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>,a<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>;b[<span class="pl-c1">12</span>]<span class="pl-k">=</span>b[<span class="pl-c1">0</span>]<span class="pl-k">*</span>c<span class="pl-k">+</span>b[<span class="pl-c1">4</span>]<span class="pl-k">*</span>d<span class="pl-k">+</span>b[<span class="pl-c1">8</span>]<span class="pl-k">*</span>a<span class="pl-k">+</span>b[<span class="pl-c1">12</span>];b[<span class="pl-c1">13</span>]<span class="pl-k">=</span>b[<span class="pl-c1">1</span>]<span class="pl-k">*</span>c<span class="pl-k">+</span>b[<span class="pl-c1">5</span>]<span class="pl-k">*</span>d<span class="pl-k">+</span>b[<span class="pl-c1">9</span>]<span class="pl-k">*</span>a<span class="pl-k">+</span>b[<span class="pl-c1">13</span>];b[<span class="pl-c1">14</span>]<span class="pl-k">=</span>b[<span class="pl-c1">2</span>]<span class="pl-k">*</span>c<span class="pl-k">+</span>b[<span class="pl-c1">6</span>]<span class="pl-k">*</span>d<span class="pl-k">+</span>b[<span class="pl-c1">10</span>]<span class="pl-k">*</span>a<span class="pl-k">+</span>b[<span class="pl-c1">14</span>];</td>
      </tr>
      <tr>
        <td id="L50" class="blob-num js-line-number" data-line-number="50"></td>
        <td id="LC50" class="blob-code blob-code-inner js-file-line">b[<span class="pl-c1">15</span>]<span class="pl-k">=</span>b[<span class="pl-c1">3</span>]<span class="pl-k">*</span>c<span class="pl-k">+</span>b[<span class="pl-c1">7</span>]<span class="pl-k">*</span>d<span class="pl-k">+</span>b[<span class="pl-c1">11</span>]<span class="pl-k">*</span>a<span class="pl-k">+</span>b[<span class="pl-c1">15</span>];<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">rotateX</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>,c<span class="pl-k">=</span>b[<span class="pl-c1">4</span>],d<span class="pl-k">=</span>b[<span class="pl-c1">5</span>],e<span class="pl-k">=</span>b[<span class="pl-c1">6</span>],f<span class="pl-k">=</span>b[<span class="pl-c1">7</span>],g<span class="pl-k">=</span>b[<span class="pl-c1">8</span>],h<span class="pl-k">=</span>b[<span class="pl-c1">9</span>],i<span class="pl-k">=</span>b[<span class="pl-c1">10</span>],j<span class="pl-k">=</span>b[<span class="pl-c1">11</span>],l<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(a),a<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(a);b[<span class="pl-c1">4</span>]<span class="pl-k">=</span>l<span class="pl-k">*</span>c<span class="pl-k">+</span>a<span class="pl-k">*</span>g;b[<span class="pl-c1">5</span>]<span class="pl-k">=</span>l<span class="pl-k">*</span>d<span class="pl-k">+</span>a<span class="pl-k">*</span>h;b[<span class="pl-c1">6</span>]<span class="pl-k">=</span>l<span class="pl-k">*</span>e<span class="pl-k">+</span>a<span class="pl-k">*</span>i;b[<span class="pl-c1">7</span>]<span class="pl-k">=</span>l<span class="pl-k">*</span>f<span class="pl-k">+</span>a<span class="pl-k">*</span>j;b[<span class="pl-c1">8</span>]<span class="pl-k">=</span>l<span class="pl-k">*</span>g<span class="pl-k">-</span>a<span class="pl-k">*</span>c;b[<span class="pl-c1">9</span>]<span class="pl-k">=</span>l<span class="pl-k">*</span>h<span class="pl-k">-</span>a<span class="pl-k">*</span>d;b[<span class="pl-c1">10</span>]<span class="pl-k">=</span>l<span class="pl-k">*</span>i<span class="pl-k">-</span>a<span class="pl-k">*</span>e;b[<span class="pl-c1">11</span>]<span class="pl-k">=</span>l<span class="pl-k">*</span>j<span class="pl-k">-</span>a<span class="pl-k">*</span>f;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">rotateY</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>,c<span class="pl-k">=</span>b[<span class="pl-c1">0</span>],d<span class="pl-k">=</span>b[<span class="pl-c1">1</span>],e<span class="pl-k">=</span>b[<span class="pl-c1">2</span>],f<span class="pl-k">=</span>b[<span class="pl-c1">3</span>],g<span class="pl-k">=</span>b[<span class="pl-c1">8</span>],h<span class="pl-k">=</span>b[<span class="pl-c1">9</span>],i<span class="pl-k">=</span>b[<span class="pl-c1">10</span>],j<span class="pl-k">=</span>b[<span class="pl-c1">11</span>],l<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(a),a<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(a);b[<span class="pl-c1">0</span>]<span class="pl-k">=</span>l<span class="pl-k">*</span>c<span class="pl-k">-</span>a<span class="pl-k">*</span>g;b[<span class="pl-c1">1</span>]<span class="pl-k">=</span>l<span class="pl-k">*</span>d<span class="pl-k">-</span>a<span class="pl-k">*</span>h;b[<span class="pl-c1">2</span>]<span class="pl-k">=</span>l<span class="pl-k">*</span>e<span class="pl-k">-</span>a<span class="pl-k">*</span>i;b[<span class="pl-c1">3</span>]<span class="pl-k">=</span>l<span class="pl-k">*</span>f<span class="pl-k">-</span>a<span class="pl-k">*</span>j;b[<span class="pl-c1">8</span>]<span class="pl-k">=</span>l<span class="pl-k">*</span>g<span class="pl-k">+</span>a<span class="pl-k">*</span>c;b[<span class="pl-c1">9</span>]<span class="pl-k">=</span>l<span class="pl-k">*</span>h<span class="pl-k">+</span>a<span class="pl-k">*</span>d;b[<span class="pl-c1">10</span>]<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L51" class="blob-num js-line-number" data-line-number="51"></td>
        <td id="LC51" class="blob-code blob-code-inner js-file-line">l<span class="pl-k">*</span>i<span class="pl-k">+</span>a<span class="pl-k">*</span>e;b[<span class="pl-c1">11</span>]<span class="pl-k">=</span>l<span class="pl-k">*</span>j<span class="pl-k">+</span>a<span class="pl-k">*</span>f;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">rotateZ</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>,c<span class="pl-k">=</span>b[<span class="pl-c1">0</span>],d<span class="pl-k">=</span>b[<span class="pl-c1">1</span>],e<span class="pl-k">=</span>b[<span class="pl-c1">2</span>],f<span class="pl-k">=</span>b[<span class="pl-c1">3</span>],g<span class="pl-k">=</span>b[<span class="pl-c1">4</span>],h<span class="pl-k">=</span>b[<span class="pl-c1">5</span>],i<span class="pl-k">=</span>b[<span class="pl-c1">6</span>],j<span class="pl-k">=</span>b[<span class="pl-c1">7</span>],l<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(a),a<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(a);b[<span class="pl-c1">0</span>]<span class="pl-k">=</span>l<span class="pl-k">*</span>c<span class="pl-k">+</span>a<span class="pl-k">*</span>g;b[<span class="pl-c1">1</span>]<span class="pl-k">=</span>l<span class="pl-k">*</span>d<span class="pl-k">+</span>a<span class="pl-k">*</span>h;b[<span class="pl-c1">2</span>]<span class="pl-k">=</span>l<span class="pl-k">*</span>e<span class="pl-k">+</span>a<span class="pl-k">*</span>i;b[<span class="pl-c1">3</span>]<span class="pl-k">=</span>l<span class="pl-k">*</span>f<span class="pl-k">+</span>a<span class="pl-k">*</span>j;b[<span class="pl-c1">4</span>]<span class="pl-k">=</span>l<span class="pl-k">*</span>g<span class="pl-k">-</span>a<span class="pl-k">*</span>c;b[<span class="pl-c1">5</span>]<span class="pl-k">=</span>l<span class="pl-k">*</span>h<span class="pl-k">-</span>a<span class="pl-k">*</span>d;b[<span class="pl-c1">6</span>]<span class="pl-k">=</span>l<span class="pl-k">*</span>i<span class="pl-k">-</span>a<span class="pl-k">*</span>e;b[<span class="pl-c1">7</span>]<span class="pl-k">=</span>l<span class="pl-k">*</span>j<span class="pl-k">-</span>a<span class="pl-k">*</span>f;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">rotateByAxis</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>;<span class="pl-k">if</span>(<span class="pl-c1">1</span><span class="pl-k">===</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>)<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">rotateX</span>(b);<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">1</span><span class="pl-k">===</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>)<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">rotateY</span>(b);<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">1</span><span class="pl-k">===</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>)<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">rotateZ</span>(b);<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>,e<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>,f<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>,</td>
      </tr>
      <tr>
        <td id="L52" class="blob-num js-line-number" data-line-number="52"></td>
        <td id="LC52" class="blob-code blob-code-inner js-file-line">g<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(d<span class="pl-k">*</span>d<span class="pl-k">+</span>e<span class="pl-k">*</span>e<span class="pl-k">+</span>f<span class="pl-k">*</span>f),d<span class="pl-k">=</span>d<span class="pl-k">/</span>g,e<span class="pl-k">=</span>e<span class="pl-k">/</span>g,f<span class="pl-k">=</span>f<span class="pl-k">/</span>g,g<span class="pl-k">=</span>d<span class="pl-k">*</span>d,h<span class="pl-k">=</span>e<span class="pl-k">*</span>e,i<span class="pl-k">=</span>f<span class="pl-k">*</span>f,j<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(b),l<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(b),m<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">-</span>j,n<span class="pl-k">=</span>d<span class="pl-k">*</span>e<span class="pl-k">*</span>m,p<span class="pl-k">=</span>d<span class="pl-k">*</span>f<span class="pl-k">*</span>m,m<span class="pl-k">=</span>e<span class="pl-k">*</span>f<span class="pl-k">*</span>m,d<span class="pl-k">=</span>d<span class="pl-k">*</span>l,o<span class="pl-k">=</span>e<span class="pl-k">*</span>l,l<span class="pl-k">=</span>f<span class="pl-k">*</span>l,f<span class="pl-k">=</span>g<span class="pl-k">+</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>g)<span class="pl-k">*</span>j,g<span class="pl-k">=</span>n<span class="pl-k">+</span>l,e<span class="pl-k">=</span>p<span class="pl-k">-</span>o,n<span class="pl-k">=</span>n<span class="pl-k">-</span>l,h<span class="pl-k">=</span>h<span class="pl-k">+</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>h)<span class="pl-k">*</span>j,l<span class="pl-k">=</span>m<span class="pl-k">+</span>d,p<span class="pl-k">=</span>p<span class="pl-k">+</span>o,m<span class="pl-k">=</span>m<span class="pl-k">-</span>d,i<span class="pl-k">=</span>i<span class="pl-k">+</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>i)<span class="pl-k">*</span>j,j<span class="pl-k">=</span>c[<span class="pl-c1">0</span>],d<span class="pl-k">=</span>c[<span class="pl-c1">1</span>],o<span class="pl-k">=</span>c[<span class="pl-c1">2</span>],q<span class="pl-k">=</span>c[<span class="pl-c1">3</span>],r<span class="pl-k">=</span>c[<span class="pl-c1">4</span>],t<span class="pl-k">=</span>c[<span class="pl-c1">5</span>],<span class="pl-c1">B</span><span class="pl-k">=</span>c[<span class="pl-c1">6</span>],u<span class="pl-k">=</span>c[<span class="pl-c1">7</span>],s<span class="pl-k">=</span>c[<span class="pl-c1">8</span>],z<span class="pl-k">=</span>c[<span class="pl-c1">9</span>],<span class="pl-c1">A</span><span class="pl-k">=</span>c[<span class="pl-c1">10</span>],v<span class="pl-k">=</span>c[<span class="pl-c1">11</span>];c[<span class="pl-c1">0</span>]<span class="pl-k">=</span>f<span class="pl-k">*</span>j<span class="pl-k">+</span>g<span class="pl-k">*</span>r<span class="pl-k">+</span>e<span class="pl-k">*</span>s;c[<span class="pl-c1">1</span>]<span class="pl-k">=</span>f<span class="pl-k">*</span>d<span class="pl-k">+</span>g<span class="pl-k">*</span>t<span class="pl-k">+</span>e<span class="pl-k">*</span>z;c[<span class="pl-c1">2</span>]<span class="pl-k">=</span>f<span class="pl-k">*</span>o<span class="pl-k">+</span>g<span class="pl-k">*</span><span class="pl-c1">B</span><span class="pl-k">+</span>e<span class="pl-k">*</span><span class="pl-c1">A</span>;c[<span class="pl-c1">3</span>]<span class="pl-k">=</span>f<span class="pl-k">*</span>q<span class="pl-k">+</span>g<span class="pl-k">*</span>u<span class="pl-k">+</span>e<span class="pl-k">*</span>v;c[<span class="pl-c1">4</span>]<span class="pl-k">=</span>n<span class="pl-k">*</span>j<span class="pl-k">+</span>h<span class="pl-k">*</span>r<span class="pl-k">+</span>l<span class="pl-k">*</span>s;c[<span class="pl-c1">5</span>]<span class="pl-k">=</span>n<span class="pl-k">*</span>d<span class="pl-k">+</span>h<span class="pl-k">*</span>t<span class="pl-k">+</span>l<span class="pl-k">*</span>z;c[<span class="pl-c1">6</span>]<span class="pl-k">=</span>n<span class="pl-k">*</span>o<span class="pl-k">+</span>h<span class="pl-k">*</span><span class="pl-c1">B</span><span class="pl-k">+</span>l<span class="pl-k">*</span><span class="pl-c1">A</span>;c[<span class="pl-c1">7</span>]<span class="pl-k">=</span>n<span class="pl-k">*</span>q<span class="pl-k">+</span>h<span class="pl-k">*</span>u<span class="pl-k">+</span>l<span class="pl-k">*</span>v;c[<span class="pl-c1">8</span>]<span class="pl-k">=</span>p<span class="pl-k">*</span>j<span class="pl-k">+</span>m<span class="pl-k">*</span>r<span class="pl-k">+</span>i<span class="pl-k">*</span>s;c[<span class="pl-c1">9</span>]<span class="pl-k">=</span>p<span class="pl-k">*</span>d<span class="pl-k">+</span>m<span class="pl-k">*</span>t<span class="pl-k">+</span>i<span class="pl-k">*</span>z;c[<span class="pl-c1">10</span>]<span class="pl-k">=</span>p<span class="pl-k">*</span>o<span class="pl-k">+</span>m<span class="pl-k">*</span><span class="pl-c1">B</span><span class="pl-k">+</span>i<span class="pl-k">*</span><span class="pl-c1">A</span>;c[<span class="pl-c1">11</span>]<span class="pl-k">=</span>p<span class="pl-k">*</span>q<span class="pl-k">+</span>m<span class="pl-k">*</span>u<span class="pl-k">+</span>i<span class="pl-k">*</span>v;</td>
      </tr>
      <tr>
        <td id="L53" class="blob-num js-line-number" data-line-number="53"></td>
        <td id="LC53" class="blob-code blob-code-inner js-file-line"><span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">scale</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>,c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>,d<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>,a<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>;b[<span class="pl-c1">0</span>]<span class="pl-k">*=</span>c;b[<span class="pl-c1">4</span>]<span class="pl-k">*=</span>d;b[<span class="pl-c1">8</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">1</span>]<span class="pl-k">*=</span>c;b[<span class="pl-c1">5</span>]<span class="pl-k">*=</span>d;b[<span class="pl-c1">9</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">2</span>]<span class="pl-k">*=</span>c;b[<span class="pl-c1">6</span>]<span class="pl-k">*=</span>d;b[<span class="pl-c1">10</span>]<span class="pl-k">*=</span>a;b[<span class="pl-c1">3</span>]<span class="pl-k">*=</span>c;b[<span class="pl-c1">7</span>]<span class="pl-k">*=</span>d;b[<span class="pl-c1">11</span>]<span class="pl-k">*=</span>a;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">getMaxScaleOnAxis</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>;<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(a[<span class="pl-c1">0</span>]<span class="pl-k">*</span>a[<span class="pl-c1">0</span>]<span class="pl-k">+</span>a[<span class="pl-c1">1</span>]<span class="pl-k">*</span>a[<span class="pl-c1">1</span>]<span class="pl-k">+</span>a[<span class="pl-c1">2</span>]<span class="pl-k">*</span>a[<span class="pl-c1">2</span>],<span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(a[<span class="pl-c1">4</span>]<span class="pl-k">*</span>a[<span class="pl-c1">4</span>]<span class="pl-k">+</span>a[<span class="pl-c1">5</span>]<span class="pl-k">*</span>a[<span class="pl-c1">5</span>]<span class="pl-k">+</span>a[<span class="pl-c1">6</span>]<span class="pl-k">*</span>a[<span class="pl-c1">6</span>],a[<span class="pl-c1">8</span>]<span class="pl-k">*</span>a[<span class="pl-c1">8</span>]<span class="pl-k">+</span>a[<span class="pl-c1">9</span>]<span class="pl-k">*</span>a[<span class="pl-c1">9</span>]<span class="pl-k">+</span>a[<span class="pl-c1">10</span>]<span class="pl-k">*</span>a[<span class="pl-c1">10</span>])))},<span class="pl-en">makeTranslation</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">this</span>.<span class="pl-c1">set</span>(<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,a,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,b,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,c,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">makeRotationX</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(a),a<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(a);</td>
      </tr>
      <tr>
        <td id="L54" class="blob-num js-line-number" data-line-number="54"></td>
        <td id="LC54" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-c1">set</span>(<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,b,<span class="pl-k">-</span>a,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,a,b,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">makeRotationY</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(a),a<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(a);<span class="pl-c1">this</span>.<span class="pl-c1">set</span>(b,<span class="pl-c1">0</span>,a,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-k">-</span>a,<span class="pl-c1">0</span>,b,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">makeRotationZ</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(a),a<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(a);<span class="pl-c1">this</span>.<span class="pl-c1">set</span>(b,<span class="pl-k">-</span>a,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,a,b,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">makeRotationAxis</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(b),d<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(b),e<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">-</span>c,f<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>,g<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>,h<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>,i<span class="pl-k">=</span>e<span class="pl-k">*</span>f,j<span class="pl-k">=</span>e<span class="pl-k">*</span>g;<span class="pl-c1">this</span>.<span class="pl-c1">set</span>(i<span class="pl-k">*</span>f<span class="pl-k">+</span>c,i<span class="pl-k">*</span>g<span class="pl-k">-</span>d<span class="pl-k">*</span>h,i<span class="pl-k">*</span>h<span class="pl-k">+</span>d<span class="pl-k">*</span>g,<span class="pl-c1">0</span>,i<span class="pl-k">*</span>g<span class="pl-k">+</span>d<span class="pl-k">*</span>h,j<span class="pl-k">*</span>g<span class="pl-k">+</span>c,j<span class="pl-k">*</span>h<span class="pl-k">-</span>d<span class="pl-k">*</span>f,<span class="pl-c1">0</span>,i<span class="pl-k">*</span>h<span class="pl-k">-</span>d<span class="pl-k">*</span>g,j<span class="pl-k">*</span>h<span class="pl-k">+</span>d<span class="pl-k">*</span>f,e<span class="pl-k">*</span>h<span class="pl-k">*</span>h<span class="pl-k">+</span>c,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">makeScale</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,</td>
      </tr>
      <tr>
        <td id="L55" class="blob-num js-line-number" data-line-number="55"></td>
        <td id="LC55" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">this</span>.<span class="pl-c1">set</span>(a,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,b,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,c,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">makeFrustum</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>;g[<span class="pl-c1">0</span>]<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">*</span>e<span class="pl-k">/</span>(b<span class="pl-k">-</span>a);g[<span class="pl-c1">4</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;g[<span class="pl-c1">8</span>]<span class="pl-k">=</span>(b<span class="pl-k">+</span>a)<span class="pl-k">/</span>(b<span class="pl-k">-</span>a);g[<span class="pl-c1">12</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;g[<span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;g[<span class="pl-c1">5</span>]<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">*</span>e<span class="pl-k">/</span>(d<span class="pl-k">-</span>c);g[<span class="pl-c1">9</span>]<span class="pl-k">=</span>(d<span class="pl-k">+</span>c)<span class="pl-k">/</span>(d<span class="pl-k">-</span>c);g[<span class="pl-c1">13</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;g[<span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;g[<span class="pl-c1">6</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;g[<span class="pl-c1">10</span>]<span class="pl-k">=</span><span class="pl-k">-</span>(f<span class="pl-k">+</span>e)<span class="pl-k">/</span>(f<span class="pl-k">-</span>e);g[<span class="pl-c1">14</span>]<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">*</span>f<span class="pl-k">*</span>e<span class="pl-k">/</span>(f<span class="pl-k">-</span>e);g[<span class="pl-c1">3</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;g[<span class="pl-c1">7</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;g[<span class="pl-c1">11</span>]<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">1</span>;g[<span class="pl-c1">15</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">makePerspective</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">var</span> a<span class="pl-k">=</span>c<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">tan</span>(a<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span><span class="pl-k">/</span><span class="pl-c1">360</span>),e<span class="pl-k">=</span><span class="pl-k">-</span>a;<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">makeFrustum</span>(e<span class="pl-k">*</span>b,a<span class="pl-k">*</span>b,e,a,c,d)},<span class="pl-en">makeOrthographic</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>,h<span class="pl-k">=</span>b<span class="pl-k">-</span>a,i<span class="pl-k">=</span>c<span class="pl-k">-</span>d,j<span class="pl-k">=</span>f<span class="pl-k">-</span>e;g[<span class="pl-c1">0</span>]<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">/</span></td>
      </tr>
      <tr>
        <td id="L56" class="blob-num js-line-number" data-line-number="56"></td>
        <td id="LC56" class="blob-code blob-code-inner js-file-line">h;g[<span class="pl-c1">4</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;g[<span class="pl-c1">8</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;g[<span class="pl-c1">12</span>]<span class="pl-k">=</span><span class="pl-k">-</span>((b<span class="pl-k">+</span>a)<span class="pl-k">/</span>h);g[<span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;g[<span class="pl-c1">5</span>]<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">/</span>i;g[<span class="pl-c1">9</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;g[<span class="pl-c1">13</span>]<span class="pl-k">=</span><span class="pl-k">-</span>((c<span class="pl-k">+</span>d)<span class="pl-k">/</span>i);g[<span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;g[<span class="pl-c1">6</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;g[<span class="pl-c1">10</span>]<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">/</span>j;g[<span class="pl-c1">14</span>]<span class="pl-k">=</span><span class="pl-k">-</span>((f<span class="pl-k">+</span>e)<span class="pl-k">/</span>j);g[<span class="pl-c1">3</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;g[<span class="pl-c1">7</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;g[<span class="pl-c1">11</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;g[<span class="pl-c1">15</span>]<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">elements</span>;<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>(a[<span class="pl-c1">0</span>],a[<span class="pl-c1">4</span>],a[<span class="pl-c1">8</span>],a[<span class="pl-c1">12</span>],a[<span class="pl-c1">1</span>],a[<span class="pl-c1">5</span>],a[<span class="pl-c1">9</span>],a[<span class="pl-c1">13</span>],a[<span class="pl-c1">2</span>],a[<span class="pl-c1">6</span>],a[<span class="pl-c1">10</span>],a[<span class="pl-c1">14</span>],a[<span class="pl-c1">3</span>],a[<span class="pl-c1">7</span>],a[<span class="pl-c1">11</span>],a[<span class="pl-c1">15</span>])}};<span class="pl-c1">THREE</span>.<span class="pl-smi">Matrix4</span>.<span class="pl-smi">__v1</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">Matrix4</span>.<span class="pl-smi">__v2</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">Matrix4</span>.<span class="pl-smi">__v3</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">Matrix4</span>.<span class="pl-smi">__m1</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">Matrix4</span>.<span class="pl-smi">__m2</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>;</td>
      </tr>
      <tr>
        <td id="L57" class="blob-num js-line-number" data-line-number="57"></td>
        <td id="LC57" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">EventTarget</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span>{};<span class="pl-c1">this</span>.<span class="pl-en">addEventListener</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a[b]<span class="pl-k">&amp;&amp;</span>(a[b]<span class="pl-k">=</span>[]);<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">===</span>a[b].<span class="pl-c1">indexOf</span>(c)<span class="pl-k">&amp;&amp;</span>a[b].<span class="pl-c1">push</span>(c)};<span class="pl-c1">this</span>.<span class="pl-en">dispatchEvent</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> c <span class="pl-k">in</span> a[<span class="pl-smi">b</span>.<span class="pl-c1">type</span>])a[<span class="pl-smi">b</span>.<span class="pl-c1">type</span>][c](b)};<span class="pl-c1">this</span>.<span class="pl-en">removeEventListener</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span>a[b].<span class="pl-c1">indexOf</span>(c);<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">!==</span>d<span class="pl-k">&amp;&amp;</span>a[b].<span class="pl-c1">splice</span>(d,<span class="pl-c1">1</span>)}};<span class="pl-c1">THREE</span>.<span class="pl-en">Frustum</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">planes</span><span class="pl-k">=</span>[<span class="pl-k">new</span> <span class="pl-en">THREE.Vector4</span>,<span class="pl-k">new</span> <span class="pl-en">THREE.Vector4</span>,<span class="pl-k">new</span> <span class="pl-en">THREE.Vector4</span>,<span class="pl-k">new</span> <span class="pl-en">THREE.Vector4</span>,<span class="pl-k">new</span> <span class="pl-en">THREE.Vector4</span>,<span class="pl-k">new</span> <span class="pl-en">THREE.Vector4</span>]};</td>
      </tr>
      <tr>
        <td id="L58" class="blob-num js-line-number" data-line-number="58"></td>
        <td id="LC58" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Frustum</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setFromMatrix</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">planes</span>,c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">elements</span>,a<span class="pl-k">=</span>c[<span class="pl-c1">0</span>],d<span class="pl-k">=</span>c[<span class="pl-c1">1</span>],e<span class="pl-k">=</span>c[<span class="pl-c1">2</span>],f<span class="pl-k">=</span>c[<span class="pl-c1">3</span>],g<span class="pl-k">=</span>c[<span class="pl-c1">4</span>],h<span class="pl-k">=</span>c[<span class="pl-c1">5</span>],i<span class="pl-k">=</span>c[<span class="pl-c1">6</span>],j<span class="pl-k">=</span>c[<span class="pl-c1">7</span>],l<span class="pl-k">=</span>c[<span class="pl-c1">8</span>],m<span class="pl-k">=</span>c[<span class="pl-c1">9</span>],n<span class="pl-k">=</span>c[<span class="pl-c1">10</span>],p<span class="pl-k">=</span>c[<span class="pl-c1">11</span>],o<span class="pl-k">=</span>c[<span class="pl-c1">12</span>],q<span class="pl-k">=</span>c[<span class="pl-c1">13</span>],r<span class="pl-k">=</span>c[<span class="pl-c1">14</span>],c<span class="pl-k">=</span>c[<span class="pl-c1">15</span>];b[<span class="pl-c1">0</span>].<span class="pl-c1">set</span>(f<span class="pl-k">-</span>a,j<span class="pl-k">-</span>g,p<span class="pl-k">-</span>l,c<span class="pl-k">-</span>o);b[<span class="pl-c1">1</span>].<span class="pl-c1">set</span>(f<span class="pl-k">+</span>a,j<span class="pl-k">+</span>g,p<span class="pl-k">+</span>l,c<span class="pl-k">+</span>o);b[<span class="pl-c1">2</span>].<span class="pl-c1">set</span>(f<span class="pl-k">+</span>d,j<span class="pl-k">+</span>h,p<span class="pl-k">+</span>m,c<span class="pl-k">+</span>q);b[<span class="pl-c1">3</span>].<span class="pl-c1">set</span>(f<span class="pl-k">-</span>d,j<span class="pl-k">-</span>h,p<span class="pl-k">-</span>m,c<span class="pl-k">-</span>q);b[<span class="pl-c1">4</span>].<span class="pl-c1">set</span>(f<span class="pl-k">-</span>e,j<span class="pl-k">-</span>i,p<span class="pl-k">-</span>n,c<span class="pl-k">-</span>r);b[<span class="pl-c1">5</span>].<span class="pl-c1">set</span>(f<span class="pl-k">+</span>e,j<span class="pl-k">+</span>i,p<span class="pl-k">+</span>n,c<span class="pl-k">+</span>r);<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">6</span><span class="pl-k">&gt;</span>d;d<span class="pl-k">++</span>)a<span class="pl-k">=</span>b[d],<span class="pl-smi">a</span>.<span class="pl-en">divideScalar</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>))};</td>
      </tr>
      <tr>
        <td id="L59" class="blob-num js-line-number" data-line-number="59"></td>
        <td id="LC59" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Frustum</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">contains</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>,c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">planes</span>,b<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">matrixWorld</span>,d<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">elements</span>,a<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-smi">a</span>.<span class="pl-smi">geometry</span>.<span class="pl-smi">boundingSphere</span>.<span class="pl-smi">radius</span><span class="pl-k">*</span><span class="pl-smi">b</span>.<span class="pl-en">getMaxScaleOnAxis</span>(),e<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">6</span><span class="pl-k">&gt;</span>e;e<span class="pl-k">++</span>)<span class="pl-k">if</span>(b<span class="pl-k">=</span>c[e].<span class="pl-c1">x</span><span class="pl-k">*</span>d[<span class="pl-c1">12</span>]<span class="pl-k">+</span>c[e].<span class="pl-c1">y</span><span class="pl-k">*</span>d[<span class="pl-c1">13</span>]<span class="pl-k">+</span>c[e].<span class="pl-c1">z</span><span class="pl-k">*</span>d[<span class="pl-c1">14</span>]<span class="pl-k">+</span>c[e].<span class="pl-smi">w</span>,b<span class="pl-k">&lt;=</span>a)<span class="pl-k">return</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-k">return</span><span class="pl-k">!</span><span class="pl-c1">0</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">Frustum</span>.<span class="pl-smi">__v1</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;</td>
      </tr>
      <tr>
        <td id="L60" class="blob-num js-line-number" data-line-number="60"></td>
        <td id="LC60" class="blob-code blob-code-inner js-file-line">(<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-smi">a</span>.<span class="pl-en">Ray</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){<span class="pl-c1">this</span>.<span class="pl-smi">origin</span><span class="pl-k">=</span>b<span class="pl-k">||</span><span class="pl-k">new</span> <span class="pl-en">a.Vector3</span>;<span class="pl-c1">this</span>.<span class="pl-smi">direction</span><span class="pl-k">=</span>c<span class="pl-k">||</span><span class="pl-k">new</span> <span class="pl-en">a.Vector3</span>;<span class="pl-c1">this</span>.<span class="pl-smi">near</span><span class="pl-k">=</span>d<span class="pl-k">||</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">far</span><span class="pl-k">=</span>e<span class="pl-k">||</span><span class="pl-c1">Infinity</span>};<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">a.Vector3</span>,c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">a.Vector3</span>,d<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">a.Vector3</span>,e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">a.Vector3</span>,f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">a.Vector3</span>,g<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">a.Vector3</span>,h<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">a.Matrix4</span>,<span class="pl-en">i</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-smi">a</span>.<span class="pl-smi">distance</span><span class="pl-k">-</span><span class="pl-smi">b</span>.<span class="pl-smi">distance</span>},j<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">a.Vector3</span>,l<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">a.Vector3</span>,m<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">a.Vector3</span>,<span class="pl-en">n</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-smi">j</span>.<span class="pl-c1">sub</span>(c,a);<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-en">dot</span>(b),a<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-c1">add</span>(a,<span class="pl-smi">m</span>.<span class="pl-en">copy</span>(b).<span class="pl-en">multiplyScalar</span>(d));<span class="pl-k">return</span> <span class="pl-smi">c</span>.<span class="pl-en">distanceTo</span>(a)},<span class="pl-en">p</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-smi">j</span>.<span class="pl-c1">sub</span>(d,b);<span class="pl-smi">l</span>.<span class="pl-c1">sub</span>(c,b);<span class="pl-smi">m</span>.<span class="pl-c1">sub</span>(a,</td>
      </tr>
      <tr>
        <td id="L61" class="blob-num js-line-number" data-line-number="61"></td>
        <td id="LC61" class="blob-code blob-code-inner js-file-line">b);<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-en">dot</span>(j),b<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-en">dot</span>(l),c<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-en">dot</span>(m),e<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-en">dot</span>(l),d<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-en">dot</span>(m),f<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>(a<span class="pl-k">*</span>e<span class="pl-k">-</span>b<span class="pl-k">*</span>b),e<span class="pl-k">=</span>(e<span class="pl-k">*</span>c<span class="pl-k">-</span>b<span class="pl-k">*</span>d)<span class="pl-k">*</span>f,a<span class="pl-k">=</span>(a<span class="pl-k">*</span>d<span class="pl-k">-</span>b<span class="pl-k">*</span>c)<span class="pl-k">*</span>f;<span class="pl-k">return</span> <span class="pl-c1">0</span><span class="pl-k">&lt;=</span>e<span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">&lt;=</span>a<span class="pl-k">&amp;&amp;</span><span class="pl-c1">1</span><span class="pl-k">&gt;</span>e<span class="pl-k">+</span>a},<span class="pl-en">o</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">i</span>,<span class="pl-smi">l</span>,<span class="pl-smi">j</span>){<span class="pl-k">var</span> m,o;<span class="pl-k">if</span>(i <span class="pl-k">instanceof</span> <span class="pl-smi">a</span>.<span class="pl-smi">Particle</span>){m<span class="pl-k">=</span><span class="pl-en">n</span>(<span class="pl-smi">l</span>.<span class="pl-smi">origin</span>,<span class="pl-smi">l</span>.<span class="pl-smi">direction</span>,<span class="pl-smi">i</span>.<span class="pl-smi">matrixWorld</span>.<span class="pl-en">getPosition</span>());<span class="pl-k">if</span>(m<span class="pl-k">&gt;</span><span class="pl-smi">i</span>.<span class="pl-smi">scale</span>.<span class="pl-c1">x</span>)<span class="pl-k">return</span> j;o<span class="pl-k">=</span>{distance<span class="pl-k">:</span>m,point<span class="pl-k">:</span><span class="pl-smi">i</span>.<span class="pl-smi">position</span>,face<span class="pl-k">:</span><span class="pl-c1">null</span>,object<span class="pl-k">:</span>i};<span class="pl-smi">j</span>.<span class="pl-c1">push</span>(o)}<span class="pl-k">else</span> <span class="pl-k">if</span>(i <span class="pl-k">instanceof</span> <span class="pl-smi">a</span>.<span class="pl-smi">Mesh</span>){<span class="pl-k">var</span> q<span class="pl-k">=</span><span class="pl-smi">i</span>.<span class="pl-smi">geometry</span>.<span class="pl-smi">boundingSphere</span>.<span class="pl-smi">radius</span><span class="pl-k">*</span><span class="pl-smi">i</span>.<span class="pl-smi">matrixWorld</span>.<span class="pl-en">getMaxScaleOnAxis</span>();m<span class="pl-k">=</span><span class="pl-en">n</span>(<span class="pl-smi">l</span>.<span class="pl-smi">origin</span>,<span class="pl-smi">l</span>.<span class="pl-smi">direction</span>,<span class="pl-smi">i</span>.<span class="pl-smi">matrixWorld</span>.<span class="pl-en">getPosition</span>());<span class="pl-k">if</span>(m<span class="pl-k">&gt;</span>q)<span class="pl-k">return</span> j;<span class="pl-k">var</span> <span class="pl-c1">A</span>,</td>
      </tr>
      <tr>
        <td id="L62" class="blob-num js-line-number" data-line-number="62"></td>
        <td id="LC62" class="blob-code blob-code-inner js-file-line">v,y<span class="pl-k">=</span><span class="pl-smi">i</span>.<span class="pl-smi">geometry</span>,<span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-smi">vertices</span>,<span class="pl-c1">G</span>,<span class="pl-c1">H</span>,<span class="pl-c1">J</span>;<span class="pl-c1">G</span><span class="pl-k">=</span><span class="pl-smi">i</span>.<span class="pl-smi">geometry</span>.<span class="pl-smi">materials</span>;<span class="pl-c1">H</span><span class="pl-k">=</span><span class="pl-smi">i</span>.<span class="pl-smi">material</span> <span class="pl-k">instanceof</span> <span class="pl-smi">a</span>.<span class="pl-smi">MeshFaceMaterial</span>;<span class="pl-k">var</span> <span class="pl-c1">E</span>,<span class="pl-c1">M</span><span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">precision</span>;<span class="pl-smi">i</span>.<span class="pl-smi">matrixRotationWorld</span>.<span class="pl-en">extractRotation</span>(<span class="pl-smi">i</span>.<span class="pl-smi">matrixWorld</span>);<span class="pl-smi">b</span>.<span class="pl-en">copy</span>(<span class="pl-smi">l</span>.<span class="pl-smi">origin</span>);<span class="pl-smi">h</span>.<span class="pl-en">getInverse</span>(<span class="pl-smi">i</span>.<span class="pl-smi">matrixWorld</span>);<span class="pl-smi">c</span>.<span class="pl-en">copy</span>(b);<span class="pl-smi">h</span>.<span class="pl-en">multiplyVector3</span>(c);<span class="pl-smi">d</span>.<span class="pl-en">copy</span>(<span class="pl-smi">l</span>.<span class="pl-smi">direction</span>);<span class="pl-smi">h</span>.<span class="pl-en">rotateAxis</span>(d).<span class="pl-c1">normalize</span>();q<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">A</span><span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">length</span>;q<span class="pl-k">&lt;</span><span class="pl-c1">A</span>;q<span class="pl-k">++</span>)<span class="pl-k">if</span>(o<span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-smi">faces</span>[q],m<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-c1">H</span><span class="pl-k">?</span><span class="pl-c1">G</span>[<span class="pl-smi">o</span>.<span class="pl-smi">materialIndex</span>]<span class="pl-k">:</span><span class="pl-smi">i</span>.<span class="pl-smi">material</span>,<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>m<span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-smi">side</span>,<span class="pl-smi">e</span>.<span class="pl-c1">sub</span>(<span class="pl-smi">o</span>.<span class="pl-smi">centroid</span>,c),f<span class="pl-k">=</span><span class="pl-smi">o</span>.<span class="pl-smi">normal</span>,m<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-en">dot</span>(f),<span class="pl-k">!</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(m)<span class="pl-k">&lt;</span><span class="pl-c1">M</span>)<span class="pl-k">&amp;&amp;</span>(v<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-en">dot</span>(e)<span class="pl-k">/</span>m,<span class="pl-k">!</span>(<span class="pl-c1">0</span><span class="pl-k">&gt;</span>v)<span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">J</span><span class="pl-k">===</span><span class="pl-smi">a</span>.<span class="pl-smi">DoubleSide</span><span class="pl-k">||</span></td>
      </tr>
      <tr>
        <td id="L63" class="blob-num js-line-number" data-line-number="63"></td>
        <td id="LC63" class="blob-code blob-code-inner js-file-line">(<span class="pl-c1">J</span><span class="pl-k">===</span><span class="pl-smi">a</span>.<span class="pl-smi">FrontSide</span><span class="pl-k">?</span><span class="pl-c1">0</span><span class="pl-k">&gt;</span>m<span class="pl-k">:</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span>m)))))<span class="pl-k">if</span>(<span class="pl-smi">g</span>.<span class="pl-c1">add</span>(c,<span class="pl-smi">d</span>.<span class="pl-en">multiplyScalar</span>(v)),o <span class="pl-k">instanceof</span> <span class="pl-smi">a</span>.<span class="pl-smi">Face3</span>)m<span class="pl-k">=</span><span class="pl-c1">C</span>[<span class="pl-smi">o</span>.<span class="pl-smi">a</span>],v<span class="pl-k">=</span><span class="pl-c1">C</span>[<span class="pl-smi">o</span>.<span class="pl-smi">b</span>],<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-c1">C</span>[<span class="pl-smi">o</span>.<span class="pl-smi">c</span>],<span class="pl-en">p</span>(g,m,v,<span class="pl-c1">J</span>)<span class="pl-k">&amp;&amp;</span>(v<span class="pl-k">=</span><span class="pl-smi">i</span>.<span class="pl-smi">matrixWorld</span>.<span class="pl-en">multiplyVector3</span>(<span class="pl-smi">g</span>.<span class="pl-en">clone</span>()),m<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">distanceTo</span>(v),m<span class="pl-k">&lt;</span><span class="pl-smi">l</span>.<span class="pl-smi">near</span><span class="pl-k">||</span>m<span class="pl-k">&gt;</span><span class="pl-smi">l</span>.<span class="pl-smi">far</span><span class="pl-k">||</span>(o<span class="pl-k">=</span>{distance<span class="pl-k">:</span>m,point<span class="pl-k">:</span>v,face<span class="pl-k">:</span>o,faceIndex<span class="pl-k">:</span>q,object<span class="pl-k">:</span>i},<span class="pl-smi">j</span>.<span class="pl-c1">push</span>(o)));<span class="pl-k">else</span> <span class="pl-k">if</span>(o <span class="pl-k">instanceof</span> <span class="pl-smi">a</span>.<span class="pl-smi">Face4</span><span class="pl-k">&amp;&amp;</span>(m<span class="pl-k">=</span><span class="pl-c1">C</span>[<span class="pl-smi">o</span>.<span class="pl-smi">a</span>],v<span class="pl-k">=</span><span class="pl-c1">C</span>[<span class="pl-smi">o</span>.<span class="pl-smi">b</span>],<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-c1">C</span>[<span class="pl-smi">o</span>.<span class="pl-smi">c</span>],<span class="pl-c1">E</span><span class="pl-k">=</span><span class="pl-c1">C</span>[<span class="pl-smi">o</span>.<span class="pl-smi">d</span>],<span class="pl-en">p</span>(g,m,v,<span class="pl-c1">E</span>)<span class="pl-k">||</span><span class="pl-en">p</span>(g,v,<span class="pl-c1">J</span>,<span class="pl-c1">E</span>)))v<span class="pl-k">=</span><span class="pl-smi">i</span>.<span class="pl-smi">matrixWorld</span>.<span class="pl-en">multiplyVector3</span>(<span class="pl-smi">g</span>.<span class="pl-en">clone</span>()),m<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">distanceTo</span>(v),m<span class="pl-k">&lt;</span><span class="pl-smi">l</span>.<span class="pl-smi">near</span><span class="pl-k">||</span>m<span class="pl-k">&gt;</span><span class="pl-smi">l</span>.<span class="pl-smi">far</span><span class="pl-k">||</span>(o<span class="pl-k">=</span>{distance<span class="pl-k">:</span>m,point<span class="pl-k">:</span>v,face<span class="pl-k">:</span>o,faceIndex<span class="pl-k">:</span>q,object<span class="pl-k">:</span>i},<span class="pl-smi">j</span>.<span class="pl-c1">push</span>(o))}},</td>
      </tr>
      <tr>
        <td id="L64" class="blob-num js-line-number" data-line-number="64"></td>
        <td id="LC64" class="blob-code blob-code-inner js-file-line"><span class="pl-en">q</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-en">getDescendants</span>(),d<span class="pl-k">=</span><span class="pl-c1">0</span>,e<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>;d<span class="pl-k">&lt;</span>e;d<span class="pl-k">++</span>)<span class="pl-en">o</span>(a[d],b,c)};<span class="pl-smi">a</span>.<span class="pl-smi">Ray</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">precision</span><span class="pl-k">=</span><span class="pl-c1">1E-4</span>;<span class="pl-smi">a</span>.<span class="pl-smi">Ray</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">set</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-smi">origin</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">direction</span><span class="pl-k">=</span>b};<span class="pl-smi">a</span>.<span class="pl-smi">Ray</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">intersectObject</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span>[];<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span><span class="pl-en">q</span>(a,<span class="pl-c1">this</span>,c);<span class="pl-en">o</span>(a,<span class="pl-c1">this</span>,c);<span class="pl-smi">c</span>.<span class="pl-c1">sort</span>(i);<span class="pl-k">return</span> c};<span class="pl-smi">a</span>.<span class="pl-smi">Ray</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">intersectObjects</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span>[],d<span class="pl-k">=</span><span class="pl-c1">0</span>,e<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>;d<span class="pl-k">&lt;</span>e;d<span class="pl-k">++</span>)<span class="pl-en">o</span>(a[d],<span class="pl-c1">this</span>,c),<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span><span class="pl-en">q</span>(a[d],<span class="pl-c1">this</span>,c);<span class="pl-smi">c</span>.<span class="pl-c1">sort</span>(i);<span class="pl-k">return</span> c}})(<span class="pl-c1">THREE</span>);</td>
      </tr>
      <tr>
        <td id="L65" class="blob-num js-line-number" data-line-number="65"></td>
        <td id="LC65" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">Rectangle</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">function</span> <span class="pl-en">a</span>(){f<span class="pl-k">=</span>d<span class="pl-k">-</span>b;g<span class="pl-k">=</span>e<span class="pl-k">-</span>c}<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>,c<span class="pl-k">=</span><span class="pl-c1">0</span>,d<span class="pl-k">=</span><span class="pl-c1">0</span>,e<span class="pl-k">=</span><span class="pl-c1">0</span>,f<span class="pl-k">=</span><span class="pl-c1">0</span>,g<span class="pl-k">=</span><span class="pl-c1">0</span>,h<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-en">getX</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> b};<span class="pl-c1">this</span>.<span class="pl-en">getY</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> c};<span class="pl-c1">this</span>.<span class="pl-en">getWidth</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> f};<span class="pl-c1">this</span>.<span class="pl-en">getHeight</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> g};<span class="pl-c1">this</span>.<span class="pl-en">getLeft</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> b};<span class="pl-c1">this</span>.<span class="pl-en">getTop</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> c};<span class="pl-c1">this</span>.<span class="pl-en">getRight</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> d};<span class="pl-c1">this</span>.<span class="pl-en">getBottom</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> e};<span class="pl-c1">this</span>.<span class="pl-en">set</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">f</span>,<span class="pl-smi">g</span>,<span class="pl-smi">l</span>,<span class="pl-smi">m</span>){h<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;b<span class="pl-k">=</span>f;c<span class="pl-k">=</span>g;d<span class="pl-k">=</span>l;e<span class="pl-k">=</span>m;<span class="pl-en">a</span>()};<span class="pl-c1">this</span>.<span class="pl-en">addPoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">f</span>,<span class="pl-smi">g</span>){<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span>h<span class="pl-k">?</span>(h<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>,b<span class="pl-k">=</span>f,c<span class="pl-k">=</span>g,d<span class="pl-k">=</span>f,e<span class="pl-k">=</span>g)<span class="pl-k">:</span>(b<span class="pl-k">=</span>b<span class="pl-k">&lt;</span>f<span class="pl-k">?</span>b<span class="pl-k">:</span>f,c<span class="pl-k">=</span>c<span class="pl-k">&lt;</span>g<span class="pl-k">?</span>c<span class="pl-k">:</span>g,d<span class="pl-k">=</span>d<span class="pl-k">&gt;</span>f<span class="pl-k">?</span>d<span class="pl-k">:</span>f,e<span class="pl-k">=</span>e<span class="pl-k">&gt;</span></td>
      </tr>
      <tr>
        <td id="L66" class="blob-num js-line-number" data-line-number="66"></td>
        <td id="LC66" class="blob-code blob-code-inner js-file-line">g<span class="pl-k">?</span>e<span class="pl-k">:</span>g);<span class="pl-en">a</span>()};<span class="pl-c1">this</span>.<span class="pl-en">add3Points</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">f</span>,<span class="pl-smi">g</span>,<span class="pl-smi">l</span>,<span class="pl-smi">m</span>,<span class="pl-smi">n</span>,<span class="pl-smi">p</span>){<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span>h<span class="pl-k">?</span>(h<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>,b<span class="pl-k">=</span>f<span class="pl-k">&lt;</span>l<span class="pl-k">?</span>f<span class="pl-k">&lt;</span>n<span class="pl-k">?</span>f<span class="pl-k">:</span>n<span class="pl-k">:</span>l<span class="pl-k">&lt;</span>n<span class="pl-k">?</span>l<span class="pl-k">:</span>n,c<span class="pl-k">=</span>g<span class="pl-k">&lt;</span>m<span class="pl-k">?</span>g<span class="pl-k">&lt;</span>p<span class="pl-k">?</span>g<span class="pl-k">:</span>p<span class="pl-k">:</span>m<span class="pl-k">&lt;</span>p<span class="pl-k">?</span>m<span class="pl-k">:</span>p,d<span class="pl-k">=</span>f<span class="pl-k">&gt;</span>l<span class="pl-k">?</span>f<span class="pl-k">&gt;</span>n<span class="pl-k">?</span>f<span class="pl-k">:</span>n<span class="pl-k">:</span>l<span class="pl-k">&gt;</span>n<span class="pl-k">?</span>l<span class="pl-k">:</span>n,e<span class="pl-k">=</span>g<span class="pl-k">&gt;</span>m<span class="pl-k">?</span>g<span class="pl-k">&gt;</span>p<span class="pl-k">?</span>g<span class="pl-k">:</span>p<span class="pl-k">:</span>m<span class="pl-k">&gt;</span>p<span class="pl-k">?</span>m<span class="pl-k">:</span>p)<span class="pl-k">:</span>(b<span class="pl-k">=</span>f<span class="pl-k">&lt;</span>l<span class="pl-k">?</span>f<span class="pl-k">&lt;</span>n<span class="pl-k">?</span>f<span class="pl-k">&lt;</span>b<span class="pl-k">?</span>f<span class="pl-k">:</span>b<span class="pl-k">:</span>n<span class="pl-k">&lt;</span>b<span class="pl-k">?</span>n<span class="pl-k">:</span>b<span class="pl-k">:</span>l<span class="pl-k">&lt;</span>n<span class="pl-k">?</span>l<span class="pl-k">&lt;</span>b<span class="pl-k">?</span>l<span class="pl-k">:</span>b<span class="pl-k">:</span>n<span class="pl-k">&lt;</span>b<span class="pl-k">?</span>n<span class="pl-k">:</span>b,c<span class="pl-k">=</span>g<span class="pl-k">&lt;</span>m<span class="pl-k">?</span>g<span class="pl-k">&lt;</span>p<span class="pl-k">?</span>g<span class="pl-k">&lt;</span>c<span class="pl-k">?</span>g<span class="pl-k">:</span>c<span class="pl-k">:</span>p<span class="pl-k">&lt;</span>c<span class="pl-k">?</span>p<span class="pl-k">:</span>c<span class="pl-k">:</span>m<span class="pl-k">&lt;</span>p<span class="pl-k">?</span>m<span class="pl-k">&lt;</span>c<span class="pl-k">?</span>m<span class="pl-k">:</span>c<span class="pl-k">:</span>p<span class="pl-k">&lt;</span>c<span class="pl-k">?</span>p<span class="pl-k">:</span>c,d<span class="pl-k">=</span>f<span class="pl-k">&gt;</span>l<span class="pl-k">?</span>f<span class="pl-k">&gt;</span>n<span class="pl-k">?</span>f<span class="pl-k">&gt;</span>d<span class="pl-k">?</span>f<span class="pl-k">:</span>d<span class="pl-k">:</span>n<span class="pl-k">&gt;</span>d<span class="pl-k">?</span>n<span class="pl-k">:</span>d<span class="pl-k">:</span>l<span class="pl-k">&gt;</span>n<span class="pl-k">?</span>l<span class="pl-k">&gt;</span>d<span class="pl-k">?</span>l<span class="pl-k">:</span>d<span class="pl-k">:</span>n<span class="pl-k">&gt;</span>d<span class="pl-k">?</span>n<span class="pl-k">:</span>d,e<span class="pl-k">=</span>g<span class="pl-k">&gt;</span>m<span class="pl-k">?</span>g<span class="pl-k">&gt;</span>p<span class="pl-k">?</span>g<span class="pl-k">&gt;</span>e<span class="pl-k">?</span>g<span class="pl-k">:</span>e<span class="pl-k">:</span>p<span class="pl-k">&gt;</span>e<span class="pl-k">?</span>p<span class="pl-k">:</span>e<span class="pl-k">:</span>m<span class="pl-k">&gt;</span>p<span class="pl-k">?</span>m<span class="pl-k">&gt;</span>e<span class="pl-k">?</span>m<span class="pl-k">:</span>e<span class="pl-k">:</span>p<span class="pl-k">&gt;</span>e<span class="pl-k">?</span>p<span class="pl-k">:</span>e);<span class="pl-en">a</span>()};<span class="pl-c1">this</span>.<span class="pl-en">addRectangle</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">f</span>){<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span>h<span class="pl-k">?</span>(h<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>,b<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-en">getLeft</span>(),c<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-en">getTop</span>(),d<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-en">getRight</span>(),e<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-en">getBottom</span>())<span class="pl-k">:</span>(b<span class="pl-k">=</span>b<span class="pl-k">&lt;</span><span class="pl-smi">f</span>.<span class="pl-en">getLeft</span>()<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-smi">f</span>.<span class="pl-en">getLeft</span>(),c<span class="pl-k">=</span>c<span class="pl-k">&lt;</span><span class="pl-smi">f</span>.<span class="pl-en">getTop</span>()<span class="pl-k">?</span>c<span class="pl-k">:</span><span class="pl-smi">f</span>.<span class="pl-en">getTop</span>(),</td>
      </tr>
      <tr>
        <td id="L67" class="blob-num js-line-number" data-line-number="67"></td>
        <td id="LC67" class="blob-code blob-code-inner js-file-line">d<span class="pl-k">=</span>d<span class="pl-k">&gt;</span><span class="pl-smi">f</span>.<span class="pl-en">getRight</span>()<span class="pl-k">?</span>d<span class="pl-k">:</span><span class="pl-smi">f</span>.<span class="pl-en">getRight</span>(),e<span class="pl-k">=</span>e<span class="pl-k">&gt;</span><span class="pl-smi">f</span>.<span class="pl-en">getBottom</span>()<span class="pl-k">?</span>e<span class="pl-k">:</span><span class="pl-smi">f</span>.<span class="pl-en">getBottom</span>());<span class="pl-en">a</span>()};<span class="pl-c1">this</span>.<span class="pl-en">inflate</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">f</span>){b<span class="pl-k">-=</span>f;c<span class="pl-k">-=</span>f;d<span class="pl-k">+=</span>f;e<span class="pl-k">+=</span>f;<span class="pl-en">a</span>()};<span class="pl-c1">this</span>.<span class="pl-en">minSelf</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">f</span>){b<span class="pl-k">=</span>b<span class="pl-k">&gt;</span><span class="pl-smi">f</span>.<span class="pl-en">getLeft</span>()<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-smi">f</span>.<span class="pl-en">getLeft</span>();c<span class="pl-k">=</span>c<span class="pl-k">&gt;</span><span class="pl-smi">f</span>.<span class="pl-en">getTop</span>()<span class="pl-k">?</span>c<span class="pl-k">:</span><span class="pl-smi">f</span>.<span class="pl-en">getTop</span>();d<span class="pl-k">=</span>d<span class="pl-k">&lt;</span><span class="pl-smi">f</span>.<span class="pl-en">getRight</span>()<span class="pl-k">?</span>d<span class="pl-k">:</span><span class="pl-smi">f</span>.<span class="pl-en">getRight</span>();e<span class="pl-k">=</span>e<span class="pl-k">&lt;</span><span class="pl-smi">f</span>.<span class="pl-en">getBottom</span>()<span class="pl-k">?</span>e<span class="pl-k">:</span><span class="pl-smi">f</span>.<span class="pl-en">getBottom</span>();<span class="pl-en">a</span>()};<span class="pl-c1">this</span>.<span class="pl-en">intersects</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> d<span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-en">getLeft</span>()<span class="pl-k">||</span>b<span class="pl-k">&gt;</span><span class="pl-smi">a</span>.<span class="pl-en">getRight</span>()<span class="pl-k">||</span>e<span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-en">getTop</span>()<span class="pl-k">||</span>c<span class="pl-k">&gt;</span><span class="pl-smi">a</span>.<span class="pl-en">getBottom</span>()<span class="pl-k">?</span><span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">0</span>};<span class="pl-c1">this</span>.<span class="pl-en">empty</span><span class="pl-k">=</span><span class="pl-k">function</span>(){h<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;e<span class="pl-k">=</span>d<span class="pl-k">=</span>c<span class="pl-k">=</span>b<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-en">a</span>()};<span class="pl-c1">this</span>.<span class="pl-en">isEmpty</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> h}};</td>
      </tr>
      <tr>
        <td id="L68" class="blob-num js-line-number" data-line-number="68"></td>
        <td id="LC68" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Math</span><span class="pl-k">=</span>{<span class="pl-en">clamp</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">return</span> a<span class="pl-k">&lt;</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span>a<span class="pl-k">&gt;</span>c<span class="pl-k">?</span>c<span class="pl-k">:</span>a},<span class="pl-en">clampBottom</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> a<span class="pl-k">&lt;</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span>a},<span class="pl-en">mapLinear</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){<span class="pl-k">return</span> d<span class="pl-k">+</span>(a<span class="pl-k">-</span>b)<span class="pl-k">*</span>(e<span class="pl-k">-</span>d)<span class="pl-k">/</span>(c<span class="pl-k">-</span>b)},<span class="pl-en">random16</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-c1">65280</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">random</span>()<span class="pl-k">+</span><span class="pl-c1">255</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">random</span>())<span class="pl-k">/</span><span class="pl-c1">65535</span>},<span class="pl-en">randInt</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> a<span class="pl-k">+</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">random</span>()<span class="pl-k">*</span>(b<span class="pl-k">-</span>a<span class="pl-k">+</span><span class="pl-c1">1</span>))},<span class="pl-en">randFloat</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> a<span class="pl-k">+</span><span class="pl-c1">Math</span>.<span class="pl-c1">random</span>()<span class="pl-k">*</span>(b<span class="pl-k">-</span>a)},<span class="pl-en">randFloatSpread</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> a<span class="pl-k">*</span>(<span class="pl-c1">0.5</span><span class="pl-k">-</span><span class="pl-c1">Math</span>.<span class="pl-c1">random</span>())},<span class="pl-en">sign</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">0</span><span class="pl-k">&gt;</span>a<span class="pl-k">?</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span>a<span class="pl-k">?</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">0</span>}};</td>
      </tr>
      <tr>
        <td id="L69" class="blob-num js-line-number" data-line-number="69"></td>
        <td id="LC69" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">Object3D</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3DLibrary</span>.<span class="pl-c1">push</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-c1">id</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Object3DIdCount</span><span class="pl-k">++</span>;<span class="pl-c1">this</span>.<span class="pl-c1">name</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-smi">properties</span><span class="pl-k">=</span>{};<span class="pl-c1">this</span>.<span class="pl-c1">parent</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">children</span><span class="pl-k">=</span>[];<span class="pl-c1">this</span>.<span class="pl-smi">up</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>);<span class="pl-c1">this</span>.<span class="pl-smi">position</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-c1">this</span>.<span class="pl-smi">rotation</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-c1">this</span>.<span class="pl-smi">eulerOrder</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-smi">defaultEulerOrder</span>;<span class="pl-c1">this</span>.<span class="pl-smi">scale</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>);<span class="pl-c1">this</span>.<span class="pl-smi">renderDepth</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">rotationAutoUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">matrix</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>;<span class="pl-c1">this</span>.<span class="pl-smi">matrixWorld</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>;<span class="pl-c1">this</span>.<span class="pl-smi">matrixRotationWorld</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>;<span class="pl-c1">this</span>.<span class="pl-smi">matrixWorldNeedsUpdate</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L70" class="blob-num js-line-number" data-line-number="70"></td>
        <td id="LC70" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">matrixAutoUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">quaternion</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Quaternion</span>;<span class="pl-c1">this</span>.<span class="pl-smi">useQuaternion</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">boundRadius</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">boundRadiusScale</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">visible</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">receiveShadow</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">castShadow</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">frustumCulled</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">_vector</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>};</td>
      </tr>
      <tr>
        <td id="L71" class="blob-num js-line-number" data-line-number="71"></td>
        <td id="LC71" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.Object3D,applyMatrix:<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">matrix</span>.<span class="pl-en">multiply</span>(a,<span class="pl-c1">this</span>.<span class="pl-smi">matrix</span>);<span class="pl-c1">this</span>.<span class="pl-smi">scale</span>.<span class="pl-en">getScaleFromMatrix</span>(<span class="pl-c1">this</span>.<span class="pl-smi">matrix</span>);a<span class="pl-k">=</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>).<span class="pl-en">extractRotation</span>(<span class="pl-c1">this</span>.<span class="pl-smi">matrix</span>);<span class="pl-c1">this</span>.<span class="pl-smi">rotation</span>.<span class="pl-en">setEulerFromRotationMatrix</span>(a,<span class="pl-c1">this</span>.<span class="pl-smi">eulerOrder</span>);<span class="pl-c1">this</span>.<span class="pl-smi">position</span>.<span class="pl-en">getPositionFromMatrix</span>(<span class="pl-c1">this</span>.<span class="pl-smi">matrix</span>)},<span class="pl-en">translate</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-smi">matrix</span>.<span class="pl-en">rotateAxis</span>(b);<span class="pl-c1">this</span>.<span class="pl-smi">position</span>.<span class="pl-en">addSelf</span>(<span class="pl-smi">b</span>.<span class="pl-en">multiplyScalar</span>(a))},<span class="pl-en">translateX</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-en">translate</span>(a,<span class="pl-c1">this</span>.<span class="pl-smi">_vector</span>.<span class="pl-c1">set</span>(<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>))},<span class="pl-en">translateY</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-en">translate</span>(a,</td>
      </tr>
      <tr>
        <td id="L72" class="blob-num js-line-number" data-line-number="72"></td>
        <td id="LC72" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">_vector</span>.<span class="pl-c1">set</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>))},<span class="pl-en">translateZ</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-en">translate</span>(a,<span class="pl-c1">this</span>.<span class="pl-smi">_vector</span>.<span class="pl-c1">set</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>))},<span class="pl-en">localToWorld</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">matrixWorld</span>.<span class="pl-en">multiplyVector3</span>(a)},<span class="pl-en">worldToLocal</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-smi">__m1</span>.<span class="pl-en">getInverse</span>(<span class="pl-c1">this</span>.<span class="pl-smi">matrixWorld</span>).<span class="pl-en">multiplyVector3</span>(a)},<span class="pl-en">lookAt</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">matrix</span>.<span class="pl-en">lookAt</span>(a,<span class="pl-c1">this</span>.<span class="pl-smi">position</span>,<span class="pl-c1">this</span>.<span class="pl-smi">up</span>);<span class="pl-c1">this</span>.<span class="pl-smi">rotationAutoUpdate</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">rotation</span>.<span class="pl-en">setEulerFromRotationMatrix</span>(<span class="pl-c1">this</span>.<span class="pl-smi">matrix</span>,<span class="pl-c1">this</span>.<span class="pl-smi">eulerOrder</span>)},<span class="pl-en">add</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">this</span>)<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Object3D.add: An object can&#39;t be added as a child of itself.<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L73" class="blob-num js-line-number" data-line-number="73"></td>
        <td id="LC73" class="blob-code blob-code-inner js-file-line"><span class="pl-k">else</span> <span class="pl-k">if</span>(a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-c1">parent</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">a</span>.<span class="pl-c1">parent</span>.<span class="pl-c1">remove</span>(a);<span class="pl-smi">a</span>.<span class="pl-c1">parent</span><span class="pl-k">=</span><span class="pl-c1">this</span>;<span class="pl-c1">this</span>.<span class="pl-smi">children</span>.<span class="pl-c1">push</span>(a);<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>;<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">b</span>.<span class="pl-c1">parent</span>;)b<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">parent</span>;<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">&amp;&amp;</span>b <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Scene</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">b</span>.<span class="pl-en">__addObject</span>(a)}},<span class="pl-en">remove</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">children</span>.<span class="pl-c1">indexOf</span>(a);<span class="pl-k">if</span>(<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">!==</span>b){<span class="pl-smi">a</span>.<span class="pl-c1">parent</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">children</span>.<span class="pl-c1">splice</span>(b,<span class="pl-c1">1</span>);<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">this</span>;<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">b</span>.<span class="pl-c1">parent</span>;)b<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">parent</span>;<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">&amp;&amp;</span>b <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Scene</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">b</span>.<span class="pl-en">__removeObject</span>(a)}},<span class="pl-en">traverse</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">a</span>(<span class="pl-c1">this</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>,c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">children</span>.<span class="pl-c1">length</span>;b<span class="pl-k">&lt;</span>c;b<span class="pl-k">++</span>)<span class="pl-c1">this</span>.<span class="pl-smi">children</span>[b].<span class="pl-en">traverse</span>(a)},</td>
      </tr>
      <tr>
        <td id="L74" class="blob-num js-line-number" data-line-number="74"></td>
        <td id="LC74" class="blob-code blob-code-inner js-file-line"><span class="pl-en">getChildByName</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">0</span>,d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">children</span>.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>d;c<span class="pl-k">++</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">children</span>[c];<span class="pl-k">if</span>(<span class="pl-smi">e</span>.<span class="pl-c1">name</span><span class="pl-k">===</span>a<span class="pl-k">||!</span><span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span>(e<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-en">getChildByName</span>(a,b),<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>e))<span class="pl-k">return</span> e}},<span class="pl-en">getDescendants</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span>[]);<span class="pl-c1">Array</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">push</span>.<span class="pl-c1">apply</span>(a,<span class="pl-c1">this</span>.<span class="pl-smi">children</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>,c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">children</span>.<span class="pl-c1">length</span>;b<span class="pl-k">&lt;</span>c;b<span class="pl-k">++</span>)<span class="pl-c1">this</span>.<span class="pl-smi">children</span>[b].<span class="pl-en">getDescendants</span>(a);<span class="pl-k">return</span> a},<span class="pl-en">updateMatrix</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">matrix</span>.<span class="pl-en">setPosition</span>(<span class="pl-c1">this</span>.<span class="pl-smi">position</span>);<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-smi">useQuaternion</span><span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-smi">matrix</span>.<span class="pl-en">setRotationFromEuler</span>(<span class="pl-c1">this</span>.<span class="pl-smi">rotation</span>,<span class="pl-c1">this</span>.<span class="pl-smi">eulerOrder</span>)<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-smi">matrix</span>.<span class="pl-en">setRotationFromQuaternion</span>(<span class="pl-c1">this</span>.<span class="pl-smi">quaternion</span>);</td>
      </tr>
      <tr>
        <td id="L75" class="blob-num js-line-number" data-line-number="75"></td>
        <td id="LC75" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span>(<span class="pl-c1">1</span><span class="pl-k">!==</span><span class="pl-c1">this</span>.<span class="pl-smi">scale</span>.<span class="pl-c1">x</span><span class="pl-k">||</span><span class="pl-c1">1</span><span class="pl-k">!==</span><span class="pl-c1">this</span>.<span class="pl-smi">scale</span>.<span class="pl-c1">y</span><span class="pl-k">||</span><span class="pl-c1">1</span><span class="pl-k">!==</span><span class="pl-c1">this</span>.<span class="pl-smi">scale</span>.<span class="pl-c1">z</span>)<span class="pl-c1">this</span>.<span class="pl-smi">matrix</span>.<span class="pl-en">scale</span>(<span class="pl-c1">this</span>.<span class="pl-smi">scale</span>),<span class="pl-c1">this</span>.<span class="pl-smi">boundRadiusScale</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-c1">this</span>.<span class="pl-smi">scale</span>.<span class="pl-c1">x</span>,<span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-c1">this</span>.<span class="pl-smi">scale</span>.<span class="pl-c1">y</span>,<span class="pl-c1">this</span>.<span class="pl-smi">scale</span>.<span class="pl-c1">z</span>));<span class="pl-c1">this</span>.<span class="pl-smi">matrixWorldNeedsUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>},<span class="pl-en">updateMatrixWorld</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-smi">matrixAutoUpdate</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-en">updateMatrix</span>();<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-smi">matrixWorldNeedsUpdate</span><span class="pl-k">||!</span><span class="pl-c1">0</span><span class="pl-k">===</span>a)<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-c1">parent</span><span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-smi">matrixWorld</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">matrix</span>)<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-smi">matrixWorld</span>.<span class="pl-en">multiply</span>(<span class="pl-c1">this</span>.<span class="pl-c1">parent</span>.<span class="pl-smi">matrixWorld</span>,<span class="pl-c1">this</span>.<span class="pl-smi">matrix</span>),<span class="pl-c1">this</span>.<span class="pl-smi">matrixWorldNeedsUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>,a<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>,c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">children</span>.<span class="pl-c1">length</span>;b<span class="pl-k">&lt;</span></td>
      </tr>
      <tr>
        <td id="L76" class="blob-num js-line-number" data-line-number="76"></td>
        <td id="LC76" class="blob-code blob-code-inner js-file-line">c;b<span class="pl-k">++</span>)<span class="pl-c1">this</span>.<span class="pl-smi">children</span>[b].<span class="pl-en">updateMatrixWorld</span>(a)},<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Object3D</span>);<span class="pl-smi">a</span>.<span class="pl-c1">name</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">name</span>;<span class="pl-smi">a</span>.<span class="pl-smi">up</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">up</span>);<span class="pl-smi">a</span>.<span class="pl-smi">position</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">position</span>);<span class="pl-smi">a</span>.<span class="pl-smi">rotation</span> <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Vector3</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">a</span>.<span class="pl-smi">rotation</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">rotation</span>);<span class="pl-smi">a</span>.<span class="pl-smi">eulerOrder</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">eulerOrder</span>;<span class="pl-smi">a</span>.<span class="pl-smi">scale</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">scale</span>);<span class="pl-smi">a</span>.<span class="pl-smi">renderDepth</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">renderDepth</span>;<span class="pl-smi">a</span>.<span class="pl-smi">rotationAutoUpdate</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">rotationAutoUpdate</span>;<span class="pl-smi">a</span>.<span class="pl-smi">matrix</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">matrix</span>);<span class="pl-smi">a</span>.<span class="pl-smi">matrixWorld</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">matrixWorld</span>);<span class="pl-smi">a</span>.<span class="pl-smi">matrixRotationWorld</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">matrixRotationWorld</span>);<span class="pl-smi">a</span>.<span class="pl-smi">matrixAutoUpdate</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">matrixAutoUpdate</span>;</td>
      </tr>
      <tr>
        <td id="L77" class="blob-num js-line-number" data-line-number="77"></td>
        <td id="LC77" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">a</span>.<span class="pl-smi">matrixWorldNeedsUpdate</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">matrixWorldNeedsUpdate</span>;<span class="pl-smi">a</span>.<span class="pl-smi">quaternion</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">quaternion</span>);<span class="pl-smi">a</span>.<span class="pl-smi">useQuaternion</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">useQuaternion</span>;<span class="pl-smi">a</span>.<span class="pl-smi">boundRadius</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">boundRadius</span>;<span class="pl-smi">a</span>.<span class="pl-smi">boundRadiusScale</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">boundRadiusScale</span>;<span class="pl-smi">a</span>.<span class="pl-smi">visible</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">visible</span>;<span class="pl-smi">a</span>.<span class="pl-smi">castShadow</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">castShadow</span>;<span class="pl-smi">a</span>.<span class="pl-smi">receiveShadow</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">receiveShadow</span>;<span class="pl-smi">a</span>.<span class="pl-smi">frustumCulled</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">frustumCulled</span>;<span class="pl-k">return</span> a},<span class="pl-en">deallocate</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Object3DLibrary</span>.<span class="pl-c1">indexOf</span>(<span class="pl-c1">this</span>);<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">!==</span>a<span class="pl-k">&amp;&amp;</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Object3DLibrary</span>.<span class="pl-c1">splice</span>(a,<span class="pl-c1">1</span>)}};<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-smi">__m1</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>;</td>
      </tr>
      <tr>
        <td id="L78" class="blob-num js-line-number" data-line-number="78"></td>
        <td id="LC78" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-smi">defaultEulerOrder</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>XYZ<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3DIdCount</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3DLibrary</span><span class="pl-k">=</span>[];</td>
      </tr>
      <tr>
        <td id="L79" class="blob-num js-line-number" data-line-number="79"></td>
        <td id="LC79" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">Projector</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">function</span> <span class="pl-en">a</span>(){<span class="pl-k">if</span>(f<span class="pl-k">===</span>h){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.RenderableObject</span>;<span class="pl-smi">g</span>.<span class="pl-c1">push</span>(a);h<span class="pl-k">++</span>;f<span class="pl-k">++</span>;<span class="pl-k">return</span> a}<span class="pl-k">return</span> g[f<span class="pl-k">++</span>]}function b(){if(j===m){var a=new THREE.RenderableVertex;l.push(a);m++;j++;return a}return l[j++]}function c(a,b){return b.z-a.z}function d(a,b){var c=0,d=1,e=a.z+a.w,f=b.z+b.w,g=-a.z+a.w,h=-b.z+b.w;if(0&lt;=e&amp;&amp;0&lt;=f&amp;&amp;0&lt;=g&amp;&amp;0&lt;=h)return!0;if(0&gt;e&amp;&amp;0&gt;f||0&gt;g&amp;&amp;0&gt;h)return!1;0&gt;e?c=Math.max(c,e/(e-f)):0&gt;f&amp;&amp;(d=Math.min(d,e/(e-f)));0&gt;g?c=Math.max(c,g/(g-h)):0&gt;h&amp;&amp;(d=Math.min(d,g/(g-h)));if(d&lt;</td>
      </tr>
      <tr>
        <td id="L80" class="blob-num js-line-number" data-line-number="80"></td>
        <td id="LC80" class="blob-code blob-code-inner js-file-line">c)<span class="pl-k">return</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-smi">a</span>.<span class="pl-en">lerpSelf</span>(b,c);<span class="pl-smi">b</span>.<span class="pl-en">lerpSelf</span>(a,<span class="pl-c1">1</span><span class="pl-k">-</span>d);<span class="pl-k">return</span><span class="pl-k">!</span><span class="pl-c1">0</span>}<span class="pl-k">var</span> e,f,g<span class="pl-k">=</span>[],h<span class="pl-k">=</span><span class="pl-c1">0</span>,i,j,l<span class="pl-k">=</span>[],m<span class="pl-k">=</span><span class="pl-c1">0</span>,n,p,o<span class="pl-k">=</span>[],q<span class="pl-k">=</span><span class="pl-c1">0</span>,r,t<span class="pl-k">=</span>[],<span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-c1">0</span>,u,s,z<span class="pl-k">=</span>[],<span class="pl-c1">A</span><span class="pl-k">=</span><span class="pl-c1">0</span>,v,y,<span class="pl-c1">C</span><span class="pl-k">=</span>[],<span class="pl-c1">G</span><span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-c1">H</span><span class="pl-k">=</span>{objects<span class="pl-k">:</span>[],sprites<span class="pl-k">:</span>[],lights<span class="pl-k">:</span>[],elements<span class="pl-k">:</span>[]},<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,<span class="pl-c1">E</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector4</span>,<span class="pl-c1">M</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>,<span class="pl-c1">K</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>,<span class="pl-c1">F</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Frustum</span>,<span class="pl-c1">I</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector4</span>,<span class="pl-c1">L</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector4</span>;<span class="pl-c1">this</span>.<span class="pl-en">projectVector</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-smi">b</span>.<span class="pl-smi">matrixWorldInverse</span>.<span class="pl-en">getInverse</span>(<span class="pl-smi">b</span>.<span class="pl-smi">matrixWorld</span>);<span class="pl-c1">M</span>.<span class="pl-en">multiply</span>(<span class="pl-smi">b</span>.<span class="pl-smi">projectionMatrix</span>,<span class="pl-smi">b</span>.<span class="pl-smi">matrixWorldInverse</span>);<span class="pl-c1">M</span>.<span class="pl-en">multiplyVector3</span>(a);<span class="pl-k">return</span> a};<span class="pl-c1">this</span>.<span class="pl-smi">unprojectVector</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L81" class="blob-num js-line-number" data-line-number="81"></td>
        <td id="LC81" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-smi">b</span>.<span class="pl-smi">projectionMatrixInverse</span>.<span class="pl-en">getInverse</span>(<span class="pl-smi">b</span>.<span class="pl-smi">projectionMatrix</span>);<span class="pl-c1">M</span>.<span class="pl-en">multiply</span>(<span class="pl-smi">b</span>.<span class="pl-smi">matrixWorld</span>,<span class="pl-smi">b</span>.<span class="pl-smi">projectionMatrixInverse</span>);<span class="pl-c1">M</span>.<span class="pl-en">multiplyVector3</span>(a);<span class="pl-k">return</span> a};<span class="pl-c1">this</span>.<span class="pl-en">pickingRay</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c;<span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">1</span>;c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-smi">a</span>.<span class="pl-c1">x</span>,<span class="pl-smi">a</span>.<span class="pl-c1">y</span>,<span class="pl-c1">1</span>);<span class="pl-c1">this</span>.<span class="pl-en">unprojectVector</span>(a,b);<span class="pl-c1">this</span>.<span class="pl-en">unprojectVector</span>(c,b);<span class="pl-smi">c</span>.<span class="pl-en">subSelf</span>(a).<span class="pl-c1">normalize</span>();<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.Ray</span>(a,c)};<span class="pl-c1">this</span>.<span class="pl-en">projectScene</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">g</span>,<span class="pl-smi">h</span>,<span class="pl-smi">m</span>,<span class="pl-c1">N</span>){<span class="pl-k">var</span> ea<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">near</span>,<span class="pl-c1">Q</span><span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">far</span>,qa<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>,la,<span class="pl-c1">O</span>,fa,<span class="pl-c1">W</span>,<span class="pl-c1">V</span>,ia,<span class="pl-c1">Z</span>,ca,Ga,Pa,Ia,Ua,na,Va,ib,Ra;y<span class="pl-k">=</span>s<span class="pl-k">=</span>r<span class="pl-k">=</span>p<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">H</span>.<span class="pl-c1">elements</span>.<span class="pl-c1">length</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-smi">g</span>.<span class="pl-en">updateMatrixWorld</span>();<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span></td>
      </tr>
      <tr>
        <td id="L82" class="blob-num js-line-number" data-line-number="82"></td>
        <td id="LC82" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">h</span>.<span class="pl-c1">parent</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">h</span>.<span class="pl-en">updateMatrixWorld</span>();<span class="pl-smi">h</span>.<span class="pl-smi">matrixWorldInverse</span>.<span class="pl-en">getInverse</span>(<span class="pl-smi">h</span>.<span class="pl-smi">matrixWorld</span>);<span class="pl-c1">M</span>.<span class="pl-en">multiply</span>(<span class="pl-smi">h</span>.<span class="pl-smi">projectionMatrix</span>,<span class="pl-smi">h</span>.<span class="pl-smi">matrixWorldInverse</span>);<span class="pl-c1">F</span>.<span class="pl-en">setFromMatrix</span>(<span class="pl-c1">M</span>);f<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">H</span>.<span class="pl-smi">objects</span>.<span class="pl-c1">length</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">H</span>.<span class="pl-smi">sprites</span>.<span class="pl-c1">length</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">H</span>.<span class="pl-smi">lights</span>.<span class="pl-c1">length</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> <span class="pl-en">eb</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">0</span>,d<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">children</span>.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>d;c<span class="pl-k">++</span>){<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">children</span>[c];<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">!==</span><span class="pl-smi">f</span>.<span class="pl-smi">visible</span>){<span class="pl-k">if</span>(f <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Light</span>)<span class="pl-c1">H</span>.<span class="pl-smi">lights</span>.<span class="pl-c1">push</span>(f);<span class="pl-k">else</span> <span class="pl-k">if</span>(f <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Mesh</span><span class="pl-k">||</span>f <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Line</span>){<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">===</span><span class="pl-smi">f</span>.<span class="pl-smi">frustumCulled</span><span class="pl-k">||!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-c1">F</span>.<span class="pl-c1">contains</span>(f))e<span class="pl-k">=</span><span class="pl-en">a</span>(),<span class="pl-smi">e</span>.<span class="pl-c1">object</span><span class="pl-k">=</span>f,<span class="pl-c1">null</span><span class="pl-k">!==</span><span class="pl-smi">f</span>.<span class="pl-smi">renderDepth</span><span class="pl-k">?</span><span class="pl-smi">e</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">renderDepth</span><span class="pl-k">:</span></td>
      </tr>
      <tr>
        <td id="L83" class="blob-num js-line-number" data-line-number="83"></td>
        <td id="LC83" class="blob-code blob-code-inner js-file-line">(<span class="pl-c1">J</span>.<span class="pl-en">copy</span>(<span class="pl-smi">f</span>.<span class="pl-smi">matrixWorld</span>.<span class="pl-en">getPosition</span>()),<span class="pl-c1">M</span>.<span class="pl-en">multiplyVector3</span>(<span class="pl-c1">J</span>),<span class="pl-smi">e</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">J</span>.<span class="pl-c1">z</span>),<span class="pl-c1">H</span>.<span class="pl-smi">objects</span>.<span class="pl-c1">push</span>(e)}<span class="pl-k">else</span> f <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Sprite</span><span class="pl-k">||</span>f <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Particle</span><span class="pl-k">?</span>(e<span class="pl-k">=</span><span class="pl-en">a</span>(),<span class="pl-smi">e</span>.<span class="pl-c1">object</span><span class="pl-k">=</span>f,<span class="pl-c1">null</span><span class="pl-k">!==</span><span class="pl-smi">f</span>.<span class="pl-smi">renderDepth</span><span class="pl-k">?</span><span class="pl-smi">e</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">renderDepth</span><span class="pl-k">:</span>(<span class="pl-c1">J</span>.<span class="pl-en">copy</span>(<span class="pl-smi">f</span>.<span class="pl-smi">matrixWorld</span>.<span class="pl-en">getPosition</span>()),<span class="pl-c1">M</span>.<span class="pl-en">multiplyVector3</span>(<span class="pl-c1">J</span>),<span class="pl-smi">e</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">J</span>.<span class="pl-c1">z</span>),<span class="pl-c1">H</span>.<span class="pl-smi">sprites</span>.<span class="pl-c1">push</span>(e))<span class="pl-k">:</span>(e<span class="pl-k">=</span><span class="pl-en">a</span>(),<span class="pl-smi">e</span>.<span class="pl-c1">object</span><span class="pl-k">=</span>f,<span class="pl-c1">null</span><span class="pl-k">!==</span><span class="pl-smi">f</span>.<span class="pl-smi">renderDepth</span><span class="pl-k">?</span><span class="pl-smi">e</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">renderDepth</span><span class="pl-k">:</span>(<span class="pl-c1">J</span>.<span class="pl-en">copy</span>(<span class="pl-smi">f</span>.<span class="pl-smi">matrixWorld</span>.<span class="pl-en">getPosition</span>()),<span class="pl-c1">M</span>.<span class="pl-en">multiplyVector3</span>(<span class="pl-c1">J</span>),<span class="pl-smi">e</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">J</span>.<span class="pl-c1">z</span>),<span class="pl-c1">H</span>.<span class="pl-smi">objects</span>.<span class="pl-c1">push</span>(e));<span class="pl-en">eb</span>(f)}}};<span class="pl-en">eb</span>(g);<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span>m<span class="pl-k">&amp;&amp;</span><span class="pl-c1">H</span>.<span class="pl-smi">objects</span>.<span class="pl-c1">sort</span>(c);g<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(m<span class="pl-k">=</span><span class="pl-c1">H</span>.<span class="pl-smi">objects</span>.<span class="pl-c1">length</span>;g<span class="pl-k">&lt;</span></td>
      </tr>
      <tr>
        <td id="L84" class="blob-num js-line-number" data-line-number="84"></td>
        <td id="LC84" class="blob-code blob-code-inner js-file-line">m;g<span class="pl-k">++</span>)<span class="pl-k">if</span>(ca<span class="pl-k">=</span><span class="pl-c1">H</span>.<span class="pl-smi">objects</span>[g].<span class="pl-c1">object</span>,Ga<span class="pl-k">=</span><span class="pl-smi">ca</span>.<span class="pl-smi">matrixWorld</span>,j<span class="pl-k">=</span><span class="pl-c1">0</span>,ca <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Mesh</span>){Pa<span class="pl-k">=</span><span class="pl-smi">ca</span>.<span class="pl-smi">geometry</span>;Ia<span class="pl-k">=</span><span class="pl-smi">ca</span>.<span class="pl-smi">geometry</span>.<span class="pl-smi">materials</span>;fa<span class="pl-k">=</span><span class="pl-smi">Pa</span>.<span class="pl-smi">vertices</span>;Ua<span class="pl-k">=</span><span class="pl-smi">Pa</span>.<span class="pl-smi">faces</span>;Va<span class="pl-k">=</span><span class="pl-smi">Pa</span>.<span class="pl-smi">faceVertexUvs</span>;Pa<span class="pl-k">=</span><span class="pl-smi">ca</span>.<span class="pl-smi">matrixRotationWorld</span>.<span class="pl-en">extractRotation</span>(Ga);ib<span class="pl-k">=</span><span class="pl-smi">ca</span>.<span class="pl-smi">material</span> <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">MeshFaceMaterial</span>;la<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">O</span><span class="pl-k">=</span><span class="pl-smi">fa</span>.<span class="pl-c1">length</span>;la<span class="pl-k">&lt;</span><span class="pl-c1">O</span>;la<span class="pl-k">++</span>)i<span class="pl-k">=</span><span class="pl-en">b</span>(),<span class="pl-smi">i</span>.<span class="pl-smi">positionWorld</span>.<span class="pl-en">copy</span>(fa[la]),<span class="pl-smi">Ga</span>.<span class="pl-en">multiplyVector3</span>(<span class="pl-smi">i</span>.<span class="pl-smi">positionWorld</span>),<span class="pl-smi">i</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-en">copy</span>(<span class="pl-smi">i</span>.<span class="pl-smi">positionWorld</span>),<span class="pl-c1">M</span>.<span class="pl-en">multiplyVector4</span>(<span class="pl-smi">i</span>.<span class="pl-smi">positionScreen</span>),<span class="pl-smi">i</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">x</span><span class="pl-k">/=</span><span class="pl-smi">i</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-smi">w</span>,<span class="pl-smi">i</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">y</span><span class="pl-k">/=</span><span class="pl-smi">i</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-smi">w</span>,</td>
      </tr>
      <tr>
        <td id="L85" class="blob-num js-line-number" data-line-number="85"></td>
        <td id="LC85" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">i</span>.<span class="pl-smi">visible</span><span class="pl-k">=</span><span class="pl-smi">i</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">z</span><span class="pl-k">&gt;</span>ea<span class="pl-k">&amp;&amp;</span><span class="pl-smi">i</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">z</span><span class="pl-k">&lt;</span><span class="pl-c1">Q</span>;fa<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(la<span class="pl-k">=</span><span class="pl-smi">Ua</span>.<span class="pl-c1">length</span>;fa<span class="pl-k">&lt;</span>la;fa<span class="pl-k">++</span>)<span class="pl-k">if</span>(<span class="pl-c1">O</span><span class="pl-k">=</span>Ua[fa],Ra<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span>ib<span class="pl-k">?</span>Ia[<span class="pl-c1">O</span>.<span class="pl-smi">materialIndex</span>]<span class="pl-k">:</span><span class="pl-smi">ca</span>.<span class="pl-smi">material</span>,<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>Ra){ia<span class="pl-k">=</span><span class="pl-smi">Ra</span>.<span class="pl-smi">side</span>;<span class="pl-k">if</span>(<span class="pl-c1">O</span> <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Face3</span>)<span class="pl-k">if</span>(<span class="pl-c1">W</span><span class="pl-k">=</span>l[<span class="pl-c1">O</span>.<span class="pl-smi">a</span>],<span class="pl-c1">V</span><span class="pl-k">=</span>l[<span class="pl-c1">O</span>.<span class="pl-smi">b</span>],<span class="pl-c1">Z</span><span class="pl-k">=</span>l[<span class="pl-c1">O</span>.<span class="pl-smi">c</span>],<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-c1">W</span>.<span class="pl-smi">visible</span><span class="pl-k">&amp;&amp;!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-c1">V</span>.<span class="pl-smi">visible</span><span class="pl-k">&amp;&amp;!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-c1">Z</span>.<span class="pl-smi">visible</span>)<span class="pl-k">if</span>(qa<span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&gt;</span>(<span class="pl-c1">Z</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">W</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">x</span>)<span class="pl-k">*</span>(<span class="pl-c1">V</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">W</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">y</span>)<span class="pl-k">-</span>(<span class="pl-c1">Z</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">W</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">y</span>)<span class="pl-k">*</span>(<span class="pl-c1">V</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">W</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">x</span>),ia<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">DoubleSide</span><span class="pl-k">||</span>qa<span class="pl-k">===</span>(ia<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">FrontSide</span>))p<span class="pl-k">===</span>q<span class="pl-k">?</span>(na<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.RenderableFace3</span>,</td>
      </tr>
      <tr>
        <td id="L86" class="blob-num js-line-number" data-line-number="86"></td>
        <td id="LC86" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">o</span>.<span class="pl-c1">push</span>(na),q<span class="pl-k">++</span>,p<span class="pl-k">++</span>,n<span class="pl-k">=</span>na)<span class="pl-k">:</span>n<span class="pl-k">=</span>o[p<span class="pl-k">++</span>],<span class="pl-smi">n</span>.<span class="pl-smi">v1</span>.<span class="pl-en">copy</span>(<span class="pl-c1">W</span>),<span class="pl-smi">n</span>.<span class="pl-smi">v2</span>.<span class="pl-en">copy</span>(<span class="pl-c1">V</span>),<span class="pl-smi">n</span>.<span class="pl-smi">v3</span>.<span class="pl-en">copy</span>(<span class="pl-c1">Z</span>);<span class="pl-k">else</span> <span class="pl-k">continue</span>;<span class="pl-k">else</span> <span class="pl-k">continue</span>;<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-c1">O</span> <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Face4</span>)<span class="pl-k">if</span>(<span class="pl-c1">W</span><span class="pl-k">=</span>l[<span class="pl-c1">O</span>.<span class="pl-smi">a</span>],<span class="pl-c1">V</span><span class="pl-k">=</span>l[<span class="pl-c1">O</span>.<span class="pl-smi">b</span>],<span class="pl-c1">Z</span><span class="pl-k">=</span>l[<span class="pl-c1">O</span>.<span class="pl-smi">c</span>],na<span class="pl-k">=</span>l[<span class="pl-c1">O</span>.<span class="pl-smi">d</span>],<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-c1">W</span>.<span class="pl-smi">visible</span><span class="pl-k">&amp;&amp;!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-c1">V</span>.<span class="pl-smi">visible</span><span class="pl-k">&amp;&amp;!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-c1">Z</span>.<span class="pl-smi">visible</span><span class="pl-k">&amp;&amp;!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">na</span>.<span class="pl-smi">visible</span>)<span class="pl-k">if</span>(qa<span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&gt;</span>(<span class="pl-smi">na</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">W</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">x</span>)<span class="pl-k">*</span>(<span class="pl-c1">V</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">W</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">y</span>)<span class="pl-k">-</span>(<span class="pl-smi">na</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">W</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">y</span>)<span class="pl-k">*</span>(<span class="pl-c1">V</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">W</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">x</span>)<span class="pl-k">||</span><span class="pl-c1">0</span><span class="pl-k">&gt;</span>(<span class="pl-c1">V</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">Z</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">x</span>)<span class="pl-k">*</span>(<span class="pl-smi">na</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">Z</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">y</span>)<span class="pl-k">-</span>(<span class="pl-c1">V</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">y</span><span class="pl-k">-</span></td>
      </tr>
      <tr>
        <td id="L87" class="blob-num js-line-number" data-line-number="87"></td>
        <td id="LC87" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">Z</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">y</span>)<span class="pl-k">*</span>(<span class="pl-smi">na</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">Z</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">x</span>),ia<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">DoubleSide</span><span class="pl-k">||</span>qa<span class="pl-k">===</span>(ia<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">FrontSide</span>)){<span class="pl-k">if</span>(r<span class="pl-k">===</span><span class="pl-c1">B</span>){<span class="pl-k">var</span> pb<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.RenderableFace4</span>;<span class="pl-smi">t</span>.<span class="pl-c1">push</span>(pb);<span class="pl-c1">B</span><span class="pl-k">++</span>;r<span class="pl-k">++</span>;n<span class="pl-k">=</span>pb}<span class="pl-k">else</span> n<span class="pl-k">=</span>t[r<span class="pl-k">++</span>];<span class="pl-smi">n</span>.<span class="pl-smi">v1</span>.<span class="pl-en">copy</span>(<span class="pl-c1">W</span>);<span class="pl-smi">n</span>.<span class="pl-smi">v2</span>.<span class="pl-en">copy</span>(<span class="pl-c1">V</span>);<span class="pl-smi">n</span>.<span class="pl-smi">v3</span>.<span class="pl-en">copy</span>(<span class="pl-c1">Z</span>);<span class="pl-smi">n</span>.<span class="pl-smi">v4</span>.<span class="pl-en">copy</span>(na)}<span class="pl-k">else</span> <span class="pl-k">continue</span>;<span class="pl-k">else</span> <span class="pl-k">continue</span>;<span class="pl-smi">n</span>.<span class="pl-smi">normalWorld</span>.<span class="pl-en">copy</span>(<span class="pl-c1">O</span>.<span class="pl-smi">normal</span>);<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">===</span>qa<span class="pl-k">&amp;&amp;</span>(ia<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">BackSide</span><span class="pl-k">||</span>ia<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">DoubleSide</span>)<span class="pl-k">&amp;&amp;</span><span class="pl-smi">n</span>.<span class="pl-smi">normalWorld</span>.<span class="pl-en">negate</span>();<span class="pl-smi">Pa</span>.<span class="pl-en">multiplyVector3</span>(<span class="pl-smi">n</span>.<span class="pl-smi">normalWorld</span>);<span class="pl-smi">n</span>.<span class="pl-smi">centroidWorld</span>.<span class="pl-en">copy</span>(<span class="pl-c1">O</span>.<span class="pl-smi">centroid</span>);<span class="pl-smi">Ga</span>.<span class="pl-en">multiplyVector3</span>(<span class="pl-smi">n</span>.<span class="pl-smi">centroidWorld</span>);<span class="pl-smi">n</span>.<span class="pl-smi">centroidScreen</span>.<span class="pl-en">copy</span>(<span class="pl-smi">n</span>.<span class="pl-smi">centroidWorld</span>);</td>
      </tr>
      <tr>
        <td id="L88" class="blob-num js-line-number" data-line-number="88"></td>
        <td id="LC88" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">M</span>.<span class="pl-en">multiplyVector3</span>(<span class="pl-smi">n</span>.<span class="pl-smi">centroidScreen</span>);<span class="pl-c1">Z</span><span class="pl-k">=</span><span class="pl-c1">O</span>.<span class="pl-smi">vertexNormals</span>;<span class="pl-c1">W</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">V</span><span class="pl-k">=</span><span class="pl-c1">Z</span>.<span class="pl-c1">length</span>;<span class="pl-c1">W</span><span class="pl-k">&lt;</span><span class="pl-c1">V</span>;<span class="pl-c1">W</span><span class="pl-k">++</span>)na<span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-smi">vertexNormalsWorld</span>[<span class="pl-c1">W</span>],<span class="pl-smi">na</span>.<span class="pl-en">copy</span>(<span class="pl-c1">Z</span>[<span class="pl-c1">W</span>]),<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">===</span>qa<span class="pl-k">&amp;&amp;</span>(ia<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">BackSide</span><span class="pl-k">||</span>ia<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">DoubleSide</span>)<span class="pl-k">&amp;&amp;</span><span class="pl-smi">na</span>.<span class="pl-en">negate</span>(),<span class="pl-smi">Pa</span>.<span class="pl-en">multiplyVector3</span>(na);<span class="pl-smi">n</span>.<span class="pl-smi">vertexNormalsLength</span><span class="pl-k">=</span><span class="pl-c1">Z</span>.<span class="pl-c1">length</span>;<span class="pl-c1">W</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">V</span><span class="pl-k">=</span><span class="pl-smi">Va</span>.<span class="pl-c1">length</span>;<span class="pl-c1">W</span><span class="pl-k">&lt;</span><span class="pl-c1">V</span>;<span class="pl-c1">W</span><span class="pl-k">++</span>)<span class="pl-k">if</span>(na<span class="pl-k">=</span>Va[<span class="pl-c1">W</span>][fa],<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>na){ia<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">Z</span><span class="pl-k">=</span><span class="pl-smi">na</span>.<span class="pl-c1">length</span>;ia<span class="pl-k">&lt;</span><span class="pl-c1">Z</span>;ia<span class="pl-k">++</span>)<span class="pl-smi">n</span>.<span class="pl-smi">uvs</span>[<span class="pl-c1">W</span>][ia]<span class="pl-k">=</span>na[ia]}<span class="pl-smi">n</span>.<span class="pl-c1">color</span><span class="pl-k">=</span><span class="pl-c1">O</span>.<span class="pl-c1">color</span>;<span class="pl-smi">n</span>.<span class="pl-smi">material</span><span class="pl-k">=</span>Ra;<span class="pl-smi">n</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-smi">centroidScreen</span>.<span class="pl-c1">z</span>;<span class="pl-c1">H</span>.<span class="pl-c1">elements</span>.<span class="pl-c1">push</span>(n)}}<span class="pl-k">else</span> <span class="pl-k">if</span>(ca <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Line</span>){<span class="pl-c1">K</span>.<span class="pl-en">multiply</span>(<span class="pl-c1">M</span>,Ga);fa<span class="pl-k">=</span><span class="pl-smi">ca</span>.<span class="pl-smi">geometry</span>.<span class="pl-smi">vertices</span>;<span class="pl-c1">W</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L89" class="blob-num js-line-number" data-line-number="89"></td>
        <td id="LC89" class="blob-code blob-code-inner js-file-line"><span class="pl-en">b</span>();<span class="pl-c1">W</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-en">copy</span>(fa[<span class="pl-c1">0</span>]);<span class="pl-c1">K</span>.<span class="pl-en">multiplyVector4</span>(<span class="pl-c1">W</span>.<span class="pl-smi">positionScreen</span>);Ga<span class="pl-k">=</span><span class="pl-smi">ca</span>.<span class="pl-c1">type</span><span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">LinePieces</span><span class="pl-k">?</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">1</span>;la<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-k">for</span>(<span class="pl-c1">O</span><span class="pl-k">=</span><span class="pl-smi">fa</span>.<span class="pl-c1">length</span>;la<span class="pl-k">&lt;</span><span class="pl-c1">O</span>;la<span class="pl-k">++</span>)<span class="pl-c1">W</span><span class="pl-k">=</span><span class="pl-en">b</span>(),<span class="pl-c1">W</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-en">copy</span>(fa[la]),<span class="pl-c1">K</span>.<span class="pl-en">multiplyVector4</span>(<span class="pl-c1">W</span>.<span class="pl-smi">positionScreen</span>),<span class="pl-c1">0</span><span class="pl-k">&lt;</span>(la<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">%</span>Ga<span class="pl-k">||</span>(<span class="pl-c1">V</span><span class="pl-k">=</span>l[j<span class="pl-k">-</span><span class="pl-c1">2</span>],<span class="pl-c1">I</span>.<span class="pl-en">copy</span>(<span class="pl-c1">W</span>.<span class="pl-smi">positionScreen</span>),<span class="pl-c1">L</span>.<span class="pl-en">copy</span>(<span class="pl-c1">V</span>.<span class="pl-smi">positionScreen</span>),<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-en">d</span>(<span class="pl-c1">I</span>,<span class="pl-c1">L</span>)<span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">I</span>.<span class="pl-en">multiplyScalar</span>(<span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">I</span>.<span class="pl-smi">w</span>),<span class="pl-c1">L</span>.<span class="pl-en">multiplyScalar</span>(<span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">L</span>.<span class="pl-smi">w</span>),s<span class="pl-k">===</span><span class="pl-c1">A</span><span class="pl-k">?</span>(Ia<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.RenderableLine</span>,<span class="pl-smi">z</span>.<span class="pl-c1">push</span>(Ia),<span class="pl-c1">A</span><span class="pl-k">++</span>,s<span class="pl-k">++</span>,u<span class="pl-k">=</span>Ia)<span class="pl-k">:</span>u<span class="pl-k">=</span>z[s<span class="pl-k">++</span>],<span class="pl-smi">u</span>.<span class="pl-smi">v1</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-en">copy</span>(<span class="pl-c1">I</span>),<span class="pl-smi">u</span>.<span class="pl-smi">v2</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-en">copy</span>(<span class="pl-c1">L</span>),<span class="pl-smi">u</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-c1">I</span>.<span class="pl-c1">z</span>,<span class="pl-c1">L</span>.<span class="pl-c1">z</span>),<span class="pl-smi">u</span>.<span class="pl-smi">material</span><span class="pl-k">=</span><span class="pl-smi">ca</span>.<span class="pl-smi">material</span>,</td>
      </tr>
      <tr>
        <td id="L90" class="blob-num js-line-number" data-line-number="90"></td>
        <td id="LC90" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">H</span>.<span class="pl-c1">elements</span>.<span class="pl-c1">push</span>(u)))}g<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(m<span class="pl-k">=</span><span class="pl-c1">H</span>.<span class="pl-smi">sprites</span>.<span class="pl-c1">length</span>;g<span class="pl-k">&lt;</span>m;g<span class="pl-k">++</span>)ca<span class="pl-k">=</span><span class="pl-c1">H</span>.<span class="pl-smi">sprites</span>[g].<span class="pl-c1">object</span>,Ga<span class="pl-k">=</span><span class="pl-smi">ca</span>.<span class="pl-smi">matrixWorld</span>,ca <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Particle</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">E</span>.<span class="pl-c1">set</span>(<span class="pl-smi">Ga</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">12</span>],<span class="pl-smi">Ga</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">13</span>],<span class="pl-smi">Ga</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">14</span>],<span class="pl-c1">1</span>),<span class="pl-c1">M</span>.<span class="pl-en">multiplyVector4</span>(<span class="pl-c1">E</span>),<span class="pl-c1">E</span>.<span class="pl-c1">z</span><span class="pl-k">/=</span><span class="pl-c1">E</span>.<span class="pl-smi">w</span>,<span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-c1">E</span>.<span class="pl-c1">z</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">1</span><span class="pl-k">&gt;</span><span class="pl-c1">E</span>.<span class="pl-c1">z</span><span class="pl-k">&amp;&amp;</span>(y<span class="pl-k">===</span><span class="pl-c1">G</span><span class="pl-k">?</span>(ea<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.RenderableParticle</span>,<span class="pl-c1">C</span>.<span class="pl-c1">push</span>(ea),<span class="pl-c1">G</span><span class="pl-k">++</span>,y<span class="pl-k">++</span>,v<span class="pl-k">=</span>ea)<span class="pl-k">:</span>v<span class="pl-k">=</span><span class="pl-c1">C</span>[y<span class="pl-k">++</span>],<span class="pl-smi">v</span>.<span class="pl-c1">object</span><span class="pl-k">=</span>ca,<span class="pl-smi">v</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">E</span>.<span class="pl-c1">x</span><span class="pl-k">/</span><span class="pl-c1">E</span>.<span class="pl-smi">w</span>,<span class="pl-smi">v</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">E</span>.<span class="pl-c1">y</span><span class="pl-k">/</span><span class="pl-c1">E</span>.<span class="pl-smi">w</span>,<span class="pl-smi">v</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">E</span>.<span class="pl-c1">z</span>,<span class="pl-smi">v</span>.<span class="pl-smi">rotation</span><span class="pl-k">=</span><span class="pl-smi">ca</span>.<span class="pl-smi">rotation</span>.<span class="pl-c1">z</span>,<span class="pl-smi">v</span>.<span class="pl-smi">scale</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">ca</span>.<span class="pl-smi">scale</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(<span class="pl-smi">v</span>.<span class="pl-c1">x</span><span class="pl-k">-</span>(<span class="pl-c1">E</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">h</span>.<span class="pl-smi">projectionMatrix</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">0</span>])<span class="pl-k">/</span>(<span class="pl-c1">E</span>.<span class="pl-smi">w</span><span class="pl-k">+</span><span class="pl-smi">h</span>.<span class="pl-smi">projectionMatrix</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">12</span>])),<span class="pl-smi">v</span>.<span class="pl-smi">scale</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">ca</span>.<span class="pl-smi">scale</span>.<span class="pl-c1">y</span><span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L91" class="blob-num js-line-number" data-line-number="91"></td>
        <td id="LC91" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(<span class="pl-smi">v</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>(<span class="pl-c1">E</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-smi">h</span>.<span class="pl-smi">projectionMatrix</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">5</span>])<span class="pl-k">/</span>(<span class="pl-c1">E</span>.<span class="pl-smi">w</span><span class="pl-k">+</span><span class="pl-smi">h</span>.<span class="pl-smi">projectionMatrix</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">13</span>])),<span class="pl-smi">v</span>.<span class="pl-smi">material</span><span class="pl-k">=</span><span class="pl-smi">ca</span>.<span class="pl-smi">material</span>,<span class="pl-c1">H</span>.<span class="pl-c1">elements</span>.<span class="pl-c1">push</span>(v)));<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-c1">N</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">H</span>.<span class="pl-c1">elements</span>.<span class="pl-c1">sort</span>(c);<span class="pl-k">return</span> <span class="pl-c1">H</span>}};<span class="pl-c1">THREE</span>.<span class="pl-en">Quaternion</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a<span class="pl-k">||</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>b<span class="pl-k">||</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>c<span class="pl-k">||</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>d<span class="pl-k">?</span>d<span class="pl-k">:</span><span class="pl-c1">1</span>};</td>
      </tr>
      <tr>
        <td id="L92" class="blob-num js-line-number" data-line-number="92"></td>
        <td id="LC92" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Quaternion</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.Quaternion,set:<span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>b;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>c;<span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">=</span>d;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">copy</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>;<span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">w</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">setFromEuler</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(<span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">/</span><span class="pl-c1">2</span>),d<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(<span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">/</span><span class="pl-c1">2</span>),e<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(<span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">/</span><span class="pl-c1">2</span>),f<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(<span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">/</span><span class="pl-c1">2</span>),g<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(<span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">/</span><span class="pl-c1">2</span>),h<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(<span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">/</span><span class="pl-c1">2</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">||</span><span class="pl-s"><span class="pl-pds">&quot;</span>XYZ<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>b<span class="pl-k">?</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>f<span class="pl-k">*</span>d<span class="pl-k">*</span>e<span class="pl-k">+</span>c<span class="pl-k">*</span>g<span class="pl-k">*</span>h,<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>c<span class="pl-k">*</span>g<span class="pl-k">*</span>e<span class="pl-k">-</span>f<span class="pl-k">*</span>d<span class="pl-k">*</span>h,<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>c<span class="pl-k">*</span>d<span class="pl-k">*</span>h<span class="pl-k">+</span>f<span class="pl-k">*</span>g<span class="pl-k">*</span>e,<span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">=</span>c<span class="pl-k">*</span>d<span class="pl-k">*</span>e<span class="pl-k">-</span>f<span class="pl-k">*</span>g<span class="pl-k">*</span>h)<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>YXZ<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>b<span class="pl-k">?</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>f<span class="pl-k">*</span>d<span class="pl-k">*</span>e<span class="pl-k">+</span>c<span class="pl-k">*</span>g<span class="pl-k">*</span>h,<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>c<span class="pl-k">*</span>g<span class="pl-k">*</span>e<span class="pl-k">-</span>f<span class="pl-k">*</span>d<span class="pl-k">*</span>h,<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>c<span class="pl-k">*</span>d<span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L93" class="blob-num js-line-number" data-line-number="93"></td>
        <td id="LC93" class="blob-code blob-code-inner js-file-line">h<span class="pl-k">-</span>f<span class="pl-k">*</span>g<span class="pl-k">*</span>e,<span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">=</span>c<span class="pl-k">*</span>d<span class="pl-k">*</span>e<span class="pl-k">+</span>f<span class="pl-k">*</span>g<span class="pl-k">*</span>h)<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>ZXY<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>b<span class="pl-k">?</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>f<span class="pl-k">*</span>d<span class="pl-k">*</span>e<span class="pl-k">-</span>c<span class="pl-k">*</span>g<span class="pl-k">*</span>h,<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>c<span class="pl-k">*</span>g<span class="pl-k">*</span>e<span class="pl-k">+</span>f<span class="pl-k">*</span>d<span class="pl-k">*</span>h,<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>c<span class="pl-k">*</span>d<span class="pl-k">*</span>h<span class="pl-k">+</span>f<span class="pl-k">*</span>g<span class="pl-k">*</span>e,<span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">=</span>c<span class="pl-k">*</span>d<span class="pl-k">*</span>e<span class="pl-k">-</span>f<span class="pl-k">*</span>g<span class="pl-k">*</span>h)<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>ZYX<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>b<span class="pl-k">?</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>f<span class="pl-k">*</span>d<span class="pl-k">*</span>e<span class="pl-k">-</span>c<span class="pl-k">*</span>g<span class="pl-k">*</span>h,<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>c<span class="pl-k">*</span>g<span class="pl-k">*</span>e<span class="pl-k">+</span>f<span class="pl-k">*</span>d<span class="pl-k">*</span>h,<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>c<span class="pl-k">*</span>d<span class="pl-k">*</span>h<span class="pl-k">-</span>f<span class="pl-k">*</span>g<span class="pl-k">*</span>e,<span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">=</span>c<span class="pl-k">*</span>d<span class="pl-k">*</span>e<span class="pl-k">+</span>f<span class="pl-k">*</span>g<span class="pl-k">*</span>h)<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>YZX<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>b<span class="pl-k">?</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>f<span class="pl-k">*</span>d<span class="pl-k">*</span>e<span class="pl-k">+</span>c<span class="pl-k">*</span>g<span class="pl-k">*</span>h,<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>c<span class="pl-k">*</span>g<span class="pl-k">*</span>e<span class="pl-k">+</span>f<span class="pl-k">*</span>d<span class="pl-k">*</span>h,<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>c<span class="pl-k">*</span>d<span class="pl-k">*</span>h<span class="pl-k">-</span>f<span class="pl-k">*</span>g<span class="pl-k">*</span>e,<span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">=</span>c<span class="pl-k">*</span>d<span class="pl-k">*</span>e<span class="pl-k">-</span>f<span class="pl-k">*</span>g<span class="pl-k">*</span>h)<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>XZY<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>f<span class="pl-k">*</span>d<span class="pl-k">*</span>e<span class="pl-k">-</span>c<span class="pl-k">*</span>g<span class="pl-k">*</span>h,<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>c<span class="pl-k">*</span>g<span class="pl-k">*</span>e<span class="pl-k">-</span>f<span class="pl-k">*</span>d<span class="pl-k">*</span>h,<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>c<span class="pl-k">*</span>d<span class="pl-k">*</span>h<span class="pl-k">+</span>f<span class="pl-k">*</span>g<span class="pl-k">*</span>e,<span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">=</span>c<span class="pl-k">*</span>d<span class="pl-k">*</span>e<span class="pl-k">+</span>f<span class="pl-k">*</span>g<span class="pl-k">*</span>h);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">setFromAxisAngle</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span>b<span class="pl-k">/</span><span class="pl-c1">2</span>,d<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(c);<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>d;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>d;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">*</span>d;<span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(c);</td>
      </tr>
      <tr>
        <td id="L94" class="blob-num js-line-number" data-line-number="94"></td>
        <td id="LC94" class="blob-code blob-code-inner js-file-line"><span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">setFromRotationMatrix</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">elements</span>,c<span class="pl-k">=</span>b[<span class="pl-c1">0</span>],a<span class="pl-k">=</span>b[<span class="pl-c1">4</span>],d<span class="pl-k">=</span>b[<span class="pl-c1">8</span>],e<span class="pl-k">=</span>b[<span class="pl-c1">1</span>],f<span class="pl-k">=</span>b[<span class="pl-c1">5</span>],g<span class="pl-k">=</span>b[<span class="pl-c1">9</span>],h<span class="pl-k">=</span>b[<span class="pl-c1">2</span>],i<span class="pl-k">=</span>b[<span class="pl-c1">6</span>],b<span class="pl-k">=</span>b[<span class="pl-c1">10</span>],j<span class="pl-k">=</span>c<span class="pl-k">+</span>f<span class="pl-k">+</span>b;<span class="pl-c1">0</span><span class="pl-k">&lt;</span>j<span class="pl-k">?</span>(c<span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">/</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(j<span class="pl-k">+</span><span class="pl-c1">1</span>),<span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">=</span><span class="pl-c1">0.25</span><span class="pl-k">/</span>c,<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>(i<span class="pl-k">-</span>g)<span class="pl-k">*</span>c,<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>(d<span class="pl-k">-</span>h)<span class="pl-k">*</span>c,<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>(e<span class="pl-k">-</span>a)<span class="pl-k">*</span>c)<span class="pl-k">:</span>c<span class="pl-k">&gt;</span>f<span class="pl-k">&amp;&amp;</span>c<span class="pl-k">&gt;</span>b<span class="pl-k">?</span>(c<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-c1">1</span><span class="pl-k">+</span>c<span class="pl-k">-</span>f<span class="pl-k">-</span>b),<span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">=</span>(i<span class="pl-k">-</span>g)<span class="pl-k">/</span>c,<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0.25</span><span class="pl-k">*</span>c,<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>(a<span class="pl-k">+</span>e)<span class="pl-k">/</span>c,<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>(d<span class="pl-k">+</span>h)<span class="pl-k">/</span>c)<span class="pl-k">:</span>f<span class="pl-k">&gt;</span>b<span class="pl-k">?</span>(c<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-c1">1</span><span class="pl-k">+</span>f<span class="pl-k">-</span>c<span class="pl-k">-</span>b),<span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">=</span>(d<span class="pl-k">-</span>h)<span class="pl-k">/</span>c,<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>(a<span class="pl-k">+</span>e)<span class="pl-k">/</span>c,<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0.25</span><span class="pl-k">*</span>c,<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>(g<span class="pl-k">+</span>i)<span class="pl-k">/</span>c)<span class="pl-k">:</span>(c<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-c1">1</span><span class="pl-k">+</span>b<span class="pl-k">-</span>c<span class="pl-k">-</span>f),<span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">=</span>(e<span class="pl-k">-</span>a)<span class="pl-k">/</span>c,<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>(d<span class="pl-k">+</span>h)<span class="pl-k">/</span>c,<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>(g<span class="pl-k">+</span>i)<span class="pl-k">/</span>c,<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">0.25</span><span class="pl-k">*</span>c);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">calculateW</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L95" class="blob-num js-line-number" data-line-number="95"></td>
        <td id="LC95" class="blob-code blob-code-inner js-file-line"><span class="pl-k">-</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(<span class="pl-c1">1</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-c1">z</span>));<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">inverse</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">*=</span><span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">*=</span><span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">*=</span><span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">length</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">w</span>)},<span class="pl-en">normalize</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">w</span>);<span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">:</span>(a<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>a,<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">*=</span>a,<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">*=</span>a,<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">*=</span>a,<span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">*=</span>a);<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">multiply</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>,d<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>,e<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>,f<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">w</span>,g<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">x</span>,h<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">y</span>,i<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">z</span>,j<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">w</span>;</td>
      </tr>
      <tr>
        <td id="L96" class="blob-num js-line-number" data-line-number="96"></td>
        <td id="LC96" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>c<span class="pl-k">*</span>j<span class="pl-k">+</span>d<span class="pl-k">*</span>i<span class="pl-k">-</span>e<span class="pl-k">*</span>h<span class="pl-k">+</span>f<span class="pl-k">*</span>g;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-k">-</span>c<span class="pl-k">*</span>i<span class="pl-k">+</span>d<span class="pl-k">*</span>j<span class="pl-k">+</span>e<span class="pl-k">*</span>g<span class="pl-k">+</span>f<span class="pl-k">*</span>h;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>c<span class="pl-k">*</span>h<span class="pl-k">-</span>d<span class="pl-k">*</span>g<span class="pl-k">+</span>e<span class="pl-k">*</span>j<span class="pl-k">+</span>f<span class="pl-k">*</span>i;<span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">=</span><span class="pl-k">-</span>c<span class="pl-k">*</span>g<span class="pl-k">-</span>d<span class="pl-k">*</span>h<span class="pl-k">-</span>e<span class="pl-k">*</span>i<span class="pl-k">+</span>f<span class="pl-k">*</span>j;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">multiplySelf</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span>,c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span>,d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">z</span>,e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">w</span>,f<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>,g<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>,h<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>,a<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">w</span>;<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>b<span class="pl-k">*</span>a<span class="pl-k">+</span>e<span class="pl-k">*</span>f<span class="pl-k">+</span>c<span class="pl-k">*</span>h<span class="pl-k">-</span>d<span class="pl-k">*</span>g;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>c<span class="pl-k">*</span>a<span class="pl-k">+</span>e<span class="pl-k">*</span>g<span class="pl-k">+</span>d<span class="pl-k">*</span>f<span class="pl-k">-</span>b<span class="pl-k">*</span>h;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>d<span class="pl-k">*</span>a<span class="pl-k">+</span>e<span class="pl-k">*</span>h<span class="pl-k">+</span>b<span class="pl-k">*</span>g<span class="pl-k">-</span>c<span class="pl-k">*</span>f;<span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">=</span>e<span class="pl-k">*</span>a<span class="pl-k">-</span>b<span class="pl-k">*</span>f<span class="pl-k">-</span>c<span class="pl-k">*</span>g<span class="pl-k">-</span>d<span class="pl-k">*</span>h;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">multiplyVector3</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){b<span class="pl-k">||</span>(b<span class="pl-k">=</span>a);<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>,d<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>,e<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>,f<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span>,g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span>,h<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">z</span>,i<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">w</span>,j<span class="pl-k">=</span>i<span class="pl-k">*</span>c<span class="pl-k">+</span>g<span class="pl-k">*</span>e<span class="pl-k">-</span>h<span class="pl-k">*</span>d,l<span class="pl-k">=</span>i<span class="pl-k">*</span>d<span class="pl-k">+</span>h<span class="pl-k">*</span>c<span class="pl-k">-</span>f<span class="pl-k">*</span>e,m<span class="pl-k">=</span>i<span class="pl-k">*</span>e<span class="pl-k">+</span>f<span class="pl-k">*</span>d<span class="pl-k">-</span>g<span class="pl-k">*</span>c,c<span class="pl-k">=</span><span class="pl-k">-</span>f<span class="pl-k">*</span>c<span class="pl-k">-</span>g<span class="pl-k">*</span>d<span class="pl-k">-</span>h<span class="pl-k">*</span>e;<span class="pl-smi">b</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>j<span class="pl-k">*</span>i<span class="pl-k">+</span>c<span class="pl-k">*-</span>f<span class="pl-k">+</span>l<span class="pl-k">*-</span>h<span class="pl-k">-</span>m<span class="pl-k">*-</span>g;<span class="pl-smi">b</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>l<span class="pl-k">*</span>i<span class="pl-k">+</span>c<span class="pl-k">*-</span>g<span class="pl-k">+</span>m<span class="pl-k">*-</span>f<span class="pl-k">-</span>j<span class="pl-k">*-</span>h;</td>
      </tr>
      <tr>
        <td id="L97" class="blob-num js-line-number" data-line-number="97"></td>
        <td id="LC97" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">b</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>m<span class="pl-k">*</span>i<span class="pl-k">+</span>c<span class="pl-k">*-</span>h<span class="pl-k">+</span>j<span class="pl-k">*-</span>g<span class="pl-k">-</span>l<span class="pl-k">*-</span>f;<span class="pl-k">return</span> b},<span class="pl-en">slerpSelf</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span>,d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span>,e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">z</span>,f<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">w</span>,g<span class="pl-k">=</span>f<span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">w</span><span class="pl-k">+</span>c<span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>d<span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>e<span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>;<span class="pl-c1">0</span><span class="pl-k">&gt;</span>g<span class="pl-k">?</span>(<span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-smi">a</span>.<span class="pl-smi">w</span>,<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>,<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>,<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>,g<span class="pl-k">=</span><span class="pl-k">-</span>g)<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-en">copy</span>(a);<span class="pl-k">if</span>(<span class="pl-c1">1</span><span class="pl-k">&lt;=</span>g)<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">=</span>f,<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>c,<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>d,<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>e,<span class="pl-c1">this</span>;<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">acos</span>(g),i<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>g<span class="pl-k">*</span>g);<span class="pl-k">if</span>(<span class="pl-c1">0.001</span><span class="pl-k">&gt;</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(i))<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(f<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">w</span>),<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(c<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span>),<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(d<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span>),<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(e<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-c1">z</span>),<span class="pl-c1">this</span>;g<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>((<span class="pl-c1">1</span><span class="pl-k">-</span>b)<span class="pl-k">*</span>h)<span class="pl-k">/</span>i;h<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(b<span class="pl-k">*</span>h)<span class="pl-k">/</span>i;<span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">=</span>f<span class="pl-k">*</span>g<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">w</span><span class="pl-k">*</span>h;<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>c<span class="pl-k">*</span>g<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>h;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>d<span class="pl-k">*</span>g<span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L98" class="blob-num js-line-number" data-line-number="98"></td>
        <td id="LC98" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>h;<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>e<span class="pl-k">*</span>g<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">*</span>h;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.Quaternion</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span>,<span class="pl-c1">this</span>.<span class="pl-c1">y</span>,<span class="pl-c1">this</span>.<span class="pl-c1">z</span>,<span class="pl-c1">this</span>.<span class="pl-smi">w</span>)}};</td>
      </tr>
      <tr>
        <td id="L99" class="blob-num js-line-number" data-line-number="99"></td>
        <td id="LC99" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Quaternion</span>.<span class="pl-en">slerp</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">w</span><span class="pl-k">*</span><span class="pl-smi">b</span>.<span class="pl-smi">w</span><span class="pl-k">+</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">b</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">b</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">*</span><span class="pl-smi">b</span>.<span class="pl-c1">z</span>;<span class="pl-c1">0</span><span class="pl-k">&gt;</span>e<span class="pl-k">?</span>(<span class="pl-smi">c</span>.<span class="pl-smi">w</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-smi">b</span>.<span class="pl-smi">w</span>,<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-smi">b</span>.<span class="pl-c1">x</span>,<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-smi">b</span>.<span class="pl-c1">y</span>,<span class="pl-smi">c</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-smi">b</span>.<span class="pl-c1">z</span>,e<span class="pl-k">=</span><span class="pl-k">-</span>e)<span class="pl-k">:</span><span class="pl-smi">c</span>.<span class="pl-en">copy</span>(b);<span class="pl-k">if</span>(<span class="pl-c1">1</span><span class="pl-k">&lt;=</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(e))<span class="pl-k">return</span> <span class="pl-smi">c</span>.<span class="pl-smi">w</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">w</span>,<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>,<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>,<span class="pl-smi">c</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>,c;<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">acos</span>(e),f<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>e<span class="pl-k">*</span>e);<span class="pl-k">if</span>(<span class="pl-c1">0.001</span><span class="pl-k">&gt;</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(f))<span class="pl-k">return</span> <span class="pl-smi">c</span>.<span class="pl-smi">w</span><span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(<span class="pl-smi">a</span>.<span class="pl-smi">w</span><span class="pl-k">+</span><span class="pl-smi">c</span>.<span class="pl-smi">w</span>),<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(<span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">c</span>.<span class="pl-c1">x</span>),<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(<span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-smi">c</span>.<span class="pl-c1">y</span>),<span class="pl-smi">c</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(<span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">+</span><span class="pl-smi">c</span>.<span class="pl-c1">z</span>),c;e<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>((<span class="pl-c1">1</span><span class="pl-k">-</span>d)<span class="pl-k">*</span>b)<span class="pl-k">/</span>f;d<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(d<span class="pl-k">*</span>b)<span class="pl-k">/</span>f;<span class="pl-smi">c</span>.<span class="pl-smi">w</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">w</span><span class="pl-k">*</span>e<span class="pl-k">+</span><span class="pl-smi">c</span>.<span class="pl-smi">w</span><span class="pl-k">*</span>d;<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>e<span class="pl-k">+</span><span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>d;<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>e<span class="pl-k">+</span><span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>d;<span class="pl-smi">c</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">*</span>e<span class="pl-k">+</span><span class="pl-smi">c</span>.<span class="pl-c1">z</span><span class="pl-k">*</span>d;<span class="pl-k">return</span> c};</td>
      </tr>
      <tr>
        <td id="L100" class="blob-num js-line-number" data-line-number="100"></td>
        <td id="LC100" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">Vertex</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Vertex has been DEPRECATED. Use THREE.Vector3 instead.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> a};<span class="pl-c1">THREE</span>.<span class="pl-en">Face3</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>){<span class="pl-c1">this</span>.<span class="pl-smi">a</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">b</span><span class="pl-k">=</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">c</span><span class="pl-k">=</span>c;<span class="pl-c1">this</span>.<span class="pl-smi">normal</span><span class="pl-k">=</span>d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Vector3</span><span class="pl-k">?</span>d<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-c1">this</span>.<span class="pl-smi">vertexNormals</span><span class="pl-k">=</span>d <span class="pl-k">instanceof</span> <span class="pl-c1">Array</span><span class="pl-k">?</span>d<span class="pl-k">:</span>[];<span class="pl-c1">this</span>.<span class="pl-c1">color</span><span class="pl-k">=</span>e <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Color</span><span class="pl-k">?</span>e<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>;<span class="pl-c1">this</span>.<span class="pl-smi">vertexColors</span><span class="pl-k">=</span>e <span class="pl-k">instanceof</span> <span class="pl-c1">Array</span><span class="pl-k">?</span>e<span class="pl-k">:</span>[];<span class="pl-c1">this</span>.<span class="pl-smi">vertexTangents</span><span class="pl-k">=</span>[];<span class="pl-c1">this</span>.<span class="pl-smi">materialIndex</span><span class="pl-k">=</span>f;<span class="pl-c1">this</span>.<span class="pl-smi">centroid</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>};</td>
      </tr>
      <tr>
        <td id="L101" class="blob-num js-line-number" data-line-number="101"></td>
        <td id="LC101" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Face3</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.Face3,clone:<span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(<span class="pl-c1">this</span>.<span class="pl-smi">a</span>,<span class="pl-c1">this</span>.<span class="pl-smi">b</span>,<span class="pl-c1">this</span>.<span class="pl-smi">c</span>);<span class="pl-smi">a</span>.<span class="pl-smi">normal</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">normal</span>);<span class="pl-smi">a</span>.<span class="pl-c1">color</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-c1">color</span>);<span class="pl-smi">a</span>.<span class="pl-smi">centroid</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">centroid</span>);<span class="pl-smi">a</span>.<span class="pl-smi">materialIndex</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">materialIndex</span>;<span class="pl-k">var</span> b,c;b<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertexNormals</span>.<span class="pl-c1">length</span>;b<span class="pl-k">&lt;</span>c;b<span class="pl-k">++</span>)<span class="pl-smi">a</span>.<span class="pl-smi">vertexNormals</span>[b]<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertexNormals</span>[b].<span class="pl-en">clone</span>();b<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertexColors</span>.<span class="pl-c1">length</span>;b<span class="pl-k">&lt;</span>c;b<span class="pl-k">++</span>)<span class="pl-smi">a</span>.<span class="pl-smi">vertexColors</span>[b]<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertexColors</span>[b].<span class="pl-en">clone</span>();b<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertexTangents</span>.<span class="pl-c1">length</span>;b<span class="pl-k">&lt;</span>c;b<span class="pl-k">++</span>)<span class="pl-smi">a</span>.<span class="pl-smi">vertexTangents</span>[b]<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertexTangents</span>[b].<span class="pl-en">clone</span>();</td>
      </tr>
      <tr>
        <td id="L102" class="blob-num js-line-number" data-line-number="102"></td>
        <td id="LC102" class="blob-code blob-code-inner js-file-line"><span class="pl-k">return</span> a}};<span class="pl-c1">THREE</span>.<span class="pl-en">Face4</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>,<span class="pl-smi">g</span>){<span class="pl-c1">this</span>.<span class="pl-smi">a</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">b</span><span class="pl-k">=</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">c</span><span class="pl-k">=</span>c;<span class="pl-c1">this</span>.<span class="pl-smi">d</span><span class="pl-k">=</span>d;<span class="pl-c1">this</span>.<span class="pl-smi">normal</span><span class="pl-k">=</span>e <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Vector3</span><span class="pl-k">?</span>e<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-c1">this</span>.<span class="pl-smi">vertexNormals</span><span class="pl-k">=</span>e <span class="pl-k">instanceof</span> <span class="pl-c1">Array</span><span class="pl-k">?</span>e<span class="pl-k">:</span>[];<span class="pl-c1">this</span>.<span class="pl-c1">color</span><span class="pl-k">=</span>f <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Color</span><span class="pl-k">?</span>f<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>;<span class="pl-c1">this</span>.<span class="pl-smi">vertexColors</span><span class="pl-k">=</span>f <span class="pl-k">instanceof</span> <span class="pl-c1">Array</span><span class="pl-k">?</span>f<span class="pl-k">:</span>[];<span class="pl-c1">this</span>.<span class="pl-smi">vertexTangents</span><span class="pl-k">=</span>[];<span class="pl-c1">this</span>.<span class="pl-smi">materialIndex</span><span class="pl-k">=</span>g;<span class="pl-c1">this</span>.<span class="pl-smi">centroid</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>};</td>
      </tr>
      <tr>
        <td id="L103" class="blob-num js-line-number" data-line-number="103"></td>
        <td id="LC103" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Face4</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.Face4,clone:<span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Face4</span>(<span class="pl-c1">this</span>.<span class="pl-smi">a</span>,<span class="pl-c1">this</span>.<span class="pl-smi">b</span>,<span class="pl-c1">this</span>.<span class="pl-smi">c</span>,<span class="pl-c1">this</span>.<span class="pl-smi">d</span>);<span class="pl-smi">a</span>.<span class="pl-smi">normal</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">normal</span>);<span class="pl-smi">a</span>.<span class="pl-c1">color</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-c1">color</span>);<span class="pl-smi">a</span>.<span class="pl-smi">centroid</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">centroid</span>);<span class="pl-smi">a</span>.<span class="pl-smi">materialIndex</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">materialIndex</span>;<span class="pl-k">var</span> b,c;b<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertexNormals</span>.<span class="pl-c1">length</span>;b<span class="pl-k">&lt;</span>c;b<span class="pl-k">++</span>)<span class="pl-smi">a</span>.<span class="pl-smi">vertexNormals</span>[b]<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertexNormals</span>[b].<span class="pl-en">clone</span>();b<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertexColors</span>.<span class="pl-c1">length</span>;b<span class="pl-k">&lt;</span>c;b<span class="pl-k">++</span>)<span class="pl-smi">a</span>.<span class="pl-smi">vertexColors</span>[b]<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertexColors</span>[b].<span class="pl-en">clone</span>();b<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertexTangents</span>.<span class="pl-c1">length</span>;b<span class="pl-k">&lt;</span>c;b<span class="pl-k">++</span>)<span class="pl-smi">a</span>.<span class="pl-smi">vertexTangents</span>[b]<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertexTangents</span>[b].<span class="pl-en">clone</span>();</td>
      </tr>
      <tr>
        <td id="L104" class="blob-num js-line-number" data-line-number="104"></td>
        <td id="LC104" class="blob-code blob-code-inner js-file-line"><span class="pl-k">return</span> a}};<span class="pl-c1">THREE</span>.<span class="pl-en">UV</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-smi">u</span><span class="pl-k">=</span>a<span class="pl-k">||</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">v</span><span class="pl-k">=</span>b<span class="pl-k">||</span><span class="pl-c1">0</span>};<span class="pl-c1">THREE</span>.<span class="pl-c1">UV</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.UV,set:<span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-smi">u</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">v</span><span class="pl-k">=</span>b;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">copy</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">u</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">u</span>;<span class="pl-c1">this</span>.<span class="pl-smi">v</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">v</span>;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">lerpSelf</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-smi">u</span><span class="pl-k">+=</span>(<span class="pl-smi">a</span>.<span class="pl-smi">u</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">u</span>)<span class="pl-k">*</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">v</span><span class="pl-k">+=</span>(<span class="pl-smi">a</span>.<span class="pl-smi">v</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">v</span>)<span class="pl-k">*</span>b;<span class="pl-k">return</span> <span class="pl-c1">this</span>},<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.UV</span>(<span class="pl-c1">this</span>.<span class="pl-smi">u</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v</span>)}};</td>
      </tr>
      <tr>
        <td id="L105" class="blob-num js-line-number" data-line-number="105"></td>
        <td id="LC105" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">Geometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">THREE</span>.<span class="pl-smi">GeometryLibrary</span>.<span class="pl-c1">push</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-c1">id</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">GeometryIdCount</span><span class="pl-k">++</span>;<span class="pl-c1">this</span>.<span class="pl-c1">name</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-smi">vertices</span><span class="pl-k">=</span>[];<span class="pl-c1">this</span>.<span class="pl-smi">colors</span><span class="pl-k">=</span>[];<span class="pl-c1">this</span>.<span class="pl-smi">materials</span><span class="pl-k">=</span>[];<span class="pl-c1">this</span>.<span class="pl-smi">faces</span><span class="pl-k">=</span>[];<span class="pl-c1">this</span>.<span class="pl-smi">faceUvs</span><span class="pl-k">=</span>[[]];<span class="pl-c1">this</span>.<span class="pl-smi">faceVertexUvs</span><span class="pl-k">=</span>[[]];<span class="pl-c1">this</span>.<span class="pl-smi">morphTargets</span><span class="pl-k">=</span>[];<span class="pl-c1">this</span>.<span class="pl-smi">morphColors</span><span class="pl-k">=</span>[];<span class="pl-c1">this</span>.<span class="pl-smi">morphNormals</span><span class="pl-k">=</span>[];<span class="pl-c1">this</span>.<span class="pl-smi">skinWeights</span><span class="pl-k">=</span>[];<span class="pl-c1">this</span>.<span class="pl-smi">skinIndices</span><span class="pl-k">=</span>[];<span class="pl-c1">this</span>.<span class="pl-smi">boundingSphere</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">boundingBox</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">hasTangents</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">dynamic</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">colorsNeedUpdate</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">tangentsNeedUpdate</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">normalsNeedUpdate</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">uvsNeedUpdate</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">elementsNeedUpdate</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L106" class="blob-num js-line-number" data-line-number="106"></td>
        <td id="LC106" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">verticesNeedUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>};</td>
      </tr>
      <tr>
        <td id="L107" class="blob-num js-line-number" data-line-number="107"></td>
        <td id="LC107" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.Geometry,applyMatrix:<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>;<span class="pl-smi">b</span>.<span class="pl-en">extractRotation</span>(a);<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">0</span>,d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>d;c<span class="pl-k">++</span>)<span class="pl-smi">a</span>.<span class="pl-en">multiplyVector3</span>(<span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>[c]);c<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>d;c<span class="pl-k">++</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faces</span>[c];<span class="pl-smi">b</span>.<span class="pl-en">multiplyVector3</span>(<span class="pl-smi">e</span>.<span class="pl-smi">normal</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-c1">0</span>,g<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">vertexNormals</span>.<span class="pl-c1">length</span>;f<span class="pl-k">&lt;</span>g;f<span class="pl-k">++</span>)<span class="pl-smi">b</span>.<span class="pl-en">multiplyVector3</span>(<span class="pl-smi">e</span>.<span class="pl-smi">vertexNormals</span>[f]);<span class="pl-smi">a</span>.<span class="pl-en">multiplyVector3</span>(<span class="pl-smi">e</span>.<span class="pl-smi">centroid</span>)}},<span class="pl-en">computeCentroids</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a,b,c;a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">length</span>;a<span class="pl-k">&lt;</span>b;a<span class="pl-k">++</span>)c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faces</span>[a],<span class="pl-smi">c</span>.<span class="pl-smi">centroid</span>.<span class="pl-c1">set</span>(<span class="pl-c1">0</span>,</td>
      </tr>
      <tr>
        <td id="L108" class="blob-num js-line-number" data-line-number="108"></td>
        <td id="LC108" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>,<span class="pl-c1">0</span>),c <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Face3</span><span class="pl-k">?</span>(<span class="pl-smi">c</span>.<span class="pl-smi">centroid</span>.<span class="pl-en">addSelf</span>(<span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>[<span class="pl-smi">c</span>.<span class="pl-smi">a</span>]),<span class="pl-smi">c</span>.<span class="pl-smi">centroid</span>.<span class="pl-en">addSelf</span>(<span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>[<span class="pl-smi">c</span>.<span class="pl-smi">b</span>]),<span class="pl-smi">c</span>.<span class="pl-smi">centroid</span>.<span class="pl-en">addSelf</span>(<span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>[<span class="pl-smi">c</span>.<span class="pl-smi">c</span>]),<span class="pl-smi">c</span>.<span class="pl-smi">centroid</span>.<span class="pl-en">divideScalar</span>(<span class="pl-c1">3</span>))<span class="pl-k">:</span>c <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Face4</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">c</span>.<span class="pl-smi">centroid</span>.<span class="pl-en">addSelf</span>(<span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>[<span class="pl-smi">c</span>.<span class="pl-smi">a</span>]),<span class="pl-smi">c</span>.<span class="pl-smi">centroid</span>.<span class="pl-en">addSelf</span>(<span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>[<span class="pl-smi">c</span>.<span class="pl-smi">b</span>]),<span class="pl-smi">c</span>.<span class="pl-smi">centroid</span>.<span class="pl-en">addSelf</span>(<span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>[<span class="pl-smi">c</span>.<span class="pl-smi">c</span>]),<span class="pl-smi">c</span>.<span class="pl-smi">centroid</span>.<span class="pl-en">addSelf</span>(<span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>[<span class="pl-smi">c</span>.<span class="pl-smi">d</span>]),<span class="pl-smi">c</span>.<span class="pl-smi">centroid</span>.<span class="pl-en">divideScalar</span>(<span class="pl-c1">4</span>))},<span class="pl-en">computeFaceNormals</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a,b,c,d,e,f,g<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,h<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">length</span>;a<span class="pl-k">&lt;</span></td>
      </tr>
      <tr>
        <td id="L109" class="blob-num js-line-number" data-line-number="109"></td>
        <td id="LC109" class="blob-code blob-code-inner js-file-line">b;a<span class="pl-k">++</span>)c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faces</span>[a],d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>[<span class="pl-smi">c</span>.<span class="pl-smi">a</span>],e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>[<span class="pl-smi">c</span>.<span class="pl-smi">b</span>],f<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>[<span class="pl-smi">c</span>.<span class="pl-smi">c</span>],<span class="pl-smi">g</span>.<span class="pl-c1">sub</span>(f,e),<span class="pl-smi">h</span>.<span class="pl-c1">sub</span>(d,e),<span class="pl-smi">g</span>.<span class="pl-en">crossSelf</span>(h),<span class="pl-smi">g</span>.<span class="pl-en">isZero</span>()<span class="pl-k">||</span><span class="pl-smi">g</span>.<span class="pl-c1">normalize</span>(),<span class="pl-smi">c</span>.<span class="pl-smi">normal</span>.<span class="pl-en">copy</span>(g)},<span class="pl-en">computeVertexNormals</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a,b,c,d;<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-smi">__tmpVertices</span>){d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">__tmpVertices</span><span class="pl-k">=</span><span class="pl-c1">Array</span>(<span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">length</span>);a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">length</span>;a<span class="pl-k">&lt;</span>b;a<span class="pl-k">++</span>)d[a]<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">length</span>;a<span class="pl-k">&lt;</span>b;a<span class="pl-k">++</span>)c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faces</span>[a],c <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Face3</span><span class="pl-k">?</span><span class="pl-smi">c</span>.<span class="pl-smi">vertexNormals</span><span class="pl-k">=</span>[<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>]<span class="pl-k">:</span></td>
      </tr>
      <tr>
        <td id="L110" class="blob-num js-line-number" data-line-number="110"></td>
        <td id="LC110" class="blob-code blob-code-inner js-file-line">c <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Face4</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">c</span>.<span class="pl-smi">vertexNormals</span><span class="pl-k">=</span>[<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>])}<span class="pl-k">else</span>{d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">__tmpVertices</span>;a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">length</span>;a<span class="pl-k">&lt;</span>b;a<span class="pl-k">++</span>)d[a].<span class="pl-c1">set</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>)}a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">length</span>;a<span class="pl-k">&lt;</span>b;a<span class="pl-k">++</span>)c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faces</span>[a],c <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Face3</span><span class="pl-k">?</span>(d[<span class="pl-smi">c</span>.<span class="pl-smi">a</span>].<span class="pl-en">addSelf</span>(<span class="pl-smi">c</span>.<span class="pl-smi">normal</span>),d[<span class="pl-smi">c</span>.<span class="pl-smi">b</span>].<span class="pl-en">addSelf</span>(<span class="pl-smi">c</span>.<span class="pl-smi">normal</span>),d[<span class="pl-smi">c</span>.<span class="pl-smi">c</span>].<span class="pl-en">addSelf</span>(<span class="pl-smi">c</span>.<span class="pl-smi">normal</span>))<span class="pl-k">:</span>c <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Face4</span><span class="pl-k">&amp;&amp;</span>(d[<span class="pl-smi">c</span>.<span class="pl-smi">a</span>].<span class="pl-en">addSelf</span>(<span class="pl-smi">c</span>.<span class="pl-smi">normal</span>),d[<span class="pl-smi">c</span>.<span class="pl-smi">b</span>].<span class="pl-en">addSelf</span>(<span class="pl-smi">c</span>.<span class="pl-smi">normal</span>),d[<span class="pl-smi">c</span>.<span class="pl-smi">c</span>].<span class="pl-en">addSelf</span>(<span class="pl-smi">c</span>.<span class="pl-smi">normal</span>),d[<span class="pl-smi">c</span>.<span class="pl-smi">d</span>].<span class="pl-en">addSelf</span>(<span class="pl-smi">c</span>.<span class="pl-smi">normal</span>));a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">length</span>;a<span class="pl-k">&lt;</span></td>
      </tr>
      <tr>
        <td id="L111" class="blob-num js-line-number" data-line-number="111"></td>
        <td id="LC111" class="blob-code blob-code-inner js-file-line">b;a<span class="pl-k">++</span>)d[a].<span class="pl-c1">normalize</span>();a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">length</span>;a<span class="pl-k">&lt;</span>b;a<span class="pl-k">++</span>)c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faces</span>[a],c <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Face3</span><span class="pl-k">?</span>(<span class="pl-smi">c</span>.<span class="pl-smi">vertexNormals</span>[<span class="pl-c1">0</span>].<span class="pl-en">copy</span>(d[<span class="pl-smi">c</span>.<span class="pl-smi">a</span>]),<span class="pl-smi">c</span>.<span class="pl-smi">vertexNormals</span>[<span class="pl-c1">1</span>].<span class="pl-en">copy</span>(d[<span class="pl-smi">c</span>.<span class="pl-smi">b</span>]),<span class="pl-smi">c</span>.<span class="pl-smi">vertexNormals</span>[<span class="pl-c1">2</span>].<span class="pl-en">copy</span>(d[<span class="pl-smi">c</span>.<span class="pl-smi">c</span>]))<span class="pl-k">:</span>c <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Face4</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">c</span>.<span class="pl-smi">vertexNormals</span>[<span class="pl-c1">0</span>].<span class="pl-en">copy</span>(d[<span class="pl-smi">c</span>.<span class="pl-smi">a</span>]),<span class="pl-smi">c</span>.<span class="pl-smi">vertexNormals</span>[<span class="pl-c1">1</span>].<span class="pl-en">copy</span>(d[<span class="pl-smi">c</span>.<span class="pl-smi">b</span>]),<span class="pl-smi">c</span>.<span class="pl-smi">vertexNormals</span>[<span class="pl-c1">2</span>].<span class="pl-en">copy</span>(d[<span class="pl-smi">c</span>.<span class="pl-smi">c</span>]),<span class="pl-smi">c</span>.<span class="pl-smi">vertexNormals</span>[<span class="pl-c1">3</span>].<span class="pl-en">copy</span>(d[<span class="pl-smi">c</span>.<span class="pl-smi">d</span>]))},<span class="pl-en">computeMorphNormals</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a,b,c,d,e;c<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>d;c<span class="pl-k">++</span>){e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faces</span>[c];<span class="pl-smi">e</span>.<span class="pl-smi">__originalFaceNormal</span><span class="pl-k">?</span><span class="pl-smi">e</span>.<span class="pl-smi">__originalFaceNormal</span>.<span class="pl-en">copy</span>(<span class="pl-smi">e</span>.<span class="pl-smi">normal</span>)<span class="pl-k">:</span></td>
      </tr>
      <tr>
        <td id="L112" class="blob-num js-line-number" data-line-number="112"></td>
        <td id="LC112" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">e</span>.<span class="pl-smi">__originalFaceNormal</span><span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">normal</span>.<span class="pl-en">clone</span>();<span class="pl-smi">e</span>.<span class="pl-smi">__originalVertexNormals</span><span class="pl-k">||</span>(<span class="pl-smi">e</span>.<span class="pl-smi">__originalVertexNormals</span><span class="pl-k">=</span>[]);a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">vertexNormals</span>.<span class="pl-c1">length</span>;a<span class="pl-k">&lt;</span>b;a<span class="pl-k">++</span>)<span class="pl-smi">e</span>.<span class="pl-smi">__originalVertexNormals</span>[a]<span class="pl-k">?</span><span class="pl-smi">e</span>.<span class="pl-smi">__originalVertexNormals</span>[a].<span class="pl-en">copy</span>(<span class="pl-smi">e</span>.<span class="pl-smi">vertexNormals</span>[a])<span class="pl-k">:</span><span class="pl-smi">e</span>.<span class="pl-smi">__originalVertexNormals</span>[a]<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">vertexNormals</span>[a].<span class="pl-en">clone</span>()}<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Geometry</span>;<span class="pl-smi">f</span>.<span class="pl-smi">faces</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faces</span>;a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">morphTargets</span>.<span class="pl-c1">length</span>;a<span class="pl-k">&lt;</span>b;a<span class="pl-k">++</span>){<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">this</span>.<span class="pl-smi">morphNormals</span>[a]){<span class="pl-c1">this</span>.<span class="pl-smi">morphNormals</span>[a]<span class="pl-k">=</span>{};<span class="pl-c1">this</span>.<span class="pl-smi">morphNormals</span>[a].<span class="pl-smi">faceNormals</span><span class="pl-k">=</span>[];<span class="pl-c1">this</span>.<span class="pl-smi">morphNormals</span>[a].<span class="pl-smi">vertexNormals</span><span class="pl-k">=</span>[];<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">morphNormals</span>[a].<span class="pl-smi">faceNormals</span>,</td>
      </tr>
      <tr>
        <td id="L113" class="blob-num js-line-number" data-line-number="113"></td>
        <td id="LC113" class="blob-code blob-code-inner js-file-line">h<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">morphNormals</span>[a].<span class="pl-smi">vertexNormals</span>,i,j;c<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>d;c<span class="pl-k">++</span>)e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faces</span>[c],i<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,j<span class="pl-k">=</span>e <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Face3</span><span class="pl-k">?</span>{a<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,b<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,c<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>}<span class="pl-k">:</span>{a<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,b<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,c<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,d<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>},<span class="pl-smi">g</span>.<span class="pl-c1">push</span>(i),<span class="pl-smi">h</span>.<span class="pl-c1">push</span>(j)}g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">morphNormals</span>[a];<span class="pl-smi">f</span>.<span class="pl-smi">vertices</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">morphTargets</span>[a].<span class="pl-smi">vertices</span>;<span class="pl-smi">f</span>.<span class="pl-en">computeFaceNormals</span>();<span class="pl-smi">f</span>.<span class="pl-en">computeVertexNormals</span>();c<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>d;c<span class="pl-k">++</span>)e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faces</span>[c],i<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">faceNormals</span>[c],j<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">vertexNormals</span>[c],</td>
      </tr>
      <tr>
        <td id="L114" class="blob-num js-line-number" data-line-number="114"></td>
        <td id="LC114" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">i</span>.<span class="pl-en">copy</span>(<span class="pl-smi">e</span>.<span class="pl-smi">normal</span>),e <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Face3</span><span class="pl-k">?</span>(<span class="pl-smi">j</span>.<span class="pl-smi">a</span>.<span class="pl-en">copy</span>(<span class="pl-smi">e</span>.<span class="pl-smi">vertexNormals</span>[<span class="pl-c1">0</span>]),<span class="pl-smi">j</span>.<span class="pl-smi">b</span>.<span class="pl-en">copy</span>(<span class="pl-smi">e</span>.<span class="pl-smi">vertexNormals</span>[<span class="pl-c1">1</span>]),<span class="pl-smi">j</span>.<span class="pl-smi">c</span>.<span class="pl-en">copy</span>(<span class="pl-smi">e</span>.<span class="pl-smi">vertexNormals</span>[<span class="pl-c1">2</span>]))<span class="pl-k">:</span>(<span class="pl-smi">j</span>.<span class="pl-smi">a</span>.<span class="pl-en">copy</span>(<span class="pl-smi">e</span>.<span class="pl-smi">vertexNormals</span>[<span class="pl-c1">0</span>]),<span class="pl-smi">j</span>.<span class="pl-smi">b</span>.<span class="pl-en">copy</span>(<span class="pl-smi">e</span>.<span class="pl-smi">vertexNormals</span>[<span class="pl-c1">1</span>]),<span class="pl-smi">j</span>.<span class="pl-smi">c</span>.<span class="pl-en">copy</span>(<span class="pl-smi">e</span>.<span class="pl-smi">vertexNormals</span>[<span class="pl-c1">2</span>]),<span class="pl-smi">j</span>.<span class="pl-smi">d</span>.<span class="pl-en">copy</span>(<span class="pl-smi">e</span>.<span class="pl-smi">vertexNormals</span>[<span class="pl-c1">3</span>]))}c<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>d;c<span class="pl-k">++</span>)e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faces</span>[c],<span class="pl-smi">e</span>.<span class="pl-smi">normal</span><span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">__originalFaceNormal</span>,<span class="pl-smi">e</span>.<span class="pl-smi">vertexNormals</span><span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">__originalVertexNormals</span>},<span class="pl-en">computeTangents</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">function</span> <span class="pl-en">a</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>,<span class="pl-smi">y</span>){h<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertices</span>[b];i<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertices</span>[c];j<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertices</span>[d];l<span class="pl-k">=</span>g[e];m<span class="pl-k">=</span>g[f];n<span class="pl-k">=</span>g[y];p<span class="pl-k">=</span><span class="pl-smi">i</span>.<span class="pl-c1">x</span><span class="pl-k">-</span></td>
      </tr>
      <tr>
        <td id="L115" class="blob-num js-line-number" data-line-number="115"></td>
        <td id="LC115" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">h</span>.<span class="pl-c1">x</span>;o<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">h</span>.<span class="pl-c1">x</span>;q<span class="pl-k">=</span><span class="pl-smi">i</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">h</span>.<span class="pl-c1">y</span>;r<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">h</span>.<span class="pl-c1">y</span>;t<span class="pl-k">=</span><span class="pl-smi">i</span>.<span class="pl-c1">z</span><span class="pl-k">-</span><span class="pl-smi">h</span>.<span class="pl-c1">z</span>;<span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-c1">z</span><span class="pl-k">-</span><span class="pl-smi">h</span>.<span class="pl-c1">z</span>;u<span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-smi">u</span><span class="pl-k">-</span><span class="pl-smi">l</span>.<span class="pl-smi">u</span>;s<span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-smi">u</span><span class="pl-k">-</span><span class="pl-smi">l</span>.<span class="pl-smi">u</span>;z<span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-smi">v</span><span class="pl-k">-</span><span class="pl-smi">l</span>.<span class="pl-smi">v</span>;<span class="pl-c1">A</span><span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-smi">v</span><span class="pl-k">-</span><span class="pl-smi">l</span>.<span class="pl-smi">v</span>;v<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>(u<span class="pl-k">*</span><span class="pl-c1">A</span><span class="pl-k">-</span>s<span class="pl-k">*</span>z);<span class="pl-c1">H</span>.<span class="pl-c1">set</span>((<span class="pl-c1">A</span><span class="pl-k">*</span>p<span class="pl-k">-</span>z<span class="pl-k">*</span>o)<span class="pl-k">*</span>v,(<span class="pl-c1">A</span><span class="pl-k">*</span>q<span class="pl-k">-</span>z<span class="pl-k">*</span>r)<span class="pl-k">*</span>v,(<span class="pl-c1">A</span><span class="pl-k">*</span>t<span class="pl-k">-</span>z<span class="pl-k">*</span><span class="pl-c1">B</span>)<span class="pl-k">*</span>v);<span class="pl-c1">J</span>.<span class="pl-c1">set</span>((u<span class="pl-k">*</span>o<span class="pl-k">-</span>s<span class="pl-k">*</span>p)<span class="pl-k">*</span>v,(u<span class="pl-k">*</span>r<span class="pl-k">-</span>s<span class="pl-k">*</span>q)<span class="pl-k">*</span>v,(u<span class="pl-k">*</span><span class="pl-c1">B</span><span class="pl-k">-</span>s<span class="pl-k">*</span>t)<span class="pl-k">*</span>v);<span class="pl-c1">C</span>[b].<span class="pl-en">addSelf</span>(<span class="pl-c1">H</span>);<span class="pl-c1">C</span>[c].<span class="pl-en">addSelf</span>(<span class="pl-c1">H</span>);<span class="pl-c1">C</span>[d].<span class="pl-en">addSelf</span>(<span class="pl-c1">H</span>);<span class="pl-c1">G</span>[b].<span class="pl-en">addSelf</span>(<span class="pl-c1">J</span>);<span class="pl-c1">G</span>[c].<span class="pl-en">addSelf</span>(<span class="pl-c1">J</span>);<span class="pl-c1">G</span>[d].<span class="pl-en">addSelf</span>(<span class="pl-c1">J</span>)}<span class="pl-k">var</span> b,c,d,e,f,g,h,i,j,l,m,n,p,o,q,r,t,<span class="pl-c1">B</span>,u,s,z,<span class="pl-c1">A</span>,v,y,<span class="pl-c1">C</span><span class="pl-k">=</span>[],<span class="pl-c1">G</span><span class="pl-k">=</span>[],<span class="pl-c1">H</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,<span class="pl-c1">E</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,<span class="pl-c1">M</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,<span class="pl-c1">K</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;b<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">length</span>;b<span class="pl-k">&lt;</span>c;b<span class="pl-k">++</span>)<span class="pl-c1">C</span>[b]<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,</td>
      </tr>
      <tr>
        <td id="L116" class="blob-num js-line-number" data-line-number="116"></td>
        <td id="LC116" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">G</span>[b]<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;b<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">length</span>;b<span class="pl-k">&lt;</span>c;b<span class="pl-k">++</span>)f<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faces</span>[b],g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faceVertexUvs</span>[<span class="pl-c1">0</span>][b],f <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Face3</span><span class="pl-k">?</span><span class="pl-en">a</span>(<span class="pl-c1">this</span>,<span class="pl-smi">f</span>.<span class="pl-smi">a</span>,<span class="pl-smi">f</span>.<span class="pl-smi">b</span>,<span class="pl-smi">f</span>.<span class="pl-smi">c</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>)<span class="pl-k">:</span>f <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Face4</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-en">a</span>(<span class="pl-c1">this</span>,<span class="pl-smi">f</span>.<span class="pl-smi">a</span>,<span class="pl-smi">f</span>.<span class="pl-smi">b</span>,<span class="pl-smi">f</span>.<span class="pl-smi">d</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">3</span>),<span class="pl-en">a</span>(<span class="pl-c1">this</span>,<span class="pl-smi">f</span>.<span class="pl-smi">b</span>,<span class="pl-smi">f</span>.<span class="pl-smi">c</span>,<span class="pl-smi">f</span>.<span class="pl-smi">d</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>));<span class="pl-k">var</span> <span class="pl-c1">F</span><span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>a<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>b<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>c<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>d<span class="pl-pds">&quot;</span></span>];b<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">length</span>;b<span class="pl-k">&lt;</span>c;b<span class="pl-k">++</span>){f<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faces</span>[b];<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span><span class="pl-smi">f</span>.<span class="pl-smi">vertexNormals</span>.<span class="pl-c1">length</span>;d<span class="pl-k">++</span>)<span class="pl-c1">K</span>.<span class="pl-en">copy</span>(<span class="pl-smi">f</span>.<span class="pl-smi">vertexNormals</span>[d]),e<span class="pl-k">=</span>f[<span class="pl-c1">F</span>[d]],y<span class="pl-k">=</span><span class="pl-c1">C</span>[e],<span class="pl-c1">E</span>.<span class="pl-en">copy</span>(y),<span class="pl-c1">E</span>.<span class="pl-en">subSelf</span>(<span class="pl-c1">K</span>.<span class="pl-en">multiplyScalar</span>(<span class="pl-c1">K</span>.<span class="pl-en">dot</span>(y))).<span class="pl-c1">normalize</span>(),<span class="pl-c1">M</span>.<span class="pl-en">cross</span>(<span class="pl-smi">f</span>.<span class="pl-smi">vertexNormals</span>[d],y),e<span class="pl-k">=</span><span class="pl-c1">M</span>.<span class="pl-en">dot</span>(<span class="pl-c1">G</span>[e]),e<span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&gt;</span>e<span class="pl-k">?</span></td>
      </tr>
      <tr>
        <td id="L117" class="blob-num js-line-number" data-line-number="117"></td>
        <td id="LC117" class="blob-code blob-code-inner js-file-line"><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1</span>,<span class="pl-smi">f</span>.<span class="pl-smi">vertexTangents</span>[d]<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector4</span>(<span class="pl-c1">E</span>.<span class="pl-c1">x</span>,<span class="pl-c1">E</span>.<span class="pl-c1">y</span>,<span class="pl-c1">E</span>.<span class="pl-c1">z</span>,e)}<span class="pl-c1">this</span>.<span class="pl-smi">hasTangents</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>},<span class="pl-en">computeBoundingBox</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">boundingBox</span><span class="pl-k">||</span>(<span class="pl-c1">this</span>.<span class="pl-smi">boundingBox</span><span class="pl-k">=</span>{min<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,max<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>});<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">length</span>){<span class="pl-k">var</span> a;a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>[<span class="pl-c1">0</span>];<span class="pl-c1">this</span>.<span class="pl-smi">boundingBox</span>.<span class="pl-smi">min</span>.<span class="pl-en">copy</span>(a);<span class="pl-c1">this</span>.<span class="pl-smi">boundingBox</span>.<span class="pl-smi">max</span>.<span class="pl-en">copy</span>(a);<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">boundingBox</span>.<span class="pl-smi">min</span>,c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">boundingBox</span>.<span class="pl-smi">max</span>,d<span class="pl-k">=</span><span class="pl-c1">1</span>,e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">length</span>;d<span class="pl-k">&lt;</span>e;d<span class="pl-k">++</span>)(a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>[d],<span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">&lt;</span><span class="pl-smi">b</span>.<span class="pl-c1">x</span><span class="pl-k">?</span><span class="pl-smi">b</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">:</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">&gt;</span><span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>),<span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">&lt;</span><span class="pl-smi">b</span>.<span class="pl-c1">y</span><span class="pl-k">?</span><span class="pl-smi">b</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">:</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">&gt;</span><span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>),<span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">&lt;</span><span class="pl-smi">b</span>.<span class="pl-c1">z</span>)<span class="pl-k">?</span><span class="pl-smi">b</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">:</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">&gt;</span></td>
      </tr>
      <tr>
        <td id="L118" class="blob-num js-line-number" data-line-number="118"></td>
        <td id="LC118" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">c</span>.<span class="pl-c1">z</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">c</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>)}<span class="pl-k">else</span> <span class="pl-c1">this</span>.<span class="pl-smi">boundingBox</span>.<span class="pl-smi">min</span>.<span class="pl-c1">set</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>),<span class="pl-c1">this</span>.<span class="pl-smi">boundingBox</span>.<span class="pl-smi">max</span>.<span class="pl-c1">set</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>)},<span class="pl-en">computeBoundingSphere</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">null</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-smi">boundingSphere</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">this</span>.<span class="pl-smi">boundingSphere</span><span class="pl-k">=</span>{radius<span class="pl-k">:</span><span class="pl-c1">0</span>});<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>,c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">length</span>;b<span class="pl-k">&lt;</span>c;b<span class="pl-k">++</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>[b].<span class="pl-en">lengthSq</span>();d<span class="pl-k">&gt;</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span>d)}<span class="pl-c1">this</span>.<span class="pl-smi">boundingSphere</span>.<span class="pl-smi">radius</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(a)},<span class="pl-en">mergeVertices</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span>{},b<span class="pl-k">=</span>[],c<span class="pl-k">=</span>[],d,e<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">pow</span>(<span class="pl-c1">10</span>,<span class="pl-c1">4</span>),f,g,h,i;f<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">length</span>;f<span class="pl-k">&lt;</span>g;f<span class="pl-k">++</span>)d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>[f],d<span class="pl-k">=</span>[<span class="pl-c1">Math</span>.<span class="pl-c1">round</span>(<span class="pl-smi">d</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>e),<span class="pl-c1">Math</span>.<span class="pl-c1">round</span>(<span class="pl-smi">d</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>e),<span class="pl-c1">Math</span>.<span class="pl-c1">round</span>(<span class="pl-smi">d</span>.<span class="pl-c1">z</span><span class="pl-k">*</span>e)].<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>_<span class="pl-pds">&quot;</span></span>),</td>
      </tr>
      <tr>
        <td id="L119" class="blob-num js-line-number" data-line-number="119"></td>
        <td id="LC119" class="blob-code blob-code-inner js-file-line"><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a[d]<span class="pl-k">?</span>(a[d]<span class="pl-k">=</span>f,<span class="pl-smi">b</span>.<span class="pl-c1">push</span>(<span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>[f]),c[f]<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>)<span class="pl-k">:</span>c[f]<span class="pl-k">=</span>c[a[d]];f<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">length</span>;f<span class="pl-k">&lt;</span>g;f<span class="pl-k">++</span>)<span class="pl-k">if</span>(a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faces</span>[f],a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Face3</span>)<span class="pl-smi">a</span>.<span class="pl-smi">a</span><span class="pl-k">=</span>c[<span class="pl-smi">a</span>.<span class="pl-smi">a</span>],<span class="pl-smi">a</span>.<span class="pl-smi">b</span><span class="pl-k">=</span>c[<span class="pl-smi">a</span>.<span class="pl-smi">b</span>],<span class="pl-smi">a</span>.<span class="pl-smi">c</span><span class="pl-k">=</span>c[<span class="pl-smi">a</span>.<span class="pl-smi">c</span>];<span class="pl-k">else</span> <span class="pl-k">if</span>(a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Face4</span>){<span class="pl-smi">a</span>.<span class="pl-smi">a</span><span class="pl-k">=</span>c[<span class="pl-smi">a</span>.<span class="pl-smi">a</span>];<span class="pl-smi">a</span>.<span class="pl-smi">b</span><span class="pl-k">=</span>c[<span class="pl-smi">a</span>.<span class="pl-smi">b</span>];<span class="pl-smi">a</span>.<span class="pl-smi">c</span><span class="pl-k">=</span>c[<span class="pl-smi">a</span>.<span class="pl-smi">c</span>];<span class="pl-smi">a</span>.<span class="pl-smi">d</span><span class="pl-k">=</span>c[<span class="pl-smi">a</span>.<span class="pl-smi">d</span>];d<span class="pl-k">=</span>[<span class="pl-smi">a</span>.<span class="pl-smi">a</span>,<span class="pl-smi">a</span>.<span class="pl-smi">b</span>,<span class="pl-smi">a</span>.<span class="pl-smi">c</span>,<span class="pl-smi">a</span>.<span class="pl-smi">d</span>];<span class="pl-k">for</span>(e<span class="pl-k">=</span><span class="pl-c1">3</span>;<span class="pl-c1">0</span><span class="pl-k">&lt;</span>e;e<span class="pl-k">--</span>)<span class="pl-k">if</span>(<span class="pl-smi">d</span>.<span class="pl-c1">indexOf</span>(a[<span class="pl-s"><span class="pl-pds">&quot;</span>abcd<span class="pl-pds">&quot;</span></span>[e]])<span class="pl-k">!==</span>e){<span class="pl-smi">d</span>.<span class="pl-c1">splice</span>(e,<span class="pl-c1">1</span>);<span class="pl-c1">this</span>.<span class="pl-smi">faces</span>[f]<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(d[<span class="pl-c1">0</span>],d[<span class="pl-c1">1</span>],d[<span class="pl-c1">2</span>],<span class="pl-smi">a</span>.<span class="pl-smi">normal</span>,<span class="pl-smi">a</span>.<span class="pl-c1">color</span>,<span class="pl-smi">a</span>.<span class="pl-smi">materialIndex</span>);d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(h<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faceVertexUvs</span>.<span class="pl-c1">length</span>;d<span class="pl-k">&lt;</span>h;d<span class="pl-k">++</span>)(i<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faceVertexUvs</span>[d][f])<span class="pl-k">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L120" class="blob-num js-line-number" data-line-number="120"></td>
        <td id="LC120" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">i</span>.<span class="pl-c1">splice</span>(e,<span class="pl-c1">1</span>);<span class="pl-c1">this</span>.<span class="pl-smi">faces</span>[f].<span class="pl-smi">vertexColors</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertexColors</span>;<span class="pl-k">break</span>}}c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span>;<span class="pl-c1">this</span>.<span class="pl-smi">vertices</span><span class="pl-k">=</span>b;<span class="pl-k">return</span> c},<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(){},<span class="pl-en">deallocate</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">GeometryLibrary</span>.<span class="pl-c1">indexOf</span>(<span class="pl-c1">this</span>);<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">!==</span>a<span class="pl-k">&amp;&amp;</span><span class="pl-c1">THREE</span>.<span class="pl-smi">GeometryLibrary</span>.<span class="pl-c1">splice</span>(a,<span class="pl-c1">1</span>)}};<span class="pl-c1">THREE</span>.<span class="pl-smi">GeometryIdCount</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">GeometryLibrary</span><span class="pl-k">=</span>[];</td>
      </tr>
      <tr>
        <td id="L121" class="blob-num js-line-number" data-line-number="121"></td>
        <td id="LC121" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">BufferGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">THREE</span>.<span class="pl-smi">GeometryLibrary</span>.<span class="pl-c1">push</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-c1">id</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">GeometryIdCount</span><span class="pl-k">++</span>;<span class="pl-c1">this</span>.<span class="pl-c1">attributes</span><span class="pl-k">=</span>{};<span class="pl-c1">this</span>.<span class="pl-smi">dynamic</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">boundingSphere</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">boundingBox</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">hasTangents</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">morphTargets</span><span class="pl-k">=</span>[]};</td>
      </tr>
      <tr>
        <td id="L122" class="blob-num js-line-number" data-line-number="122"></td>
        <td id="LC122" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">BufferGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.BufferGeometry,applyMatrix:<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b,c;<span class="pl-c1">this</span>.<span class="pl-c1">attributes</span>.<span class="pl-smi">position</span><span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">attributes</span>.<span class="pl-smi">position</span>.<span class="pl-smi">array</span>);<span class="pl-c1">this</span>.<span class="pl-c1">attributes</span>.<span class="pl-smi">normal</span><span class="pl-k">&amp;&amp;</span>(c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">attributes</span>.<span class="pl-smi">normal</span>.<span class="pl-smi">array</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">a</span>.<span class="pl-en">multiplyVector3Array</span>(b),<span class="pl-c1">this</span>.<span class="pl-smi">verticesNeedUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>,<span class="pl-smi">b</span>.<span class="pl-en">extractRotation</span>(a),<span class="pl-smi">b</span>.<span class="pl-en">multiplyVector3Array</span>(c),<span class="pl-c1">this</span>.<span class="pl-smi">normalsNeedUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>)},<span class="pl-en">computeBoundingBox</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">boundingBox</span><span class="pl-k">||</span>(<span class="pl-c1">this</span>.<span class="pl-smi">boundingBox</span><span class="pl-k">=</span>{min<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">Infinity</span>,<span class="pl-c1">Infinity</span>,<span class="pl-c1">Infinity</span>),</td>
      </tr>
      <tr>
        <td id="L123" class="blob-num js-line-number" data-line-number="123"></td>
        <td id="LC123" class="blob-code blob-code-inner js-file-line">max<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-k">-</span><span class="pl-c1">Infinity</span>,<span class="pl-k">-</span><span class="pl-c1">Infinity</span>,<span class="pl-k">-</span><span class="pl-c1">Infinity</span>)});<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">attributes</span>.<span class="pl-smi">position</span>.<span class="pl-smi">array</span>;<span class="pl-k">if</span>(a)<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">boundingBox</span>,c,d,e,f<span class="pl-k">=</span><span class="pl-c1">0</span>,g<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>;f<span class="pl-k">&lt;</span>g;f<span class="pl-k">+=</span><span class="pl-c1">3</span>)(c<span class="pl-k">=</span>a[f],d<span class="pl-k">=</span>a[f<span class="pl-k">+</span><span class="pl-c1">1</span>],e<span class="pl-k">=</span>a[f<span class="pl-k">+</span><span class="pl-c1">2</span>],c<span class="pl-k">&lt;</span><span class="pl-smi">b</span>.<span class="pl-smi">min</span>.<span class="pl-c1">x</span><span class="pl-k">?</span><span class="pl-smi">b</span>.<span class="pl-smi">min</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>c<span class="pl-k">:</span>c<span class="pl-k">&gt;</span><span class="pl-smi">b</span>.<span class="pl-smi">max</span>.<span class="pl-c1">x</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-smi">max</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>c),d<span class="pl-k">&lt;</span><span class="pl-smi">b</span>.<span class="pl-smi">min</span>.<span class="pl-c1">y</span><span class="pl-k">?</span><span class="pl-smi">b</span>.<span class="pl-smi">min</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>d<span class="pl-k">:</span>d<span class="pl-k">&gt;</span><span class="pl-smi">b</span>.<span class="pl-smi">max</span>.<span class="pl-c1">y</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-smi">max</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>d),e<span class="pl-k">&lt;</span><span class="pl-smi">b</span>.<span class="pl-smi">min</span>.<span class="pl-c1">z</span>)<span class="pl-k">?</span><span class="pl-smi">b</span>.<span class="pl-smi">min</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>e<span class="pl-k">:</span>e<span class="pl-k">&gt;</span><span class="pl-smi">b</span>.<span class="pl-smi">max</span>.<span class="pl-c1">z</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-smi">max</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>e);<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">||</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>)<span class="pl-c1">this</span>.<span class="pl-smi">boundingBox</span>.<span class="pl-smi">min</span>.<span class="pl-c1">set</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>),<span class="pl-c1">this</span>.<span class="pl-smi">boundingBox</span>.<span class="pl-smi">max</span>.<span class="pl-c1">set</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>)},<span class="pl-en">computeBoundingSphere</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">boundingSphere</span><span class="pl-k">||</span>(<span class="pl-c1">this</span>.<span class="pl-smi">boundingSphere</span><span class="pl-k">=</span>{radius<span class="pl-k">:</span><span class="pl-c1">0</span>});<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">attributes</span>.<span class="pl-smi">position</span>.<span class="pl-smi">array</span>;</td>
      </tr>
      <tr>
        <td id="L124" class="blob-num js-line-number" data-line-number="124"></td>
        <td id="LC124" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span>(a){<span class="pl-k">for</span>(<span class="pl-k">var</span> b,c<span class="pl-k">=</span><span class="pl-c1">0</span>,d,e,f<span class="pl-k">=</span><span class="pl-c1">0</span>,g<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>;f<span class="pl-k">&lt;</span>g;f<span class="pl-k">+=</span><span class="pl-c1">3</span>)b<span class="pl-k">=</span>a[f],d<span class="pl-k">=</span>a[f<span class="pl-k">+</span><span class="pl-c1">1</span>],e<span class="pl-k">=</span>a[f<span class="pl-k">+</span><span class="pl-c1">2</span>],b<span class="pl-k">=</span>b<span class="pl-k">*</span>b<span class="pl-k">+</span>d<span class="pl-k">*</span>d<span class="pl-k">+</span>e<span class="pl-k">*</span>e,b<span class="pl-k">&gt;</span>c<span class="pl-k">&amp;&amp;</span>(c<span class="pl-k">=</span>b);<span class="pl-c1">this</span>.<span class="pl-smi">boundingSphere</span>.<span class="pl-smi">radius</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(c)}},<span class="pl-en">computeVertexNormals</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-c1">attributes</span>.<span class="pl-smi">position</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-c1">attributes</span>.<span class="pl-c1">index</span>){<span class="pl-k">var</span> a,b,c,d;a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">attributes</span>.<span class="pl-smi">position</span>.<span class="pl-smi">array</span>.<span class="pl-c1">length</span>;<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-c1">attributes</span>.<span class="pl-smi">normal</span>)<span class="pl-c1">this</span>.<span class="pl-c1">attributes</span>.<span class="pl-smi">normal</span><span class="pl-k">=</span>{itemSize<span class="pl-k">:</span><span class="pl-c1">3</span>,array<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(a),numItems<span class="pl-k">:</span>a};<span class="pl-k">else</span>{a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">attributes</span>.<span class="pl-smi">normal</span>.<span class="pl-smi">array</span>.<span class="pl-c1">length</span>;a<span class="pl-k">&lt;</span>b;a<span class="pl-k">++</span>)<span class="pl-c1">this</span>.<span class="pl-c1">attributes</span>.<span class="pl-smi">normal</span>.<span class="pl-smi">array</span>[a]<span class="pl-k">=</span><span class="pl-c1">0</span>}<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">offsets</span>,f<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">attributes</span>.<span class="pl-c1">index</span>.<span class="pl-smi">array</span>,</td>
      </tr>
      <tr>
        <td id="L125" class="blob-num js-line-number" data-line-number="125"></td>
        <td id="LC125" class="blob-code blob-code-inner js-file-line">g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">attributes</span>.<span class="pl-smi">position</span>.<span class="pl-smi">array</span>,h<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">attributes</span>.<span class="pl-smi">normal</span>.<span class="pl-smi">array</span>,i,j,l,m,n,p,o<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,q<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,r<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,t<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,<span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;c<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>d;<span class="pl-k">++</span>c){b<span class="pl-k">=</span>e[c].<span class="pl-c1">start</span>;i<span class="pl-k">=</span>e[c].<span class="pl-smi">count</span>;<span class="pl-k">var</span> u<span class="pl-k">=</span>e[c].<span class="pl-c1">index</span>;a<span class="pl-k">=</span>b;<span class="pl-k">for</span>(b<span class="pl-k">+=</span>i;a<span class="pl-k">&lt;</span>b;a<span class="pl-k">+=</span><span class="pl-c1">3</span>)i<span class="pl-k">=</span>u<span class="pl-k">+</span>f[a],j<span class="pl-k">=</span>u<span class="pl-k">+</span>f[a<span class="pl-k">+</span><span class="pl-c1">1</span>],l<span class="pl-k">=</span>u<span class="pl-k">+</span>f[a<span class="pl-k">+</span><span class="pl-c1">2</span>],m<span class="pl-k">=</span>g[<span class="pl-c1">3</span><span class="pl-k">*</span>i],n<span class="pl-k">=</span>g[<span class="pl-c1">3</span><span class="pl-k">*</span>i<span class="pl-k">+</span><span class="pl-c1">1</span>],p<span class="pl-k">=</span>g[<span class="pl-c1">3</span><span class="pl-k">*</span>i<span class="pl-k">+</span><span class="pl-c1">2</span>],<span class="pl-smi">o</span>.<span class="pl-c1">set</span>(m,n,p),m<span class="pl-k">=</span>g[<span class="pl-c1">3</span><span class="pl-k">*</span>j],n<span class="pl-k">=</span>g[<span class="pl-c1">3</span><span class="pl-k">*</span>j<span class="pl-k">+</span><span class="pl-c1">1</span>],p<span class="pl-k">=</span>g[<span class="pl-c1">3</span><span class="pl-k">*</span>j<span class="pl-k">+</span><span class="pl-c1">2</span>],<span class="pl-smi">q</span>.<span class="pl-c1">set</span>(m,n,p),m<span class="pl-k">=</span>g[<span class="pl-c1">3</span><span class="pl-k">*</span>l],n<span class="pl-k">=</span>g[<span class="pl-c1">3</span><span class="pl-k">*</span>l<span class="pl-k">+</span><span class="pl-c1">1</span>],p<span class="pl-k">=</span>g[<span class="pl-c1">3</span><span class="pl-k">*</span>l<span class="pl-k">+</span><span class="pl-c1">2</span>],<span class="pl-smi">r</span>.<span class="pl-c1">set</span>(m,n,p),<span class="pl-smi">t</span>.<span class="pl-c1">sub</span>(r,q),<span class="pl-c1">B</span>.<span class="pl-c1">sub</span>(o,q),<span class="pl-smi">t</span>.<span class="pl-en">crossSelf</span>(<span class="pl-c1">B</span>),h[<span class="pl-c1">3</span><span class="pl-k">*</span>i]<span class="pl-k">+=</span><span class="pl-smi">t</span>.<span class="pl-c1">x</span>,h[<span class="pl-c1">3</span><span class="pl-k">*</span>i<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">+=</span><span class="pl-smi">t</span>.<span class="pl-c1">y</span>,h[<span class="pl-c1">3</span><span class="pl-k">*</span>i<span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L126" class="blob-num js-line-number" data-line-number="126"></td>
        <td id="LC126" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">2</span>]<span class="pl-k">+=</span><span class="pl-smi">t</span>.<span class="pl-c1">z</span>,h[<span class="pl-c1">3</span><span class="pl-k">*</span>j]<span class="pl-k">+=</span><span class="pl-smi">t</span>.<span class="pl-c1">x</span>,h[<span class="pl-c1">3</span><span class="pl-k">*</span>j<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">+=</span><span class="pl-smi">t</span>.<span class="pl-c1">y</span>,h[<span class="pl-c1">3</span><span class="pl-k">*</span>j<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">+=</span><span class="pl-smi">t</span>.<span class="pl-c1">z</span>,h[<span class="pl-c1">3</span><span class="pl-k">*</span>l]<span class="pl-k">+=</span><span class="pl-smi">t</span>.<span class="pl-c1">x</span>,h[<span class="pl-c1">3</span><span class="pl-k">*</span>l<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">+=</span><span class="pl-smi">t</span>.<span class="pl-c1">y</span>,h[<span class="pl-c1">3</span><span class="pl-k">*</span>l<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">+=</span><span class="pl-smi">t</span>.<span class="pl-c1">z</span>}a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-c1">length</span>;a<span class="pl-k">&lt;</span>b;a<span class="pl-k">+=</span><span class="pl-c1">3</span>)m<span class="pl-k">=</span>h[a],n<span class="pl-k">=</span>h[a<span class="pl-k">+</span><span class="pl-c1">1</span>],p<span class="pl-k">=</span>h[a<span class="pl-k">+</span><span class="pl-c1">2</span>],c<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(m<span class="pl-k">*</span>m<span class="pl-k">+</span>n<span class="pl-k">*</span>n<span class="pl-k">+</span>p<span class="pl-k">*</span>p),h[a]<span class="pl-k">*=</span>c,h[a<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">*=</span>c,h[a<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">*=</span>c;<span class="pl-c1">this</span>.<span class="pl-smi">normalsNeedUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>}},<span class="pl-en">computeTangents</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">function</span> <span class="pl-en">a</span>(<span class="pl-smi">a</span>){<span class="pl-smi">$</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>d[<span class="pl-c1">3</span><span class="pl-k">*</span>a];<span class="pl-smi">$</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>d[<span class="pl-c1">3</span><span class="pl-k">*</span>a<span class="pl-k">+</span><span class="pl-c1">1</span>];<span class="pl-smi">$</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>d[<span class="pl-c1">3</span><span class="pl-k">*</span>a<span class="pl-k">+</span><span class="pl-c1">2</span>];<span class="pl-c1">Y</span>.<span class="pl-en">copy</span>($);ea<span class="pl-k">=</span>i[a];<span class="pl-c1">L</span>.<span class="pl-en">copy</span>(ea);<span class="pl-c1">L</span>.<span class="pl-en">subSelf</span>(<span class="pl-smi">$</span>.<span class="pl-en">multiplyScalar</span>(<span class="pl-smi">$</span>.<span class="pl-en">dot</span>(ea))).<span class="pl-c1">normalize</span>();<span class="pl-c1">R</span>.<span class="pl-en">cross</span>(<span class="pl-c1">Y</span>,ea);<span class="pl-c1">Q</span><span class="pl-k">=</span><span class="pl-c1">R</span>.<span class="pl-en">dot</span>(j[a]);<span class="pl-c1">N</span><span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&gt;</span><span class="pl-c1">Q</span><span class="pl-k">?</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1</span>;h[<span class="pl-c1">4</span><span class="pl-k">*</span>a]<span class="pl-k">=</span><span class="pl-c1">L</span>.<span class="pl-c1">x</span>;h[<span class="pl-c1">4</span><span class="pl-k">*</span>a<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-c1">L</span>.<span class="pl-c1">y</span>;h[<span class="pl-c1">4</span><span class="pl-k">*</span>a<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-c1">L</span>.<span class="pl-c1">z</span>;h[<span class="pl-c1">4</span><span class="pl-k">*</span>a<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span><span class="pl-c1">N</span>}<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-c1">attributes</span>.<span class="pl-c1">index</span><span class="pl-k">||</span></td>
      </tr>
      <tr>
        <td id="L127" class="blob-num js-line-number" data-line-number="127"></td>
        <td id="LC127" class="blob-code blob-code-inner js-file-line"><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-c1">attributes</span>.<span class="pl-smi">position</span><span class="pl-k">||</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-c1">attributes</span>.<span class="pl-smi">normal</span><span class="pl-k">||</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-c1">attributes</span>.<span class="pl-smi">uv</span>)<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>Missing required attributes (index, position, normal or uv) in BufferGeometry.computeTangents()<span class="pl-pds">&quot;</span></span>);<span class="pl-k">else</span>{<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">attributes</span>.<span class="pl-c1">index</span>.<span class="pl-smi">array</span>,c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">attributes</span>.<span class="pl-smi">position</span>.<span class="pl-smi">array</span>,d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">attributes</span>.<span class="pl-smi">normal</span>.<span class="pl-smi">array</span>,e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">attributes</span>.<span class="pl-smi">uv</span>.<span class="pl-smi">array</span>,f<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">length</span><span class="pl-k">/</span><span class="pl-c1">3</span>;<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-c1">attributes</span>.<span class="pl-smi">tangent</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-c1">4</span><span class="pl-k">*</span>f;<span class="pl-c1">this</span>.<span class="pl-c1">attributes</span>.<span class="pl-smi">tangent</span><span class="pl-k">=</span>{itemSize<span class="pl-k">:</span><span class="pl-c1">4</span>,array<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(g),numItems<span class="pl-k">:</span>g}}<span class="pl-k">for</span>(<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">attributes</span>.<span class="pl-smi">tangent</span>.<span class="pl-smi">array</span>,</td>
      </tr>
      <tr>
        <td id="L128" class="blob-num js-line-number" data-line-number="128"></td>
        <td id="LC128" class="blob-code blob-code-inner js-file-line">i<span class="pl-k">=</span>[],j<span class="pl-k">=</span>[],g<span class="pl-k">=</span><span class="pl-c1">0</span>;g<span class="pl-k">&lt;</span>f;g<span class="pl-k">++</span>)i[g]<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,j[g]<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">var</span> l,m,n,p,o,q,r,t,<span class="pl-c1">B</span>,u,s,z,<span class="pl-c1">A</span>,v,y,f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,g<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,<span class="pl-c1">C</span>,<span class="pl-c1">G</span>,<span class="pl-c1">H</span>,<span class="pl-c1">J</span>,<span class="pl-c1">E</span>,<span class="pl-c1">M</span>,<span class="pl-c1">K</span>,<span class="pl-c1">F</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">offsets</span>;<span class="pl-c1">H</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-c1">F</span>.<span class="pl-c1">length</span>;<span class="pl-c1">H</span><span class="pl-k">&lt;</span><span class="pl-c1">J</span>;<span class="pl-k">++</span><span class="pl-c1">H</span>){<span class="pl-c1">G</span><span class="pl-k">=</span><span class="pl-c1">F</span>[<span class="pl-c1">H</span>].<span class="pl-c1">start</span>;<span class="pl-c1">E</span><span class="pl-k">=</span><span class="pl-c1">F</span>[<span class="pl-c1">H</span>].<span class="pl-smi">count</span>;<span class="pl-k">var</span> <span class="pl-c1">I</span><span class="pl-k">=</span><span class="pl-c1">F</span>[<span class="pl-c1">H</span>].<span class="pl-c1">index</span>;<span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-c1">G</span>;<span class="pl-k">for</span>(<span class="pl-c1">G</span><span class="pl-k">+=</span><span class="pl-c1">E</span>;<span class="pl-c1">C</span><span class="pl-k">&lt;</span><span class="pl-c1">G</span>;<span class="pl-c1">C</span><span class="pl-k">+=</span><span class="pl-c1">3</span>)<span class="pl-c1">E</span><span class="pl-k">=</span><span class="pl-c1">I</span><span class="pl-k">+</span>b[<span class="pl-c1">C</span>],<span class="pl-c1">M</span><span class="pl-k">=</span><span class="pl-c1">I</span><span class="pl-k">+</span>b[<span class="pl-c1">C</span><span class="pl-k">+</span><span class="pl-c1">1</span>],<span class="pl-c1">K</span><span class="pl-k">=</span><span class="pl-c1">I</span><span class="pl-k">+</span>b[<span class="pl-c1">C</span><span class="pl-k">+</span><span class="pl-c1">2</span>],l<span class="pl-k">=</span>c[<span class="pl-c1">3</span><span class="pl-k">*</span><span class="pl-c1">E</span>],m<span class="pl-k">=</span>c[<span class="pl-c1">3</span><span class="pl-k">*</span><span class="pl-c1">E</span><span class="pl-k">+</span><span class="pl-c1">1</span>],n<span class="pl-k">=</span>c[<span class="pl-c1">3</span><span class="pl-k">*</span><span class="pl-c1">E</span><span class="pl-k">+</span><span class="pl-c1">2</span>],p<span class="pl-k">=</span>c[<span class="pl-c1">3</span><span class="pl-k">*</span><span class="pl-c1">M</span>],o<span class="pl-k">=</span>c[<span class="pl-c1">3</span><span class="pl-k">*</span><span class="pl-c1">M</span><span class="pl-k">+</span><span class="pl-c1">1</span>],q<span class="pl-k">=</span>c[<span class="pl-c1">3</span><span class="pl-k">*</span><span class="pl-c1">M</span><span class="pl-k">+</span><span class="pl-c1">2</span>],r<span class="pl-k">=</span>c[<span class="pl-c1">3</span><span class="pl-k">*</span><span class="pl-c1">K</span>],t<span class="pl-k">=</span>c[<span class="pl-c1">3</span><span class="pl-k">*</span><span class="pl-c1">K</span><span class="pl-k">+</span><span class="pl-c1">1</span>],<span class="pl-c1">B</span><span class="pl-k">=</span>c[<span class="pl-c1">3</span><span class="pl-k">*</span><span class="pl-c1">K</span><span class="pl-k">+</span><span class="pl-c1">2</span>],u<span class="pl-k">=</span>e[<span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">E</span>],s<span class="pl-k">=</span>e[<span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">E</span><span class="pl-k">+</span><span class="pl-c1">1</span>],z<span class="pl-k">=</span>e[<span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">M</span>],<span class="pl-c1">A</span><span class="pl-k">=</span>e[<span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">M</span><span class="pl-k">+</span><span class="pl-c1">1</span>],v<span class="pl-k">=</span>e[<span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">K</span>],y<span class="pl-k">=</span>e[<span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">K</span><span class="pl-k">+</span><span class="pl-c1">1</span>],p<span class="pl-k">-=</span>l,l<span class="pl-k">=</span>r<span class="pl-k">-</span>l,o<span class="pl-k">-=</span>m,m<span class="pl-k">=</span>t<span class="pl-k">-</span>m,q<span class="pl-k">-=</span>n,n<span class="pl-k">=</span><span class="pl-c1">B</span><span class="pl-k">-</span>n,z<span class="pl-k">-=</span>u,u<span class="pl-k">=</span>v<span class="pl-k">-</span>u,<span class="pl-c1">A</span><span class="pl-k">-=</span>s,s<span class="pl-k">=</span>y<span class="pl-k">-</span></td>
      </tr>
      <tr>
        <td id="L129" class="blob-num js-line-number" data-line-number="129"></td>
        <td id="LC129" class="blob-code blob-code-inner js-file-line">s,y<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>(z<span class="pl-k">*</span>s<span class="pl-k">-</span>u<span class="pl-k">*</span><span class="pl-c1">A</span>),<span class="pl-smi">f</span>.<span class="pl-c1">set</span>((s<span class="pl-k">*</span>p<span class="pl-k">-</span><span class="pl-c1">A</span><span class="pl-k">*</span>l)<span class="pl-k">*</span>y,(s<span class="pl-k">*</span>o<span class="pl-k">-</span><span class="pl-c1">A</span><span class="pl-k">*</span>m)<span class="pl-k">*</span>y,(s<span class="pl-k">*</span>q<span class="pl-k">-</span><span class="pl-c1">A</span><span class="pl-k">*</span>n)<span class="pl-k">*</span>y),<span class="pl-smi">g</span>.<span class="pl-c1">set</span>((z<span class="pl-k">*</span>l<span class="pl-k">-</span>u<span class="pl-k">*</span>p)<span class="pl-k">*</span>y,(z<span class="pl-k">*</span>m<span class="pl-k">-</span>u<span class="pl-k">*</span>o)<span class="pl-k">*</span>y,(z<span class="pl-k">*</span>n<span class="pl-k">-</span>u<span class="pl-k">*</span>q)<span class="pl-k">*</span>y),i[<span class="pl-c1">E</span>].<span class="pl-en">addSelf</span>(f),i[<span class="pl-c1">M</span>].<span class="pl-en">addSelf</span>(f),i[<span class="pl-c1">K</span>].<span class="pl-en">addSelf</span>(f),j[<span class="pl-c1">E</span>].<span class="pl-en">addSelf</span>(g),j[<span class="pl-c1">M</span>].<span class="pl-en">addSelf</span>(g),j[<span class="pl-c1">K</span>].<span class="pl-en">addSelf</span>(g)}<span class="pl-k">var</span> <span class="pl-c1">L</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,<span class="pl-c1">R</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,$<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,<span class="pl-c1">Y</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,<span class="pl-c1">N</span>,ea,<span class="pl-c1">Q</span>;<span class="pl-c1">H</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-c1">F</span>.<span class="pl-c1">length</span>;<span class="pl-c1">H</span><span class="pl-k">&lt;</span><span class="pl-c1">J</span>;<span class="pl-k">++</span><span class="pl-c1">H</span>){<span class="pl-c1">G</span><span class="pl-k">=</span><span class="pl-c1">F</span>[<span class="pl-c1">H</span>].<span class="pl-c1">start</span>;<span class="pl-c1">E</span><span class="pl-k">=</span><span class="pl-c1">F</span>[<span class="pl-c1">H</span>].<span class="pl-smi">count</span>;<span class="pl-c1">I</span><span class="pl-k">=</span><span class="pl-c1">F</span>[<span class="pl-c1">H</span>].<span class="pl-c1">index</span>;<span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-c1">G</span>;<span class="pl-k">for</span>(<span class="pl-c1">G</span><span class="pl-k">+=</span><span class="pl-c1">E</span>;<span class="pl-c1">C</span><span class="pl-k">&lt;</span><span class="pl-c1">G</span>;<span class="pl-c1">C</span><span class="pl-k">+=</span><span class="pl-c1">3</span>)<span class="pl-c1">E</span><span class="pl-k">=</span><span class="pl-c1">I</span><span class="pl-k">+</span>b[<span class="pl-c1">C</span>],<span class="pl-c1">M</span><span class="pl-k">=</span><span class="pl-c1">I</span><span class="pl-k">+</span>b[<span class="pl-c1">C</span><span class="pl-k">+</span><span class="pl-c1">1</span>],<span class="pl-c1">K</span><span class="pl-k">=</span><span class="pl-c1">I</span><span class="pl-k">+</span>b[<span class="pl-c1">C</span><span class="pl-k">+</span><span class="pl-c1">2</span>],<span class="pl-en">a</span>(<span class="pl-c1">E</span>),<span class="pl-en">a</span>(<span class="pl-c1">M</span>),<span class="pl-en">a</span>(<span class="pl-c1">K</span>)}<span class="pl-c1">this</span>.<span class="pl-smi">tangentsNeedUpdate</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">hasTangents</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>}},<span class="pl-en">deallocate</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">GeometryLibrary</span>.<span class="pl-c1">indexOf</span>(<span class="pl-c1">this</span>);</td>
      </tr>
      <tr>
        <td id="L130" class="blob-num js-line-number" data-line-number="130"></td>
        <td id="LC130" class="blob-code blob-code-inner js-file-line"><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">!==</span>a<span class="pl-k">&amp;&amp;</span><span class="pl-c1">THREE</span>.<span class="pl-smi">GeometryLibrary</span>.<span class="pl-c1">splice</span>(a,<span class="pl-c1">1</span>)}};</td>
      </tr>
      <tr>
        <td id="L131" class="blob-num js-line-number" data-line-number="131"></td>
        <td id="LC131" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">Spline</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">function</span> <span class="pl-en">b</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>,<span class="pl-smi">g</span>){a<span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(c<span class="pl-k">-</span>a);d<span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(d<span class="pl-k">-</span>b);<span class="pl-k">return</span>(<span class="pl-c1">2</span><span class="pl-k">*</span>(b<span class="pl-k">-</span>c)<span class="pl-k">+</span>a<span class="pl-k">+</span>d)<span class="pl-k">*</span>g<span class="pl-k">+</span>(<span class="pl-k">-</span><span class="pl-c1">3</span><span class="pl-k">*</span>(b<span class="pl-k">-</span>c)<span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">*</span>a<span class="pl-k">-</span>d)<span class="pl-k">*</span>f<span class="pl-k">+</span>a<span class="pl-k">*</span>e<span class="pl-k">+</span>b}<span class="pl-c1">this</span>.<span class="pl-smi">points</span><span class="pl-k">=</span>a;<span class="pl-k">var</span> c<span class="pl-k">=</span>[],d<span class="pl-k">=</span>{x<span class="pl-k">:</span><span class="pl-c1">0</span>,y<span class="pl-k">:</span><span class="pl-c1">0</span>,z<span class="pl-k">:</span><span class="pl-c1">0</span>},e,f,g,h,i,j,l,m,n;<span class="pl-c1">this</span>.<span class="pl-en">initFromArray</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">points</span><span class="pl-k">=</span>[];<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>;b<span class="pl-k">++</span>)<span class="pl-c1">this</span>.<span class="pl-smi">points</span>[b]<span class="pl-k">=</span>{x<span class="pl-k">:</span>a[b][<span class="pl-c1">0</span>],y<span class="pl-k">:</span>a[b][<span class="pl-c1">1</span>],z<span class="pl-k">:</span>a[b][<span class="pl-c1">2</span>]}};<span class="pl-c1">this</span>.<span class="pl-en">getPoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){e<span class="pl-k">=</span>(<span class="pl-c1">this</span>.<span class="pl-smi">points</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>)<span class="pl-k">*</span>a;f<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(e);g<span class="pl-k">=</span>e<span class="pl-k">-</span>f;c[<span class="pl-c1">0</span>]<span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">===</span>f<span class="pl-k">?</span>f<span class="pl-k">:</span>f<span class="pl-k">-</span><span class="pl-c1">1</span>;c[<span class="pl-c1">1</span>]<span class="pl-k">=</span>f;c[<span class="pl-c1">2</span>]<span class="pl-k">=</span>f<span class="pl-k">&gt;</span><span class="pl-c1">this</span>.<span class="pl-smi">points</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-smi">points</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span>f<span class="pl-k">+</span><span class="pl-c1">1</span>;c[<span class="pl-c1">3</span>]<span class="pl-k">=</span>f<span class="pl-k">&gt;</span><span class="pl-c1">this</span>.<span class="pl-smi">points</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">3</span><span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-smi">points</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span></td>
      </tr>
      <tr>
        <td id="L132" class="blob-num js-line-number" data-line-number="132"></td>
        <td id="LC132" class="blob-code blob-code-inner js-file-line">f<span class="pl-k">+</span><span class="pl-c1">2</span>;j<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">points</span>[c[<span class="pl-c1">0</span>]];l<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">points</span>[c[<span class="pl-c1">1</span>]];m<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">points</span>[c[<span class="pl-c1">2</span>]];n<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">points</span>[c[<span class="pl-c1">3</span>]];h<span class="pl-k">=</span>g<span class="pl-k">*</span>g;i<span class="pl-k">=</span>g<span class="pl-k">*</span>h;<span class="pl-smi">d</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-en">b</span>(<span class="pl-smi">j</span>.<span class="pl-c1">x</span>,<span class="pl-smi">l</span>.<span class="pl-c1">x</span>,<span class="pl-smi">m</span>.<span class="pl-c1">x</span>,<span class="pl-smi">n</span>.<span class="pl-c1">x</span>,g,h,i);<span class="pl-smi">d</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-en">b</span>(<span class="pl-smi">j</span>.<span class="pl-c1">y</span>,<span class="pl-smi">l</span>.<span class="pl-c1">y</span>,<span class="pl-smi">m</span>.<span class="pl-c1">y</span>,<span class="pl-smi">n</span>.<span class="pl-c1">y</span>,g,h,i);<span class="pl-smi">d</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-en">b</span>(<span class="pl-smi">j</span>.<span class="pl-c1">z</span>,<span class="pl-smi">l</span>.<span class="pl-c1">z</span>,<span class="pl-smi">m</span>.<span class="pl-c1">z</span>,<span class="pl-smi">n</span>.<span class="pl-c1">z</span>,g,h,i);<span class="pl-k">return</span> d};<span class="pl-c1">this</span>.<span class="pl-en">getControlPointsArray</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a,b,c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">points</span>.<span class="pl-c1">length</span>,d<span class="pl-k">=</span>[];<span class="pl-k">for</span>(a<span class="pl-k">=</span><span class="pl-c1">0</span>;a<span class="pl-k">&lt;</span>c;a<span class="pl-k">++</span>)b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">points</span>[a],d[a]<span class="pl-k">=</span>[<span class="pl-smi">b</span>.<span class="pl-c1">x</span>,<span class="pl-smi">b</span>.<span class="pl-c1">y</span>,<span class="pl-smi">b</span>.<span class="pl-c1">z</span>];<span class="pl-k">return</span> d};<span class="pl-c1">this</span>.<span class="pl-en">getLength</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b,c,d,e<span class="pl-k">=</span>b<span class="pl-k">=</span>b<span class="pl-k">=</span><span class="pl-c1">0</span>,f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,g<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,h<span class="pl-k">=</span>[],i<span class="pl-k">=</span><span class="pl-c1">0</span>;h[<span class="pl-c1">0</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;a<span class="pl-k">||</span>(a<span class="pl-k">=</span><span class="pl-c1">100</span>);c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">points</span>.<span class="pl-c1">length</span><span class="pl-k">*</span>a;<span class="pl-smi">f</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">points</span>[<span class="pl-c1">0</span>]);<span class="pl-k">for</span>(a<span class="pl-k">=</span><span class="pl-c1">1</span>;a<span class="pl-k">&lt;</span>c;a<span class="pl-k">++</span>)b<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L133" class="blob-num js-line-number" data-line-number="133"></td>
        <td id="LC133" class="blob-code blob-code-inner js-file-line">a<span class="pl-k">/</span>c,d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">getPoint</span>(b),<span class="pl-smi">g</span>.<span class="pl-en">copy</span>(d),i<span class="pl-k">+=</span><span class="pl-smi">g</span>.<span class="pl-en">distanceTo</span>(f),<span class="pl-smi">f</span>.<span class="pl-en">copy</span>(d),b<span class="pl-k">*=</span><span class="pl-c1">this</span>.<span class="pl-smi">points</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>,b<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(b),b<span class="pl-k">!=</span>e<span class="pl-k">&amp;&amp;</span>(h[b]<span class="pl-k">=</span>i,e<span class="pl-k">=</span>b);h[<span class="pl-smi">h</span>.<span class="pl-c1">length</span>]<span class="pl-k">=</span>i;<span class="pl-k">return</span>{chunks<span class="pl-k">:</span>h,total<span class="pl-k">:</span>i}};<span class="pl-c1">this</span>.<span class="pl-en">reparametrizeByArcLength</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b,c,d,e,f,g,h<span class="pl-k">=</span>[],i<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,l<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">getLength</span>();<span class="pl-smi">h</span>.<span class="pl-c1">push</span>(<span class="pl-smi">i</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">points</span>[<span class="pl-c1">0</span>]).<span class="pl-en">clone</span>());<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">1</span>;b<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">points</span>.<span class="pl-c1">length</span>;b<span class="pl-k">++</span>){c<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">chunks</span>[b]<span class="pl-k">-</span><span class="pl-smi">l</span>.<span class="pl-smi">chunks</span>[b<span class="pl-k">-</span><span class="pl-c1">1</span>];g<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>(a<span class="pl-k">*</span>c<span class="pl-k">/</span><span class="pl-smi">l</span>.<span class="pl-smi">total</span>);e<span class="pl-k">=</span>(b<span class="pl-k">-</span><span class="pl-c1">1</span>)<span class="pl-k">/</span>(<span class="pl-c1">this</span>.<span class="pl-smi">points</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>);f<span class="pl-k">=</span>b<span class="pl-k">/</span>(<span class="pl-c1">this</span>.<span class="pl-smi">points</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>);<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">1</span>;c<span class="pl-k">&lt;</span>g<span class="pl-k">-</span><span class="pl-c1">1</span>;c<span class="pl-k">++</span>)d<span class="pl-k">=</span>e<span class="pl-k">+</span>c<span class="pl-k">*</span>(<span class="pl-c1">1</span><span class="pl-k">/</span>g)<span class="pl-k">*</span>(f<span class="pl-k">-</span>e),d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">getPoint</span>(d),</td>
      </tr>
      <tr>
        <td id="L134" class="blob-num js-line-number" data-line-number="134"></td>
        <td id="LC134" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">h</span>.<span class="pl-c1">push</span>(<span class="pl-smi">i</span>.<span class="pl-en">copy</span>(d).<span class="pl-en">clone</span>());<span class="pl-smi">h</span>.<span class="pl-c1">push</span>(<span class="pl-smi">i</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">points</span>[b]).<span class="pl-en">clone</span>())}<span class="pl-c1">this</span>.<span class="pl-smi">points</span><span class="pl-k">=</span>h}};<span class="pl-c1">THREE</span>.<span class="pl-en">Camera</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-smi">matrixWorldInverse</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>;<span class="pl-c1">this</span>.<span class="pl-smi">projectionMatrix</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>;<span class="pl-c1">this</span>.<span class="pl-smi">projectionMatrixInverse</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">Camera</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">Camera</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">lookAt</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">matrix</span>.<span class="pl-en">lookAt</span>(<span class="pl-c1">this</span>.<span class="pl-smi">position</span>,a,<span class="pl-c1">this</span>.<span class="pl-smi">up</span>);<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-smi">rotationAutoUpdate</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">rotation</span>.<span class="pl-en">setEulerFromRotationMatrix</span>(<span class="pl-c1">this</span>.<span class="pl-smi">matrix</span>,<span class="pl-c1">this</span>.<span class="pl-smi">eulerOrder</span>)};</td>
      </tr>
      <tr>
        <td id="L135" class="blob-num js-line-number" data-line-number="135"></td>
        <td id="LC135" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">OrthographicCamera</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Camera</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-c1">left</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-c1">right</span><span class="pl-k">=</span>b;<span class="pl-c1">this</span>.<span class="pl-c1">top</span><span class="pl-k">=</span>c;<span class="pl-c1">this</span>.<span class="pl-c1">bottom</span><span class="pl-k">=</span>d;<span class="pl-c1">this</span>.<span class="pl-smi">near</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>e<span class="pl-k">?</span>e<span class="pl-k">:</span><span class="pl-c1">0.1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">far</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>f<span class="pl-k">?</span>f<span class="pl-k">:</span><span class="pl-c1">2E3</span>;<span class="pl-c1">this</span>.<span class="pl-en">updateProjectionMatrix</span>()};<span class="pl-c1">THREE</span>.<span class="pl-smi">OrthographicCamera</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Camera</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">OrthographicCamera</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">updateProjectionMatrix</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">projectionMatrix</span>.<span class="pl-en">makeOrthographic</span>(<span class="pl-c1">this</span>.<span class="pl-c1">left</span>,<span class="pl-c1">this</span>.<span class="pl-c1">right</span>,<span class="pl-c1">this</span>.<span class="pl-c1">top</span>,<span class="pl-c1">this</span>.<span class="pl-c1">bottom</span>,<span class="pl-c1">this</span>.<span class="pl-smi">near</span>,<span class="pl-c1">this</span>.<span class="pl-smi">far</span>)};</td>
      </tr>
      <tr>
        <td id="L136" class="blob-num js-line-number" data-line-number="136"></td>
        <td id="LC136" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">PerspectiveCamera</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Camera</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-smi">fov</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-c1">50</span>;<span class="pl-c1">this</span>.<span class="pl-smi">aspect</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">near</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">?</span>c<span class="pl-k">:</span><span class="pl-c1">0.1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">far</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>d<span class="pl-k">?</span>d<span class="pl-k">:</span><span class="pl-c1">2E3</span>;<span class="pl-c1">this</span>.<span class="pl-en">updateProjectionMatrix</span>()};<span class="pl-c1">THREE</span>.<span class="pl-smi">PerspectiveCamera</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Camera</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">PerspectiveCamera</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setLens</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-c1">24</span>);<span class="pl-c1">this</span>.<span class="pl-smi">fov</span><span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan</span>(b<span class="pl-k">/</span>(<span class="pl-c1">2</span><span class="pl-k">*</span>a))<span class="pl-k">*</span>(<span class="pl-c1">180</span><span class="pl-k">/</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span>);<span class="pl-c1">this</span>.<span class="pl-en">updateProjectionMatrix</span>()};</td>
      </tr>
      <tr>
        <td id="L137" class="blob-num js-line-number" data-line-number="137"></td>
        <td id="LC137" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">PerspectiveCamera</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setViewOffset</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>){<span class="pl-c1">this</span>.<span class="pl-smi">fullWidth</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">fullHeight</span><span class="pl-k">=</span>b;<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>c;<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>d;<span class="pl-c1">this</span>.<span class="pl-c1">width</span><span class="pl-k">=</span>e;<span class="pl-c1">this</span>.<span class="pl-c1">height</span><span class="pl-k">=</span>f;<span class="pl-c1">this</span>.<span class="pl-en">updateProjectionMatrix</span>()};</td>
      </tr>
      <tr>
        <td id="L138" class="blob-num js-line-number" data-line-number="138"></td>
        <td id="LC138" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">PerspectiveCamera</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">updateProjectionMatrix</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">fullWidth</span>){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">fullWidth</span><span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-smi">fullHeight</span>,b<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">tan</span>(<span class="pl-c1">this</span>.<span class="pl-smi">fov</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span><span class="pl-k">/</span><span class="pl-c1">360</span>)<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">near</span>,c<span class="pl-k">=</span><span class="pl-k">-</span>b,d<span class="pl-k">=</span>a<span class="pl-k">*</span>c,a<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(a<span class="pl-k">*</span>b<span class="pl-k">-</span>d),c<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(b<span class="pl-k">-</span>c);<span class="pl-c1">this</span>.<span class="pl-smi">projectionMatrix</span>.<span class="pl-en">makeFrustum</span>(d<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>a<span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-smi">fullWidth</span>,d<span class="pl-k">+</span>(<span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-c1">width</span>)<span class="pl-k">*</span>a<span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-smi">fullWidth</span>,b<span class="pl-k">-</span>(<span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-c1">height</span>)<span class="pl-k">*</span>c<span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-smi">fullHeight</span>,b<span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>c<span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-smi">fullHeight</span>,<span class="pl-c1">this</span>.<span class="pl-smi">near</span>,<span class="pl-c1">this</span>.<span class="pl-smi">far</span>)}<span class="pl-k">else</span> <span class="pl-c1">this</span>.<span class="pl-smi">projectionMatrix</span>.<span class="pl-en">makePerspective</span>(<span class="pl-c1">this</span>.<span class="pl-smi">fov</span>,<span class="pl-c1">this</span>.<span class="pl-smi">aspect</span>,<span class="pl-c1">this</span>.<span class="pl-smi">near</span>,<span class="pl-c1">this</span>.<span class="pl-smi">far</span>)};</td>
      </tr>
      <tr>
        <td id="L139" class="blob-num js-line-number" data-line-number="139"></td>
        <td id="LC139" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">Light</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-c1">color</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(a)};<span class="pl-c1">THREE</span>.<span class="pl-smi">Light</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-en">AmbientLight</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Light</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a)};<span class="pl-c1">THREE</span>.<span class="pl-smi">AmbientLight</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Light</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L140" class="blob-num js-line-number" data-line-number="140"></td>
        <td id="LC140" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">DirectionalLight</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Light</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a);<span class="pl-c1">this</span>.<span class="pl-smi">position</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>);<span class="pl-c1">this</span>.<span class="pl-c1">target</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Object3D</span>;<span class="pl-c1">this</span>.<span class="pl-smi">intensity</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">distance</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">?</span>c<span class="pl-k">:</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">onlyShadow</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">castShadow</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">shadowCameraNear</span><span class="pl-k">=</span><span class="pl-c1">50</span>;<span class="pl-c1">this</span>.<span class="pl-smi">shadowCameraFar</span><span class="pl-k">=</span><span class="pl-c1">5E3</span>;<span class="pl-c1">this</span>.<span class="pl-smi">shadowCameraLeft</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">500</span>;<span class="pl-c1">this</span>.<span class="pl-smi">shadowCameraTop</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">shadowCameraRight</span><span class="pl-k">=</span><span class="pl-c1">500</span>;<span class="pl-c1">this</span>.<span class="pl-smi">shadowCameraBottom</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">500</span>;<span class="pl-c1">this</span>.<span class="pl-smi">shadowCameraVisible</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">shadowBias</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">shadowDarkness</span><span class="pl-k">=</span><span class="pl-c1">0.5</span>;<span class="pl-c1">this</span>.<span class="pl-smi">shadowMapHeight</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">shadowMapWidth</span><span class="pl-k">=</span><span class="pl-c1">512</span>;<span class="pl-c1">this</span>.<span class="pl-smi">shadowCascade</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L141" class="blob-num js-line-number" data-line-number="141"></td>
        <td id="LC141" class="blob-code blob-code-inner js-file-line"><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">shadowCascadeOffset</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1E3</span>);<span class="pl-c1">this</span>.<span class="pl-smi">shadowCascadeCount</span><span class="pl-k">=</span><span class="pl-c1">2</span>;<span class="pl-c1">this</span>.<span class="pl-smi">shadowCascadeBias</span><span class="pl-k">=</span>[<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>];<span class="pl-c1">this</span>.<span class="pl-smi">shadowCascadeWidth</span><span class="pl-k">=</span>[<span class="pl-c1">512</span>,<span class="pl-c1">512</span>,<span class="pl-c1">512</span>];<span class="pl-c1">this</span>.<span class="pl-smi">shadowCascadeHeight</span><span class="pl-k">=</span>[<span class="pl-c1">512</span>,<span class="pl-c1">512</span>,<span class="pl-c1">512</span>];<span class="pl-c1">this</span>.<span class="pl-smi">shadowCascadeNearZ</span><span class="pl-k">=</span>[<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0.99</span>,<span class="pl-c1">0.998</span>];<span class="pl-c1">this</span>.<span class="pl-smi">shadowCascadeFarZ</span><span class="pl-k">=</span>[<span class="pl-c1">0.99</span>,<span class="pl-c1">0.998</span>,<span class="pl-c1">1</span>];<span class="pl-c1">this</span>.<span class="pl-smi">shadowCascadeArray</span><span class="pl-k">=</span>[];<span class="pl-c1">this</span>.<span class="pl-smi">shadowMatrix</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">shadowCamera</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">shadowMapSize</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">shadowMap</span><span class="pl-k">=</span><span class="pl-c1">null</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">DirectionalLight</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Light</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L142" class="blob-num js-line-number" data-line-number="142"></td>
        <td id="LC142" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">HemisphereLight</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Light</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a);<span class="pl-c1">this</span>.<span class="pl-smi">groundColor</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(b);<span class="pl-c1">this</span>.<span class="pl-smi">position</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-c1">100</span>,<span class="pl-c1">0</span>);<span class="pl-c1">this</span>.<span class="pl-smi">intensity</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">?</span>c<span class="pl-k">:</span><span class="pl-c1">1</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">HemisphereLight</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Light</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-en">PointLight</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Light</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a);<span class="pl-c1">this</span>.<span class="pl-smi">position</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>);<span class="pl-c1">this</span>.<span class="pl-smi">intensity</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">distance</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">?</span>c<span class="pl-k">:</span><span class="pl-c1">0</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">PointLight</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Light</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L143" class="blob-num js-line-number" data-line-number="143"></td>
        <td id="LC143" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">SpotLight</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Light</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a);<span class="pl-c1">this</span>.<span class="pl-smi">position</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>);<span class="pl-c1">this</span>.<span class="pl-c1">target</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Object3D</span>;<span class="pl-c1">this</span>.<span class="pl-smi">intensity</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">distance</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">?</span>c<span class="pl-k">:</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">angle</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>d<span class="pl-k">?</span>d<span class="pl-k">:</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span><span class="pl-k">/</span><span class="pl-c1">2</span>;<span class="pl-c1">this</span>.<span class="pl-smi">exponent</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>e<span class="pl-k">?</span>e<span class="pl-k">:</span><span class="pl-c1">10</span>;<span class="pl-c1">this</span>.<span class="pl-smi">onlyShadow</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">castShadow</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">shadowCameraNear</span><span class="pl-k">=</span><span class="pl-c1">50</span>;<span class="pl-c1">this</span>.<span class="pl-smi">shadowCameraFar</span><span class="pl-k">=</span><span class="pl-c1">5E3</span>;<span class="pl-c1">this</span>.<span class="pl-smi">shadowCameraFov</span><span class="pl-k">=</span><span class="pl-c1">50</span>;<span class="pl-c1">this</span>.<span class="pl-smi">shadowCameraVisible</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">shadowBias</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">shadowDarkness</span><span class="pl-k">=</span><span class="pl-c1">0.5</span>;<span class="pl-c1">this</span>.<span class="pl-smi">shadowMapHeight</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">shadowMapWidth</span><span class="pl-k">=</span><span class="pl-c1">512</span>;<span class="pl-c1">this</span>.<span class="pl-smi">shadowMatrix</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">shadowCamera</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L144" class="blob-num js-line-number" data-line-number="144"></td>
        <td id="LC144" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">shadowMapSize</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">shadowMap</span><span class="pl-k">=</span><span class="pl-c1">null</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">SpotLight</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Light</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-en">Loader</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">statusDomElement</span><span class="pl-k">=</span>(<span class="pl-c1">this</span>.<span class="pl-smi">showStatus</span><span class="pl-k">=</span>a)<span class="pl-k">?</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Loader</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">addStatusElement</span>()<span class="pl-k">:</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-en">onLoadStart</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">this</span>.<span class="pl-en">onLoadProgress</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">this</span>.<span class="pl-en">onLoadComplete</span><span class="pl-k">=</span><span class="pl-k">function</span>(){}};</td>
      </tr>
      <tr>
        <td id="L145" class="blob-num js-line-number" data-line-number="145"></td>
        <td id="LC145" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Loader</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.Loader,crossOrigin:&quot;anonymous&quot;,addStatusElement:<span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">document</span>.<span class="pl-c1">createElement</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>div<span class="pl-pds">&quot;</span></span>);<span class="pl-smi">a</span>.<span class="pl-c1">style</span>.<span class="pl-smi">position</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>absolute<span class="pl-pds">&quot;</span></span>;<span class="pl-smi">a</span>.<span class="pl-c1">style</span>.<span class="pl-c1">right</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>0px<span class="pl-pds">&quot;</span></span>;<span class="pl-smi">a</span>.<span class="pl-c1">style</span>.<span class="pl-c1">top</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>0px<span class="pl-pds">&quot;</span></span>;<span class="pl-smi">a</span>.<span class="pl-c1">style</span>.<span class="pl-c1">fontSize</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>0.8em<span class="pl-pds">&quot;</span></span>;<span class="pl-smi">a</span>.<span class="pl-c1">style</span>.<span class="pl-c1">textAlign</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>left<span class="pl-pds">&quot;</span></span>;<span class="pl-smi">a</span>.<span class="pl-c1">style</span>.<span class="pl-c1">background</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>rgba(0,0,0,0.25)<span class="pl-pds">&quot;</span></span>;<span class="pl-smi">a</span>.<span class="pl-c1">style</span>.<span class="pl-c1">color</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#fff<span class="pl-pds">&quot;</span></span>;<span class="pl-smi">a</span>.<span class="pl-c1">style</span>.<span class="pl-c1">width</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>120px<span class="pl-pds">&quot;</span></span>;<span class="pl-smi">a</span>.<span class="pl-c1">style</span>.<span class="pl-smi">padding</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>0.5em 0.5em 0.5em 0.5em<span class="pl-pds">&quot;</span></span>;<span class="pl-smi">a</span>.<span class="pl-c1">style</span>.<span class="pl-c1">zIndex</span><span class="pl-k">=</span><span class="pl-c1">1E3</span>;<span class="pl-smi">a</span>.<span class="pl-smi">innerHTML</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>Loading ...<span class="pl-pds">&quot;</span></span>;<span class="pl-k">return</span> a},<span class="pl-en">updateProgress</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>Loaded <span class="pl-pds">&quot;</span></span>,b<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">total</span><span class="pl-k">?</span>b<span class="pl-k">+</span>((<span class="pl-c1">100</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">loaded</span><span class="pl-k">/</span></td>
      </tr>
      <tr>
        <td id="L146" class="blob-num js-line-number" data-line-number="146"></td>
        <td id="LC146" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">a</span>.<span class="pl-smi">total</span>).<span class="pl-en">toFixed</span>(<span class="pl-c1">0</span>)<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>%<span class="pl-pds">&quot;</span></span>)<span class="pl-k">:</span>b<span class="pl-k">+</span>((<span class="pl-smi">a</span>.<span class="pl-smi">loaded</span><span class="pl-k">/</span><span class="pl-c1">1E3</span>).<span class="pl-en">toFixed</span>(<span class="pl-c1">2</span>)<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span> KB<span class="pl-pds">&quot;</span></span>);<span class="pl-c1">this</span>.<span class="pl-smi">statusDomElement</span>.<span class="pl-smi">innerHTML</span><span class="pl-k">=</span>b},<span class="pl-en">extractUrlBase</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">split</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>/<span class="pl-pds">&quot;</span></span>);<span class="pl-smi">a</span>.<span class="pl-c1">pop</span>();<span class="pl-k">return</span>(<span class="pl-c1">1</span><span class="pl-k">&gt;</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>.<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-smi">a</span>.<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>/<span class="pl-pds">&quot;</span></span>))<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>/<span class="pl-pds">&quot;</span></span>},<span class="pl-en">initMaterials</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-smi">a</span>.<span class="pl-smi">materials</span><span class="pl-k">=</span>[];<span class="pl-k">for</span>(<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span>;<span class="pl-k">++</span>d)<span class="pl-smi">a</span>.<span class="pl-smi">materials</span>[d]<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Loader</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">createMaterial</span>(b[d],c)},<span class="pl-en">hasNormals</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b,c,d<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">materials</span>.<span class="pl-c1">length</span>;<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span>d;c<span class="pl-k">++</span>)<span class="pl-k">if</span>(b<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">materials</span>[c],b <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderMaterial</span>)<span class="pl-k">return</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-k">return</span><span class="pl-k">!</span><span class="pl-c1">1</span>},<span class="pl-en">createMaterial</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">function</span> <span class="pl-en">c</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L147" class="blob-num js-line-number" data-line-number="147"></td>
        <td id="LC147" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">Math</span>.<span class="pl-c1">log</span>(a)<span class="pl-k">/</span><span class="pl-c1">Math</span>.<span class="pl-c1">LN2</span>;<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(a)<span class="pl-k">==</span>a}function d(a){a=Math.log(a)/Math.LN2;return Math.pow(2,Math.round(a))}function e(a,e,f,h,i,j,r){var t=f.toLowerCase().endsWith(&quot;.dds&quot;),B=b+&quot;/&quot;+f;if(t){var u=THREE.ImageUtils.loadCompressedTexture(B);a[e]=u}else u=document.createElement(&quot;canvas&quot;),a[e]=new THREE.Texture(u);a[e].sourceFile=f;if(h&amp;&amp;(a[e].repeat.set(h[0],h[1]),1!==h[0]&amp;&amp;(a[e].wrapS=THREE.RepeatWrapping),1!==h[1]))a[e].wrapT=THREE.RepeatWrapping;i&amp;&amp;a[e].offset.set(i[0],i[1]);if(j&amp;&amp;(f={repeat:THREE.RepeatWrapping,</td>
      </tr>
      <tr>
        <td id="L148" class="blob-num js-line-number" data-line-number="148"></td>
        <td id="LC148" class="blob-code blob-code-inner js-file-line">mirror<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">MirroredRepeatWrapping</span>},<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>f[j[<span class="pl-c1">0</span>]]<span class="pl-k">&amp;&amp;</span>(a[e].<span class="pl-smi">wrapS</span><span class="pl-k">=</span>f[j[<span class="pl-c1">0</span>]]),<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>f[j[<span class="pl-c1">1</span>]]))a[e].<span class="pl-smi">wrapT</span><span class="pl-k">=</span>f[j[<span class="pl-c1">1</span>]];r<span class="pl-k">&amp;&amp;</span>(a[e].<span class="pl-smi">anisotropy</span><span class="pl-k">=</span>r);<span class="pl-k">if</span>(<span class="pl-k">!</span>t){<span class="pl-k">var</span> s<span class="pl-k">=</span>a[e],a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Image</span>;<span class="pl-smi">a</span>.<span class="pl-en">onload</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-en">c</span>(<span class="pl-c1">this</span>.<span class="pl-c1">width</span>)<span class="pl-k">||!</span><span class="pl-en">c</span>(<span class="pl-c1">this</span>.<span class="pl-c1">height</span>)){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-en">d</span>(<span class="pl-c1">this</span>.<span class="pl-c1">width</span>),b<span class="pl-k">=</span><span class="pl-en">d</span>(<span class="pl-c1">this</span>.<span class="pl-c1">height</span>);<span class="pl-smi">s</span>.<span class="pl-smi">image</span>.<span class="pl-c1">width</span><span class="pl-k">=</span>a;<span class="pl-smi">s</span>.<span class="pl-smi">image</span>.<span class="pl-c1">height</span><span class="pl-k">=</span>b;<span class="pl-smi">s</span>.<span class="pl-smi">image</span>.<span class="pl-c1">getContext</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>2d<span class="pl-pds">&quot;</span></span>).<span class="pl-en">drawImage</span>(<span class="pl-c1">this</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,a,b)}<span class="pl-k">else</span> <span class="pl-smi">s</span>.<span class="pl-smi">image</span><span class="pl-k">=</span><span class="pl-c1">this</span>;<span class="pl-smi">s</span>.<span class="pl-smi">needsUpdate</span><span class="pl-k">=</span><span class="pl-c1">true</span>};<span class="pl-smi">a</span>.<span class="pl-smi">crossOrigin</span><span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">crossOrigin</span>;<span class="pl-smi">a</span>.<span class="pl-smi">src</span><span class="pl-k">=</span><span class="pl-c1">B</span>}}function f(a){return(255*a[0]&lt;&lt;16)+(255*a[1]&lt;&lt;8)+255*a[2]}var g=this,h=&quot;MeshLambertMaterial&quot;,</td>
      </tr>
      <tr>
        <td id="L149" class="blob-num js-line-number" data-line-number="149"></td>
        <td id="LC149" class="blob-code blob-code-inner js-file-line">i<span class="pl-k">=</span>{color<span class="pl-k">:</span><span class="pl-c1">15658734</span>,opacity<span class="pl-k">:</span><span class="pl-c1">1</span>,map<span class="pl-k">:</span><span class="pl-c1">null</span>,lightMap<span class="pl-k">:</span><span class="pl-c1">null</span>,normalMap<span class="pl-k">:</span><span class="pl-c1">null</span>,bumpMap<span class="pl-k">:</span><span class="pl-c1">null</span>,wireframe<span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">1</span>};<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">shading</span>){<span class="pl-k">var</span> j<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">shading</span>.<span class="pl-c1">toLowerCase</span>();<span class="pl-s"><span class="pl-pds">&quot;</span>phong<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>j<span class="pl-k">?</span>h<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>MeshPhongMaterial<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>basic<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>j<span class="pl-k">&amp;&amp;</span>(h<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>MeshBasicMaterial<span class="pl-pds">&quot;</span></span>)}<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">blending</span><span class="pl-k">&amp;&amp;</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-c1">THREE</span>[<span class="pl-smi">a</span>.<span class="pl-smi">blending</span>]<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">i</span>.<span class="pl-smi">blending</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>[<span class="pl-smi">a</span>.<span class="pl-smi">blending</span>]);<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">transparent</span><span class="pl-k">||</span><span class="pl-c1">1</span><span class="pl-k">&gt;</span><span class="pl-smi">a</span>.<span class="pl-smi">opacity</span>)<span class="pl-smi">i</span>.<span class="pl-smi">transparent</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">transparent</span>;<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">depthTest</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">i</span>.<span class="pl-smi">depthTest</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">depthTest</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">depthWrite</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">i</span>.<span class="pl-smi">depthWrite</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">depthWrite</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">visible</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">i</span>.<span class="pl-smi">visible</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">visible</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span></td>
      </tr>
      <tr>
        <td id="L150" class="blob-num js-line-number" data-line-number="150"></td>
        <td id="LC150" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">a</span>.<span class="pl-smi">flipSided</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">i</span>.<span class="pl-smi">side</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">BackSide</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">doubleSided</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">i</span>.<span class="pl-smi">side</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">DoubleSide</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">wireframe</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">i</span>.<span class="pl-smi">wireframe</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">wireframe</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">vertexColors</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>face<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-smi">a</span>.<span class="pl-smi">vertexColors</span><span class="pl-k">?</span><span class="pl-smi">i</span>.<span class="pl-smi">vertexColors</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">FaceColors</span><span class="pl-k">:</span><span class="pl-smi">a</span>.<span class="pl-smi">vertexColors</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">i</span>.<span class="pl-smi">vertexColors</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">VertexColors</span>));<span class="pl-smi">a</span>.<span class="pl-smi">colorDiffuse</span><span class="pl-k">?</span><span class="pl-smi">i</span>.<span class="pl-c1">color</span><span class="pl-k">=</span><span class="pl-en">f</span>(<span class="pl-smi">a</span>.<span class="pl-smi">colorDiffuse</span>)<span class="pl-k">:</span><span class="pl-smi">a</span>.<span class="pl-smi">DbgColor</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">i</span>.<span class="pl-c1">color</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">DbgColor</span>);<span class="pl-smi">a</span>.<span class="pl-smi">colorSpecular</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">i</span>.<span class="pl-smi">specular</span><span class="pl-k">=</span><span class="pl-en">f</span>(<span class="pl-smi">a</span>.<span class="pl-smi">colorSpecular</span>));<span class="pl-smi">a</span>.<span class="pl-smi">colorAmbient</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">i</span>.<span class="pl-smi">ambient</span><span class="pl-k">=</span><span class="pl-en">f</span>(<span class="pl-smi">a</span>.<span class="pl-smi">colorAmbient</span>));<span class="pl-smi">a</span>.<span class="pl-smi">transparency</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">i</span>.<span class="pl-smi">opacity</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">transparency</span>);<span class="pl-smi">a</span>.<span class="pl-smi">specularCoef</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">i</span>.<span class="pl-smi">shininess</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L151" class="blob-num js-line-number" data-line-number="151"></td>
        <td id="LC151" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">a</span>.<span class="pl-smi">specularCoef</span>);<span class="pl-smi">a</span>.<span class="pl-smi">mapDiffuse</span><span class="pl-k">&amp;&amp;</span>b<span class="pl-k">&amp;&amp;</span><span class="pl-en">e</span>(i,<span class="pl-s"><span class="pl-pds">&quot;</span>map<span class="pl-pds">&quot;</span></span>,<span class="pl-smi">a</span>.<span class="pl-smi">mapDiffuse</span>,<span class="pl-smi">a</span>.<span class="pl-smi">mapDiffuseRepeat</span>,<span class="pl-smi">a</span>.<span class="pl-smi">mapDiffuseOffset</span>,<span class="pl-smi">a</span>.<span class="pl-smi">mapDiffuseWrap</span>,<span class="pl-smi">a</span>.<span class="pl-smi">mapDiffuseAnisotropy</span>);<span class="pl-smi">a</span>.<span class="pl-smi">mapLight</span><span class="pl-k">&amp;&amp;</span>b<span class="pl-k">&amp;&amp;</span><span class="pl-en">e</span>(i,<span class="pl-s"><span class="pl-pds">&quot;</span>lightMap<span class="pl-pds">&quot;</span></span>,<span class="pl-smi">a</span>.<span class="pl-smi">mapLight</span>,<span class="pl-smi">a</span>.<span class="pl-smi">mapLightRepeat</span>,<span class="pl-smi">a</span>.<span class="pl-smi">mapLightOffset</span>,<span class="pl-smi">a</span>.<span class="pl-smi">mapLightWrap</span>,<span class="pl-smi">a</span>.<span class="pl-smi">mapLightAnisotropy</span>);<span class="pl-smi">a</span>.<span class="pl-smi">mapBump</span><span class="pl-k">&amp;&amp;</span>b<span class="pl-k">&amp;&amp;</span><span class="pl-en">e</span>(i,<span class="pl-s"><span class="pl-pds">&quot;</span>bumpMap<span class="pl-pds">&quot;</span></span>,<span class="pl-smi">a</span>.<span class="pl-smi">mapBump</span>,<span class="pl-smi">a</span>.<span class="pl-smi">mapBumpRepeat</span>,<span class="pl-smi">a</span>.<span class="pl-smi">mapBumpOffset</span>,<span class="pl-smi">a</span>.<span class="pl-smi">mapBumpWrap</span>,<span class="pl-smi">a</span>.<span class="pl-smi">mapBumpAnisotropy</span>);<span class="pl-smi">a</span>.<span class="pl-smi">mapNormal</span><span class="pl-k">&amp;&amp;</span>b<span class="pl-k">&amp;&amp;</span><span class="pl-en">e</span>(i,<span class="pl-s"><span class="pl-pds">&quot;</span>normalMap<span class="pl-pds">&quot;</span></span>,<span class="pl-smi">a</span>.<span class="pl-smi">mapNormal</span>,<span class="pl-smi">a</span>.<span class="pl-smi">mapNormalRepeat</span>,<span class="pl-smi">a</span>.<span class="pl-smi">mapNormalOffset</span>,<span class="pl-smi">a</span>.<span class="pl-smi">mapNormalWrap</span>,<span class="pl-smi">a</span>.<span class="pl-smi">mapNormalAnisotropy</span>);<span class="pl-smi">a</span>.<span class="pl-smi">mapSpecular</span><span class="pl-k">&amp;&amp;</span>b<span class="pl-k">&amp;&amp;</span><span class="pl-en">e</span>(i,<span class="pl-s"><span class="pl-pds">&quot;</span>specularMap<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L152" class="blob-num js-line-number" data-line-number="152"></td>
        <td id="LC152" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">a</span>.<span class="pl-smi">mapSpecular</span>,<span class="pl-smi">a</span>.<span class="pl-smi">mapSpecularRepeat</span>,<span class="pl-smi">a</span>.<span class="pl-smi">mapSpecularOffset</span>,<span class="pl-smi">a</span>.<span class="pl-smi">mapSpecularWrap</span>,<span class="pl-smi">a</span>.<span class="pl-smi">mapSpecularAnisotropy</span>);<span class="pl-smi">a</span>.<span class="pl-smi">mapBumpScale</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">i</span>.<span class="pl-smi">bumpScale</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">mapBumpScale</span>);<span class="pl-smi">a</span>.<span class="pl-smi">mapNormal</span><span class="pl-k">?</span>(h<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderUtils</span>.<span class="pl-smi">lib</span>.<span class="pl-smi">normal</span>,j<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">UniformsUtils</span>.<span class="pl-en">clone</span>(<span class="pl-smi">h</span>.<span class="pl-smi">uniforms</span>),<span class="pl-smi">j</span>.<span class="pl-smi">tNormal</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">i</span>.<span class="pl-smi">normalMap</span>,<span class="pl-smi">a</span>.<span class="pl-smi">mapNormalFactor</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">j</span>.<span class="pl-smi">uNormalScale</span>.<span class="pl-c1">value</span>.<span class="pl-c1">set</span>(<span class="pl-smi">a</span>.<span class="pl-smi">mapNormalFactor</span>,<span class="pl-smi">a</span>.<span class="pl-smi">mapNormalFactor</span>),<span class="pl-smi">i</span>.<span class="pl-smi">map</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">j</span>.<span class="pl-smi">tDiffuse</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">i</span>.<span class="pl-smi">map</span>,<span class="pl-smi">j</span>.<span class="pl-smi">enableDiffuse</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>),<span class="pl-smi">i</span>.<span class="pl-smi">specularMap</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">j</span>.<span class="pl-smi">tSpecular</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">i</span>.<span class="pl-smi">specularMap</span>,<span class="pl-smi">j</span>.<span class="pl-smi">enableSpecular</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>),<span class="pl-smi">i</span>.<span class="pl-smi">lightMap</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">j</span>.<span class="pl-smi">tAO</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">i</span>.<span class="pl-smi">lightMap</span>,</td>
      </tr>
      <tr>
        <td id="L153" class="blob-num js-line-number" data-line-number="153"></td>
        <td id="LC153" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">j</span>.<span class="pl-smi">enableAO</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>),<span class="pl-smi">j</span>.<span class="pl-smi">uDiffuseColor</span>.<span class="pl-c1">value</span>.<span class="pl-en">setHex</span>(<span class="pl-smi">i</span>.<span class="pl-c1">color</span>),<span class="pl-smi">j</span>.<span class="pl-smi">uSpecularColor</span>.<span class="pl-c1">value</span>.<span class="pl-en">setHex</span>(<span class="pl-smi">i</span>.<span class="pl-smi">specular</span>),<span class="pl-smi">j</span>.<span class="pl-smi">uAmbientColor</span>.<span class="pl-c1">value</span>.<span class="pl-en">setHex</span>(<span class="pl-smi">i</span>.<span class="pl-smi">ambient</span>),<span class="pl-smi">j</span>.<span class="pl-smi">uShininess</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">i</span>.<span class="pl-smi">shininess</span>,<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">i</span>.<span class="pl-smi">opacity</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">j</span>.<span class="pl-smi">uOpacity</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">i</span>.<span class="pl-smi">opacity</span>),i<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.ShaderMaterial</span>({fragmentShader<span class="pl-k">:</span><span class="pl-smi">h</span>.<span class="pl-smi">fragmentShader</span>,vertexShader<span class="pl-k">:</span><span class="pl-smi">h</span>.<span class="pl-smi">vertexShader</span>,uniforms<span class="pl-k">:</span>j,lights<span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">0</span>,fog<span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">0</span>}))<span class="pl-k">:</span>i<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE</span>[h](i);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">DbgName</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">i</span>.<span class="pl-c1">name</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">DbgName</span>);<span class="pl-k">return</span> i}};<span class="pl-c1">THREE</span>.<span class="pl-en">BinaryLoader</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Loader</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a)};<span class="pl-c1">THREE</span>.<span class="pl-smi">BinaryLoader</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Loader</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L154" class="blob-num js-line-number" data-line-number="154"></td>
        <td id="LC154" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">BinaryLoader</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">load</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span>c<span class="pl-k">?</span>c<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-en">extractUrlBase</span>(a),d<span class="pl-k">=</span>d<span class="pl-k">?</span>d<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-en">extractUrlBase</span>(a),e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">showProgress</span><span class="pl-k">?</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Loader</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">updateProgress</span><span class="pl-k">:</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-en">onLoadStart</span>();<span class="pl-c1">this</span>.<span class="pl-en">loadAjaxJSON</span>(<span class="pl-c1">this</span>,a,b,c,d,e)};</td>
      </tr>
      <tr>
        <td id="L155" class="blob-num js-line-number" data-line-number="155"></td>
        <td id="LC155" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">BinaryLoader</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">loadAjaxJSON</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">XMLHttpRequest</span>;<span class="pl-smi">g</span>.<span class="pl-en">onreadystatechange</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">if</span>(<span class="pl-c1">4</span><span class="pl-k">==</span><span class="pl-smi">g</span>.<span class="pl-c1">readyState</span>)<span class="pl-k">if</span>(<span class="pl-c1">200</span><span class="pl-k">==</span><span class="pl-smi">g</span>.<span class="pl-c1">status</span><span class="pl-k">||</span><span class="pl-c1">0</span><span class="pl-k">==</span><span class="pl-smi">g</span>.<span class="pl-c1">status</span>){<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-c1">JSON</span>.<span class="pl-c1">parse</span>(<span class="pl-smi">g</span>.<span class="pl-c1">responseText</span>);<span class="pl-smi">a</span>.<span class="pl-en">loadAjaxBuffers</span>(h,c,e,d,f)}<span class="pl-k">else</span> <span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.BinaryLoader: Couldn&#39;t load [<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>b<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>] [<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-smi">g</span>.<span class="pl-c1">status</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>]<span class="pl-pds">&quot;</span></span>)};<span class="pl-smi">g</span>.<span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>GET<span class="pl-pds">&quot;</span></span>,b,<span class="pl-k">!</span><span class="pl-c1">0</span>);<span class="pl-smi">g</span>.<span class="pl-c1">send</span>(<span class="pl-c1">null</span>)};</td>
      </tr>
      <tr>
        <td id="L156" class="blob-num js-line-number" data-line-number="156"></td>
        <td id="LC156" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">BinaryLoader</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">loadAjaxBuffers</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">XMLHttpRequest</span>,g<span class="pl-k">=</span>c<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>/<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-smi">a</span>.<span class="pl-smi">buffers</span>,h<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-smi">f</span>.<span class="pl-en">onreadystatechange</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">if</span>(<span class="pl-c1">4</span><span class="pl-k">==</span><span class="pl-smi">f</span>.<span class="pl-c1">readyState</span>)<span class="pl-k">if</span>(<span class="pl-c1">200</span><span class="pl-k">==</span><span class="pl-smi">f</span>.<span class="pl-c1">status</span><span class="pl-k">||</span><span class="pl-c1">0</span><span class="pl-k">==</span><span class="pl-smi">f</span>.<span class="pl-c1">status</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">response</span>;<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>c<span class="pl-k">&amp;&amp;</span>(c<span class="pl-k">=</span>(<span class="pl-k">new</span> <span class="pl-en">Uint8Array</span>(<span class="pl-smi">f</span>.<span class="pl-smi">responseBody</span>)).<span class="pl-smi">buffer</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">BinaryLoader</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">createBinModel</span>(c,b,d,<span class="pl-smi">a</span>.<span class="pl-smi">materials</span>)}<span class="pl-k">else</span> <span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.BinaryLoader: Couldn&#39;t load [<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>g<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>] [<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-smi">f</span>.<span class="pl-c1">status</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>]<span class="pl-pds">&quot;</span></span>);<span class="pl-k">else</span> <span class="pl-c1">3</span><span class="pl-k">==</span><span class="pl-smi">f</span>.<span class="pl-c1">readyState</span><span class="pl-k">?</span>e<span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">0</span><span class="pl-k">==</span>h<span class="pl-k">&amp;&amp;</span>(h<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">getResponseHeader</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>Content-Length<span class="pl-pds">&quot;</span></span>)),<span class="pl-en">e</span>({total<span class="pl-k">:</span>h,loaded<span class="pl-k">:</span><span class="pl-smi">f</span>.<span class="pl-c1">responseText</span>.<span class="pl-c1">length</span>}))<span class="pl-k">:</span></td>
      </tr>
      <tr>
        <td id="L157" class="blob-num js-line-number" data-line-number="157"></td>
        <td id="LC157" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">2</span><span class="pl-k">==</span><span class="pl-smi">f</span>.<span class="pl-c1">readyState</span><span class="pl-k">&amp;&amp;</span>(h<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">getResponseHeader</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>Content-Length<span class="pl-pds">&quot;</span></span>))};<span class="pl-smi">f</span>.<span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>GET<span class="pl-pds">&quot;</span></span>,g,<span class="pl-k">!</span><span class="pl-c1">0</span>);<span class="pl-smi">f</span>.<span class="pl-smi">responseType</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>arraybuffer<span class="pl-pds">&quot;</span></span>;<span class="pl-smi">f</span>.<span class="pl-c1">send</span>(<span class="pl-c1">null</span>)};</td>
      </tr>
      <tr>
        <td id="L158" class="blob-num js-line-number" data-line-number="158"></td>
        <td id="LC158" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">BinaryLoader</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">createBinModel</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">var</span> <span class="pl-en">e</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">var</span> c,e,i,j,l,m,n,p,o,q,r,t,<span class="pl-c1">B</span>,u,s;<span class="pl-k">function</span> <span class="pl-en">z</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> a<span class="pl-k">%</span><span class="pl-c1">4</span><span class="pl-k">?</span><span class="pl-c1">4</span><span class="pl-k">-</span>a<span class="pl-k">%</span><span class="pl-c1">4</span><span class="pl-k">:</span><span class="pl-c1">0</span>}function A(a,b){return(new Uint8Array(a,b,1))[0]}function v(a,b){return(new Uint32Array(a,b,1))[0]}function y(b,c){var d,e,f,g,h,i,j,l,m=new Uint32Array(a,c,3*b);for(d=0;d&lt;b;d++){e=m[3*d];f=m[3*d+1];g=m[3*d+2];h=I[2*e];e=I[2*e+1];i=I[2*f];j=I[2*f+1];f=I[2*g];l=I[2*g+1];g=M.faceVertexUvs[0];var n=[];n.push(new THREE.UV(h,e));n.push(new THREE.UV(i,j));n.push(new THREE.UV(f,</td>
      </tr>
      <tr>
        <td id="L159" class="blob-num js-line-number" data-line-number="159"></td>
        <td id="LC159" class="blob-code blob-code-inner js-file-line">l));<span class="pl-smi">g</span>.<span class="pl-c1">push</span>(n)}}function C(b,c){var d,e,f,g,h,i,j,l,m,n,o=new Uint32Array(a,c,4*b);for(d=0;d&lt;b;d++){e=o[4*d];f=o[4*d+1];g=o[4*d+2];h=o[4*d+3];i=I[2*e];e=I[2*e+1];j=I[2*f];m=I[2*f+1];l=I[2*g];n=I[2*g+1];g=I[2*h];f=I[2*h+1];h=M.faceVertexUvs[0];var p=[];p.push(new THREE.UV(i,e));p.push(new THREE.UV(j,m));p.push(new THREE.UV(l,n));p.push(new THREE.UV(g,f));h.push(p)}}function G(b,c,d){for(var e,f,g,h,c=new Uint32Array(a,c,3*b),i=new Uint16Array(a,d,b),d=0;d&lt;b;d++)e=c[3*d],f=c[3*d+1],g=c[3*d+2],h=i[d],</td>
      </tr>
      <tr>
        <td id="L160" class="blob-num js-line-number" data-line-number="160"></td>
        <td id="LC160" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">M</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(e,f,g,<span class="pl-c1">null</span>,<span class="pl-c1">null</span>,h))}function H(b,c,d){for(var e,f,g,h,i,c=new Uint32Array(a,c,4*b),j=new Uint16Array(a,d,b),d=0;d&lt;b;d++)e=c[4*d],f=c[4*d+1],g=c[4*d+2],h=c[4*d+3],i=j[d],M.faces.push(new THREE.Face4(e,f,g,h,null,null,i))}function J(b,c,d,e){for(var f,g,h,i,j,l,m,c=new Uint32Array(a,c,3*b),d=new Uint32Array(a,d,3*b),n=new Uint16Array(a,e,b),e=0;e&lt;b;e++){f=c[3*e];g=c[3*e+1];h=c[3*e+2];j=d[3*e];l=d[3*e+1];m=d[3*e+2];i=n[e];var o=F[3*l],p=F[3*l+1];l=F[3*l+2];var q=F[3*m],r=</td>
      </tr>
      <tr>
        <td id="L161" class="blob-num js-line-number" data-line-number="161"></td>
        <td id="LC161" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">F</span>[<span class="pl-c1">3</span><span class="pl-k">*</span>m<span class="pl-k">+</span><span class="pl-c1">1</span>];m<span class="pl-k">=</span><span class="pl-c1">F</span>[<span class="pl-c1">3</span><span class="pl-k">*</span>m<span class="pl-k">+</span><span class="pl-c1">2</span>];<span class="pl-c1">M</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(f,g,h,[<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">F</span>[<span class="pl-c1">3</span><span class="pl-k">*</span>j],<span class="pl-c1">F</span>[<span class="pl-c1">3</span><span class="pl-k">*</span>j<span class="pl-k">+</span><span class="pl-c1">1</span>],<span class="pl-c1">F</span>[<span class="pl-c1">3</span><span class="pl-k">*</span>j<span class="pl-k">+</span><span class="pl-c1">2</span>]),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(o,p,l),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(q,r,m)],<span class="pl-c1">null</span>,i))}}function E(b,c,d,e){for(var f,g,h,i,j,l,m,n,o,c=new Uint32Array(a,c,4*b),d=new Uint32Array(a,d,4*b),p=new Uint16Array(a,e,b),e=0;e&lt;b;e++){f=c[4*e];g=c[4*e+1];h=c[4*e+2];i=c[4*e+3];l=d[4*e];m=d[4*e+1];n=d[4*e+2];o=d[4*e+3];j=p[e];var q=F[3*m],r=F[3*m+1];m=F[3*m+2];var s=F[3*n],t=F[3*n+1];n=F[3*n+2];var u=F[3*o],v=F[3*o+1];o=F[3*o+2];M.faces.push(new THREE.Face4(f,</td>
      </tr>
      <tr>
        <td id="L162" class="blob-num js-line-number" data-line-number="162"></td>
        <td id="LC162" class="blob-code blob-code-inner js-file-line">g,h,i,[<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">F</span>[<span class="pl-c1">3</span><span class="pl-k">*</span>l],<span class="pl-c1">F</span>[<span class="pl-c1">3</span><span class="pl-k">*</span>l<span class="pl-k">+</span><span class="pl-c1">1</span>],<span class="pl-c1">F</span>[<span class="pl-c1">3</span><span class="pl-k">*</span>l<span class="pl-k">+</span><span class="pl-c1">2</span>]),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(q,r,m),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(s,t,n),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(u,v,o)],<span class="pl-c1">null</span>,j))}}<span class="pl-k">var</span> <span class="pl-c1">M</span><span class="pl-k">=</span><span class="pl-c1">this</span>,<span class="pl-c1">K</span><span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-c1">F</span><span class="pl-k">=</span>[],<span class="pl-c1">I</span><span class="pl-k">=</span>[],<span class="pl-c1">L</span>,<span class="pl-c1">R</span>,$;<span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">Loader</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">initMaterials</span>(<span class="pl-c1">M</span>,d,b);s<span class="pl-k">=</span>a;<span class="pl-c1">R</span><span class="pl-k">=</span><span class="pl-c1">K</span>;b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Uint8Array</span>(s,<span class="pl-c1">R</span>,<span class="pl-c1">12</span>);q<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>;<span class="pl-k">for</span>(<span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">12</span><span class="pl-k">&gt;</span><span class="pl-c1">B</span>;<span class="pl-c1">B</span><span class="pl-k">++</span>)q<span class="pl-k">+=</span><span class="pl-c1">String</span>.<span class="pl-c1">fromCharCode</span>(b[<span class="pl-c1">R</span><span class="pl-k">+</span><span class="pl-c1">B</span>]);c<span class="pl-k">=</span><span class="pl-en">A</span>(s,<span class="pl-c1">R</span><span class="pl-k">+</span><span class="pl-c1">12</span>);<span class="pl-en">A</span>(s,<span class="pl-c1">R</span><span class="pl-k">+</span><span class="pl-c1">13</span>);<span class="pl-en">A</span>(s,<span class="pl-c1">R</span><span class="pl-k">+</span><span class="pl-c1">14</span>);<span class="pl-en">A</span>(s,<span class="pl-c1">R</span><span class="pl-k">+</span><span class="pl-c1">15</span>);e<span class="pl-k">=</span><span class="pl-en">A</span>(s,<span class="pl-c1">R</span><span class="pl-k">+</span><span class="pl-c1">16</span>);i<span class="pl-k">=</span><span class="pl-en">A</span>(s,<span class="pl-c1">R</span><span class="pl-k">+</span><span class="pl-c1">17</span>);j<span class="pl-k">=</span><span class="pl-en">A</span>(s,<span class="pl-c1">R</span><span class="pl-k">+</span><span class="pl-c1">18</span>);l<span class="pl-k">=</span><span class="pl-en">A</span>(s,<span class="pl-c1">R</span><span class="pl-k">+</span><span class="pl-c1">19</span>);m<span class="pl-k">=</span><span class="pl-en">v</span>(s,<span class="pl-c1">R</span><span class="pl-k">+</span><span class="pl-c1">20</span>);n<span class="pl-k">=</span><span class="pl-en">v</span>(s,<span class="pl-c1">R</span><span class="pl-k">+</span><span class="pl-c1">20</span><span class="pl-k">+</span><span class="pl-c1">4</span>);p<span class="pl-k">=</span><span class="pl-en">v</span>(s,<span class="pl-c1">R</span><span class="pl-k">+</span><span class="pl-c1">20</span><span class="pl-k">+</span><span class="pl-c1">8</span>);o<span class="pl-k">=</span><span class="pl-en">v</span>(s,<span class="pl-c1">R</span><span class="pl-k">+</span><span class="pl-c1">20</span><span class="pl-k">+</span><span class="pl-c1">12</span>);q<span class="pl-k">=</span><span class="pl-en">v</span>(s,<span class="pl-c1">R</span><span class="pl-k">+</span><span class="pl-c1">20</span><span class="pl-k">+</span><span class="pl-c1">16</span>);r<span class="pl-k">=</span><span class="pl-en">v</span>(s,<span class="pl-c1">R</span><span class="pl-k">+</span><span class="pl-c1">20</span><span class="pl-k">+</span><span class="pl-c1">20</span>);t<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L163" class="blob-num js-line-number" data-line-number="163"></td>
        <td id="LC163" class="blob-code blob-code-inner js-file-line"><span class="pl-en">v</span>(s,<span class="pl-c1">R</span><span class="pl-k">+</span><span class="pl-c1">20</span><span class="pl-k">+</span><span class="pl-c1">24</span>);<span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-en">v</span>(s,<span class="pl-c1">R</span><span class="pl-k">+</span><span class="pl-c1">20</span><span class="pl-k">+</span><span class="pl-c1">28</span>);b<span class="pl-k">=</span><span class="pl-en">v</span>(s,<span class="pl-c1">R</span><span class="pl-k">+</span><span class="pl-c1">20</span><span class="pl-k">+</span><span class="pl-c1">32</span>);u<span class="pl-k">=</span><span class="pl-en">v</span>(s,<span class="pl-c1">R</span><span class="pl-k">+</span><span class="pl-c1">20</span><span class="pl-k">+</span><span class="pl-c1">36</span>);s<span class="pl-k">=</span><span class="pl-en">v</span>(s,<span class="pl-c1">R</span><span class="pl-k">+</span><span class="pl-c1">20</span><span class="pl-k">+</span><span class="pl-c1">40</span>);<span class="pl-c1">K</span><span class="pl-k">+=</span>c;<span class="pl-c1">R</span><span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span>e<span class="pl-k">+</span>l;$<span class="pl-k">=</span><span class="pl-c1">4</span><span class="pl-k">*</span>e<span class="pl-k">+</span>l;<span class="pl-c1">L</span><span class="pl-k">=</span>o<span class="pl-k">*</span><span class="pl-c1">R</span>;c<span class="pl-k">=</span>q<span class="pl-k">*</span>(<span class="pl-c1">R</span><span class="pl-k">+</span><span class="pl-c1">3</span><span class="pl-k">*</span>i);e<span class="pl-k">=</span>r<span class="pl-k">*</span>(<span class="pl-c1">R</span><span class="pl-k">+</span><span class="pl-c1">3</span><span class="pl-k">*</span>j);l<span class="pl-k">=</span>t<span class="pl-k">*</span>(<span class="pl-c1">R</span><span class="pl-k">+</span><span class="pl-c1">3</span><span class="pl-k">*</span>i<span class="pl-k">+</span><span class="pl-c1">3</span><span class="pl-k">*</span>j);<span class="pl-c1">R</span><span class="pl-k">=</span><span class="pl-c1">B</span><span class="pl-k">*</span>$;i<span class="pl-k">=</span>b<span class="pl-k">*</span>($<span class="pl-k">+</span><span class="pl-c1">4</span><span class="pl-k">*</span>i);j<span class="pl-k">=</span>u<span class="pl-k">*</span>($<span class="pl-k">+</span><span class="pl-c1">4</span><span class="pl-k">*</span>j);$<span class="pl-k">=</span><span class="pl-c1">K</span>;<span class="pl-k">var</span> <span class="pl-c1">K</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(a,<span class="pl-c1">K</span>,<span class="pl-c1">3</span><span class="pl-k">*</span>m),<span class="pl-c1">Y</span>,<span class="pl-c1">N</span>,ea,<span class="pl-c1">Q</span>;<span class="pl-k">for</span>(<span class="pl-c1">Y</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">Y</span><span class="pl-k">&lt;</span>m;<span class="pl-c1">Y</span><span class="pl-k">++</span>)<span class="pl-c1">N</span><span class="pl-k">=</span><span class="pl-c1">K</span>[<span class="pl-c1">3</span><span class="pl-k">*</span><span class="pl-c1">Y</span>],ea<span class="pl-k">=</span><span class="pl-c1">K</span>[<span class="pl-c1">3</span><span class="pl-k">*</span><span class="pl-c1">Y</span><span class="pl-k">+</span><span class="pl-c1">1</span>],<span class="pl-c1">Q</span><span class="pl-k">=</span><span class="pl-c1">K</span>[<span class="pl-c1">3</span><span class="pl-k">*</span><span class="pl-c1">Y</span><span class="pl-k">+</span><span class="pl-c1">2</span>],<span class="pl-c1">M</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">N</span>,ea,<span class="pl-c1">Q</span>));m<span class="pl-k">=</span><span class="pl-c1">K</span><span class="pl-k">=</span>$<span class="pl-k">+</span><span class="pl-c1">3</span><span class="pl-k">*</span>m<span class="pl-k">*</span><span class="pl-c1">Float32Array</span>.<span class="pl-c1">BYTES_PER_ELEMENT</span>;<span class="pl-k">if</span>(n){<span class="pl-c1">K</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Int8Array</span>(a,<span class="pl-c1">K</span>,<span class="pl-c1">3</span><span class="pl-k">*</span>n);<span class="pl-k">for</span>($<span class="pl-k">=</span><span class="pl-c1">0</span>;$<span class="pl-k">&lt;</span>n;$<span class="pl-k">++</span>)<span class="pl-c1">Y</span><span class="pl-k">=</span><span class="pl-c1">K</span>[<span class="pl-c1">3</span><span class="pl-k">*</span>$],<span class="pl-c1">N</span><span class="pl-k">=</span><span class="pl-c1">K</span>[<span class="pl-c1">3</span><span class="pl-k">*</span>$<span class="pl-k">+</span><span class="pl-c1">1</span>],ea<span class="pl-k">=</span><span class="pl-c1">K</span>[<span class="pl-c1">3</span><span class="pl-k">*</span>$<span class="pl-k">+</span><span class="pl-c1">2</span>],<span class="pl-c1">F</span>.<span class="pl-c1">push</span>(<span class="pl-c1">Y</span><span class="pl-k">/</span><span class="pl-c1">127</span>,<span class="pl-c1">N</span><span class="pl-k">/</span><span class="pl-c1">127</span>,ea<span class="pl-k">/</span><span class="pl-c1">127</span>)}<span class="pl-c1">K</span><span class="pl-k">=</span>m<span class="pl-k">+</span><span class="pl-c1">3</span><span class="pl-k">*</span>n<span class="pl-k">*</span><span class="pl-c1">Int8Array</span>.<span class="pl-c1">BYTES_PER_ELEMENT</span>;n<span class="pl-k">=</span><span class="pl-c1">K</span><span class="pl-k">+=</span><span class="pl-en">z</span>(<span class="pl-c1">3</span><span class="pl-k">*</span>n);</td>
      </tr>
      <tr>
        <td id="L164" class="blob-num js-line-number" data-line-number="164"></td>
        <td id="LC164" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span>(p){<span class="pl-c1">K</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(a,<span class="pl-c1">K</span>,<span class="pl-c1">2</span><span class="pl-k">*</span>p);<span class="pl-k">for</span>(m<span class="pl-k">=</span><span class="pl-c1">0</span>;m<span class="pl-k">&lt;</span>p;m<span class="pl-k">++</span>)$<span class="pl-k">=</span><span class="pl-c1">K</span>[<span class="pl-c1">2</span><span class="pl-k">*</span>m],<span class="pl-c1">Y</span><span class="pl-k">=</span><span class="pl-c1">K</span>[<span class="pl-c1">2</span><span class="pl-k">*</span>m<span class="pl-k">+</span><span class="pl-c1">1</span>],<span class="pl-c1">I</span>.<span class="pl-c1">push</span>($,<span class="pl-c1">Y</span>)}p<span class="pl-k">=</span><span class="pl-c1">K</span><span class="pl-k">=</span>n<span class="pl-k">+</span><span class="pl-c1">2</span><span class="pl-k">*</span>p<span class="pl-k">*</span><span class="pl-c1">Float32Array</span>.<span class="pl-c1">BYTES_PER_ELEMENT</span>;<span class="pl-c1">L</span><span class="pl-k">=</span>p<span class="pl-k">+</span><span class="pl-c1">L</span><span class="pl-k">+</span><span class="pl-en">z</span>(<span class="pl-c1">2</span><span class="pl-k">*</span>o);n<span class="pl-k">=</span><span class="pl-c1">L</span><span class="pl-k">+</span>c<span class="pl-k">+</span><span class="pl-en">z</span>(<span class="pl-c1">2</span><span class="pl-k">*</span>q);c<span class="pl-k">=</span>n<span class="pl-k">+</span>e<span class="pl-k">+</span><span class="pl-en">z</span>(<span class="pl-c1">2</span><span class="pl-k">*</span>r);e<span class="pl-k">=</span>c<span class="pl-k">+</span>l<span class="pl-k">+</span><span class="pl-en">z</span>(<span class="pl-c1">2</span><span class="pl-k">*</span>t);<span class="pl-c1">R</span><span class="pl-k">=</span>e<span class="pl-k">+</span><span class="pl-c1">R</span><span class="pl-k">+</span><span class="pl-en">z</span>(<span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">B</span>);l<span class="pl-k">=</span><span class="pl-c1">R</span><span class="pl-k">+</span>i<span class="pl-k">+</span><span class="pl-en">z</span>(<span class="pl-c1">2</span><span class="pl-k">*</span>b);i<span class="pl-k">=</span>l<span class="pl-k">+</span>j<span class="pl-k">+</span><span class="pl-en">z</span>(<span class="pl-c1">2</span><span class="pl-k">*</span>u);r<span class="pl-k">&amp;&amp;</span>(j<span class="pl-k">=</span>n<span class="pl-k">+</span><span class="pl-c1">3</span><span class="pl-k">*</span>r<span class="pl-k">*</span><span class="pl-c1">Uint32Array</span>.<span class="pl-c1">BYTES_PER_ELEMENT</span>,<span class="pl-en">G</span>(r,n,j<span class="pl-k">+</span><span class="pl-c1">3</span><span class="pl-k">*</span>r<span class="pl-k">*</span><span class="pl-c1">Uint32Array</span>.<span class="pl-c1">BYTES_PER_ELEMENT</span>),<span class="pl-en">y</span>(r,j));t<span class="pl-k">&amp;&amp;</span>(r<span class="pl-k">=</span>c<span class="pl-k">+</span><span class="pl-c1">3</span><span class="pl-k">*</span>t<span class="pl-k">*</span><span class="pl-c1">Uint32Array</span>.<span class="pl-c1">BYTES_PER_ELEMENT</span>,j<span class="pl-k">=</span>r<span class="pl-k">+</span><span class="pl-c1">3</span><span class="pl-k">*</span>t<span class="pl-k">*</span><span class="pl-c1">Uint32Array</span>.<span class="pl-c1">BYTES_PER_ELEMENT</span>,<span class="pl-en">J</span>(t,c,r,j<span class="pl-k">+</span><span class="pl-c1">3</span><span class="pl-k">*</span>t<span class="pl-k">*</span><span class="pl-c1">Uint32Array</span>.<span class="pl-c1">BYTES_PER_ELEMENT</span>),<span class="pl-en">y</span>(t,j));u<span class="pl-k">&amp;&amp;</span>(t<span class="pl-k">=</span>l<span class="pl-k">+</span><span class="pl-c1">4</span><span class="pl-k">*</span>u<span class="pl-k">*</span><span class="pl-c1">Uint32Array</span>.<span class="pl-c1">BYTES_PER_ELEMENT</span>,<span class="pl-en">H</span>(u,l,t<span class="pl-k">+</span><span class="pl-c1">4</span><span class="pl-k">*</span>u<span class="pl-k">*</span><span class="pl-c1">Uint32Array</span>.<span class="pl-c1">BYTES_PER_ELEMENT</span>),</td>
      </tr>
      <tr>
        <td id="L165" class="blob-num js-line-number" data-line-number="165"></td>
        <td id="LC165" class="blob-code blob-code-inner js-file-line"><span class="pl-en">C</span>(u,t));s<span class="pl-k">&amp;&amp;</span>(u<span class="pl-k">=</span>i<span class="pl-k">+</span><span class="pl-c1">4</span><span class="pl-k">*</span>s<span class="pl-k">*</span><span class="pl-c1">Uint32Array</span>.<span class="pl-c1">BYTES_PER_ELEMENT</span>,t<span class="pl-k">=</span>u<span class="pl-k">+</span><span class="pl-c1">4</span><span class="pl-k">*</span>s<span class="pl-k">*</span><span class="pl-c1">Uint32Array</span>.<span class="pl-c1">BYTES_PER_ELEMENT</span>,<span class="pl-en">E</span>(s,i,u,t<span class="pl-k">+</span><span class="pl-c1">4</span><span class="pl-k">*</span>s<span class="pl-k">*</span><span class="pl-c1">Uint32Array</span>.<span class="pl-c1">BYTES_PER_ELEMENT</span>),<span class="pl-en">C</span>(s,t));o<span class="pl-k">&amp;&amp;</span><span class="pl-en">G</span>(o,p,p<span class="pl-k">+</span><span class="pl-c1">3</span><span class="pl-k">*</span>o<span class="pl-k">*</span><span class="pl-c1">Uint32Array</span>.<span class="pl-c1">BYTES_PER_ELEMENT</span>);q<span class="pl-k">&amp;&amp;</span>(o<span class="pl-k">=</span><span class="pl-c1">L</span><span class="pl-k">+</span><span class="pl-c1">3</span><span class="pl-k">*</span>q<span class="pl-k">*</span><span class="pl-c1">Uint32Array</span>.<span class="pl-c1">BYTES_PER_ELEMENT</span>,<span class="pl-en">J</span>(q,<span class="pl-c1">L</span>,o,o<span class="pl-k">+</span><span class="pl-c1">3</span><span class="pl-k">*</span>q<span class="pl-k">*</span><span class="pl-c1">Uint32Array</span>.<span class="pl-c1">BYTES_PER_ELEMENT</span>));<span class="pl-c1">B</span><span class="pl-k">&amp;&amp;</span><span class="pl-en">H</span>(<span class="pl-c1">B</span>,e,e<span class="pl-k">+</span><span class="pl-c1">4</span><span class="pl-k">*</span><span class="pl-c1">B</span><span class="pl-k">*</span><span class="pl-c1">Uint32Array</span>.<span class="pl-c1">BYTES_PER_ELEMENT</span>);b<span class="pl-k">&amp;&amp;</span>(q<span class="pl-k">=</span><span class="pl-c1">R</span><span class="pl-k">+</span><span class="pl-c1">4</span><span class="pl-k">*</span>b<span class="pl-k">*</span><span class="pl-c1">Uint32Array</span>.<span class="pl-c1">BYTES_PER_ELEMENT</span>,<span class="pl-en">E</span>(b,<span class="pl-c1">R</span>,q,q<span class="pl-k">+</span><span class="pl-c1">4</span><span class="pl-k">*</span>b<span class="pl-k">*</span><span class="pl-c1">Uint32Array</span>.<span class="pl-c1">BYTES_PER_ELEMENT</span>));<span class="pl-c1">this</span>.<span class="pl-en">computeCentroids</span>();<span class="pl-c1">this</span>.<span class="pl-en">computeFaceNormals</span>();<span class="pl-c1">THREE</span>.<span class="pl-smi">Loader</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">hasNormals</span>(<span class="pl-c1">this</span>)<span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-en">computeTangents</span>()};</td>
      </tr>
      <tr>
        <td id="L166" class="blob-num js-line-number" data-line-number="166"></td>
        <td id="LC166" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">e</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>.<span class="pl-c1">prototype</span>);<span class="pl-en">b</span>(<span class="pl-k">new</span> <span class="pl-en">e</span>(c))};<span class="pl-c1">THREE</span>.<span class="pl-en">ImageLoader</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">THREE</span>.<span class="pl-smi">EventTarget</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-smi">crossOrigin</span><span class="pl-k">=</span><span class="pl-c1">null</span>};</td>
      </tr>
      <tr>
        <td id="L167" class="blob-num js-line-number" data-line-number="167"></td>
        <td id="LC167" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ImageLoader</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.ImageLoader,load:<span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>;<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Image</span>);<span class="pl-smi">b</span>.<span class="pl-c1">addEventListener</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>load<span class="pl-pds">&quot;</span></span>,<span class="pl-k">function</span>(){<span class="pl-smi">c</span>.<span class="pl-c1">dispatchEvent</span>({type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>load<span class="pl-pds">&quot;</span></span>,content<span class="pl-k">:</span>b})},<span class="pl-k">!</span><span class="pl-c1">1</span>);<span class="pl-smi">b</span>.<span class="pl-c1">addEventListener</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>error<span class="pl-pds">&quot;</span></span>,<span class="pl-k">function</span>(){<span class="pl-smi">c</span>.<span class="pl-c1">dispatchEvent</span>({type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>error<span class="pl-pds">&quot;</span></span>,message<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>Couldn&#39;t load URL [<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>]<span class="pl-pds">&quot;</span></span>})},<span class="pl-k">!</span><span class="pl-c1">1</span>);<span class="pl-smi">c</span>.<span class="pl-smi">crossOrigin</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-smi">crossOrigin</span><span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">crossOrigin</span>);<span class="pl-smi">b</span>.<span class="pl-smi">src</span><span class="pl-k">=</span>a}};<span class="pl-c1">THREE</span>.<span class="pl-en">JSONLoader</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Loader</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a)};<span class="pl-c1">THREE</span>.<span class="pl-smi">JSONLoader</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Loader</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L168" class="blob-num js-line-number" data-line-number="168"></td>
        <td id="LC168" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">JSONLoader</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">load</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){c<span class="pl-k">=</span>c<span class="pl-k">?</span>c<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-en">extractUrlBase</span>(a);<span class="pl-c1">this</span>.<span class="pl-en">onLoadStart</span>();<span class="pl-c1">this</span>.<span class="pl-en">loadAjaxJSON</span>(<span class="pl-c1">this</span>,a,b,c)};</td>
      </tr>
      <tr>
        <td id="L169" class="blob-num js-line-number" data-line-number="169"></td>
        <td id="LC169" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">JSONLoader</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">loadAjaxJSON</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">XMLHttpRequest</span>,g<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-smi">f</span>.<span class="pl-en">onreadystatechange</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">if</span>(<span class="pl-smi">f</span>.<span class="pl-c1">readyState</span><span class="pl-k">===</span><span class="pl-smi">f</span>.<span class="pl-c1">DONE</span>)<span class="pl-k">if</span>(<span class="pl-c1">200</span><span class="pl-k">===</span><span class="pl-smi">f</span>.<span class="pl-c1">status</span><span class="pl-k">||</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">f</span>.<span class="pl-c1">status</span>){<span class="pl-k">if</span>(<span class="pl-smi">f</span>.<span class="pl-c1">responseText</span>){<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-c1">JSON</span>.<span class="pl-c1">parse</span>(<span class="pl-smi">f</span>.<span class="pl-c1">responseText</span>);<span class="pl-smi">a</span>.<span class="pl-en">createModel</span>(h,c,d)}<span class="pl-k">else</span> <span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.JSONLoader: [<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>b<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>] seems to be unreachable or file there is empty<span class="pl-pds">&quot;</span></span>);<span class="pl-smi">a</span>.<span class="pl-en">onLoadComplete</span>()}<span class="pl-k">else</span> <span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.JSONLoader: Couldn&#39;t load [<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>b<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>] [<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-smi">f</span>.<span class="pl-c1">status</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>]<span class="pl-pds">&quot;</span></span>);<span class="pl-k">else</span> <span class="pl-smi">f</span>.<span class="pl-c1">readyState</span><span class="pl-k">===</span><span class="pl-smi">f</span>.<span class="pl-c1">LOADING</span><span class="pl-k">?</span>e<span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">0</span><span class="pl-k">===</span>g<span class="pl-k">&amp;&amp;</span>(g<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">getResponseHeader</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>Content-Length<span class="pl-pds">&quot;</span></span>)),</td>
      </tr>
      <tr>
        <td id="L170" class="blob-num js-line-number" data-line-number="170"></td>
        <td id="LC170" class="blob-code blob-code-inner js-file-line"><span class="pl-en">e</span>({total<span class="pl-k">:</span>g,loaded<span class="pl-k">:</span><span class="pl-smi">f</span>.<span class="pl-c1">responseText</span>.<span class="pl-c1">length</span>}))<span class="pl-k">:</span><span class="pl-smi">f</span>.<span class="pl-c1">readyState</span><span class="pl-k">===</span><span class="pl-smi">f</span>.<span class="pl-c1">HEADERS_RECEIVED</span><span class="pl-k">&amp;&amp;</span>(g<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">getResponseHeader</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>Content-Length<span class="pl-pds">&quot;</span></span>))};<span class="pl-smi">f</span>.<span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>GET<span class="pl-pds">&quot;</span></span>,b,<span class="pl-k">!</span><span class="pl-c1">0</span>);<span class="pl-smi">f</span>.<span class="pl-c1">send</span>(<span class="pl-c1">null</span>)};</td>
      </tr>
      <tr>
        <td id="L171" class="blob-num js-line-number" data-line-number="171"></td>
        <td id="LC171" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">JSONLoader</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">createModel</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Geometry</span>,e<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">scale</span><span class="pl-k">?</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-smi">a</span>.<span class="pl-smi">scale</span><span class="pl-k">:</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-en">initMaterials</span>(d,<span class="pl-smi">a</span>.<span class="pl-smi">materials</span>,c);<span class="pl-k">var</span> f,g,h,i,j,l,m,n,p,o,q,r,t,<span class="pl-c1">B</span>,u<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">faces</span>;p<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertices</span>;<span class="pl-k">var</span> s<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">normals</span>,z<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">colors</span>,<span class="pl-c1">A</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(f<span class="pl-k">=</span><span class="pl-c1">0</span>;f<span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-smi">uvs</span>.<span class="pl-c1">length</span>;f<span class="pl-k">++</span>)<span class="pl-smi">a</span>.<span class="pl-smi">uvs</span>[f].<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">A</span><span class="pl-k">++</span>;<span class="pl-k">for</span>(f<span class="pl-k">=</span><span class="pl-c1">0</span>;f<span class="pl-k">&lt;</span><span class="pl-c1">A</span>;f<span class="pl-k">++</span>)<span class="pl-smi">d</span>.<span class="pl-smi">faceUvs</span>[f]<span class="pl-k">=</span>[],<span class="pl-smi">d</span>.<span class="pl-smi">faceVertexUvs</span>[f]<span class="pl-k">=</span>[];c<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(i<span class="pl-k">=</span><span class="pl-smi">p</span>.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>i;)j<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,<span class="pl-smi">j</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>p[c<span class="pl-k">++</span>]<span class="pl-k">*</span>e,<span class="pl-smi">j</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>p[c<span class="pl-k">++</span>]<span class="pl-k">*</span>e,<span class="pl-smi">j</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>p[c<span class="pl-k">++</span>]<span class="pl-k">*</span>e,<span class="pl-smi">d</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">push</span>(j);c<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(i<span class="pl-k">=</span><span class="pl-smi">u</span>.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>i;){p<span class="pl-k">=</span>u[c<span class="pl-k">++</span>];j<span class="pl-k">=</span>p<span class="pl-k">&amp;</span><span class="pl-c1">1</span>;h<span class="pl-k">=</span>p<span class="pl-k">&amp;</span><span class="pl-c1">2</span>;f<span class="pl-k">=</span>p<span class="pl-k">&amp;</span><span class="pl-c1">4</span>;g<span class="pl-k">=</span>p<span class="pl-k">&amp;</span><span class="pl-c1">8</span>;m<span class="pl-k">=</span>p<span class="pl-k">&amp;</span><span class="pl-c1">16</span>;</td>
      </tr>
      <tr>
        <td id="L172" class="blob-num js-line-number" data-line-number="172"></td>
        <td id="LC172" class="blob-code blob-code-inner js-file-line">l<span class="pl-k">=</span>p<span class="pl-k">&amp;</span><span class="pl-c1">32</span>;o<span class="pl-k">=</span>p<span class="pl-k">&amp;</span><span class="pl-c1">64</span>;p<span class="pl-k">&amp;=</span><span class="pl-c1">128</span>;j<span class="pl-k">?</span>(q<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Face4</span>,<span class="pl-smi">q</span>.<span class="pl-smi">a</span><span class="pl-k">=</span>u[c<span class="pl-k">++</span>],<span class="pl-smi">q</span>.<span class="pl-smi">b</span><span class="pl-k">=</span>u[c<span class="pl-k">++</span>],<span class="pl-smi">q</span>.<span class="pl-smi">c</span><span class="pl-k">=</span>u[c<span class="pl-k">++</span>],<span class="pl-smi">q</span>.<span class="pl-smi">d</span><span class="pl-k">=</span>u[c<span class="pl-k">++</span>],j<span class="pl-k">=</span><span class="pl-c1">4</span>)<span class="pl-k">:</span>(q<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>,<span class="pl-smi">q</span>.<span class="pl-smi">a</span><span class="pl-k">=</span>u[c<span class="pl-k">++</span>],<span class="pl-smi">q</span>.<span class="pl-smi">b</span><span class="pl-k">=</span>u[c<span class="pl-k">++</span>],<span class="pl-smi">q</span>.<span class="pl-smi">c</span><span class="pl-k">=</span>u[c<span class="pl-k">++</span>],j<span class="pl-k">=</span><span class="pl-c1">3</span>);h<span class="pl-k">&amp;&amp;</span>(h<span class="pl-k">=</span>u[c<span class="pl-k">++</span>],<span class="pl-smi">q</span>.<span class="pl-smi">materialIndex</span><span class="pl-k">=</span>h);h<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">length</span>;<span class="pl-k">if</span>(f)<span class="pl-k">for</span>(f<span class="pl-k">=</span><span class="pl-c1">0</span>;f<span class="pl-k">&lt;</span><span class="pl-c1">A</span>;f<span class="pl-k">++</span>)r<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">uvs</span>[f],n<span class="pl-k">=</span>u[c<span class="pl-k">++</span>],<span class="pl-c1">B</span><span class="pl-k">=</span>r[<span class="pl-c1">2</span><span class="pl-k">*</span>n],n<span class="pl-k">=</span>r[<span class="pl-c1">2</span><span class="pl-k">*</span>n<span class="pl-k">+</span><span class="pl-c1">1</span>],<span class="pl-smi">d</span>.<span class="pl-smi">faceUvs</span>[f][h]<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.UV</span>(<span class="pl-c1">B</span>,n);<span class="pl-k">if</span>(g)<span class="pl-k">for</span>(f<span class="pl-k">=</span><span class="pl-c1">0</span>;f<span class="pl-k">&lt;</span><span class="pl-c1">A</span>;f<span class="pl-k">++</span>){r<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">uvs</span>[f];t<span class="pl-k">=</span>[];<span class="pl-k">for</span>(g<span class="pl-k">=</span><span class="pl-c1">0</span>;g<span class="pl-k">&lt;</span>j;g<span class="pl-k">++</span>)n<span class="pl-k">=</span>u[c<span class="pl-k">++</span>],<span class="pl-c1">B</span><span class="pl-k">=</span>r[<span class="pl-c1">2</span><span class="pl-k">*</span>n],n<span class="pl-k">=</span>r[<span class="pl-c1">2</span><span class="pl-k">*</span>n<span class="pl-k">+</span><span class="pl-c1">1</span>],t[g]<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.UV</span>(<span class="pl-c1">B</span>,n);<span class="pl-smi">d</span>.<span class="pl-smi">faceVertexUvs</span>[f][h]<span class="pl-k">=</span>t}m<span class="pl-k">&amp;&amp;</span>(m<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span>u[c<span class="pl-k">++</span>],g<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,<span class="pl-smi">g</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>s[m<span class="pl-k">++</span>],<span class="pl-smi">g</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>s[m<span class="pl-k">++</span>],<span class="pl-smi">g</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>s[m],<span class="pl-smi">q</span>.<span class="pl-smi">normal</span><span class="pl-k">=</span>g);<span class="pl-k">if</span>(l)<span class="pl-k">for</span>(f<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L173" class="blob-num js-line-number" data-line-number="173"></td>
        <td id="LC173" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>;f<span class="pl-k">&lt;</span>j;f<span class="pl-k">++</span>)m<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span>u[c<span class="pl-k">++</span>],g<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,<span class="pl-smi">g</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>s[m<span class="pl-k">++</span>],<span class="pl-smi">g</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>s[m<span class="pl-k">++</span>],<span class="pl-smi">g</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>s[m],<span class="pl-smi">q</span>.<span class="pl-smi">vertexNormals</span>.<span class="pl-c1">push</span>(g);o<span class="pl-k">&amp;&amp;</span>(l<span class="pl-k">=</span>u[c<span class="pl-k">++</span>],l<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(z[l]),<span class="pl-smi">q</span>.<span class="pl-c1">color</span><span class="pl-k">=</span>l);<span class="pl-k">if</span>(p)<span class="pl-k">for</span>(f<span class="pl-k">=</span><span class="pl-c1">0</span>;f<span class="pl-k">&lt;</span>j;f<span class="pl-k">++</span>)l<span class="pl-k">=</span>u[c<span class="pl-k">++</span>],l<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(z[l]),<span class="pl-smi">q</span>.<span class="pl-smi">vertexColors</span>.<span class="pl-c1">push</span>(l);<span class="pl-smi">d</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">push</span>(q)}<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">skinWeights</span>){c<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(i<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">skinWeights</span>.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>i;c<span class="pl-k">+=</span><span class="pl-c1">2</span>)u<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">skinWeights</span>[c],s<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">skinWeights</span>[c<span class="pl-k">+</span><span class="pl-c1">1</span>],<span class="pl-smi">d</span>.<span class="pl-smi">skinWeights</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector4</span>(u,s,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>))}<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">skinIndices</span>){c<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(i<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">skinIndices</span>.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>i;c<span class="pl-k">+=</span><span class="pl-c1">2</span>)u<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">skinIndices</span>[c],s<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">skinIndices</span>[c<span class="pl-k">+</span><span class="pl-c1">1</span>],<span class="pl-smi">d</span>.<span class="pl-smi">skinIndices</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector4</span>(u,</td>
      </tr>
      <tr>
        <td id="L174" class="blob-num js-line-number" data-line-number="174"></td>
        <td id="LC174" class="blob-code blob-code-inner js-file-line">s,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>))}<span class="pl-smi">d</span>.<span class="pl-smi">bones</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">bones</span>;<span class="pl-smi">d</span>.<span class="pl-smi">animation</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">animation</span>;<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">morphTargets</span>){c<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(i<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">morphTargets</span>.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>i;c<span class="pl-k">++</span>){<span class="pl-smi">d</span>.<span class="pl-smi">morphTargets</span>[c]<span class="pl-k">=</span>{};<span class="pl-smi">d</span>.<span class="pl-smi">morphTargets</span>[c].<span class="pl-c1">name</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">morphTargets</span>[c].<span class="pl-c1">name</span>;<span class="pl-smi">d</span>.<span class="pl-smi">morphTargets</span>[c].<span class="pl-smi">vertices</span><span class="pl-k">=</span>[];z<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">morphTargets</span>[c].<span class="pl-smi">vertices</span>;<span class="pl-c1">A</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">morphTargets</span>[c].<span class="pl-smi">vertices</span>;u<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(s<span class="pl-k">=</span><span class="pl-c1">A</span>.<span class="pl-c1">length</span>;u<span class="pl-k">&lt;</span>s;u<span class="pl-k">+=</span><span class="pl-c1">3</span>)p<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,<span class="pl-smi">p</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">A</span>[u]<span class="pl-k">*</span>e,<span class="pl-smi">p</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">A</span>[u<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">*</span>e,<span class="pl-smi">p</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">A</span>[u<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">*</span>e,<span class="pl-smi">z</span>.<span class="pl-c1">push</span>(p)}}<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">morphColors</span>){c<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(i<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">morphColors</span>.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>i;c<span class="pl-k">++</span>){<span class="pl-smi">d</span>.<span class="pl-smi">morphColors</span>[c]<span class="pl-k">=</span>{};<span class="pl-smi">d</span>.<span class="pl-smi">morphColors</span>[c].<span class="pl-c1">name</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">morphColors</span>[c].<span class="pl-c1">name</span>;<span class="pl-smi">d</span>.<span class="pl-smi">morphColors</span>[c].<span class="pl-smi">colors</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L175" class="blob-num js-line-number" data-line-number="175"></td>
        <td id="LC175" class="blob-code blob-code-inner js-file-line">[];s<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">morphColors</span>[c].<span class="pl-smi">colors</span>;z<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">morphColors</span>[c].<span class="pl-smi">colors</span>;e<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(u<span class="pl-k">=</span><span class="pl-smi">z</span>.<span class="pl-c1">length</span>;e<span class="pl-k">&lt;</span>u;e<span class="pl-k">+=</span><span class="pl-c1">3</span>)<span class="pl-c1">A</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">16755200</span>),<span class="pl-c1">A</span>.<span class="pl-en">setRGB</span>(z[e],z[e<span class="pl-k">+</span><span class="pl-c1">1</span>],z[e<span class="pl-k">+</span><span class="pl-c1">2</span>]),<span class="pl-smi">s</span>.<span class="pl-c1">push</span>(<span class="pl-c1">A</span>)}}<span class="pl-smi">d</span>.<span class="pl-en">computeCentroids</span>();<span class="pl-smi">d</span>.<span class="pl-en">computeFaceNormals</span>();<span class="pl-c1">this</span>.<span class="pl-en">hasNormals</span>(d)<span class="pl-k">&amp;&amp;</span><span class="pl-smi">d</span>.<span class="pl-en">computeTangents</span>();<span class="pl-en">b</span>(d)};<span class="pl-c1">THREE</span>.<span class="pl-en">LoadingMonitor</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">THREE</span>.<span class="pl-smi">EventTarget</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">this</span>,b<span class="pl-k">=</span><span class="pl-c1">0</span>,c<span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-en">d</span><span class="pl-k">=</span><span class="pl-k">function</span>(){b<span class="pl-k">++</span>;<span class="pl-smi">a</span>.<span class="pl-c1">dispatchEvent</span>({type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>progress<span class="pl-pds">&quot;</span></span>,loaded<span class="pl-k">:</span>b,total<span class="pl-k">:</span>c});b<span class="pl-k">===</span>c<span class="pl-k">&amp;&amp;</span><span class="pl-smi">a</span>.<span class="pl-c1">dispatchEvent</span>({type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>load<span class="pl-pds">&quot;</span></span>})};<span class="pl-c1">this</span>.<span class="pl-en">add</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){c<span class="pl-k">++</span>;<span class="pl-smi">a</span>.<span class="pl-c1">addEventListener</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>load<span class="pl-pds">&quot;</span></span>,d,<span class="pl-k">!</span><span class="pl-c1">1</span>)}};</td>
      </tr>
      <tr>
        <td id="L176" class="blob-num js-line-number" data-line-number="176"></td>
        <td id="LC176" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">GeometryLoader</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">THREE</span>.<span class="pl-smi">EventTarget</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-smi">path</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">crossOrigin</span><span class="pl-k">=</span><span class="pl-c1">null</span>};</td>
      </tr>
      <tr>
        <td id="L177" class="blob-num js-line-number" data-line-number="177"></td>
        <td id="LC177" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">GeometryLoader</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.GeometryLoader,load:<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>,c<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">if</span>(<span class="pl-c1">null</span><span class="pl-k">===</span><span class="pl-smi">b</span>.<span class="pl-smi">path</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">split</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>/<span class="pl-pds">&quot;</span></span>);<span class="pl-smi">d</span>.<span class="pl-c1">pop</span>();<span class="pl-smi">b</span>.<span class="pl-smi">path</span><span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">&gt;</span><span class="pl-smi">d</span>.<span class="pl-c1">length</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>.<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-smi">d</span>.<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>/<span class="pl-pds">&quot;</span></span>)}d<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">XMLHttpRequest</span>;<span class="pl-smi">d</span>.<span class="pl-c1">addEventListener</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>load<span class="pl-pds">&quot;</span></span>,<span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-smi">d</span>.<span class="pl-c1">target</span>.<span class="pl-c1">responseText</span><span class="pl-k">?</span>c<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">parse</span>(<span class="pl-c1">JSON</span>.<span class="pl-c1">parse</span>(<span class="pl-smi">d</span>.<span class="pl-c1">target</span>.<span class="pl-c1">responseText</span>),e)<span class="pl-k">:</span><span class="pl-smi">b</span>.<span class="pl-c1">dispatchEvent</span>({type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>error<span class="pl-pds">&quot;</span></span>,message<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>Invalid file [<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>]<span class="pl-pds">&quot;</span></span>})},<span class="pl-k">!</span><span class="pl-c1">1</span>);<span class="pl-smi">d</span>.<span class="pl-c1">addEventListener</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>error<span class="pl-pds">&quot;</span></span>,<span class="pl-k">function</span>(){<span class="pl-smi">b</span>.<span class="pl-c1">dispatchEvent</span>({type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>error<span class="pl-pds">&quot;</span></span>,message<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>Couldn&#39;t load URL [<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>]<span class="pl-pds">&quot;</span></span>})},<span class="pl-k">!</span><span class="pl-c1">1</span>);<span class="pl-smi">d</span>.<span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>GET<span class="pl-pds">&quot;</span></span>,a,</td>
      </tr>
      <tr>
        <td id="L178" class="blob-num js-line-number" data-line-number="178"></td>
        <td id="LC178" class="blob-code blob-code-inner js-file-line"><span class="pl-k">!</span><span class="pl-c1">0</span>);<span class="pl-smi">d</span>.<span class="pl-c1">send</span>(<span class="pl-c1">null</span>);<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.LoadingMonitor</span>;<span class="pl-smi">e</span>.<span class="pl-c1">addEventListener</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>load<span class="pl-pds">&quot;</span></span>,<span class="pl-k">function</span>(){<span class="pl-smi">b</span>.<span class="pl-c1">dispatchEvent</span>({type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>load<span class="pl-pds">&quot;</span></span>,content<span class="pl-k">:</span>c})});<span class="pl-smi">e</span>.<span class="pl-c1">add</span>(d)},<span class="pl-en">parse</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>,d<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Geometry</span>,e<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">scale</span><span class="pl-k">?</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-smi">a</span>.<span class="pl-smi">scale</span><span class="pl-k">:</span><span class="pl-c1">1</span>;<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">materials</span>){<span class="pl-smi">d</span>.<span class="pl-smi">materials</span><span class="pl-k">=</span>[];<span class="pl-k">for</span>(<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-c1">0</span>;f<span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-smi">materials</span>.<span class="pl-c1">length</span>;<span class="pl-k">++</span>f){<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">materials</span>[f],<span class="pl-en">h</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">log</span>(a)<span class="pl-k">/</span><span class="pl-c1">Math</span>.<span class="pl-c1">LN2</span>;<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(a)<span class="pl-k">==</span>a},<span class="pl-en">i</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">log</span>(a)<span class="pl-k">/</span><span class="pl-c1">Math</span>.<span class="pl-c1">LN2</span>;<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">pow</span>(<span class="pl-c1">2</span>,<span class="pl-c1">Math</span>.<span class="pl-c1">round</span>(a))},<span class="pl-en">j</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>,<span class="pl-smi">g</span>,<span class="pl-smi">l</span>){a[d]<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Texture</span>;a[d].<span class="pl-smi">sourceFile</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L179" class="blob-num js-line-number" data-line-number="179"></td>
        <td id="LC179" class="blob-code blob-code-inner js-file-line">e;<span class="pl-k">if</span>(f<span class="pl-k">&amp;&amp;</span>(a[d].<span class="pl-smi">repeat</span>.<span class="pl-c1">set</span>(f[<span class="pl-c1">0</span>],f[<span class="pl-c1">1</span>]),<span class="pl-c1">1</span><span class="pl-k">!==</span>f[<span class="pl-c1">0</span>]<span class="pl-k">&amp;&amp;</span>(a[d].<span class="pl-smi">wrapS</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">RepeatWrapping</span>),<span class="pl-c1">1</span><span class="pl-k">!==</span>f[<span class="pl-c1">1</span>]))a[d].<span class="pl-smi">wrapT</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">RepeatWrapping</span>;g<span class="pl-k">&amp;&amp;</span>a[d].<span class="pl-smi">offset</span>.<span class="pl-c1">set</span>(g[<span class="pl-c1">0</span>],g[<span class="pl-c1">1</span>]);<span class="pl-k">if</span>(l<span class="pl-k">&amp;&amp;</span>(f<span class="pl-k">=</span>{repeat<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">RepeatWrapping</span>,mirror<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">MirroredRepeatWrapping</span>},<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>f[l[<span class="pl-c1">0</span>]]<span class="pl-k">&amp;&amp;</span>(a[d].<span class="pl-smi">wrapS</span><span class="pl-k">=</span>f[l[<span class="pl-c1">0</span>]]),<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>f[l[<span class="pl-c1">1</span>]]))a[d].<span class="pl-smi">wrapT</span><span class="pl-k">=</span>f[l[<span class="pl-c1">1</span>]];<span class="pl-k">var</span> j<span class="pl-k">=</span>a[d],a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.ImageLoader</span>;<span class="pl-smi">a</span>.<span class="pl-c1">addEventListener</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>load<span class="pl-pds">&quot;</span></span>,<span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">content</span>;<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-en">h</span>(<span class="pl-smi">a</span>.<span class="pl-c1">width</span>)<span class="pl-k">||!</span><span class="pl-en">h</span>(<span class="pl-smi">a</span>.<span class="pl-c1">height</span>)){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-en">i</span>(<span class="pl-smi">a</span>.<span class="pl-c1">width</span>),c<span class="pl-k">=</span><span class="pl-en">i</span>(<span class="pl-smi">a</span>.<span class="pl-c1">height</span>);<span class="pl-smi">j</span>.<span class="pl-smi">image</span><span class="pl-k">=</span><span class="pl-c1">document</span>.<span class="pl-c1">createElement</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>canvas<span class="pl-pds">&quot;</span></span>);<span class="pl-smi">j</span>.<span class="pl-smi">image</span>.<span class="pl-c1">width</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L180" class="blob-num js-line-number" data-line-number="180"></td>
        <td id="LC180" class="blob-code blob-code-inner js-file-line">b;<span class="pl-smi">j</span>.<span class="pl-smi">image</span>.<span class="pl-c1">height</span><span class="pl-k">=</span>c;<span class="pl-smi">j</span>.<span class="pl-smi">image</span>.<span class="pl-c1">getContext</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>2d<span class="pl-pds">&quot;</span></span>).<span class="pl-en">drawImage</span>(a,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,b,c)}<span class="pl-k">else</span> <span class="pl-smi">j</span>.<span class="pl-smi">image</span><span class="pl-k">=</span>a;<span class="pl-smi">j</span>.<span class="pl-smi">needsUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>});<span class="pl-smi">a</span>.<span class="pl-smi">crossOrigin</span><span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">crossOrigin</span>;<span class="pl-smi">a</span>.<span class="pl-c1">load</span>(<span class="pl-smi">c</span>.<span class="pl-smi">path</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>/<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>e);b<span class="pl-k">&amp;&amp;</span><span class="pl-smi">b</span>.<span class="pl-c1">add</span>(a)},<span class="pl-en">l</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span>(<span class="pl-c1">255</span><span class="pl-k">*</span>a[<span class="pl-c1">0</span>]<span class="pl-k">&lt;&lt;</span><span class="pl-c1">16</span>)<span class="pl-k">+</span>(<span class="pl-c1">255</span><span class="pl-k">*</span>a[<span class="pl-c1">1</span>]<span class="pl-k">&lt;&lt;</span><span class="pl-c1">8</span>)<span class="pl-k">+</span><span class="pl-c1">255</span><span class="pl-k">*</span>a[<span class="pl-c1">2</span>]},m<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>MeshLambertMaterial<span class="pl-pds">&quot;</span></span>,n<span class="pl-k">=</span>{color<span class="pl-k">:</span><span class="pl-c1">15658734</span>,opacity<span class="pl-k">:</span><span class="pl-c1">1</span>,map<span class="pl-k">:</span><span class="pl-c1">null</span>,lightMap<span class="pl-k">:</span><span class="pl-c1">null</span>,normalMap<span class="pl-k">:</span><span class="pl-c1">null</span>,bumpMap<span class="pl-k">:</span><span class="pl-c1">null</span>,wireframe<span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">1</span>};<span class="pl-k">if</span>(<span class="pl-smi">g</span>.<span class="pl-smi">shading</span>){<span class="pl-k">var</span> p<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">shading</span>.<span class="pl-c1">toLowerCase</span>();<span class="pl-s"><span class="pl-pds">&quot;</span>phong<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>p<span class="pl-k">?</span>m<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>MeshPhongMaterial<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>basic<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>p<span class="pl-k">&amp;&amp;</span>(m<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>MeshBasicMaterial<span class="pl-pds">&quot;</span></span>)}<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">g</span>.<span class="pl-smi">blending</span><span class="pl-k">&amp;&amp;</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-c1">THREE</span>[<span class="pl-smi">g</span>.<span class="pl-smi">blending</span>]<span class="pl-k">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L181" class="blob-num js-line-number" data-line-number="181"></td>
        <td id="LC181" class="blob-code blob-code-inner js-file-line">(<span class="pl-smi">n</span>.<span class="pl-smi">blending</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>[<span class="pl-smi">g</span>.<span class="pl-smi">blending</span>]);<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">g</span>.<span class="pl-smi">transparent</span><span class="pl-k">||</span><span class="pl-c1">1</span><span class="pl-k">&gt;</span><span class="pl-smi">g</span>.<span class="pl-smi">opacity</span>)<span class="pl-smi">n</span>.<span class="pl-smi">transparent</span><span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">transparent</span>;<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">g</span>.<span class="pl-smi">depthTest</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">n</span>.<span class="pl-smi">depthTest</span><span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">depthTest</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">g</span>.<span class="pl-smi">depthWrite</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">n</span>.<span class="pl-smi">depthWrite</span><span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">depthWrite</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">g</span>.<span class="pl-smi">vertexColors</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>face<span class="pl-pds">&quot;</span></span><span class="pl-k">==</span><span class="pl-smi">g</span>.<span class="pl-smi">vertexColors</span><span class="pl-k">?</span><span class="pl-smi">n</span>.<span class="pl-smi">vertexColors</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">FaceColors</span><span class="pl-k">:</span><span class="pl-smi">g</span>.<span class="pl-smi">vertexColors</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">n</span>.<span class="pl-smi">vertexColors</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">VertexColors</span>));<span class="pl-smi">g</span>.<span class="pl-smi">colorDiffuse</span><span class="pl-k">?</span><span class="pl-smi">n</span>.<span class="pl-c1">color</span><span class="pl-k">=</span><span class="pl-en">l</span>(<span class="pl-smi">g</span>.<span class="pl-smi">colorDiffuse</span>)<span class="pl-k">:</span><span class="pl-smi">g</span>.<span class="pl-smi">DbgColor</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">n</span>.<span class="pl-c1">color</span><span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">DbgColor</span>);<span class="pl-smi">g</span>.<span class="pl-smi">colorSpecular</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">n</span>.<span class="pl-smi">specular</span><span class="pl-k">=</span><span class="pl-en">l</span>(<span class="pl-smi">g</span>.<span class="pl-smi">colorSpecular</span>));<span class="pl-smi">g</span>.<span class="pl-smi">colorAmbient</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">n</span>.<span class="pl-smi">ambient</span><span class="pl-k">=</span><span class="pl-en">l</span>(<span class="pl-smi">g</span>.<span class="pl-smi">colorAmbient</span>));<span class="pl-smi">g</span>.<span class="pl-smi">transparency</span><span class="pl-k">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L182" class="blob-num js-line-number" data-line-number="182"></td>
        <td id="LC182" class="blob-code blob-code-inner js-file-line">(<span class="pl-smi">n</span>.<span class="pl-smi">opacity</span><span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">transparency</span>);<span class="pl-smi">g</span>.<span class="pl-smi">specularCoef</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">n</span>.<span class="pl-smi">shininess</span><span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">specularCoef</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">g</span>.<span class="pl-smi">visible</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">n</span>.<span class="pl-smi">visible</span><span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">visible</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">g</span>.<span class="pl-smi">flipSided</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">n</span>.<span class="pl-smi">side</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">BackSide</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">g</span>.<span class="pl-smi">doubleSided</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">n</span>.<span class="pl-smi">side</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">DoubleSide</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">g</span>.<span class="pl-smi">wireframe</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">n</span>.<span class="pl-smi">wireframe</span><span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">wireframe</span>);<span class="pl-smi">g</span>.<span class="pl-smi">mapDiffuse</span><span class="pl-k">&amp;&amp;</span><span class="pl-en">j</span>(n,<span class="pl-s"><span class="pl-pds">&quot;</span>map<span class="pl-pds">&quot;</span></span>,<span class="pl-smi">g</span>.<span class="pl-smi">mapDiffuse</span>,<span class="pl-smi">g</span>.<span class="pl-smi">mapDiffuseRepeat</span>,<span class="pl-smi">g</span>.<span class="pl-smi">mapDiffuseOffset</span>,<span class="pl-smi">g</span>.<span class="pl-smi">mapDiffuseWrap</span>);<span class="pl-smi">g</span>.<span class="pl-smi">mapLight</span><span class="pl-k">&amp;&amp;</span><span class="pl-en">j</span>(n,<span class="pl-s"><span class="pl-pds">&quot;</span>lightMap<span class="pl-pds">&quot;</span></span>,<span class="pl-smi">g</span>.<span class="pl-smi">mapLight</span>,<span class="pl-smi">g</span>.<span class="pl-smi">mapLightRepeat</span>,<span class="pl-smi">g</span>.<span class="pl-smi">mapLightOffset</span>,<span class="pl-smi">g</span>.<span class="pl-smi">mapLightWrap</span>);<span class="pl-smi">g</span>.<span class="pl-smi">mapBump</span><span class="pl-k">&amp;&amp;</span><span class="pl-en">j</span>(n,<span class="pl-s"><span class="pl-pds">&quot;</span>bumpMap<span class="pl-pds">&quot;</span></span>,<span class="pl-smi">g</span>.<span class="pl-smi">mapBump</span>,<span class="pl-smi">g</span>.<span class="pl-smi">mapBumpRepeat</span>,<span class="pl-smi">g</span>.<span class="pl-smi">mapBumpOffset</span>,</td>
      </tr>
      <tr>
        <td id="L183" class="blob-num js-line-number" data-line-number="183"></td>
        <td id="LC183" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">g</span>.<span class="pl-smi">mapBumpWrap</span>);<span class="pl-smi">g</span>.<span class="pl-smi">mapNormal</span><span class="pl-k">&amp;&amp;</span><span class="pl-en">j</span>(n,<span class="pl-s"><span class="pl-pds">&quot;</span>normalMap<span class="pl-pds">&quot;</span></span>,<span class="pl-smi">g</span>.<span class="pl-smi">mapNormal</span>,<span class="pl-smi">g</span>.<span class="pl-smi">mapNormalRepeat</span>,<span class="pl-smi">g</span>.<span class="pl-smi">mapNormalOffset</span>,<span class="pl-smi">g</span>.<span class="pl-smi">mapNormalWrap</span>);<span class="pl-smi">g</span>.<span class="pl-smi">mapSpecular</span><span class="pl-k">&amp;&amp;</span><span class="pl-en">j</span>(n,<span class="pl-s"><span class="pl-pds">&quot;</span>specularMap<span class="pl-pds">&quot;</span></span>,<span class="pl-smi">g</span>.<span class="pl-smi">mapSpecular</span>,<span class="pl-smi">g</span>.<span class="pl-smi">mapSpecularRepeat</span>,<span class="pl-smi">g</span>.<span class="pl-smi">mapSpecularOffset</span>,<span class="pl-smi">g</span>.<span class="pl-smi">mapSpecularWrap</span>);<span class="pl-smi">g</span>.<span class="pl-smi">mapNormal</span><span class="pl-k">?</span>(j<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderUtils</span>.<span class="pl-smi">lib</span>.<span class="pl-smi">normal</span>,l<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">UniformsUtils</span>.<span class="pl-en">clone</span>(<span class="pl-smi">j</span>.<span class="pl-smi">uniforms</span>),<span class="pl-smi">l</span>.<span class="pl-smi">tNormal</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-smi">normalMap</span>,<span class="pl-smi">g</span>.<span class="pl-smi">mapNormalFactor</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">l</span>.<span class="pl-smi">uNormalScale</span>.<span class="pl-c1">value</span>.<span class="pl-c1">set</span>(<span class="pl-smi">g</span>.<span class="pl-smi">mapNormalFactor</span>,<span class="pl-smi">g</span>.<span class="pl-smi">mapNormalFactor</span>),<span class="pl-smi">n</span>.<span class="pl-smi">map</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">l</span>.<span class="pl-smi">tDiffuse</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-smi">map</span>,<span class="pl-smi">l</span>.<span class="pl-smi">enableDiffuse</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>),<span class="pl-smi">n</span>.<span class="pl-smi">specularMap</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">l</span>.<span class="pl-smi">tSpecular</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-smi">specularMap</span>,</td>
      </tr>
      <tr>
        <td id="L184" class="blob-num js-line-number" data-line-number="184"></td>
        <td id="LC184" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">l</span>.<span class="pl-smi">enableSpecular</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>),<span class="pl-smi">n</span>.<span class="pl-smi">lightMap</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">l</span>.<span class="pl-smi">tAO</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-smi">lightMap</span>,<span class="pl-smi">l</span>.<span class="pl-smi">enableAO</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>),<span class="pl-smi">l</span>.<span class="pl-smi">uDiffuseColor</span>.<span class="pl-c1">value</span>.<span class="pl-en">setHex</span>(<span class="pl-smi">n</span>.<span class="pl-c1">color</span>),<span class="pl-smi">l</span>.<span class="pl-smi">uSpecularColor</span>.<span class="pl-c1">value</span>.<span class="pl-en">setHex</span>(<span class="pl-smi">n</span>.<span class="pl-smi">specular</span>),<span class="pl-smi">l</span>.<span class="pl-smi">uAmbientColor</span>.<span class="pl-c1">value</span>.<span class="pl-en">setHex</span>(<span class="pl-smi">n</span>.<span class="pl-smi">ambient</span>),<span class="pl-smi">l</span>.<span class="pl-smi">uShininess</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-smi">shininess</span>,<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">n</span>.<span class="pl-smi">opacity</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">l</span>.<span class="pl-smi">uOpacity</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-smi">opacity</span>),n<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.ShaderMaterial</span>({fragmentShader<span class="pl-k">:</span><span class="pl-smi">j</span>.<span class="pl-smi">fragmentShader</span>,vertexShader<span class="pl-k">:</span><span class="pl-smi">j</span>.<span class="pl-smi">vertexShader</span>,uniforms<span class="pl-k">:</span>l,lights<span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">0</span>,fog<span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">0</span>}))<span class="pl-k">:</span>n<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE</span>[m](n);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">g</span>.<span class="pl-smi">DbgName</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">n</span>.<span class="pl-c1">name</span><span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">DbgName</span>);<span class="pl-smi">d</span>.<span class="pl-smi">materials</span>[f]<span class="pl-k">=</span>n}}<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">faces</span>,o<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertices</span>,</td>
      </tr>
      <tr>
        <td id="L185" class="blob-num js-line-number" data-line-number="185"></td>
        <td id="LC185" class="blob-code blob-code-inner js-file-line">n<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">normals</span>,j<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">colors</span>,l<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">uvs</span>)<span class="pl-k">for</span>(f<span class="pl-k">=</span><span class="pl-c1">0</span>;f<span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-smi">uvs</span>.<span class="pl-c1">length</span>;f<span class="pl-k">++</span>)<span class="pl-smi">a</span>.<span class="pl-smi">uvs</span>[f].<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>l<span class="pl-k">++</span>;<span class="pl-k">for</span>(f<span class="pl-k">=</span><span class="pl-c1">0</span>;f<span class="pl-k">&lt;</span>l;f<span class="pl-k">++</span>)<span class="pl-smi">d</span>.<span class="pl-smi">faceUvs</span>[f]<span class="pl-k">=</span>[],<span class="pl-smi">d</span>.<span class="pl-smi">faceVertexUvs</span>[f]<span class="pl-k">=</span>[];m<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(p<span class="pl-k">=</span><span class="pl-smi">o</span>.<span class="pl-c1">length</span>;m<span class="pl-k">&lt;</span>p;){<span class="pl-k">var</span> q<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-smi">q</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>o[m<span class="pl-k">++</span>]<span class="pl-k">*</span>e;<span class="pl-smi">q</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>o[m<span class="pl-k">++</span>]<span class="pl-k">*</span>e;<span class="pl-smi">q</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>o[m<span class="pl-k">++</span>]<span class="pl-k">*</span>e;<span class="pl-smi">d</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">push</span>(q)}m<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(p<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-c1">length</span>;m<span class="pl-k">&lt;</span>p;){<span class="pl-k">var</span> r<span class="pl-k">=</span>g[m<span class="pl-k">++</span>],t<span class="pl-k">=</span>r<span class="pl-k">&amp;</span><span class="pl-c1">2</span>,f<span class="pl-k">=</span>r<span class="pl-k">&amp;</span><span class="pl-c1">4</span>,<span class="pl-c1">B</span><span class="pl-k">=</span>r<span class="pl-k">&amp;</span><span class="pl-c1">8</span>,u<span class="pl-k">=</span>r<span class="pl-k">&amp;</span><span class="pl-c1">16</span>,o<span class="pl-k">=</span>r<span class="pl-k">&amp;</span><span class="pl-c1">32</span>,s<span class="pl-k">=</span>r<span class="pl-k">&amp;</span><span class="pl-c1">64</span>,q<span class="pl-k">=</span>r<span class="pl-k">&amp;</span><span class="pl-c1">128</span>;<span class="pl-k">if</span>(r<span class="pl-k">&amp;</span><span class="pl-c1">1</span>){r<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Face4</span>;<span class="pl-smi">r</span>.<span class="pl-smi">a</span><span class="pl-k">=</span>g[m<span class="pl-k">++</span>];<span class="pl-smi">r</span>.<span class="pl-smi">b</span><span class="pl-k">=</span>g[m<span class="pl-k">++</span>];<span class="pl-smi">r</span>.<span class="pl-smi">c</span><span class="pl-k">=</span>g[m<span class="pl-k">++</span>];<span class="pl-smi">r</span>.<span class="pl-smi">d</span><span class="pl-k">=</span>g[m<span class="pl-k">++</span>];<span class="pl-k">var</span> z<span class="pl-k">=</span><span class="pl-c1">4</span>}<span class="pl-k">else</span> r<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>,<span class="pl-smi">r</span>.<span class="pl-smi">a</span><span class="pl-k">=</span>g[m<span class="pl-k">++</span>],<span class="pl-smi">r</span>.<span class="pl-smi">b</span><span class="pl-k">=</span>g[m<span class="pl-k">++</span>],<span class="pl-smi">r</span>.<span class="pl-smi">c</span><span class="pl-k">=</span>g[m<span class="pl-k">++</span>],z<span class="pl-k">=</span><span class="pl-c1">3</span>;t<span class="pl-k">&amp;&amp;</span>(t<span class="pl-k">=</span>g[m<span class="pl-k">++</span>],<span class="pl-smi">r</span>.<span class="pl-smi">materialIndex</span><span class="pl-k">=</span>t);<span class="pl-k">var</span> <span class="pl-c1">A</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L186" class="blob-num js-line-number" data-line-number="186"></td>
        <td id="LC186" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">d</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">length</span>;<span class="pl-k">if</span>(f)<span class="pl-k">for</span>(f<span class="pl-k">=</span><span class="pl-c1">0</span>;f<span class="pl-k">&lt;</span>l;f<span class="pl-k">++</span>){<span class="pl-k">var</span> v<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">uvs</span>[f],t<span class="pl-k">=</span>g[m<span class="pl-k">++</span>],y<span class="pl-k">=</span>v[<span class="pl-c1">2</span><span class="pl-k">*</span>t],t<span class="pl-k">=</span>v[<span class="pl-c1">2</span><span class="pl-k">*</span>t<span class="pl-k">+</span><span class="pl-c1">1</span>];<span class="pl-smi">d</span>.<span class="pl-smi">faceUvs</span>[f][<span class="pl-c1">A</span>]<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.UV</span>(y,t)}<span class="pl-k">if</span>(<span class="pl-c1">B</span>)<span class="pl-k">for</span>(f<span class="pl-k">=</span><span class="pl-c1">0</span>;f<span class="pl-k">&lt;</span>l;f<span class="pl-k">++</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> v<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">uvs</span>[f],<span class="pl-c1">B</span><span class="pl-k">=</span>[],<span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">C</span><span class="pl-k">&lt;</span>z;<span class="pl-c1">C</span><span class="pl-k">++</span>)t<span class="pl-k">=</span>g[m<span class="pl-k">++</span>],y<span class="pl-k">=</span>v[<span class="pl-c1">2</span><span class="pl-k">*</span>t],t<span class="pl-k">=</span>v[<span class="pl-c1">2</span><span class="pl-k">*</span>t<span class="pl-k">+</span><span class="pl-c1">1</span>],<span class="pl-c1">B</span>[<span class="pl-c1">C</span>]<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.UV</span>(y,t);<span class="pl-smi">d</span>.<span class="pl-smi">faceVertexUvs</span>[f][<span class="pl-c1">A</span>]<span class="pl-k">=</span><span class="pl-c1">B</span>}u<span class="pl-k">&amp;&amp;</span>(u<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span>g[m<span class="pl-k">++</span>],t<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,<span class="pl-smi">t</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>n[u<span class="pl-k">++</span>],<span class="pl-smi">t</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>n[u<span class="pl-k">++</span>],<span class="pl-smi">t</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>n[u],<span class="pl-smi">r</span>.<span class="pl-smi">normal</span><span class="pl-k">=</span>t);<span class="pl-k">if</span>(o)<span class="pl-k">for</span>(f<span class="pl-k">=</span><span class="pl-c1">0</span>;f<span class="pl-k">&lt;</span>z;f<span class="pl-k">++</span>)u<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span>g[m<span class="pl-k">++</span>],t<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,<span class="pl-smi">t</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>n[u<span class="pl-k">++</span>],<span class="pl-smi">t</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>n[u<span class="pl-k">++</span>],<span class="pl-smi">t</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>n[u],<span class="pl-smi">r</span>.<span class="pl-smi">vertexNormals</span>.<span class="pl-c1">push</span>(t);s<span class="pl-k">&amp;&amp;</span>(o<span class="pl-k">=</span>g[m<span class="pl-k">++</span>],<span class="pl-smi">r</span>.<span class="pl-c1">color</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(j[o]));<span class="pl-k">if</span>(q)<span class="pl-k">for</span>(f<span class="pl-k">=</span><span class="pl-c1">0</span>;f<span class="pl-k">&lt;</span>z;f<span class="pl-k">++</span>)o<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L187" class="blob-num js-line-number" data-line-number="187"></td>
        <td id="LC187" class="blob-code blob-code-inner js-file-line">g[m<span class="pl-k">++</span>],<span class="pl-smi">r</span>.<span class="pl-smi">vertexColors</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(j[o]));<span class="pl-smi">d</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">push</span>(r)}<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">skinWeights</span>){f<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(g<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">skinWeights</span>.<span class="pl-c1">length</span>;f<span class="pl-k">&lt;</span>g;f<span class="pl-k">+=</span><span class="pl-c1">2</span>)<span class="pl-smi">d</span>.<span class="pl-smi">skinWeights</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector4</span>(<span class="pl-smi">a</span>.<span class="pl-smi">skinWeights</span>[f],<span class="pl-smi">a</span>.<span class="pl-smi">skinWeights</span>[f<span class="pl-k">+</span><span class="pl-c1">1</span>],<span class="pl-c1">0</span>,<span class="pl-c1">0</span>))}<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">skinIndices</span>){f<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(g<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">skinIndices</span>.<span class="pl-c1">length</span>;f<span class="pl-k">&lt;</span>g;f<span class="pl-k">+=</span><span class="pl-c1">2</span>)n<span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-smi">d</span>.<span class="pl-smi">skinIndices</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector4</span>(<span class="pl-smi">a</span>.<span class="pl-smi">skinIndices</span>[f],<span class="pl-smi">a</span>.<span class="pl-smi">skinIndices</span>[f<span class="pl-k">+</span><span class="pl-c1">1</span>],n,<span class="pl-c1">0</span>))}<span class="pl-smi">d</span>.<span class="pl-smi">bones</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">bones</span>;<span class="pl-smi">d</span>.<span class="pl-smi">animation</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">animation</span>;<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">morphTargets</span>){f<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(g<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">morphTargets</span>.<span class="pl-c1">length</span>;f<span class="pl-k">&lt;</span>g;f<span class="pl-k">++</span>){<span class="pl-smi">d</span>.<span class="pl-smi">morphTargets</span>[f]<span class="pl-k">=</span>{};<span class="pl-smi">d</span>.<span class="pl-smi">morphTargets</span>[f].<span class="pl-c1">name</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">morphTargets</span>[f].<span class="pl-c1">name</span>;</td>
      </tr>
      <tr>
        <td id="L188" class="blob-num js-line-number" data-line-number="188"></td>
        <td id="LC188" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">d</span>.<span class="pl-smi">morphTargets</span>[f].<span class="pl-smi">vertices</span><span class="pl-k">=</span>[];n<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">morphTargets</span>[f].<span class="pl-smi">vertices</span>;j<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">morphTargets</span>[f].<span class="pl-smi">vertices</span>;t<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(l<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-c1">length</span>;t<span class="pl-k">&lt;</span>l;t<span class="pl-k">+=</span><span class="pl-c1">3</span>)q<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,<span class="pl-smi">q</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>j[t]<span class="pl-k">*</span>e,<span class="pl-smi">q</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>j[t<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">*</span>e,<span class="pl-smi">q</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>j[t<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">*</span>e,<span class="pl-smi">n</span>.<span class="pl-c1">push</span>(q)}}<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">morphColors</span>){f<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(g<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">morphColors</span>.<span class="pl-c1">length</span>;f<span class="pl-k">&lt;</span>g;f<span class="pl-k">++</span>){<span class="pl-smi">d</span>.<span class="pl-smi">morphColors</span>[f]<span class="pl-k">=</span>{};<span class="pl-smi">d</span>.<span class="pl-smi">morphColors</span>[f].<span class="pl-c1">name</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">morphColors</span>[f].<span class="pl-c1">name</span>;<span class="pl-smi">d</span>.<span class="pl-smi">morphColors</span>[f].<span class="pl-smi">colors</span><span class="pl-k">=</span>[];e<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">morphColors</span>[f].<span class="pl-smi">colors</span>;j<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">morphColors</span>[f].<span class="pl-smi">colors</span>;n<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(l<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-c1">length</span>;n<span class="pl-k">&lt;</span>l;n<span class="pl-k">+=</span><span class="pl-c1">3</span>)m<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">16755200</span>),<span class="pl-smi">m</span>.<span class="pl-en">setRGB</span>(j[n],j[n<span class="pl-k">+</span><span class="pl-c1">1</span>],j[n<span class="pl-k">+</span><span class="pl-c1">2</span>]),<span class="pl-smi">e</span>.<span class="pl-c1">push</span>(m)}}<span class="pl-smi">d</span>.<span class="pl-en">computeCentroids</span>();</td>
      </tr>
      <tr>
        <td id="L189" class="blob-num js-line-number" data-line-number="189"></td>
        <td id="LC189" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">d</span>.<span class="pl-en">computeFaceNormals</span>();<span class="pl-k">return</span> d}};<span class="pl-c1">THREE</span>.<span class="pl-en">SceneLoader</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-en">onLoadStart</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">this</span>.<span class="pl-en">onLoadProgress</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">this</span>.<span class="pl-en">onLoadComplete</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">this</span>.<span class="pl-en">callbackSync</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">this</span>.<span class="pl-en">callbackProgress</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">this</span>.<span class="pl-smi">geometryHandlerMap</span><span class="pl-k">=</span>{};<span class="pl-c1">this</span>.<span class="pl-en">addGeometryHandler</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>ascii<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">JSONLoader</span>);<span class="pl-c1">this</span>.<span class="pl-en">addGeometryHandler</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>binary<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">BinaryLoader</span>)};<span class="pl-c1">THREE</span>.<span class="pl-smi">SceneLoader</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">SceneLoader</span>;</td>
      </tr>
      <tr>
        <td id="L190" class="blob-num js-line-number" data-line-number="190"></td>
        <td id="LC190" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">SceneLoader</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">load</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>,d<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">XMLHttpRequest</span>;<span class="pl-smi">d</span>.<span class="pl-en">onreadystatechange</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">if</span>(<span class="pl-c1">4</span><span class="pl-k">===</span><span class="pl-smi">d</span>.<span class="pl-c1">readyState</span>)<span class="pl-k">if</span>(<span class="pl-c1">200</span><span class="pl-k">===</span><span class="pl-smi">d</span>.<span class="pl-c1">status</span><span class="pl-k">||</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">d</span>.<span class="pl-c1">status</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">JSON</span>.<span class="pl-c1">parse</span>(<span class="pl-smi">d</span>.<span class="pl-c1">responseText</span>);<span class="pl-smi">c</span>.<span class="pl-c1">parse</span>(e,b,a)}<span class="pl-k">else</span> <span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.SceneLoader: Couldn&#39;t load [<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>] [<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-smi">d</span>.<span class="pl-c1">status</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>]<span class="pl-pds">&quot;</span></span>)};<span class="pl-smi">d</span>.<span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>GET<span class="pl-pds">&quot;</span></span>,a,<span class="pl-k">!</span><span class="pl-c1">0</span>);<span class="pl-smi">d</span>.<span class="pl-c1">send</span>(<span class="pl-c1">null</span>)};<span class="pl-c1">THREE</span>.<span class="pl-smi">SceneLoader</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">addGeometryHandler</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-smi">geometryHandlerMap</span>[a]<span class="pl-k">=</span>{loaderClass<span class="pl-k">:</span>b}};</td>
      </tr>
      <tr>
        <td id="L191" class="blob-num js-line-number" data-line-number="191"></td>
        <td id="LC191" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">SceneLoader</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">parse</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">function</span> <span class="pl-en">d</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span><span class="pl-s"><span class="pl-pds">&quot;</span>relativeToHTML<span class="pl-pds">&quot;</span></span><span class="pl-k">==</span>b<span class="pl-k">?</span>a<span class="pl-k">:</span>j<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>/<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a}function e(a,b){for(var c in b)if(void 0===I.objects[c]){var d=b[c],f=null;if(void 0!==d.geometry){if(y=I.geometries[d.geometry])f=!1,C=I.materials[d.materials[0]],(f=C instanceof THREE.ShaderMaterial)&amp;&amp;y.computeTangents(),B=d.position,u=d.rotation,s=d.quaternion,z=d.scale,r=d.matrix,s=0,0===d.materials.length&amp;&amp;(C=new THREE.MeshFaceMaterial),1&lt;d.materials.length&amp;&amp;(C=new THREE.MeshFaceMaterial),d.morph?</td>
      </tr>
      <tr>
        <td id="L192" class="blob-num js-line-number" data-line-number="192"></td>
        <td id="LC192" class="blob-code blob-code-inner js-file-line">(f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.MorphAnimMesh</span>(y,<span class="pl-c1">C</span>),<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">d</span>.<span class="pl-smi">duration</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">f</span>.<span class="pl-smi">duration</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">duration</span>),<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">d</span>.<span class="pl-smi">time</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">f</span>.<span class="pl-smi">time</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">time</span>),<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">d</span>.<span class="pl-smi">mirroredLoop</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">f</span>.<span class="pl-smi">mirroredLoop</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">mirroredLoop</span>),<span class="pl-c1">C</span>.<span class="pl-smi">morphNormals</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">y</span>.<span class="pl-en">computeMorphNormals</span>())<span class="pl-k">:</span>f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Mesh</span>(y,<span class="pl-c1">C</span>),<span class="pl-smi">f</span>.<span class="pl-c1">name</span><span class="pl-k">=</span>c,r<span class="pl-k">?</span>(<span class="pl-smi">f</span>.<span class="pl-smi">matrixAutoUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-smi">f</span>.<span class="pl-smi">matrix</span>.<span class="pl-c1">set</span>(r[<span class="pl-c1">0</span>],r[<span class="pl-c1">1</span>],r[<span class="pl-c1">2</span>],r[<span class="pl-c1">3</span>],r[<span class="pl-c1">4</span>],r[<span class="pl-c1">5</span>],r[<span class="pl-c1">6</span>],r[<span class="pl-c1">7</span>],r[<span class="pl-c1">8</span>],r[<span class="pl-c1">9</span>],r[<span class="pl-c1">10</span>],r[<span class="pl-c1">11</span>],r[<span class="pl-c1">12</span>],r[<span class="pl-c1">13</span>],r[<span class="pl-c1">14</span>],r[<span class="pl-c1">15</span>]))<span class="pl-k">:</span>(<span class="pl-smi">f</span>.<span class="pl-smi">position</span>.<span class="pl-c1">set</span>(<span class="pl-c1">B</span>[<span class="pl-c1">0</span>],<span class="pl-c1">B</span>[<span class="pl-c1">1</span>],<span class="pl-c1">B</span>[<span class="pl-c1">2</span>]),s<span class="pl-k">?</span>(<span class="pl-smi">f</span>.<span class="pl-smi">quaternion</span>.<span class="pl-c1">set</span>(s[<span class="pl-c1">0</span>],s[<span class="pl-c1">1</span>],s[<span class="pl-c1">2</span>],s[<span class="pl-c1">3</span>]),<span class="pl-smi">f</span>.<span class="pl-smi">useQuaternion</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>)<span class="pl-k">:</span><span class="pl-smi">f</span>.<span class="pl-smi">rotation</span>.<span class="pl-c1">set</span>(u[<span class="pl-c1">0</span>],u[<span class="pl-c1">1</span>],u[<span class="pl-c1">2</span>]),<span class="pl-smi">f</span>.<span class="pl-smi">scale</span>.<span class="pl-c1">set</span>(z[<span class="pl-c1">0</span>],</td>
      </tr>
      <tr>
        <td id="L193" class="blob-num js-line-number" data-line-number="193"></td>
        <td id="LC193" class="blob-code blob-code-inner js-file-line">z[<span class="pl-c1">1</span>],z[<span class="pl-c1">2</span>])),<span class="pl-smi">f</span>.<span class="pl-smi">visible</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">visible</span>,<span class="pl-smi">f</span>.<span class="pl-smi">castShadow</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">castShadow</span>,<span class="pl-smi">f</span>.<span class="pl-smi">receiveShadow</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">receiveShadow</span>,<span class="pl-smi">a</span>.<span class="pl-c1">add</span>(f),<span class="pl-c1">I</span>.<span class="pl-smi">objects</span>[c]<span class="pl-k">=</span>f}<span class="pl-k">else</span> <span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">position</span>,u<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">rotation</span>,s<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">quaternion</span>,z<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">scale</span>,s<span class="pl-k">=</span><span class="pl-c1">0</span>,f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Object3D</span>,<span class="pl-smi">f</span>.<span class="pl-c1">name</span><span class="pl-k">=</span>c,<span class="pl-smi">f</span>.<span class="pl-smi">position</span>.<span class="pl-c1">set</span>(<span class="pl-c1">B</span>[<span class="pl-c1">0</span>],<span class="pl-c1">B</span>[<span class="pl-c1">1</span>],<span class="pl-c1">B</span>[<span class="pl-c1">2</span>]),s<span class="pl-k">?</span>(<span class="pl-smi">f</span>.<span class="pl-smi">quaternion</span>.<span class="pl-c1">set</span>(s[<span class="pl-c1">0</span>],s[<span class="pl-c1">1</span>],s[<span class="pl-c1">2</span>],s[<span class="pl-c1">3</span>]),<span class="pl-smi">f</span>.<span class="pl-smi">useQuaternion</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>)<span class="pl-k">:</span><span class="pl-smi">f</span>.<span class="pl-smi">rotation</span>.<span class="pl-c1">set</span>(u[<span class="pl-c1">0</span>],u[<span class="pl-c1">1</span>],u[<span class="pl-c1">2</span>]),<span class="pl-smi">f</span>.<span class="pl-smi">scale</span>.<span class="pl-c1">set</span>(z[<span class="pl-c1">0</span>],z[<span class="pl-c1">1</span>],z[<span class="pl-c1">2</span>]),<span class="pl-smi">f</span>.<span class="pl-smi">visible</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">d</span>.<span class="pl-smi">visible</span><span class="pl-k">?</span><span class="pl-smi">d</span>.<span class="pl-smi">visible</span><span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-smi">a</span>.<span class="pl-c1">add</span>(f),<span class="pl-c1">I</span>.<span class="pl-smi">objects</span>[c]<span class="pl-k">=</span>f,<span class="pl-c1">I</span>.<span class="pl-smi">empties</span>[c]<span class="pl-k">=</span>f;<span class="pl-k">if</span>(f){<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">d</span>.<span class="pl-smi">properties</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> g <span class="pl-k">in</span> <span class="pl-smi">d</span>.<span class="pl-smi">properties</span>)<span class="pl-smi">f</span>.<span class="pl-smi">properties</span>[g]<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L194" class="blob-num js-line-number" data-line-number="194"></td>
        <td id="LC194" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">d</span>.<span class="pl-smi">properties</span>[g];<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">d</span>.<span class="pl-smi">children</span><span class="pl-k">&amp;&amp;</span><span class="pl-en">e</span>(f,<span class="pl-smi">d</span>.<span class="pl-smi">children</span>)}}}function f(a){return function(b){I.geometries[a]=b;e(I.scene,L.objects);E-=1;i.onLoadComplete();h()}}function g(a){return function(b){I.geometries[a]=b}}function h(){i.callbackProgress({totalModels:K,totalTextures:F,loadedModels:K-E,loadedTextures:F-M},I);i.onLoadProgress();0===E&amp;&amp;0===M&amp;&amp;b(I)}var i=this,j=THREE.Loader.prototype.extractUrlBase(c),l,m,n,p,o,q,r,t,B,u,s,z,A,v,y,C,G,H,J,E,M,K,F,I,L=a;for(A in this.geometryHandlerMap)this.geometryHandlerMap[A].loaderObject=</td>
      </tr>
      <tr>
        <td id="L195" class="blob-num js-line-number" data-line-number="195"></td>
        <td id="LC195" class="blob-code blob-code-inner js-file-line"><span class="pl-k">new</span> <span class="pl-en">this.geometryHandlerMap</span>[<span class="pl-c1">A</span>].<span class="pl-smi">loaderClass</span>;<span class="pl-c1">M</span><span class="pl-k">=</span><span class="pl-c1">E</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">I</span><span class="pl-k">=</span>{scene<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Scene</span>,geometries<span class="pl-k">:</span>{},materials<span class="pl-k">:</span>{},textures<span class="pl-k">:</span>{},objects<span class="pl-k">:</span>{},cameras<span class="pl-k">:</span>{},lights<span class="pl-k">:</span>{},fogs<span class="pl-k">:</span>{},empties<span class="pl-k">:</span>{}};<span class="pl-k">if</span>(<span class="pl-c1">L</span>.<span class="pl-smi">transform</span><span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-c1">L</span>.<span class="pl-smi">transform</span>.<span class="pl-smi">position</span>,c<span class="pl-k">=</span><span class="pl-c1">L</span>.<span class="pl-smi">transform</span>.<span class="pl-smi">rotation</span>,<span class="pl-c1">A</span><span class="pl-k">=</span><span class="pl-c1">L</span>.<span class="pl-smi">transform</span>.<span class="pl-smi">scale</span>,a<span class="pl-k">&amp;&amp;</span><span class="pl-c1">I</span>.<span class="pl-smi">scene</span>.<span class="pl-smi">position</span>.<span class="pl-c1">set</span>(a[<span class="pl-c1">0</span>],a[<span class="pl-c1">1</span>],a[<span class="pl-c1">2</span>]),c<span class="pl-k">&amp;&amp;</span><span class="pl-c1">I</span>.<span class="pl-smi">scene</span>.<span class="pl-smi">rotation</span>.<span class="pl-c1">set</span>(c[<span class="pl-c1">0</span>],c[<span class="pl-c1">1</span>],c[<span class="pl-c1">2</span>]),<span class="pl-c1">A</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">I</span>.<span class="pl-smi">scene</span>.<span class="pl-smi">scale</span>.<span class="pl-c1">set</span>(<span class="pl-c1">A</span>[<span class="pl-c1">0</span>],<span class="pl-c1">A</span>[<span class="pl-c1">1</span>],<span class="pl-c1">A</span>[<span class="pl-c1">2</span>]),a<span class="pl-k">||</span>c<span class="pl-k">||</span><span class="pl-c1">A</span>))<span class="pl-c1">I</span>.<span class="pl-smi">scene</span>.<span class="pl-en">updateMatrix</span>(),<span class="pl-c1">I</span>.<span class="pl-smi">scene</span>.<span class="pl-en">updateMatrixWorld</span>();<span class="pl-en">a</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-k">function</span>(){<span class="pl-c1">M</span><span class="pl-k">-=</span>a;<span class="pl-en">h</span>();<span class="pl-smi">i</span>.<span class="pl-en">onLoadComplete</span>()}};<span class="pl-k">for</span>(p <span class="pl-k">in</span> <span class="pl-c1">L</span>.<span class="pl-smi">cameras</span>)<span class="pl-c1">A</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L196" class="blob-num js-line-number" data-line-number="196"></td>
        <td id="LC196" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">L</span>.<span class="pl-smi">cameras</span>[p],<span class="pl-s"><span class="pl-pds">&quot;</span>perspective<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-c1">A</span>.<span class="pl-c1">type</span><span class="pl-k">?</span><span class="pl-c1">G</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.PerspectiveCamera</span>(<span class="pl-c1">A</span>.<span class="pl-smi">fov</span>,<span class="pl-c1">A</span>.<span class="pl-smi">aspect</span>,<span class="pl-c1">A</span>.<span class="pl-smi">near</span>,<span class="pl-c1">A</span>.<span class="pl-smi">far</span>)<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>ortho<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-c1">A</span>.<span class="pl-c1">type</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">G</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.OrthographicCamera</span>(<span class="pl-c1">A</span>.<span class="pl-c1">left</span>,<span class="pl-c1">A</span>.<span class="pl-c1">right</span>,<span class="pl-c1">A</span>.<span class="pl-c1">top</span>,<span class="pl-c1">A</span>.<span class="pl-c1">bottom</span>,<span class="pl-c1">A</span>.<span class="pl-smi">near</span>,<span class="pl-c1">A</span>.<span class="pl-smi">far</span>)),<span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-c1">A</span>.<span class="pl-smi">position</span>,c<span class="pl-k">=</span><span class="pl-c1">A</span>.<span class="pl-c1">target</span>,<span class="pl-c1">A</span><span class="pl-k">=</span><span class="pl-c1">A</span>.<span class="pl-smi">up</span>,<span class="pl-c1">G</span>.<span class="pl-smi">position</span>.<span class="pl-c1">set</span>(<span class="pl-c1">B</span>[<span class="pl-c1">0</span>],<span class="pl-c1">B</span>[<span class="pl-c1">1</span>],<span class="pl-c1">B</span>[<span class="pl-c1">2</span>]),<span class="pl-c1">G</span>.<span class="pl-c1">target</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(c[<span class="pl-c1">0</span>],c[<span class="pl-c1">1</span>],c[<span class="pl-c1">2</span>]),<span class="pl-c1">A</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">G</span>.<span class="pl-smi">up</span>.<span class="pl-c1">set</span>(<span class="pl-c1">A</span>[<span class="pl-c1">0</span>],<span class="pl-c1">A</span>[<span class="pl-c1">1</span>],<span class="pl-c1">A</span>[<span class="pl-c1">2</span>]),<span class="pl-c1">I</span>.<span class="pl-smi">cameras</span>[p]<span class="pl-k">=</span><span class="pl-c1">G</span>;<span class="pl-k">for</span>(n <span class="pl-k">in</span> <span class="pl-c1">L</span>.<span class="pl-smi">lights</span>)c<span class="pl-k">=</span><span class="pl-c1">L</span>.<span class="pl-smi">lights</span>[n],p<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">c</span>.<span class="pl-c1">color</span><span class="pl-k">?</span><span class="pl-smi">c</span>.<span class="pl-c1">color</span><span class="pl-k">:</span><span class="pl-c1">16777215</span>,<span class="pl-c1">G</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">c</span>.<span class="pl-smi">intensity</span><span class="pl-k">?</span><span class="pl-smi">c</span>.<span class="pl-smi">intensity</span><span class="pl-k">:</span><span class="pl-c1">1</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>directional<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-smi">c</span>.<span class="pl-c1">type</span><span class="pl-k">?</span>(<span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">direction</span>,t<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.DirectionalLight</span>(p,</td>
      </tr>
      <tr>
        <td id="L197" class="blob-num js-line-number" data-line-number="197"></td>
        <td id="LC197" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">G</span>),<span class="pl-smi">t</span>.<span class="pl-smi">position</span>.<span class="pl-c1">set</span>(<span class="pl-c1">B</span>[<span class="pl-c1">0</span>],<span class="pl-c1">B</span>[<span class="pl-c1">1</span>],<span class="pl-c1">B</span>[<span class="pl-c1">2</span>]),<span class="pl-smi">t</span>.<span class="pl-smi">position</span>.<span class="pl-c1">normalize</span>())<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>point<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-smi">c</span>.<span class="pl-c1">type</span><span class="pl-k">?</span>(<span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">position</span>,t<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">distance</span>,t<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.PointLight</span>(p,<span class="pl-c1">G</span>,t),<span class="pl-smi">t</span>.<span class="pl-smi">position</span>.<span class="pl-c1">set</span>(<span class="pl-c1">B</span>[<span class="pl-c1">0</span>],<span class="pl-c1">B</span>[<span class="pl-c1">1</span>],<span class="pl-c1">B</span>[<span class="pl-c1">2</span>]))<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>ambient<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-smi">c</span>.<span class="pl-c1">type</span><span class="pl-k">&amp;&amp;</span>(t<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.AmbientLight</span>(p)),<span class="pl-c1">I</span>.<span class="pl-smi">scene</span>.<span class="pl-c1">add</span>(t),<span class="pl-c1">I</span>.<span class="pl-smi">lights</span>[n]<span class="pl-k">=</span>t;<span class="pl-k">for</span>(o <span class="pl-k">in</span> <span class="pl-c1">L</span>.<span class="pl-smi">fogs</span>)n<span class="pl-k">=</span><span class="pl-c1">L</span>.<span class="pl-smi">fogs</span>[o],<span class="pl-s"><span class="pl-pds">&quot;</span>linear<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-smi">n</span>.<span class="pl-c1">type</span><span class="pl-k">?</span><span class="pl-c1">H</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Fog</span>(<span class="pl-c1">0</span>,<span class="pl-smi">n</span>.<span class="pl-smi">near</span>,<span class="pl-smi">n</span>.<span class="pl-smi">far</span>)<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>exp2<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-smi">n</span>.<span class="pl-c1">type</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">H</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.FogExp2</span>(<span class="pl-c1">0</span>,<span class="pl-smi">n</span>.<span class="pl-smi">density</span>)),<span class="pl-c1">A</span><span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-c1">color</span>,<span class="pl-c1">H</span>.<span class="pl-c1">color</span>.<span class="pl-en">setRGB</span>(<span class="pl-c1">A</span>[<span class="pl-c1">0</span>],<span class="pl-c1">A</span>[<span class="pl-c1">1</span>],<span class="pl-c1">A</span>[<span class="pl-c1">2</span>]),<span class="pl-c1">I</span>.<span class="pl-smi">fogs</span>[o]<span class="pl-k">=</span><span class="pl-c1">H</span>;<span class="pl-c1">I</span>.<span class="pl-smi">cameras</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">L</span>.<span class="pl-smi">defaults</span>.<span class="pl-smi">camera</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">I</span>.<span class="pl-smi">currentCamera</span><span class="pl-k">=</span><span class="pl-c1">I</span>.<span class="pl-smi">cameras</span>[<span class="pl-c1">L</span>.<span class="pl-smi">defaults</span>.<span class="pl-smi">camera</span>]);</td>
      </tr>
      <tr>
        <td id="L198" class="blob-num js-line-number" data-line-number="198"></td>
        <td id="LC198" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">I</span>.<span class="pl-smi">fogs</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">L</span>.<span class="pl-smi">defaults</span>.<span class="pl-smi">fog</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">I</span>.<span class="pl-smi">scene</span>.<span class="pl-smi">fog</span><span class="pl-k">=</span><span class="pl-c1">I</span>.<span class="pl-smi">fogs</span>[<span class="pl-c1">L</span>.<span class="pl-smi">defaults</span>.<span class="pl-smi">fog</span>]);<span class="pl-c1">A</span><span class="pl-k">=</span><span class="pl-c1">L</span>.<span class="pl-smi">defaults</span>.<span class="pl-smi">bgcolor</span>;<span class="pl-c1">I</span>.<span class="pl-c1">bgColor</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>;<span class="pl-c1">I</span>.<span class="pl-c1">bgColor</span>.<span class="pl-en">setRGB</span>(<span class="pl-c1">A</span>[<span class="pl-c1">0</span>],<span class="pl-c1">A</span>[<span class="pl-c1">1</span>],<span class="pl-c1">A</span>[<span class="pl-c1">2</span>]);<span class="pl-c1">I</span>.<span class="pl-smi">bgColorAlpha</span><span class="pl-k">=</span><span class="pl-c1">L</span>.<span class="pl-smi">defaults</span>.<span class="pl-smi">bgalpha</span>;<span class="pl-k">for</span>(l <span class="pl-k">in</span> <span class="pl-c1">L</span>.<span class="pl-smi">geometries</span>)o<span class="pl-k">=</span><span class="pl-c1">L</span>.<span class="pl-smi">geometries</span>[l],<span class="pl-smi">o</span>.<span class="pl-c1">type</span> <span class="pl-k">in</span> <span class="pl-c1">this</span>.<span class="pl-smi">geometryHandlerMap</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">E</span><span class="pl-k">+=</span><span class="pl-c1">1</span>,<span class="pl-smi">i</span>.<span class="pl-en">onLoadStart</span>());<span class="pl-c1">K</span><span class="pl-k">=</span><span class="pl-c1">E</span>;<span class="pl-k">for</span>(l <span class="pl-k">in</span> <span class="pl-c1">L</span>.<span class="pl-smi">geometries</span>)<span class="pl-k">if</span>(o<span class="pl-k">=</span><span class="pl-c1">L</span>.<span class="pl-smi">geometries</span>[l],<span class="pl-s"><span class="pl-pds">&quot;</span>cube<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-smi">o</span>.<span class="pl-c1">type</span>)y<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.CubeGeometry</span>(<span class="pl-smi">o</span>.<span class="pl-c1">width</span>,<span class="pl-smi">o</span>.<span class="pl-c1">height</span>,<span class="pl-smi">o</span>.<span class="pl-smi">depth</span>,<span class="pl-smi">o</span>.<span class="pl-smi">segmentsWidth</span>,<span class="pl-smi">o</span>.<span class="pl-smi">segmentsHeight</span>,<span class="pl-smi">o</span>.<span class="pl-smi">segmentsDepth</span>,<span class="pl-c1">null</span>,<span class="pl-smi">o</span>.<span class="pl-smi">flipped</span>,<span class="pl-smi">o</span>.<span class="pl-smi">sides</span>),<span class="pl-c1">I</span>.<span class="pl-smi">geometries</span>[l]<span class="pl-k">=</span>y;<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>plane<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-smi">o</span>.<span class="pl-c1">type</span>)y<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L199" class="blob-num js-line-number" data-line-number="199"></td>
        <td id="LC199" class="blob-code blob-code-inner js-file-line"><span class="pl-k">new</span> <span class="pl-en">THREE.PlaneGeometry</span>(<span class="pl-smi">o</span>.<span class="pl-c1">width</span>,<span class="pl-smi">o</span>.<span class="pl-c1">height</span>,<span class="pl-smi">o</span>.<span class="pl-smi">segmentsWidth</span>,<span class="pl-smi">o</span>.<span class="pl-smi">segmentsHeight</span>),<span class="pl-c1">I</span>.<span class="pl-smi">geometries</span>[l]<span class="pl-k">=</span>y;<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>sphere<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-smi">o</span>.<span class="pl-c1">type</span>)y<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.SphereGeometry</span>(<span class="pl-smi">o</span>.<span class="pl-smi">radius</span>,<span class="pl-smi">o</span>.<span class="pl-smi">segmentsWidth</span>,<span class="pl-smi">o</span>.<span class="pl-smi">segmentsHeight</span>),<span class="pl-c1">I</span>.<span class="pl-smi">geometries</span>[l]<span class="pl-k">=</span>y;<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>cylinder<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-smi">o</span>.<span class="pl-c1">type</span>)y<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.CylinderGeometry</span>(<span class="pl-smi">o</span>.<span class="pl-smi">topRad</span>,<span class="pl-smi">o</span>.<span class="pl-smi">botRad</span>,<span class="pl-smi">o</span>.<span class="pl-c1">height</span>,<span class="pl-smi">o</span>.<span class="pl-smi">radSegs</span>,<span class="pl-smi">o</span>.<span class="pl-smi">heightSegs</span>),<span class="pl-c1">I</span>.<span class="pl-smi">geometries</span>[l]<span class="pl-k">=</span>y;<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>torus<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-smi">o</span>.<span class="pl-c1">type</span>)y<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.TorusGeometry</span>(<span class="pl-smi">o</span>.<span class="pl-smi">radius</span>,<span class="pl-smi">o</span>.<span class="pl-smi">tube</span>,<span class="pl-smi">o</span>.<span class="pl-smi">segmentsR</span>,<span class="pl-smi">o</span>.<span class="pl-smi">segmentsT</span>),<span class="pl-c1">I</span>.<span class="pl-smi">geometries</span>[l]<span class="pl-k">=</span>y;<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>icosahedron<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-smi">o</span>.<span class="pl-c1">type</span>)y<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.IcosahedronGeometry</span>(<span class="pl-smi">o</span>.<span class="pl-smi">radius</span>,</td>
      </tr>
      <tr>
        <td id="L200" class="blob-num js-line-number" data-line-number="200"></td>
        <td id="LC200" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">o</span>.<span class="pl-smi">subdivisions</span>),<span class="pl-c1">I</span>.<span class="pl-smi">geometries</span>[l]<span class="pl-k">=</span>y;<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-smi">o</span>.<span class="pl-c1">type</span> <span class="pl-k">in</span> <span class="pl-c1">this</span>.<span class="pl-smi">geometryHandlerMap</span>){<span class="pl-c1">H</span><span class="pl-k">=</span>{};<span class="pl-k">for</span>(<span class="pl-c1">J</span> <span class="pl-k">in</span> o)<span class="pl-s"><span class="pl-pds">&quot;</span>type<span class="pl-pds">&quot;</span></span><span class="pl-k">!==</span><span class="pl-c1">J</span><span class="pl-k">&amp;&amp;</span><span class="pl-s"><span class="pl-pds">&quot;</span>url<span class="pl-pds">&quot;</span></span><span class="pl-k">!==</span><span class="pl-c1">J</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">H</span>[<span class="pl-c1">J</span>]<span class="pl-k">=</span>o[<span class="pl-c1">J</span>]);<span class="pl-c1">this</span>.<span class="pl-smi">geometryHandlerMap</span>[<span class="pl-smi">o</span>.<span class="pl-c1">type</span>].<span class="pl-smi">loaderObject</span>.<span class="pl-c1">load</span>(<span class="pl-en">d</span>(<span class="pl-smi">o</span>.<span class="pl-smi">url</span>,<span class="pl-c1">L</span>.<span class="pl-smi">urlBaseType</span>),<span class="pl-en">f</span>(l),<span class="pl-c1">H</span>)}<span class="pl-k">else</span><span class="pl-s"><span class="pl-pds">&quot;</span>embedded<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-smi">o</span>.<span class="pl-c1">type</span><span class="pl-k">&amp;&amp;</span>(o<span class="pl-k">=</span><span class="pl-c1">L</span>.<span class="pl-c1">embeds</span>[<span class="pl-smi">o</span>.<span class="pl-c1">id</span>],<span class="pl-smi">o</span>.<span class="pl-smi">metadata</span><span class="pl-k">=</span><span class="pl-c1">L</span>.<span class="pl-smi">metadata</span>,o<span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">geometryHandlerMap</span>.<span class="pl-smi">ascii</span>.<span class="pl-smi">loaderObject</span>.<span class="pl-en">createModel</span>(o,<span class="pl-en">g</span>(l),<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>));<span class="pl-k">for</span>(q <span class="pl-k">in</span> <span class="pl-c1">L</span>.<span class="pl-smi">textures</span>)<span class="pl-k">if</span>(l<span class="pl-k">=</span><span class="pl-c1">L</span>.<span class="pl-smi">textures</span>[q],<span class="pl-smi">l</span>.<span class="pl-smi">url</span> <span class="pl-k">instanceof</span> <span class="pl-c1">Array</span>){<span class="pl-c1">M</span><span class="pl-k">+=</span><span class="pl-smi">l</span>.<span class="pl-smi">url</span>.<span class="pl-c1">length</span>;<span class="pl-k">for</span>(<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">J</span><span class="pl-k">&lt;</span><span class="pl-smi">l</span>.<span class="pl-smi">url</span>.<span class="pl-c1">length</span>;<span class="pl-c1">J</span><span class="pl-k">++</span>)<span class="pl-smi">i</span>.<span class="pl-en">onLoadStart</span>()}<span class="pl-k">else</span> <span class="pl-c1">M</span><span class="pl-k">+=</span><span class="pl-c1">1</span>,<span class="pl-smi">i</span>.<span class="pl-en">onLoadStart</span>();<span class="pl-c1">F</span><span class="pl-k">=</span><span class="pl-c1">M</span>;<span class="pl-k">for</span>(q <span class="pl-k">in</span> <span class="pl-c1">L</span>.<span class="pl-smi">textures</span>){l<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L201" class="blob-num js-line-number" data-line-number="201"></td>
        <td id="LC201" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">L</span>.<span class="pl-smi">textures</span>[q];<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">l</span>.<span class="pl-smi">mapping</span><span class="pl-k">&amp;&amp;</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-c1">THREE</span>[<span class="pl-smi">l</span>.<span class="pl-smi">mapping</span>]<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">l</span>.<span class="pl-smi">mapping</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE</span>[<span class="pl-smi">l</span>.<span class="pl-smi">mapping</span>]);<span class="pl-k">if</span>(<span class="pl-smi">l</span>.<span class="pl-smi">url</span> <span class="pl-k">instanceof</span> <span class="pl-c1">Array</span>){o<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">url</span>.<span class="pl-c1">length</span>;<span class="pl-c1">H</span><span class="pl-k">=</span>[];<span class="pl-k">for</span>(<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">J</span><span class="pl-k">&lt;</span>o;<span class="pl-c1">J</span><span class="pl-k">++</span>)<span class="pl-c1">H</span>[<span class="pl-c1">J</span>]<span class="pl-k">=</span><span class="pl-en">d</span>(<span class="pl-smi">l</span>.<span class="pl-smi">url</span>[<span class="pl-c1">J</span>],<span class="pl-c1">L</span>.<span class="pl-smi">urlBaseType</span>);<span class="pl-c1">J</span><span class="pl-k">=</span>(<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-c1">H</span>[<span class="pl-c1">0</span>].<span class="pl-en">endsWith</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>.dds<span class="pl-pds">&quot;</span></span>))<span class="pl-k">?</span><span class="pl-c1">THREE</span>.<span class="pl-smi">ImageUtils</span>.<span class="pl-en">loadCompressedTextureCube</span>(<span class="pl-c1">H</span>,<span class="pl-smi">l</span>.<span class="pl-smi">mapping</span>,<span class="pl-en">a</span>(o))<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">ImageUtils</span>.<span class="pl-en">loadTextureCube</span>(<span class="pl-c1">H</span>,<span class="pl-smi">l</span>.<span class="pl-smi">mapping</span>,<span class="pl-en">a</span>(o))}<span class="pl-k">else</span>{<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">url</span>.<span class="pl-c1">toLowerCase</span>().<span class="pl-en">endsWith</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>.dds<span class="pl-pds">&quot;</span></span>);o<span class="pl-k">=</span><span class="pl-en">d</span>(<span class="pl-smi">l</span>.<span class="pl-smi">url</span>,<span class="pl-c1">L</span>.<span class="pl-smi">urlBaseType</span>);<span class="pl-c1">H</span><span class="pl-k">=</span><span class="pl-en">a</span>(<span class="pl-c1">1</span>);<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-c1">J</span><span class="pl-k">?</span><span class="pl-c1">THREE</span>.<span class="pl-smi">ImageUtils</span>.<span class="pl-en">loadCompressedTexture</span>(o,<span class="pl-smi">l</span>.<span class="pl-smi">mapping</span>,<span class="pl-c1">H</span>)<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">ImageUtils</span>.<span class="pl-en">loadTexture</span>(o,<span class="pl-smi">l</span>.<span class="pl-smi">mapping</span>,</td>
      </tr>
      <tr>
        <td id="L202" class="blob-num js-line-number" data-line-number="202"></td>
        <td id="LC202" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">H</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-c1">THREE</span>[<span class="pl-smi">l</span>.<span class="pl-smi">minFilter</span>]<span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">J</span>.<span class="pl-smi">minFilter</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>[<span class="pl-smi">l</span>.<span class="pl-smi">minFilter</span>]);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-c1">THREE</span>[<span class="pl-smi">l</span>.<span class="pl-smi">magFilter</span>]<span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">J</span>.<span class="pl-smi">magFilter</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>[<span class="pl-smi">l</span>.<span class="pl-smi">magFilter</span>]);<span class="pl-smi">l</span>.<span class="pl-smi">anisotropy</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">J</span>.<span class="pl-smi">anisotropy</span><span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">anisotropy</span>);<span class="pl-k">if</span>(<span class="pl-smi">l</span>.<span class="pl-smi">repeat</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">J</span>.<span class="pl-smi">repeat</span>.<span class="pl-c1">set</span>(<span class="pl-smi">l</span>.<span class="pl-smi">repeat</span>[<span class="pl-c1">0</span>],<span class="pl-smi">l</span>.<span class="pl-smi">repeat</span>[<span class="pl-c1">1</span>]),<span class="pl-c1">1</span><span class="pl-k">!==</span><span class="pl-smi">l</span>.<span class="pl-smi">repeat</span>[<span class="pl-c1">0</span>]<span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">J</span>.<span class="pl-smi">wrapS</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">RepeatWrapping</span>),<span class="pl-c1">1</span><span class="pl-k">!==</span><span class="pl-smi">l</span>.<span class="pl-smi">repeat</span>[<span class="pl-c1">1</span>]))<span class="pl-c1">J</span>.<span class="pl-smi">wrapT</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">RepeatWrapping</span>;<span class="pl-smi">l</span>.<span class="pl-smi">offset</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">J</span>.<span class="pl-smi">offset</span>.<span class="pl-c1">set</span>(<span class="pl-smi">l</span>.<span class="pl-smi">offset</span>[<span class="pl-c1">0</span>],<span class="pl-smi">l</span>.<span class="pl-smi">offset</span>[<span class="pl-c1">1</span>]);<span class="pl-k">if</span>(<span class="pl-smi">l</span>.<span class="pl-smi">wrap</span><span class="pl-k">&amp;&amp;</span>(o<span class="pl-k">=</span>{repeat<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">RepeatWrapping</span>,mirror<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">MirroredRepeatWrapping</span>},<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>o[<span class="pl-smi">l</span>.<span class="pl-smi">wrap</span>[<span class="pl-c1">0</span>]]<span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">J</span>.<span class="pl-smi">wrapS</span><span class="pl-k">=</span>o[<span class="pl-smi">l</span>.<span class="pl-smi">wrap</span>[<span class="pl-c1">0</span>]]),<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>o[<span class="pl-smi">l</span>.<span class="pl-smi">wrap</span>[<span class="pl-c1">1</span>]]))<span class="pl-c1">J</span>.<span class="pl-smi">wrapT</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L203" class="blob-num js-line-number" data-line-number="203"></td>
        <td id="LC203" class="blob-code blob-code-inner js-file-line">o[<span class="pl-smi">l</span>.<span class="pl-smi">wrap</span>[<span class="pl-c1">1</span>]]}<span class="pl-c1">I</span>.<span class="pl-smi">textures</span>[q]<span class="pl-k">=</span><span class="pl-c1">J</span>}<span class="pl-k">for</span>(m <span class="pl-k">in</span> <span class="pl-c1">L</span>.<span class="pl-smi">materials</span>){r<span class="pl-k">=</span><span class="pl-c1">L</span>.<span class="pl-smi">materials</span>[m];<span class="pl-k">for</span>(v <span class="pl-k">in</span> <span class="pl-smi">r</span>.<span class="pl-smi">parameters</span>)<span class="pl-s"><span class="pl-pds">&quot;</span>envMap<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>v<span class="pl-k">||</span><span class="pl-s"><span class="pl-pds">&quot;</span>map<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>v<span class="pl-k">||</span><span class="pl-s"><span class="pl-pds">&quot;</span>lightMap<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>v<span class="pl-k">||</span><span class="pl-s"><span class="pl-pds">&quot;</span>bumpMap<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>v<span class="pl-k">?</span><span class="pl-smi">r</span>.<span class="pl-smi">parameters</span>[v]<span class="pl-k">=</span><span class="pl-c1">I</span>.<span class="pl-smi">textures</span>[<span class="pl-smi">r</span>.<span class="pl-smi">parameters</span>[v]]<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>shading<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>v<span class="pl-k">?</span><span class="pl-smi">r</span>.<span class="pl-smi">parameters</span>[v]<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>flat<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-smi">r</span>.<span class="pl-smi">parameters</span>[v]<span class="pl-k">?</span><span class="pl-c1">THREE</span>.<span class="pl-smi">FlatShading</span><span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">SmoothShading</span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>side<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>v<span class="pl-k">?</span><span class="pl-smi">r</span>.<span class="pl-smi">parameters</span>[v]<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>double<span class="pl-pds">&quot;</span></span><span class="pl-k">==</span><span class="pl-smi">r</span>.<span class="pl-smi">parameters</span>[v]<span class="pl-k">?</span><span class="pl-c1">THREE</span>.<span class="pl-smi">DoubleSide</span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>back<span class="pl-pds">&quot;</span></span><span class="pl-k">==</span><span class="pl-smi">r</span>.<span class="pl-smi">parameters</span>[v]<span class="pl-k">?</span><span class="pl-c1">THREE</span>.<span class="pl-smi">BackSide</span><span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">FrontSide</span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>blending<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>v<span class="pl-k">?</span><span class="pl-smi">r</span>.<span class="pl-smi">parameters</span>[v]<span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-smi">parameters</span>[v]<span class="pl-k">in</span> <span class="pl-c1">THREE</span><span class="pl-k">?</span><span class="pl-c1">THREE</span>[<span class="pl-smi">r</span>.<span class="pl-smi">parameters</span>[v]]<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">NormalBlending</span><span class="pl-k">:</span></td>
      </tr>
      <tr>
        <td id="L204" class="blob-num js-line-number" data-line-number="204"></td>
        <td id="LC204" class="blob-code blob-code-inner js-file-line"><span class="pl-s"><span class="pl-pds">&quot;</span>combine<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>v<span class="pl-k">?</span><span class="pl-smi">r</span>.<span class="pl-smi">parameters</span>[v]<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>MixOperation<span class="pl-pds">&quot;</span></span><span class="pl-k">==</span><span class="pl-smi">r</span>.<span class="pl-smi">parameters</span>[v]<span class="pl-k">?</span><span class="pl-c1">THREE</span>.<span class="pl-smi">MixOperation</span><span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">MultiplyOperation</span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>vertexColors<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>v<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>face<span class="pl-pds">&quot;</span></span><span class="pl-k">==</span><span class="pl-smi">r</span>.<span class="pl-smi">parameters</span>[v]<span class="pl-k">?</span><span class="pl-smi">r</span>.<span class="pl-smi">parameters</span>[v]<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">FaceColors</span><span class="pl-k">:</span><span class="pl-smi">r</span>.<span class="pl-smi">parameters</span>[v]<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">r</span>.<span class="pl-smi">parameters</span>[v]<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">VertexColors</span>)<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>wrapRGB<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>v<span class="pl-k">&amp;&amp;</span>(q<span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-smi">parameters</span>[v],<span class="pl-smi">r</span>.<span class="pl-smi">parameters</span>[v]<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(q[<span class="pl-c1">0</span>],q[<span class="pl-c1">1</span>],q[<span class="pl-c1">2</span>]));<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">r</span>.<span class="pl-smi">parameters</span>.<span class="pl-smi">opacity</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">1</span><span class="pl-k">&gt;</span><span class="pl-smi">r</span>.<span class="pl-smi">parameters</span>.<span class="pl-smi">opacity</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">r</span>.<span class="pl-smi">parameters</span>.<span class="pl-smi">transparent</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>);<span class="pl-smi">r</span>.<span class="pl-smi">parameters</span>.<span class="pl-smi">normalMap</span><span class="pl-k">?</span>(q<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderUtils</span>.<span class="pl-smi">lib</span>.<span class="pl-smi">normal</span>,a<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">UniformsUtils</span>.<span class="pl-en">clone</span>(<span class="pl-smi">q</span>.<span class="pl-smi">uniforms</span>),l<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L205" class="blob-num js-line-number" data-line-number="205"></td>
        <td id="LC205" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">r</span>.<span class="pl-smi">parameters</span>.<span class="pl-c1">color</span>,<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-smi">parameters</span>.<span class="pl-smi">specular</span>,o<span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-smi">parameters</span>.<span class="pl-smi">ambient</span>,<span class="pl-c1">H</span><span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-smi">parameters</span>.<span class="pl-smi">shininess</span>,<span class="pl-smi">a</span>.<span class="pl-smi">tNormal</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-c1">I</span>.<span class="pl-smi">textures</span>[<span class="pl-smi">r</span>.<span class="pl-smi">parameters</span>.<span class="pl-smi">normalMap</span>],<span class="pl-smi">r</span>.<span class="pl-smi">parameters</span>.<span class="pl-smi">normalScale</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">a</span>.<span class="pl-smi">uNormalScale</span>.<span class="pl-c1">value</span>.<span class="pl-c1">set</span>(<span class="pl-smi">r</span>.<span class="pl-smi">parameters</span>.<span class="pl-smi">normalScale</span>[<span class="pl-c1">0</span>],<span class="pl-smi">r</span>.<span class="pl-smi">parameters</span>.<span class="pl-smi">normalScale</span>[<span class="pl-c1">1</span>]),<span class="pl-smi">r</span>.<span class="pl-smi">parameters</span>.<span class="pl-smi">map</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">a</span>.<span class="pl-smi">tDiffuse</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-smi">parameters</span>.<span class="pl-smi">map</span>,<span class="pl-smi">a</span>.<span class="pl-smi">enableDiffuse</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>),<span class="pl-smi">r</span>.<span class="pl-smi">parameters</span>.<span class="pl-smi">envMap</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">a</span>.<span class="pl-smi">tCube</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-smi">parameters</span>.<span class="pl-smi">envMap</span>,<span class="pl-smi">a</span>.<span class="pl-smi">enableReflection</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>,<span class="pl-smi">a</span>.<span class="pl-smi">uReflectivity</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-smi">parameters</span>.<span class="pl-smi">reflectivity</span>),<span class="pl-smi">r</span>.<span class="pl-smi">parameters</span>.<span class="pl-smi">lightMap</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">a</span>.<span class="pl-smi">tAO</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-smi">parameters</span>.<span class="pl-smi">lightMap</span>,</td>
      </tr>
      <tr>
        <td id="L206" class="blob-num js-line-number" data-line-number="206"></td>
        <td id="LC206" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">a</span>.<span class="pl-smi">enableAO</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>),<span class="pl-smi">r</span>.<span class="pl-smi">parameters</span>.<span class="pl-smi">specularMap</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">a</span>.<span class="pl-smi">tSpecular</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-c1">I</span>.<span class="pl-smi">textures</span>[<span class="pl-smi">r</span>.<span class="pl-smi">parameters</span>.<span class="pl-smi">specularMap</span>],<span class="pl-smi">a</span>.<span class="pl-smi">enableSpecular</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>),<span class="pl-smi">r</span>.<span class="pl-smi">parameters</span>.<span class="pl-smi">displacementMap</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">a</span>.<span class="pl-smi">tDisplacement</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-c1">I</span>.<span class="pl-smi">textures</span>[<span class="pl-smi">r</span>.<span class="pl-smi">parameters</span>.<span class="pl-smi">displacementMap</span>],<span class="pl-smi">a</span>.<span class="pl-smi">enableDisplacement</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>,<span class="pl-smi">a</span>.<span class="pl-smi">uDisplacementBias</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-smi">parameters</span>.<span class="pl-smi">displacementBias</span>,<span class="pl-smi">a</span>.<span class="pl-smi">uDisplacementScale</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-smi">parameters</span>.<span class="pl-smi">displacementScale</span>),<span class="pl-smi">a</span>.<span class="pl-smi">uDiffuseColor</span>.<span class="pl-c1">value</span>.<span class="pl-en">setHex</span>(l),<span class="pl-smi">a</span>.<span class="pl-smi">uSpecularColor</span>.<span class="pl-c1">value</span>.<span class="pl-en">setHex</span>(<span class="pl-c1">J</span>),<span class="pl-smi">a</span>.<span class="pl-smi">uAmbientColor</span>.<span class="pl-c1">value</span>.<span class="pl-en">setHex</span>(o),<span class="pl-smi">a</span>.<span class="pl-smi">uShininess</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-c1">H</span>,<span class="pl-smi">r</span>.<span class="pl-smi">parameters</span>.<span class="pl-smi">opacity</span><span class="pl-k">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L207" class="blob-num js-line-number" data-line-number="207"></td>
        <td id="LC207" class="blob-code blob-code-inner js-file-line">(<span class="pl-smi">a</span>.<span class="pl-smi">uOpacity</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-smi">parameters</span>.<span class="pl-smi">opacity</span>),<span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.ShaderMaterial</span>({fragmentShader<span class="pl-k">:</span><span class="pl-smi">q</span>.<span class="pl-smi">fragmentShader</span>,vertexShader<span class="pl-k">:</span><span class="pl-smi">q</span>.<span class="pl-smi">vertexShader</span>,uniforms<span class="pl-k">:</span>a,lights<span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">0</span>,fog<span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">0</span>}))<span class="pl-k">:</span><span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE</span>[<span class="pl-smi">r</span>.<span class="pl-c1">type</span>](<span class="pl-smi">r</span>.<span class="pl-smi">parameters</span>);<span class="pl-c1">I</span>.<span class="pl-smi">materials</span>[m]<span class="pl-k">=</span><span class="pl-c1">C</span>}<span class="pl-en">e</span>(<span class="pl-c1">I</span>.<span class="pl-smi">scene</span>,<span class="pl-c1">L</span>.<span class="pl-smi">objects</span>);<span class="pl-smi">i</span>.<span class="pl-en">callbackSync</span>(<span class="pl-c1">I</span>);<span class="pl-en">h</span>()};<span class="pl-c1">THREE</span>.<span class="pl-en">TextureLoader</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">THREE</span>.<span class="pl-smi">EventTarget</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-smi">crossOrigin</span><span class="pl-k">=</span><span class="pl-c1">null</span>};</td>
      </tr>
      <tr>
        <td id="L208" class="blob-num js-line-number" data-line-number="208"></td>
        <td id="LC208" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">TextureLoader</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.TextureLoader,load:<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>,c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Image</span>;<span class="pl-smi">c</span>.<span class="pl-c1">addEventListener</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>load<span class="pl-pds">&quot;</span></span>,<span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Texture</span>(c);<span class="pl-smi">a</span>.<span class="pl-smi">needsUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-smi">b</span>.<span class="pl-c1">dispatchEvent</span>({type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>load<span class="pl-pds">&quot;</span></span>,content<span class="pl-k">:</span>a})},<span class="pl-k">!</span><span class="pl-c1">1</span>);<span class="pl-smi">c</span>.<span class="pl-c1">addEventListener</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>error<span class="pl-pds">&quot;</span></span>,<span class="pl-k">function</span>(){<span class="pl-smi">b</span>.<span class="pl-c1">dispatchEvent</span>({type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>error<span class="pl-pds">&quot;</span></span>,message<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>Couldn&#39;t load URL [<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>]<span class="pl-pds">&quot;</span></span>})},<span class="pl-k">!</span><span class="pl-c1">1</span>);<span class="pl-smi">b</span>.<span class="pl-smi">crossOrigin</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">c</span>.<span class="pl-smi">crossOrigin</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">crossOrigin</span>);<span class="pl-smi">c</span>.<span class="pl-smi">src</span><span class="pl-k">=</span>a}};</td>
      </tr>
      <tr>
        <td id="L209" class="blob-num js-line-number" data-line-number="209"></td>
        <td id="LC209" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">Material</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">THREE</span>.<span class="pl-smi">MaterialLibrary</span>.<span class="pl-c1">push</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-c1">id</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">MaterialIdCount</span><span class="pl-k">++</span>;<span class="pl-c1">this</span>.<span class="pl-c1">name</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-smi">side</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">FrontSide</span>;<span class="pl-c1">this</span>.<span class="pl-smi">opacity</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">transparent</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">blending</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">NormalBlending</span>;<span class="pl-c1">this</span>.<span class="pl-smi">blendSrc</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">SrcAlphaFactor</span>;<span class="pl-c1">this</span>.<span class="pl-smi">blendDst</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">OneMinusSrcAlphaFactor</span>;<span class="pl-c1">this</span>.<span class="pl-smi">blendEquation</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">AddEquation</span>;<span class="pl-c1">this</span>.<span class="pl-smi">depthWrite</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">depthTest</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">polygonOffset</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">alphaTest</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">polygonOffsetUnits</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">polygonOffsetFactor</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">overdraw</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">needsUpdate</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">visible</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L210" class="blob-num js-line-number" data-line-number="210"></td>
        <td id="LC210" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Material</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setValues</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a)<span class="pl-k">for</span>(<span class="pl-k">var</span> b <span class="pl-k">in</span> a){<span class="pl-k">var</span> c<span class="pl-k">=</span>a[b];<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>c)<span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Material: &#39;<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>b<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>&#39; parameter is undefined.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">else</span> <span class="pl-k">if</span>(b <span class="pl-k">in</span> <span class="pl-c1">this</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">this</span>[b];d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Color</span><span class="pl-k">&amp;&amp;</span>c <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Color</span><span class="pl-k">?</span><span class="pl-smi">d</span>.<span class="pl-en">copy</span>(c)<span class="pl-k">:</span>d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Color</span><span class="pl-k">&amp;&amp;</span><span class="pl-s"><span class="pl-pds">&quot;</span>number<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-k">typeof</span> c<span class="pl-k">?</span><span class="pl-smi">d</span>.<span class="pl-en">setHex</span>(c)<span class="pl-k">:</span>d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Vector3</span><span class="pl-k">&amp;&amp;</span>c <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Vector3</span><span class="pl-k">?</span><span class="pl-smi">d</span>.<span class="pl-en">copy</span>(c)<span class="pl-k">:</span><span class="pl-c1">this</span>[b]<span class="pl-k">=</span>c}}};</td>
      </tr>
      <tr>
        <td id="L211" class="blob-num js-line-number" data-line-number="211"></td>
        <td id="LC211" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Material</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Material</span>);<span class="pl-smi">a</span>.<span class="pl-c1">name</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">name</span>;<span class="pl-smi">a</span>.<span class="pl-smi">side</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">side</span>;<span class="pl-smi">a</span>.<span class="pl-smi">opacity</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">opacity</span>;<span class="pl-smi">a</span>.<span class="pl-smi">transparent</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">transparent</span>;<span class="pl-smi">a</span>.<span class="pl-smi">blending</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">blending</span>;<span class="pl-smi">a</span>.<span class="pl-smi">blendSrc</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">blendSrc</span>;<span class="pl-smi">a</span>.<span class="pl-smi">blendDst</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">blendDst</span>;<span class="pl-smi">a</span>.<span class="pl-smi">blendEquation</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">blendEquation</span>;<span class="pl-smi">a</span>.<span class="pl-smi">depthTest</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">depthTest</span>;<span class="pl-smi">a</span>.<span class="pl-smi">depthWrite</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">depthWrite</span>;<span class="pl-smi">a</span>.<span class="pl-smi">polygonOffset</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">polygonOffset</span>;<span class="pl-smi">a</span>.<span class="pl-smi">polygonOffsetFactor</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">polygonOffsetFactor</span>;<span class="pl-smi">a</span>.<span class="pl-smi">polygonOffsetUnits</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">polygonOffsetUnits</span>;<span class="pl-smi">a</span>.<span class="pl-smi">alphaTest</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">alphaTest</span>;<span class="pl-smi">a</span>.<span class="pl-smi">overdraw</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">overdraw</span>;</td>
      </tr>
      <tr>
        <td id="L212" class="blob-num js-line-number" data-line-number="212"></td>
        <td id="LC212" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">a</span>.<span class="pl-smi">visible</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">visible</span>;<span class="pl-k">return</span> a};<span class="pl-c1">THREE</span>.<span class="pl-smi">Material</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">deallocate</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">MaterialLibrary</span>.<span class="pl-c1">indexOf</span>(<span class="pl-c1">this</span>);<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">!==</span>a<span class="pl-k">&amp;&amp;</span><span class="pl-c1">THREE</span>.<span class="pl-smi">MaterialLibrary</span>.<span class="pl-c1">splice</span>(a,<span class="pl-c1">1</span>)};<span class="pl-c1">THREE</span>.<span class="pl-smi">MaterialIdCount</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">MaterialLibrary</span><span class="pl-k">=</span>[];<span class="pl-c1">THREE</span>.<span class="pl-en">LineBasicMaterial</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Material</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-c1">color</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">16777215</span>);<span class="pl-c1">this</span>.<span class="pl-smi">linewidth</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">linejoin</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">linecap</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>round<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-smi">vertexColors</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">fog</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-en">setValues</span>(a)};<span class="pl-c1">THREE</span>.<span class="pl-smi">LineBasicMaterial</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Material</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L213" class="blob-num js-line-number" data-line-number="213"></td>
        <td id="LC213" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">LineBasicMaterial</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.LineBasicMaterial</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">Material</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">clone</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a);<span class="pl-smi">a</span>.<span class="pl-c1">color</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-c1">color</span>);<span class="pl-smi">a</span>.<span class="pl-smi">linewidth</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">linewidth</span>;<span class="pl-smi">a</span>.<span class="pl-smi">linecap</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">linecap</span>;<span class="pl-smi">a</span>.<span class="pl-smi">linejoin</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">linejoin</span>;<span class="pl-smi">a</span>.<span class="pl-smi">vertexColors</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertexColors</span>;<span class="pl-smi">a</span>.<span class="pl-smi">fog</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">fog</span>;<span class="pl-k">return</span> a};</td>
      </tr>
      <tr>
        <td id="L214" class="blob-num js-line-number" data-line-number="214"></td>
        <td id="LC214" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">MeshBasicMaterial</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Material</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-c1">color</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">16777215</span>);<span class="pl-c1">this</span>.<span class="pl-smi">envMap</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">specularMap</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">lightMap</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">map</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">combine</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">MultiplyOperation</span>;<span class="pl-c1">this</span>.<span class="pl-smi">reflectivity</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">refractionRatio</span><span class="pl-k">=</span><span class="pl-c1">0.98</span>;<span class="pl-c1">this</span>.<span class="pl-smi">fog</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">shading</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">SmoothShading</span>;<span class="pl-c1">this</span>.<span class="pl-smi">wireframe</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">wireframeLinewidth</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">wireframeLinejoin</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">wireframeLinecap</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>round<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-smi">vertexColors</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">NoColors</span>;<span class="pl-c1">this</span>.<span class="pl-smi">morphTargets</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">skinning</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-en">setValues</span>(a)};</td>
      </tr>
      <tr>
        <td id="L215" class="blob-num js-line-number" data-line-number="215"></td>
        <td id="LC215" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">MeshBasicMaterial</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Material</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L216" class="blob-num js-line-number" data-line-number="216"></td>
        <td id="LC216" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">MeshBasicMaterial</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.MeshBasicMaterial</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">Material</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">clone</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a);<span class="pl-smi">a</span>.<span class="pl-c1">color</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-c1">color</span>);<span class="pl-smi">a</span>.<span class="pl-smi">map</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">map</span>;<span class="pl-smi">a</span>.<span class="pl-smi">lightMap</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">lightMap</span>;<span class="pl-smi">a</span>.<span class="pl-smi">specularMap</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">specularMap</span>;<span class="pl-smi">a</span>.<span class="pl-smi">envMap</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">envMap</span>;<span class="pl-smi">a</span>.<span class="pl-smi">combine</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">combine</span>;<span class="pl-smi">a</span>.<span class="pl-smi">reflectivity</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">reflectivity</span>;<span class="pl-smi">a</span>.<span class="pl-smi">refractionRatio</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">refractionRatio</span>;<span class="pl-smi">a</span>.<span class="pl-smi">fog</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">fog</span>;<span class="pl-smi">a</span>.<span class="pl-smi">shading</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">shading</span>;<span class="pl-smi">a</span>.<span class="pl-smi">wireframe</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">wireframe</span>;<span class="pl-smi">a</span>.<span class="pl-smi">wireframeLinewidth</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">wireframeLinewidth</span>;<span class="pl-smi">a</span>.<span class="pl-smi">wireframeLinecap</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">wireframeLinecap</span>;<span class="pl-smi">a</span>.<span class="pl-smi">wireframeLinejoin</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L217" class="blob-num js-line-number" data-line-number="217"></td>
        <td id="LC217" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">wireframeLinejoin</span>;<span class="pl-smi">a</span>.<span class="pl-smi">vertexColors</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertexColors</span>;<span class="pl-smi">a</span>.<span class="pl-smi">skinning</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">skinning</span>;<span class="pl-smi">a</span>.<span class="pl-smi">morphTargets</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">morphTargets</span>;<span class="pl-k">return</span> a};</td>
      </tr>
      <tr>
        <td id="L218" class="blob-num js-line-number" data-line-number="218"></td>
        <td id="LC218" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">MeshLambertMaterial</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Material</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-c1">color</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">16777215</span>);<span class="pl-c1">this</span>.<span class="pl-smi">ambient</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">16777215</span>);<span class="pl-c1">this</span>.<span class="pl-smi">emissive</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">0</span>);<span class="pl-c1">this</span>.<span class="pl-smi">wrapAround</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">wrapRGB</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>);<span class="pl-c1">this</span>.<span class="pl-smi">envMap</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">specularMap</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">lightMap</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">map</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">combine</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">MultiplyOperation</span>;<span class="pl-c1">this</span>.<span class="pl-smi">reflectivity</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">refractionRatio</span><span class="pl-k">=</span><span class="pl-c1">0.98</span>;<span class="pl-c1">this</span>.<span class="pl-smi">fog</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">shading</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">SmoothShading</span>;<span class="pl-c1">this</span>.<span class="pl-smi">wireframe</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">wireframeLinewidth</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">wireframeLinejoin</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">wireframeLinecap</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L219" class="blob-num js-line-number" data-line-number="219"></td>
        <td id="LC219" class="blob-code blob-code-inner js-file-line"><span class="pl-s"><span class="pl-pds">&quot;</span>round<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-smi">vertexColors</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">NoColors</span>;<span class="pl-c1">this</span>.<span class="pl-smi">morphNormals</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">morphTargets</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">skinning</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-en">setValues</span>(a)};<span class="pl-c1">THREE</span>.<span class="pl-smi">MeshLambertMaterial</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Material</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L220" class="blob-num js-line-number" data-line-number="220"></td>
        <td id="LC220" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">MeshLambertMaterial</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.MeshLambertMaterial</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">Material</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">clone</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a);<span class="pl-smi">a</span>.<span class="pl-c1">color</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-c1">color</span>);<span class="pl-smi">a</span>.<span class="pl-smi">ambient</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">ambient</span>);<span class="pl-smi">a</span>.<span class="pl-smi">emissive</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">emissive</span>);<span class="pl-smi">a</span>.<span class="pl-smi">wrapAround</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">wrapAround</span>;<span class="pl-smi">a</span>.<span class="pl-smi">wrapRGB</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">wrapRGB</span>);<span class="pl-smi">a</span>.<span class="pl-smi">map</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">map</span>;<span class="pl-smi">a</span>.<span class="pl-smi">lightMap</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">lightMap</span>;<span class="pl-smi">a</span>.<span class="pl-smi">specularMap</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">specularMap</span>;<span class="pl-smi">a</span>.<span class="pl-smi">envMap</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">envMap</span>;<span class="pl-smi">a</span>.<span class="pl-smi">combine</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">combine</span>;<span class="pl-smi">a</span>.<span class="pl-smi">reflectivity</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">reflectivity</span>;<span class="pl-smi">a</span>.<span class="pl-smi">refractionRatio</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">refractionRatio</span>;<span class="pl-smi">a</span>.<span class="pl-smi">fog</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">fog</span>;<span class="pl-smi">a</span>.<span class="pl-smi">shading</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">shading</span>;</td>
      </tr>
      <tr>
        <td id="L221" class="blob-num js-line-number" data-line-number="221"></td>
        <td id="LC221" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">a</span>.<span class="pl-smi">wireframe</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">wireframe</span>;<span class="pl-smi">a</span>.<span class="pl-smi">wireframeLinewidth</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">wireframeLinewidth</span>;<span class="pl-smi">a</span>.<span class="pl-smi">wireframeLinecap</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">wireframeLinecap</span>;<span class="pl-smi">a</span>.<span class="pl-smi">wireframeLinejoin</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">wireframeLinejoin</span>;<span class="pl-smi">a</span>.<span class="pl-smi">vertexColors</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertexColors</span>;<span class="pl-smi">a</span>.<span class="pl-smi">skinning</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">skinning</span>;<span class="pl-smi">a</span>.<span class="pl-smi">morphTargets</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">morphTargets</span>;<span class="pl-smi">a</span>.<span class="pl-smi">morphNormals</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">morphNormals</span>;<span class="pl-k">return</span> a};</td>
      </tr>
      <tr>
        <td id="L222" class="blob-num js-line-number" data-line-number="222"></td>
        <td id="LC222" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">MeshPhongMaterial</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Material</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-c1">color</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">16777215</span>);<span class="pl-c1">this</span>.<span class="pl-smi">ambient</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">16777215</span>);<span class="pl-c1">this</span>.<span class="pl-smi">emissive</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">0</span>);<span class="pl-c1">this</span>.<span class="pl-smi">specular</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">1118481</span>);<span class="pl-c1">this</span>.<span class="pl-smi">shininess</span><span class="pl-k">=</span><span class="pl-c1">30</span>;<span class="pl-c1">this</span>.<span class="pl-smi">wrapAround</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">perPixel</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">metal</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">wrapRGB</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>);<span class="pl-c1">this</span>.<span class="pl-smi">bumpMap</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">lightMap</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">map</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">bumpScale</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">normalMap</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">normalScale</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(<span class="pl-c1">1</span>,<span class="pl-c1">1</span>);<span class="pl-c1">this</span>.<span class="pl-smi">envMap</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">specularMap</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">combine</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">MultiplyOperation</span>;<span class="pl-c1">this</span>.<span class="pl-smi">reflectivity</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L223" class="blob-num js-line-number" data-line-number="223"></td>
        <td id="LC223" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">refractionRatio</span><span class="pl-k">=</span><span class="pl-c1">0.98</span>;<span class="pl-c1">this</span>.<span class="pl-smi">fog</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">shading</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">SmoothShading</span>;<span class="pl-c1">this</span>.<span class="pl-smi">wireframe</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">wireframeLinewidth</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">wireframeLinejoin</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">wireframeLinecap</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>round<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-smi">vertexColors</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">NoColors</span>;<span class="pl-c1">this</span>.<span class="pl-smi">morphNormals</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">morphTargets</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">skinning</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-en">setValues</span>(a)};<span class="pl-c1">THREE</span>.<span class="pl-smi">MeshPhongMaterial</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Material</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L224" class="blob-num js-line-number" data-line-number="224"></td>
        <td id="LC224" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">MeshPhongMaterial</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.MeshPhongMaterial</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">Material</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">clone</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a);<span class="pl-smi">a</span>.<span class="pl-c1">color</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-c1">color</span>);<span class="pl-smi">a</span>.<span class="pl-smi">ambient</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">ambient</span>);<span class="pl-smi">a</span>.<span class="pl-smi">emissive</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">emissive</span>);<span class="pl-smi">a</span>.<span class="pl-smi">specular</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">specular</span>);<span class="pl-smi">a</span>.<span class="pl-smi">shininess</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">shininess</span>;<span class="pl-smi">a</span>.<span class="pl-smi">metal</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">metal</span>;<span class="pl-smi">a</span>.<span class="pl-smi">perPixel</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">perPixel</span>;<span class="pl-smi">a</span>.<span class="pl-smi">wrapAround</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">wrapAround</span>;<span class="pl-smi">a</span>.<span class="pl-smi">wrapRGB</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">wrapRGB</span>);<span class="pl-smi">a</span>.<span class="pl-smi">map</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">map</span>;<span class="pl-smi">a</span>.<span class="pl-smi">lightMap</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">lightMap</span>;<span class="pl-smi">a</span>.<span class="pl-smi">bumpMap</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">bumpMap</span>;<span class="pl-smi">a</span>.<span class="pl-smi">bumpScale</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">bumpScale</span>;<span class="pl-smi">a</span>.<span class="pl-smi">normalMap</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">normalMap</span>;<span class="pl-smi">a</span>.<span class="pl-smi">normalScale</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">normalScale</span>);</td>
      </tr>
      <tr>
        <td id="L225" class="blob-num js-line-number" data-line-number="225"></td>
        <td id="LC225" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">a</span>.<span class="pl-smi">specularMap</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">specularMap</span>;<span class="pl-smi">a</span>.<span class="pl-smi">envMap</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">envMap</span>;<span class="pl-smi">a</span>.<span class="pl-smi">combine</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">combine</span>;<span class="pl-smi">a</span>.<span class="pl-smi">reflectivity</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">reflectivity</span>;<span class="pl-smi">a</span>.<span class="pl-smi">refractionRatio</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">refractionRatio</span>;<span class="pl-smi">a</span>.<span class="pl-smi">fog</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">fog</span>;<span class="pl-smi">a</span>.<span class="pl-smi">shading</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">shading</span>;<span class="pl-smi">a</span>.<span class="pl-smi">wireframe</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">wireframe</span>;<span class="pl-smi">a</span>.<span class="pl-smi">wireframeLinewidth</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">wireframeLinewidth</span>;<span class="pl-smi">a</span>.<span class="pl-smi">wireframeLinecap</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">wireframeLinecap</span>;<span class="pl-smi">a</span>.<span class="pl-smi">wireframeLinejoin</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">wireframeLinejoin</span>;<span class="pl-smi">a</span>.<span class="pl-smi">vertexColors</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertexColors</span>;<span class="pl-smi">a</span>.<span class="pl-smi">skinning</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">skinning</span>;<span class="pl-smi">a</span>.<span class="pl-smi">morphTargets</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">morphTargets</span>;<span class="pl-smi">a</span>.<span class="pl-smi">morphNormals</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">morphNormals</span>;<span class="pl-k">return</span> a};</td>
      </tr>
      <tr>
        <td id="L226" class="blob-num js-line-number" data-line-number="226"></td>
        <td id="LC226" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">MeshDepthMaterial</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Material</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-smi">wireframe</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">wireframeLinewidth</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-en">setValues</span>(a)};<span class="pl-c1">THREE</span>.<span class="pl-smi">MeshDepthMaterial</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Material</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">MeshDepthMaterial</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.LineBasicMaterial</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">Material</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">clone</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a);<span class="pl-smi">a</span>.<span class="pl-smi">wireframe</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">wireframe</span>;<span class="pl-smi">a</span>.<span class="pl-smi">wireframeLinewidth</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">wireframeLinewidth</span>;<span class="pl-k">return</span> a};</td>
      </tr>
      <tr>
        <td id="L227" class="blob-num js-line-number" data-line-number="227"></td>
        <td id="LC227" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">MeshNormalMaterial</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Material</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a);<span class="pl-c1">this</span>.<span class="pl-smi">shading</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">FlatShading</span>;<span class="pl-c1">this</span>.<span class="pl-smi">wireframe</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">wireframeLinewidth</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-en">setValues</span>(a)};<span class="pl-c1">THREE</span>.<span class="pl-smi">MeshNormalMaterial</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Material</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">MeshNormalMaterial</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.MeshNormalMaterial</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">Material</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">clone</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a);<span class="pl-smi">a</span>.<span class="pl-smi">shading</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">shading</span>;<span class="pl-smi">a</span>.<span class="pl-smi">wireframe</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">wireframe</span>;<span class="pl-smi">a</span>.<span class="pl-smi">wireframeLinewidth</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">wireframeLinewidth</span>;<span class="pl-k">return</span> a};<span class="pl-c1">THREE</span>.<span class="pl-en">MeshFaceMaterial</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};</td>
      </tr>
      <tr>
        <td id="L228" class="blob-num js-line-number" data-line-number="228"></td>
        <td id="LC228" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">MeshFaceMaterial</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.MeshFaceMaterial</span>};<span class="pl-c1">THREE</span>.<span class="pl-en">ParticleBasicMaterial</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Material</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-c1">color</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">16777215</span>);<span class="pl-c1">this</span>.<span class="pl-smi">map</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-c1">size</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">sizeAttenuation</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">vertexColors</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">fog</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-en">setValues</span>(a)};<span class="pl-c1">THREE</span>.<span class="pl-smi">ParticleBasicMaterial</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Material</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L229" class="blob-num js-line-number" data-line-number="229"></td>
        <td id="LC229" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ParticleBasicMaterial</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.ParticleBasicMaterial</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">Material</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">clone</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a);<span class="pl-smi">a</span>.<span class="pl-c1">color</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-c1">color</span>);<span class="pl-smi">a</span>.<span class="pl-smi">map</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">map</span>;<span class="pl-smi">a</span>.<span class="pl-c1">size</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">size</span>;<span class="pl-smi">a</span>.<span class="pl-smi">sizeAttenuation</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">sizeAttenuation</span>;<span class="pl-smi">a</span>.<span class="pl-smi">vertexColors</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertexColors</span>;<span class="pl-smi">a</span>.<span class="pl-smi">fog</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">fog</span>;<span class="pl-k">return</span> a};<span class="pl-c1">THREE</span>.<span class="pl-en">ParticleCanvasMaterial</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Material</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-c1">color</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">16777215</span>);<span class="pl-c1">this</span>.<span class="pl-en">program</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">this</span>.<span class="pl-en">setValues</span>(a)};<span class="pl-c1">THREE</span>.<span class="pl-smi">ParticleCanvasMaterial</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Material</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L230" class="blob-num js-line-number" data-line-number="230"></td>
        <td id="LC230" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ParticleCanvasMaterial</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.ParticleCanvasMaterial</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">Material</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">clone</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a);<span class="pl-smi">a</span>.<span class="pl-c1">color</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-c1">color</span>);<span class="pl-smi">a</span>.<span class="pl-smi">program</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">program</span>;<span class="pl-k">return</span> a};<span class="pl-c1">THREE</span>.<span class="pl-en">ParticleDOMMaterial</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">element</span><span class="pl-k">=</span>a};<span class="pl-c1">THREE</span>.<span class="pl-smi">ParticleDOMMaterial</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.ParticleDOMMaterial</span>(<span class="pl-c1">this</span>.<span class="pl-smi">element</span>)};</td>
      </tr>
      <tr>
        <td id="L231" class="blob-num js-line-number" data-line-number="231"></td>
        <td id="LC231" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">ShaderMaterial</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Material</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-smi">vertexShader</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">fragmentShader</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>void main() {}<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">this</span>.<span class="pl-smi">uniforms</span><span class="pl-k">=</span>{};<span class="pl-c1">this</span>.<span class="pl-smi">defines</span><span class="pl-k">=</span>{};<span class="pl-c1">this</span>.<span class="pl-c1">attributes</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">shading</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">SmoothShading</span>;<span class="pl-c1">this</span>.<span class="pl-smi">wireframe</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">wireframeLinewidth</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">lights</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">fog</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">vertexColors</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">NoColors</span>;<span class="pl-c1">this</span>.<span class="pl-smi">morphNormals</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">morphTargets</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">skinning</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-en">setValues</span>(a)};<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderMaterial</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Material</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L232" class="blob-num js-line-number" data-line-number="232"></td>
        <td id="LC232" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderMaterial</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.ShaderMaterial</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">Material</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">clone</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a);<span class="pl-smi">a</span>.<span class="pl-smi">fragmentShader</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">fragmentShader</span>;<span class="pl-smi">a</span>.<span class="pl-smi">vertexShader</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertexShader</span>;<span class="pl-smi">a</span>.<span class="pl-smi">uniforms</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">uniforms</span>;<span class="pl-smi">a</span>.<span class="pl-c1">attributes</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">attributes</span>;<span class="pl-smi">a</span>.<span class="pl-smi">defines</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">defines</span>;<span class="pl-smi">a</span>.<span class="pl-smi">shading</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">shading</span>;<span class="pl-smi">a</span>.<span class="pl-smi">wireframe</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">wireframe</span>;<span class="pl-smi">a</span>.<span class="pl-smi">wireframeLinewidth</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">wireframeLinewidth</span>;<span class="pl-smi">a</span>.<span class="pl-smi">fog</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">fog</span>;<span class="pl-smi">a</span>.<span class="pl-smi">lights</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">lights</span>;<span class="pl-smi">a</span>.<span class="pl-smi">vertexColors</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertexColors</span>;<span class="pl-smi">a</span>.<span class="pl-smi">skinning</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">skinning</span>;<span class="pl-smi">a</span>.<span class="pl-smi">morphTargets</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">morphTargets</span>;<span class="pl-smi">a</span>.<span class="pl-smi">morphNormals</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L233" class="blob-num js-line-number" data-line-number="233"></td>
        <td id="LC233" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">morphNormals</span>;<span class="pl-k">return</span> a};</td>
      </tr>
      <tr>
        <td id="L234" class="blob-num js-line-number" data-line-number="234"></td>
        <td id="LC234" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">Texture</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>,<span class="pl-smi">g</span>,<span class="pl-smi">h</span>,<span class="pl-smi">i</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">TextureLibrary</span>.<span class="pl-c1">push</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-c1">id</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">TextureIdCount</span><span class="pl-k">++</span>;<span class="pl-c1">this</span>.<span class="pl-smi">image</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">mapping</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.UVMapping</span>;<span class="pl-c1">this</span>.<span class="pl-smi">wrapS</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">?</span>c<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">ClampToEdgeWrapping</span>;<span class="pl-c1">this</span>.<span class="pl-smi">wrapT</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>d<span class="pl-k">?</span>d<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">ClampToEdgeWrapping</span>;<span class="pl-c1">this</span>.<span class="pl-smi">magFilter</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>e<span class="pl-k">?</span>e<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">LinearFilter</span>;<span class="pl-c1">this</span>.<span class="pl-smi">minFilter</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>f<span class="pl-k">?</span>f<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">LinearMipMapLinearFilter</span>;<span class="pl-c1">this</span>.<span class="pl-smi">anisotropy</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>i<span class="pl-k">?</span>i<span class="pl-k">:</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">format</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>g<span class="pl-k">?</span>g<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">RGBAFormat</span>;<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>h<span class="pl-k">?</span>h<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">UnsignedByteType</span>;<span class="pl-c1">this</span>.<span class="pl-smi">offset</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L235" class="blob-num js-line-number" data-line-number="235"></td>
        <td id="LC235" class="blob-code blob-code-inner js-file-line"><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>);<span class="pl-c1">this</span>.<span class="pl-smi">repeat</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(<span class="pl-c1">1</span>,<span class="pl-c1">1</span>);<span class="pl-c1">this</span>.<span class="pl-smi">generateMipmaps</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">premultiplyAlpha</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">flipY</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">needsUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">onUpdate</span><span class="pl-k">=</span><span class="pl-c1">null</span>};</td>
      </tr>
      <tr>
        <td id="L236" class="blob-num js-line-number" data-line-number="236"></td>
        <td id="LC236" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Texture</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>{<span class="pl-en">constructor</span>:THREE.Texture,clone:<span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Texture</span>;<span class="pl-smi">a</span>.<span class="pl-smi">image</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">image</span>;<span class="pl-smi">a</span>.<span class="pl-smi">mapping</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">mapping</span>;<span class="pl-smi">a</span>.<span class="pl-smi">wrapS</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">wrapS</span>;<span class="pl-smi">a</span>.<span class="pl-smi">wrapT</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">wrapT</span>;<span class="pl-smi">a</span>.<span class="pl-smi">magFilter</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">magFilter</span>;<span class="pl-smi">a</span>.<span class="pl-smi">minFilter</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">minFilter</span>;<span class="pl-smi">a</span>.<span class="pl-smi">anisotropy</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">anisotropy</span>;<span class="pl-smi">a</span>.<span class="pl-smi">format</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">format</span>;<span class="pl-smi">a</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">type</span>;<span class="pl-smi">a</span>.<span class="pl-smi">offset</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">offset</span>);<span class="pl-smi">a</span>.<span class="pl-smi">repeat</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">repeat</span>);<span class="pl-smi">a</span>.<span class="pl-smi">generateMipmaps</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">generateMipmaps</span>;<span class="pl-smi">a</span>.<span class="pl-smi">premultiplyAlpha</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">premultiplyAlpha</span>;<span class="pl-smi">a</span>.<span class="pl-smi">flipY</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">flipY</span>;<span class="pl-k">return</span> a},<span class="pl-en">deallocate</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">TextureLibrary</span>.<span class="pl-c1">indexOf</span>(<span class="pl-c1">this</span>);</td>
      </tr>
      <tr>
        <td id="L237" class="blob-num js-line-number" data-line-number="237"></td>
        <td id="LC237" class="blob-code blob-code-inner js-file-line"><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">!==</span>a<span class="pl-k">&amp;&amp;</span><span class="pl-c1">THREE</span>.<span class="pl-smi">TextureLibrary</span>.<span class="pl-c1">splice</span>(a,<span class="pl-c1">1</span>)}};<span class="pl-c1">THREE</span>.<span class="pl-smi">TextureIdCount</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">TextureLibrary</span><span class="pl-k">=</span>[];<span class="pl-c1">THREE</span>.<span class="pl-en">CompressedTexture</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>,<span class="pl-smi">g</span>,<span class="pl-smi">h</span>,<span class="pl-smi">i</span>,<span class="pl-smi">j</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Texture</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,<span class="pl-c1">null</span>,f,g,h,i,j,d,e);<span class="pl-c1">this</span>.<span class="pl-smi">image</span><span class="pl-k">=</span>{width<span class="pl-k">:</span>b,height<span class="pl-k">:</span>c};<span class="pl-c1">this</span>.<span class="pl-smi">mipmaps</span><span class="pl-k">=</span>a};<span class="pl-c1">THREE</span>.<span class="pl-smi">CompressedTexture</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Texture</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L238" class="blob-num js-line-number" data-line-number="238"></td>
        <td id="LC238" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">CompressedTexture</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.CompressedTexture</span>;<span class="pl-smi">a</span>.<span class="pl-smi">image</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">image</span>;<span class="pl-smi">a</span>.<span class="pl-smi">mipmaps</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">mipmaps</span>;<span class="pl-smi">a</span>.<span class="pl-smi">format</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">format</span>;<span class="pl-smi">a</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">type</span>;<span class="pl-smi">a</span>.<span class="pl-smi">mapping</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">mapping</span>;<span class="pl-smi">a</span>.<span class="pl-smi">wrapS</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">wrapS</span>;<span class="pl-smi">a</span>.<span class="pl-smi">wrapT</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">wrapT</span>;<span class="pl-smi">a</span>.<span class="pl-smi">magFilter</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">magFilter</span>;<span class="pl-smi">a</span>.<span class="pl-smi">minFilter</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">minFilter</span>;<span class="pl-smi">a</span>.<span class="pl-smi">anisotropy</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">anisotropy</span>;<span class="pl-smi">a</span>.<span class="pl-smi">offset</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">offset</span>);<span class="pl-smi">a</span>.<span class="pl-smi">repeat</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">repeat</span>);<span class="pl-k">return</span> a};<span class="pl-c1">THREE</span>.<span class="pl-en">DataTexture</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>,<span class="pl-smi">g</span>,<span class="pl-smi">h</span>,<span class="pl-smi">i</span>,<span class="pl-smi">j</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Texture</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,<span class="pl-c1">null</span>,f,g,h,i,j,d,e);<span class="pl-c1">this</span>.<span class="pl-smi">image</span><span class="pl-k">=</span>{data<span class="pl-k">:</span>a,width<span class="pl-k">:</span>b,height<span class="pl-k">:</span>c}};</td>
      </tr>
      <tr>
        <td id="L239" class="blob-num js-line-number" data-line-number="239"></td>
        <td id="LC239" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">DataTexture</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Texture</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">DataTexture</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.DataTexture</span>(<span class="pl-c1">this</span>.<span class="pl-smi">image</span>.<span class="pl-c1">data</span>,<span class="pl-c1">this</span>.<span class="pl-smi">image</span>.<span class="pl-c1">width</span>,<span class="pl-c1">this</span>.<span class="pl-smi">image</span>.<span class="pl-c1">height</span>,<span class="pl-c1">this</span>.<span class="pl-smi">format</span>,<span class="pl-c1">this</span>.<span class="pl-c1">type</span>,<span class="pl-c1">this</span>.<span class="pl-smi">mapping</span>,<span class="pl-c1">this</span>.<span class="pl-smi">wrapS</span>,<span class="pl-c1">this</span>.<span class="pl-smi">wrapT</span>,<span class="pl-c1">this</span>.<span class="pl-smi">magFilter</span>,<span class="pl-c1">this</span>.<span class="pl-smi">minFilter</span>);<span class="pl-smi">a</span>.<span class="pl-smi">offset</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">offset</span>);<span class="pl-smi">a</span>.<span class="pl-smi">repeat</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">repeat</span>);<span class="pl-k">return</span> a};<span class="pl-c1">THREE</span>.<span class="pl-en">Particle</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-smi">material</span><span class="pl-k">=</span>a};<span class="pl-c1">THREE</span>.<span class="pl-smi">Particle</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L240" class="blob-num js-line-number" data-line-number="240"></td>
        <td id="LC240" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Particle</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Particle</span>(<span class="pl-c1">this</span>.<span class="pl-smi">material</span>));<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">clone</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a);<span class="pl-k">return</span> a};<span class="pl-c1">THREE</span>.<span class="pl-en">ParticleSystem</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-smi">geometry</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">material</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.ParticleBasicMaterial</span>({color<span class="pl-k">:</span><span class="pl-c1">16777215</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">random</span>()});<span class="pl-c1">this</span>.<span class="pl-smi">sortParticles</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">geometry</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">null</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-smi">geometry</span>.<span class="pl-smi">boundingSphere</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">geometry</span>.<span class="pl-en">computeBoundingSphere</span>(),<span class="pl-c1">this</span>.<span class="pl-smi">boundRadius</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">boundingSphere</span>.<span class="pl-smi">radius</span>);<span class="pl-c1">this</span>.<span class="pl-smi">frustumCulled</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>};</td>
      </tr>
      <tr>
        <td id="L241" class="blob-num js-line-number" data-line-number="241"></td>
        <td id="LC241" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ParticleSystem</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">ParticleSystem</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.ParticleSystem</span>(<span class="pl-c1">this</span>.<span class="pl-smi">geometry</span>,<span class="pl-c1">this</span>.<span class="pl-smi">material</span>));<span class="pl-smi">a</span>.<span class="pl-smi">sortParticles</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">sortParticles</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">clone</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a);<span class="pl-k">return</span> a};</td>
      </tr>
      <tr>
        <td id="L242" class="blob-num js-line-number" data-line-number="242"></td>
        <td id="LC242" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">Line</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-smi">geometry</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">material</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.LineBasicMaterial</span>({color<span class="pl-k">:</span><span class="pl-c1">16777215</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">random</span>()});<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">?</span>c<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">LineStrip</span>;<span class="pl-c1">this</span>.<span class="pl-smi">geometry</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">this</span>.<span class="pl-smi">geometry</span>.<span class="pl-smi">boundingSphere</span><span class="pl-k">||</span><span class="pl-c1">this</span>.<span class="pl-smi">geometry</span>.<span class="pl-en">computeBoundingSphere</span>())};<span class="pl-c1">THREE</span>.<span class="pl-smi">LineStrip</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">LinePieces</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">Line</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L243" class="blob-num js-line-number" data-line-number="243"></td>
        <td id="LC243" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Line</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Line</span>(<span class="pl-c1">this</span>.<span class="pl-smi">geometry</span>,<span class="pl-c1">this</span>.<span class="pl-smi">material</span>,<span class="pl-c1">this</span>.<span class="pl-c1">type</span>));<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">clone</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a);<span class="pl-k">return</span> a};</td>
      </tr>
      <tr>
        <td id="L244" class="blob-num js-line-number" data-line-number="244"></td>
        <td id="LC244" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">Mesh</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-smi">geometry</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">material</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.MeshBasicMaterial</span>({color<span class="pl-k">:</span><span class="pl-c1">16777215</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">random</span>(),wireframe<span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">0</span>});<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">geometry</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">null</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-smi">geometry</span>.<span class="pl-smi">boundingSphere</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">geometry</span>.<span class="pl-en">computeBoundingSphere</span>(),<span class="pl-c1">this</span>.<span class="pl-smi">boundRadius</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">boundingSphere</span>.<span class="pl-smi">radius</span>,<span class="pl-c1">this</span>.<span class="pl-smi">geometry</span>.<span class="pl-smi">morphTargets</span>.<span class="pl-c1">length</span>)){<span class="pl-c1">this</span>.<span class="pl-smi">morphTargetBase</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">morphTargetForcedOrder</span><span class="pl-k">=</span>[];<span class="pl-c1">this</span>.<span class="pl-smi">morphTargetInfluences</span><span class="pl-k">=</span>[];<span class="pl-c1">this</span>.<span class="pl-smi">morphTargetDictionary</span><span class="pl-k">=</span>{};<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">geometry</span>.<span class="pl-smi">morphTargets</span>.<span class="pl-c1">length</span>;c<span class="pl-k">++</span>)<span class="pl-c1">this</span>.<span class="pl-smi">morphTargetInfluences</span>.<span class="pl-c1">push</span>(<span class="pl-c1">0</span>),</td>
      </tr>
      <tr>
        <td id="L245" class="blob-num js-line-number" data-line-number="245"></td>
        <td id="LC245" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">morphTargetDictionary</span>[<span class="pl-c1">this</span>.<span class="pl-smi">geometry</span>.<span class="pl-smi">morphTargets</span>[c].<span class="pl-c1">name</span>]<span class="pl-k">=</span>c}};<span class="pl-c1">THREE</span>.<span class="pl-smi">Mesh</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">Mesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getMorphTargetIndexByName</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-c1">this</span>.<span class="pl-smi">morphTargetDictionary</span>[a])<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">morphTargetDictionary</span>[a];<span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Mesh.getMorphTargetIndexByName: morph target <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span> does not exist. Returning 0.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L246" class="blob-num js-line-number" data-line-number="246"></td>
        <td id="LC246" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Mesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Mesh</span>(<span class="pl-c1">this</span>.<span class="pl-smi">geometry</span>,<span class="pl-c1">this</span>.<span class="pl-smi">material</span>));<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">clone</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a);<span class="pl-k">return</span> a};<span class="pl-c1">THREE</span>.<span class="pl-en">Bone</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-smi">skin</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">skinMatrix</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">Bone</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L247" class="blob-num js-line-number" data-line-number="247"></td>
        <td id="LC247" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Bone</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">update</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-smi">matrixAutoUpdate</span><span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">|=</span><span class="pl-c1">this</span>.<span class="pl-en">updateMatrix</span>());<span class="pl-k">if</span>(b<span class="pl-k">||</span><span class="pl-c1">this</span>.<span class="pl-smi">matrixWorldNeedsUpdate</span>)a<span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-smi">skinMatrix</span>.<span class="pl-en">multiply</span>(a,<span class="pl-c1">this</span>.<span class="pl-smi">matrix</span>)<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-smi">skinMatrix</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">matrix</span>),<span class="pl-c1">this</span>.<span class="pl-smi">matrixWorldNeedsUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>,b<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> c,d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">children</span>.<span class="pl-c1">length</span>;<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span>d;c<span class="pl-k">++</span>)<span class="pl-c1">this</span>.<span class="pl-smi">children</span>[c].<span class="pl-en">update</span>(<span class="pl-c1">this</span>.<span class="pl-smi">skinMatrix</span>,b)};</td>
      </tr>
      <tr>
        <td id="L248" class="blob-num js-line-number" data-line-number="248"></td>
        <td id="LC248" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">SkinnedMesh</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Mesh</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a,b);<span class="pl-c1">this</span>.<span class="pl-smi">useVertexTexture</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">?</span>c<span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">identityMatrix</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>;<span class="pl-c1">this</span>.<span class="pl-smi">bones</span><span class="pl-k">=</span>[];<span class="pl-c1">this</span>.<span class="pl-smi">boneMatrices</span><span class="pl-k">=</span>[];<span class="pl-k">var</span> d,e,f;<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-c1">this</span>.<span class="pl-smi">geometry</span>.<span class="pl-smi">bones</span>){<span class="pl-k">for</span>(a<span class="pl-k">=</span><span class="pl-c1">0</span>;a<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">geometry</span>.<span class="pl-smi">bones</span>.<span class="pl-c1">length</span>;a<span class="pl-k">++</span>)c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">geometry</span>.<span class="pl-smi">bones</span>[a],d<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">pos</span>,e<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">rotq</span>,f<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">scl</span>,b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">addBone</span>(),<span class="pl-smi">b</span>.<span class="pl-c1">name</span><span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">name</span>,<span class="pl-smi">b</span>.<span class="pl-smi">position</span>.<span class="pl-c1">set</span>(d[<span class="pl-c1">0</span>],d[<span class="pl-c1">1</span>],d[<span class="pl-c1">2</span>]),<span class="pl-smi">b</span>.<span class="pl-smi">quaternion</span>.<span class="pl-c1">set</span>(e[<span class="pl-c1">0</span>],e[<span class="pl-c1">1</span>],e[<span class="pl-c1">2</span>],e[<span class="pl-c1">3</span>]),<span class="pl-smi">b</span>.<span class="pl-smi">useQuaternion</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>,<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>f<span class="pl-k">?</span><span class="pl-smi">b</span>.<span class="pl-smi">scale</span>.<span class="pl-c1">set</span>(f[<span class="pl-c1">0</span>],f[<span class="pl-c1">1</span>],f[<span class="pl-c1">2</span>])<span class="pl-k">:</span><span class="pl-smi">b</span>.<span class="pl-smi">scale</span>.<span class="pl-c1">set</span>(<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>);<span class="pl-k">for</span>(a<span class="pl-k">=</span><span class="pl-c1">0</span>;a<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">bones</span>.<span class="pl-c1">length</span>;a<span class="pl-k">++</span>)c<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L249" class="blob-num js-line-number" data-line-number="249"></td>
        <td id="LC249" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">geometry</span>.<span class="pl-smi">bones</span>[a],b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">bones</span>[a],<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">===</span><span class="pl-smi">c</span>.<span class="pl-c1">parent</span><span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-c1">add</span>(b)<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-smi">bones</span>[<span class="pl-smi">c</span>.<span class="pl-c1">parent</span>].<span class="pl-c1">add</span>(b);a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">bones</span>.<span class="pl-c1">length</span>;<span class="pl-c1">this</span>.<span class="pl-smi">useVertexTexture</span><span class="pl-k">?</span>(<span class="pl-c1">this</span>.<span class="pl-smi">boneTextureHeight</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">boneTextureWidth</span><span class="pl-k">=</span>a<span class="pl-k">=</span><span class="pl-c1">256</span><span class="pl-k">&lt;</span>a<span class="pl-k">?</span><span class="pl-c1">64</span><span class="pl-k">:</span><span class="pl-c1">64</span><span class="pl-k">&lt;</span>a<span class="pl-k">?</span><span class="pl-c1">32</span><span class="pl-k">:</span><span class="pl-c1">16</span><span class="pl-k">&lt;</span>a<span class="pl-k">?</span><span class="pl-c1">16</span><span class="pl-k">:</span><span class="pl-c1">8</span>,<span class="pl-c1">this</span>.<span class="pl-smi">boneMatrices</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">4</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">boneTextureWidth</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">boneTextureHeight</span>),<span class="pl-c1">this</span>.<span class="pl-smi">boneTexture</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.DataTexture</span>(<span class="pl-c1">this</span>.<span class="pl-smi">boneMatrices</span>,<span class="pl-c1">this</span>.<span class="pl-smi">boneTextureWidth</span>,<span class="pl-c1">this</span>.<span class="pl-smi">boneTextureHeight</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">RGBAFormat</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">FloatType</span>),<span class="pl-c1">this</span>.<span class="pl-smi">boneTexture</span>.<span class="pl-smi">minFilter</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">NearestFilter</span>,<span class="pl-c1">this</span>.<span class="pl-smi">boneTexture</span>.<span class="pl-smi">magFilter</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L250" class="blob-num js-line-number" data-line-number="250"></td>
        <td id="LC250" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">NearestFilter</span>,<span class="pl-c1">this</span>.<span class="pl-smi">boneTexture</span>.<span class="pl-smi">generateMipmaps</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-c1">this</span>.<span class="pl-smi">boneTexture</span>.<span class="pl-smi">flipY</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>)<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-smi">boneMatrices</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">16</span><span class="pl-k">*</span>a);<span class="pl-c1">this</span>.<span class="pl-en">pose</span>()}};<span class="pl-c1">THREE</span>.<span class="pl-smi">SkinnedMesh</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Mesh</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">SkinnedMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">addBone</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Bone</span>(<span class="pl-c1">this</span>));<span class="pl-c1">this</span>.<span class="pl-smi">bones</span>.<span class="pl-c1">push</span>(a);<span class="pl-k">return</span> a};</td>
      </tr>
      <tr>
        <td id="L251" class="blob-num js-line-number" data-line-number="251"></td>
        <td id="LC251" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">SkinnedMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">updateMatrixWorld</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">matrixAutoUpdate</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-en">updateMatrix</span>();<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">matrixWorldNeedsUpdate</span><span class="pl-k">||</span>a)<span class="pl-c1">this</span>.<span class="pl-c1">parent</span><span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-smi">matrixWorld</span>.<span class="pl-en">multiply</span>(<span class="pl-c1">this</span>.<span class="pl-c1">parent</span>.<span class="pl-smi">matrixWorld</span>,<span class="pl-c1">this</span>.<span class="pl-smi">matrix</span>)<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-smi">matrixWorld</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">matrix</span>),<span class="pl-c1">this</span>.<span class="pl-smi">matrixWorldNeedsUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">0</span>,b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">children</span>.<span class="pl-c1">length</span>;a<span class="pl-k">&lt;</span>b;a<span class="pl-k">++</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">children</span>[a];c <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Bone</span><span class="pl-k">?</span><span class="pl-smi">c</span>.<span class="pl-en">update</span>(<span class="pl-c1">this</span>.<span class="pl-smi">identityMatrix</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>)<span class="pl-k">:</span><span class="pl-smi">c</span>.<span class="pl-en">updateMatrixWorld</span>(<span class="pl-k">!</span><span class="pl-c1">0</span>)}<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">==</span><span class="pl-c1">this</span>.<span class="pl-smi">boneInverses</span>){<span class="pl-c1">this</span>.<span class="pl-smi">boneInverses</span><span class="pl-k">=</span>[];a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">bones</span>.<span class="pl-c1">length</span>;a<span class="pl-k">&lt;</span></td>
      </tr>
      <tr>
        <td id="L252" class="blob-num js-line-number" data-line-number="252"></td>
        <td id="LC252" class="blob-code blob-code-inner js-file-line">b;a<span class="pl-k">++</span>)c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>,<span class="pl-smi">c</span>.<span class="pl-en">getInverse</span>(<span class="pl-c1">this</span>.<span class="pl-smi">bones</span>[a].<span class="pl-smi">skinMatrix</span>),<span class="pl-c1">this</span>.<span class="pl-smi">boneInverses</span>.<span class="pl-c1">push</span>(c)}a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">bones</span>.<span class="pl-c1">length</span>;a<span class="pl-k">&lt;</span>b;a<span class="pl-k">++</span>)<span class="pl-c1">THREE</span>.<span class="pl-smi">SkinnedMesh</span>.<span class="pl-smi">offsetMatrix</span>.<span class="pl-en">multiply</span>(<span class="pl-c1">this</span>.<span class="pl-smi">bones</span>[a].<span class="pl-smi">skinMatrix</span>,<span class="pl-c1">this</span>.<span class="pl-smi">boneInverses</span>[a]),<span class="pl-c1">THREE</span>.<span class="pl-smi">SkinnedMesh</span>.<span class="pl-smi">offsetMatrix</span>.<span class="pl-en">flattenToArrayOffset</span>(<span class="pl-c1">this</span>.<span class="pl-smi">boneMatrices</span>,<span class="pl-c1">16</span><span class="pl-k">*</span>a);<span class="pl-c1">this</span>.<span class="pl-smi">useVertexTexture</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">this</span>.<span class="pl-smi">boneTexture</span>.<span class="pl-smi">needsUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>)};</td>
      </tr>
      <tr>
        <td id="L253" class="blob-num js-line-number" data-line-number="253"></td>
        <td id="LC253" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">SkinnedMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">pose</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-en">updateMatrixWorld</span>(<span class="pl-k">!</span><span class="pl-c1">0</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">0</span>;a<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">geometry</span>.<span class="pl-smi">skinIndices</span>.<span class="pl-c1">length</span>;a<span class="pl-k">++</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">geometry</span>.<span class="pl-smi">skinWeights</span>[a],c<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-smi">b</span>.<span class="pl-en">lengthManhattan</span>();<span class="pl-c1">Infinity</span><span class="pl-k">!==</span>c<span class="pl-k">?</span><span class="pl-smi">b</span>.<span class="pl-en">multiplyScalar</span>(c)<span class="pl-k">:</span><span class="pl-smi">b</span>.<span class="pl-c1">set</span>(<span class="pl-c1">1</span>)}};<span class="pl-c1">THREE</span>.<span class="pl-smi">SkinnedMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.SkinnedMesh</span>(<span class="pl-c1">this</span>.<span class="pl-smi">geometry</span>,<span class="pl-c1">this</span>.<span class="pl-smi">material</span>,<span class="pl-c1">this</span>.<span class="pl-smi">useVertexTexture</span>));<span class="pl-c1">THREE</span>.<span class="pl-smi">Mesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">clone</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a);<span class="pl-k">return</span> a};<span class="pl-c1">THREE</span>.<span class="pl-smi">SkinnedMesh</span>.<span class="pl-smi">offsetMatrix</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>;</td>
      </tr>
      <tr>
        <td id="L254" class="blob-num js-line-number" data-line-number="254"></td>
        <td id="LC254" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">MorphAnimMesh</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Mesh</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a,b);<span class="pl-c1">this</span>.<span class="pl-smi">duration</span><span class="pl-k">=</span><span class="pl-c1">1E3</span>;<span class="pl-c1">this</span>.<span class="pl-smi">mirroredLoop</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">currentKeyframe</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">lastKeyframe</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">time</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">direction</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">directionBackwards</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-en">setFrameRange</span>(<span class="pl-c1">0</span>,<span class="pl-c1">this</span>.<span class="pl-smi">geometry</span>.<span class="pl-smi">morphTargets</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>)};<span class="pl-c1">THREE</span>.<span class="pl-smi">MorphAnimMesh</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Mesh</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">MorphAnimMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setFrameRange</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-smi">startKeyframe</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">endKeyframe</span><span class="pl-k">=</span>b;<span class="pl-c1">this</span>.<span class="pl-c1">length</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">endKeyframe</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">startKeyframe</span><span class="pl-k">+</span><span class="pl-c1">1</span>};</td>
      </tr>
      <tr>
        <td id="L255" class="blob-num js-line-number" data-line-number="255"></td>
        <td id="LC255" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">MorphAnimMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setDirectionForward</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">direction</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">directionBackwards</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">MorphAnimMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setDirectionBackward</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">direction</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">directionBackwards</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L256" class="blob-num js-line-number" data-line-number="256"></td>
        <td id="LC256" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">MorphAnimMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">parseAnimations</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">geometry</span>;<span class="pl-smi">a</span>.<span class="pl-smi">animations</span><span class="pl-k">||</span>(<span class="pl-smi">a</span>.<span class="pl-smi">animations</span><span class="pl-k">=</span>{});<span class="pl-k">for</span>(<span class="pl-k">var</span> b,c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">animations</span>,d<span class="pl-k">=</span><span class="pl-sr"><span class="pl-pds">/</span>(<span class="pl-c1">[<span class="pl-c1">a-z</span>]</span><span class="pl-k">+</span>)(<span class="pl-c1">\d</span><span class="pl-k">+</span>)<span class="pl-pds">/</span></span>,e<span class="pl-k">=</span><span class="pl-c1">0</span>,f<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">morphTargets</span>.<span class="pl-c1">length</span>;e<span class="pl-k">&lt;</span>f;e<span class="pl-k">++</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">morphTargets</span>[e].<span class="pl-c1">name</span>.<span class="pl-c1">match</span>(d);<span class="pl-k">if</span>(g<span class="pl-k">&amp;&amp;</span><span class="pl-c1">1</span><span class="pl-k">&lt;</span><span class="pl-smi">g</span>.<span class="pl-c1">length</span>){g<span class="pl-k">=</span>g[<span class="pl-c1">1</span>];c[g]<span class="pl-k">||</span>(c[g]<span class="pl-k">=</span>{start<span class="pl-k">:</span><span class="pl-c1">Infinity</span>,end<span class="pl-k">:</span><span class="pl-k">-</span><span class="pl-c1">Infinity</span>});<span class="pl-k">var</span> h<span class="pl-k">=</span>c[g];e<span class="pl-k">&lt;</span><span class="pl-smi">h</span>.<span class="pl-c1">start</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">h</span>.<span class="pl-c1">start</span><span class="pl-k">=</span>e);e<span class="pl-k">&gt;</span><span class="pl-smi">h</span>.<span class="pl-smi">end</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">h</span>.<span class="pl-smi">end</span><span class="pl-k">=</span>e);b<span class="pl-k">||</span>(b<span class="pl-k">=</span>g)}}<span class="pl-smi">a</span>.<span class="pl-smi">firstAnimation</span><span class="pl-k">=</span>b};</td>
      </tr>
      <tr>
        <td id="L257" class="blob-num js-line-number" data-line-number="257"></td>
        <td id="LC257" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">MorphAnimMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setAnimationLabel</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">this</span>.<span class="pl-smi">geometry</span>.<span class="pl-smi">animations</span><span class="pl-k">||</span>(<span class="pl-c1">this</span>.<span class="pl-smi">geometry</span>.<span class="pl-smi">animations</span><span class="pl-k">=</span>{});<span class="pl-c1">this</span>.<span class="pl-smi">geometry</span>.<span class="pl-smi">animations</span>[a]<span class="pl-k">=</span>{start<span class="pl-k">:</span>b,end<span class="pl-k">:</span>c}};<span class="pl-c1">THREE</span>.<span class="pl-smi">MorphAnimMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">playAnimation</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">geometry</span>.<span class="pl-smi">animations</span>[a];c<span class="pl-k">?</span>(<span class="pl-c1">this</span>.<span class="pl-en">setFrameRange</span>(<span class="pl-smi">c</span>.<span class="pl-c1">start</span>,<span class="pl-smi">c</span>.<span class="pl-smi">end</span>),<span class="pl-c1">this</span>.<span class="pl-smi">duration</span><span class="pl-k">=</span><span class="pl-c1">1E3</span><span class="pl-k">*</span>((<span class="pl-smi">c</span>.<span class="pl-smi">end</span><span class="pl-k">-</span><span class="pl-smi">c</span>.<span class="pl-c1">start</span>)<span class="pl-k">/</span>b),<span class="pl-c1">this</span>.<span class="pl-smi">time</span><span class="pl-k">=</span><span class="pl-c1">0</span>)<span class="pl-k">:</span><span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>animation[<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>] undefined<span class="pl-pds">&quot;</span></span>)};</td>
      </tr>
      <tr>
        <td id="L258" class="blob-num js-line-number" data-line-number="258"></td>
        <td id="LC258" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">MorphAnimMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">updateAnimation</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">duration</span><span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-c1">length</span>;<span class="pl-c1">this</span>.<span class="pl-smi">time</span><span class="pl-k">+=</span><span class="pl-c1">this</span>.<span class="pl-smi">direction</span><span class="pl-k">*</span>a;<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">mirroredLoop</span>){<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">time</span><span class="pl-k">&gt;</span><span class="pl-c1">this</span>.<span class="pl-smi">duration</span><span class="pl-k">||</span><span class="pl-c1">0</span><span class="pl-k">&gt;</span><span class="pl-c1">this</span>.<span class="pl-smi">time</span>)<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">direction</span><span class="pl-k">*=</span><span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">this</span>.<span class="pl-smi">time</span><span class="pl-k">&gt;</span><span class="pl-c1">this</span>.<span class="pl-smi">duration</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">this</span>.<span class="pl-smi">time</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">duration</span>,<span class="pl-c1">this</span>.<span class="pl-smi">directionBackwards</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>),<span class="pl-c1">0</span><span class="pl-k">&gt;</span><span class="pl-c1">this</span>.<span class="pl-smi">time</span>)<span class="pl-c1">this</span>.<span class="pl-smi">time</span><span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-c1">this</span>.<span class="pl-smi">directionBackwards</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>}<span class="pl-k">else</span> <span class="pl-c1">this</span>.<span class="pl-smi">time</span><span class="pl-k">%=</span><span class="pl-c1">this</span>.<span class="pl-smi">duration</span>,<span class="pl-c1">0</span><span class="pl-k">&gt;</span><span class="pl-c1">this</span>.<span class="pl-smi">time</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">this</span>.<span class="pl-smi">time</span><span class="pl-k">+=</span><span class="pl-c1">this</span>.<span class="pl-smi">duration</span>);a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">startKeyframe</span><span class="pl-k">+</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Math</span>.<span class="pl-en">clamp</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-c1">this</span>.<span class="pl-smi">time</span><span class="pl-k">/</span>b),<span class="pl-c1">0</span>,<span class="pl-c1">this</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>);a<span class="pl-k">!==</span><span class="pl-c1">this</span>.<span class="pl-smi">currentKeyframe</span><span class="pl-k">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L259" class="blob-num js-line-number" data-line-number="259"></td>
        <td id="LC259" class="blob-code blob-code-inner js-file-line">(<span class="pl-c1">this</span>.<span class="pl-smi">morphTargetInfluences</span>[<span class="pl-c1">this</span>.<span class="pl-smi">lastKeyframe</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-c1">this</span>.<span class="pl-smi">morphTargetInfluences</span>[<span class="pl-c1">this</span>.<span class="pl-smi">currentKeyframe</span>]<span class="pl-k">=</span><span class="pl-c1">1</span>,<span class="pl-c1">this</span>.<span class="pl-smi">morphTargetInfluences</span>[a]<span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-c1">this</span>.<span class="pl-smi">lastKeyframe</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">currentKeyframe</span>,<span class="pl-c1">this</span>.<span class="pl-smi">currentKeyframe</span><span class="pl-k">=</span>a);b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">time</span><span class="pl-k">%</span>b<span class="pl-k">/</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">directionBackwards</span><span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">-</span>b);<span class="pl-c1">this</span>.<span class="pl-smi">morphTargetInfluences</span>[<span class="pl-c1">this</span>.<span class="pl-smi">currentKeyframe</span>]<span class="pl-k">=</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">morphTargetInfluences</span>[<span class="pl-c1">this</span>.<span class="pl-smi">lastKeyframe</span>]<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">-</span>b};</td>
      </tr>
      <tr>
        <td id="L260" class="blob-num js-line-number" data-line-number="260"></td>
        <td id="LC260" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">MorphAnimMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.MorphAnimMesh</span>(<span class="pl-c1">this</span>.<span class="pl-smi">geometry</span>,<span class="pl-c1">this</span>.<span class="pl-smi">material</span>));<span class="pl-smi">a</span>.<span class="pl-smi">duration</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">duration</span>;<span class="pl-smi">a</span>.<span class="pl-smi">mirroredLoop</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">mirroredLoop</span>;<span class="pl-smi">a</span>.<span class="pl-smi">time</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">time</span>;<span class="pl-smi">a</span>.<span class="pl-smi">lastKeyframe</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">lastKeyframe</span>;<span class="pl-smi">a</span>.<span class="pl-smi">currentKeyframe</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">currentKeyframe</span>;<span class="pl-smi">a</span>.<span class="pl-smi">direction</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">direction</span>;<span class="pl-smi">a</span>.<span class="pl-smi">directionBackwards</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">directionBackwards</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">Mesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">clone</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a);<span class="pl-k">return</span> a};<span class="pl-c1">THREE</span>.<span class="pl-en">Ribbon</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-smi">geometry</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">material</span><span class="pl-k">=</span>b};<span class="pl-c1">THREE</span>.<span class="pl-smi">Ribbon</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L261" class="blob-num js-line-number" data-line-number="261"></td>
        <td id="LC261" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Ribbon</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Ribbon</span>(<span class="pl-c1">this</span>.<span class="pl-smi">geometry</span>,<span class="pl-c1">this</span>.<span class="pl-smi">material</span>));<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">clone</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a);<span class="pl-k">return</span> a};<span class="pl-c1">THREE</span>.<span class="pl-en">LOD</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-smi">LODs</span><span class="pl-k">=</span>[]};<span class="pl-c1">THREE</span>.<span class="pl-c1">LOD</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-c1">LOD</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">addLevel</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(b),c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">LODs</span>.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;!</span>(b<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">LODs</span>[c].<span class="pl-smi">visibleAtDistance</span>);c<span class="pl-k">++</span>);<span class="pl-c1">this</span>.<span class="pl-smi">LODs</span>.<span class="pl-c1">splice</span>(c,<span class="pl-c1">0</span>,{visibleAtDistance<span class="pl-k">:</span>b,object3D<span class="pl-k">:</span>a});<span class="pl-c1">this</span>.<span class="pl-c1">add</span>(a)};</td>
      </tr>
      <tr>
        <td id="L262" class="blob-num js-line-number" data-line-number="262"></td>
        <td id="LC262" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-c1">LOD</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">update</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(<span class="pl-c1">1</span><span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">LODs</span>.<span class="pl-c1">length</span>){<span class="pl-smi">a</span>.<span class="pl-smi">matrixWorldInverse</span>.<span class="pl-en">getInverse</span>(<span class="pl-smi">a</span>.<span class="pl-smi">matrixWorld</span>);a<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">matrixWorldInverse</span>;a<span class="pl-k">=</span><span class="pl-k">-</span>(<span class="pl-smi">a</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">2</span>]<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">matrixWorld</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">12</span>]<span class="pl-k">+</span><span class="pl-smi">a</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">6</span>]<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">matrixWorld</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">13</span>]<span class="pl-k">+</span><span class="pl-smi">a</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">10</span>]<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">matrixWorld</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">14</span>]<span class="pl-k">+</span><span class="pl-smi">a</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">14</span>]);<span class="pl-c1">this</span>.<span class="pl-smi">LODs</span>[<span class="pl-c1">0</span>].<span class="pl-smi">object3D</span>.<span class="pl-smi">visible</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">1</span>;b<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">LODs</span>.<span class="pl-c1">length</span>;b<span class="pl-k">++</span>)<span class="pl-k">if</span>(a<span class="pl-k">&gt;=</span><span class="pl-c1">this</span>.<span class="pl-smi">LODs</span>[b].<span class="pl-smi">visibleAtDistance</span>)<span class="pl-c1">this</span>.<span class="pl-smi">LODs</span>[b<span class="pl-k">-</span><span class="pl-c1">1</span>].<span class="pl-smi">object3D</span>.<span class="pl-smi">visible</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-c1">this</span>.<span class="pl-smi">LODs</span>[b].<span class="pl-smi">object3D</span>.<span class="pl-smi">visible</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-k">else</span> <span class="pl-k">break</span>;<span class="pl-k">for</span>(;b<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">LODs</span>.<span class="pl-c1">length</span>;b<span class="pl-k">++</span>)<span class="pl-c1">this</span>.<span class="pl-smi">LODs</span>[b].<span class="pl-smi">object3D</span>.<span class="pl-smi">visible</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L263" class="blob-num js-line-number" data-line-number="263"></td>
        <td id="LC263" class="blob-code blob-code-inner js-file-line"><span class="pl-k">!</span><span class="pl-c1">1</span>}};<span class="pl-c1">THREE</span>.<span class="pl-c1">LOD</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};</td>
      </tr>
      <tr>
        <td id="L264" class="blob-num js-line-number" data-line-number="264"></td>
        <td id="LC264" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">Sprite</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-c1">color</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-c1">color</span><span class="pl-k">?</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-smi">a</span>.<span class="pl-c1">color</span>)<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">16777215</span>);<span class="pl-c1">this</span>.<span class="pl-smi">map</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">map</span><span class="pl-k">?</span><span class="pl-smi">a</span>.<span class="pl-smi">map</span><span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Texture</span>;<span class="pl-c1">this</span>.<span class="pl-smi">blending</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">blending</span><span class="pl-k">?</span><span class="pl-smi">a</span>.<span class="pl-smi">blending</span><span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">NormalBlending</span>;<span class="pl-c1">this</span>.<span class="pl-smi">blendSrc</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">blendSrc</span><span class="pl-k">?</span><span class="pl-smi">a</span>.<span class="pl-smi">blendSrc</span><span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">SrcAlphaFactor</span>;<span class="pl-c1">this</span>.<span class="pl-smi">blendDst</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">blendDst</span><span class="pl-k">?</span><span class="pl-smi">a</span>.<span class="pl-smi">blendDst</span><span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">OneMinusSrcAlphaFactor</span>;<span class="pl-c1">this</span>.<span class="pl-smi">blendEquation</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">blendEquation</span><span class="pl-k">?</span><span class="pl-smi">a</span>.<span class="pl-smi">blendEquation</span><span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">AddEquation</span>;<span class="pl-c1">this</span>.<span class="pl-smi">useScreenCoordinates</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">useScreenCoordinates</span><span class="pl-k">?</span></td>
      </tr>
      <tr>
        <td id="L265" class="blob-num js-line-number" data-line-number="265"></td>
        <td id="LC265" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">a</span>.<span class="pl-smi">useScreenCoordinates</span><span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">mergeWith3D</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">mergeWith3D</span><span class="pl-k">?</span><span class="pl-smi">a</span>.<span class="pl-smi">mergeWith3D</span><span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">this</span>.<span class="pl-smi">useScreenCoordinates</span>;<span class="pl-c1">this</span>.<span class="pl-smi">affectedByDistance</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">affectedByDistance</span><span class="pl-k">?</span><span class="pl-smi">a</span>.<span class="pl-smi">affectedByDistance</span><span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">this</span>.<span class="pl-smi">useScreenCoordinates</span>;<span class="pl-c1">this</span>.<span class="pl-smi">scaleByViewport</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">scaleByViewport</span><span class="pl-k">?</span><span class="pl-smi">a</span>.<span class="pl-smi">scaleByViewport</span><span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">this</span>.<span class="pl-smi">affectedByDistance</span>;<span class="pl-c1">this</span>.<span class="pl-smi">alignment</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">alignment</span> <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Vector2</span><span class="pl-k">?</span><span class="pl-smi">a</span>.<span class="pl-smi">alignment</span><span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">SpriteAlignment</span>.<span class="pl-smi">center</span>;<span class="pl-c1">this</span>.<span class="pl-smi">rotation3d</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">rotation</span>;<span class="pl-c1">this</span>.<span class="pl-smi">rotation</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">opacity</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">uvOffset</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>);<span class="pl-c1">this</span>.<span class="pl-smi">uvScale</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L266" class="blob-num js-line-number" data-line-number="266"></td>
        <td id="LC266" class="blob-code blob-code-inner js-file-line"><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(<span class="pl-c1">1</span>,<span class="pl-c1">1</span>)};<span class="pl-c1">THREE</span>.<span class="pl-smi">Sprite</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">Sprite</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">updateMatrix</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">matrix</span>.<span class="pl-en">setPosition</span>(<span class="pl-c1">this</span>.<span class="pl-smi">position</span>);<span class="pl-c1">this</span>.<span class="pl-smi">rotation3d</span>.<span class="pl-c1">set</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">this</span>.<span class="pl-smi">rotation</span>);<span class="pl-c1">this</span>.<span class="pl-smi">matrix</span>.<span class="pl-en">setRotationFromEuler</span>(<span class="pl-c1">this</span>.<span class="pl-smi">rotation3d</span>);<span class="pl-k">if</span>(<span class="pl-c1">1</span><span class="pl-k">!==</span><span class="pl-c1">this</span>.<span class="pl-smi">scale</span>.<span class="pl-c1">x</span><span class="pl-k">||</span><span class="pl-c1">1</span><span class="pl-k">!==</span><span class="pl-c1">this</span>.<span class="pl-smi">scale</span>.<span class="pl-c1">y</span>)<span class="pl-c1">this</span>.<span class="pl-smi">matrix</span>.<span class="pl-en">scale</span>(<span class="pl-c1">this</span>.<span class="pl-smi">scale</span>),<span class="pl-c1">this</span>.<span class="pl-smi">boundRadiusScale</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-c1">this</span>.<span class="pl-smi">scale</span>.<span class="pl-c1">x</span>,<span class="pl-c1">this</span>.<span class="pl-smi">scale</span>.<span class="pl-c1">y</span>);<span class="pl-c1">this</span>.<span class="pl-smi">matrixWorldNeedsUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L267" class="blob-num js-line-number" data-line-number="267"></td>
        <td id="LC267" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Sprite</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Sprite</span>({}));<span class="pl-smi">a</span>.<span class="pl-c1">color</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-c1">color</span>);<span class="pl-smi">a</span>.<span class="pl-smi">map</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">map</span>;<span class="pl-smi">a</span>.<span class="pl-smi">blending</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">blending</span>;<span class="pl-smi">a</span>.<span class="pl-smi">useScreenCoordinates</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">useScreenCoordinates</span>;<span class="pl-smi">a</span>.<span class="pl-smi">mergeWith3D</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">mergeWith3D</span>;<span class="pl-smi">a</span>.<span class="pl-smi">affectedByDistance</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">affectedByDistance</span>;<span class="pl-smi">a</span>.<span class="pl-smi">scaleByViewport</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">scaleByViewport</span>;<span class="pl-smi">a</span>.<span class="pl-smi">alignment</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">alignment</span>;<span class="pl-smi">a</span>.<span class="pl-smi">rotation3d</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">rotation3d</span>);<span class="pl-smi">a</span>.<span class="pl-smi">rotation</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">rotation</span>;<span class="pl-smi">a</span>.<span class="pl-smi">opacity</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">opacity</span>;<span class="pl-smi">a</span>.<span class="pl-smi">uvOffset</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">uvOffset</span>);<span class="pl-smi">a</span>.<span class="pl-smi">uvScale</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">uvScale</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">clone</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,</td>
      </tr>
      <tr>
        <td id="L268" class="blob-num js-line-number" data-line-number="268"></td>
        <td id="LC268" class="blob-code blob-code-inner js-file-line">a);<span class="pl-k">return</span> a};<span class="pl-c1">THREE</span>.<span class="pl-smi">SpriteAlignment</span><span class="pl-k">=</span>{};<span class="pl-c1">THREE</span>.<span class="pl-smi">SpriteAlignment</span>.<span class="pl-smi">topLeft</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">SpriteAlignment</span>.<span class="pl-smi">topCenter</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">SpriteAlignment</span>.<span class="pl-smi">topRight</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">SpriteAlignment</span>.<span class="pl-smi">centerLeft</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(<span class="pl-c1">1</span>,<span class="pl-c1">0</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">SpriteAlignment</span>.<span class="pl-smi">center</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">SpriteAlignment</span>.<span class="pl-smi">centerRight</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">SpriteAlignment</span>.<span class="pl-smi">bottomLeft</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(<span class="pl-c1">1</span>,<span class="pl-c1">1</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">SpriteAlignment</span>.<span class="pl-smi">bottomCenter</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L269" class="blob-num js-line-number" data-line-number="269"></td>
        <td id="LC269" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">SpriteAlignment</span>.<span class="pl-smi">bottomRight</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>);<span class="pl-c1">THREE</span>.<span class="pl-en">Scene</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-smi">overrideMaterial</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">fog</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">matrixAutoUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">__objects</span><span class="pl-k">=</span>[];<span class="pl-c1">this</span>.<span class="pl-smi">__lights</span><span class="pl-k">=</span>[];<span class="pl-c1">this</span>.<span class="pl-smi">__objectsAdded</span><span class="pl-k">=</span>[];<span class="pl-c1">this</span>.<span class="pl-smi">__objectsRemoved</span><span class="pl-k">=</span>[]};<span class="pl-c1">THREE</span>.<span class="pl-smi">Scene</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L270" class="blob-num js-line-number" data-line-number="270"></td>
        <td id="LC270" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Scene</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">__addObject</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Light</span>)<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-smi">__lights</span>.<span class="pl-c1">indexOf</span>(a)<span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">__lights</span>.<span class="pl-c1">push</span>(a),<span class="pl-smi">a</span>.<span class="pl-c1">target</span><span class="pl-k">&amp;&amp;</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">a</span>.<span class="pl-c1">target</span>.<span class="pl-c1">parent</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-c1">add</span>(<span class="pl-smi">a</span>.<span class="pl-c1">target</span>);<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-k">!</span>(a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Camera</span><span class="pl-k">||</span>a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Bone</span>)<span class="pl-k">&amp;&amp;</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-smi">__objects</span>.<span class="pl-c1">indexOf</span>(a)){<span class="pl-c1">this</span>.<span class="pl-smi">__objects</span>.<span class="pl-c1">push</span>(a);<span class="pl-c1">this</span>.<span class="pl-smi">__objectsAdded</span>.<span class="pl-c1">push</span>(a);<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">__objectsRemoved</span>.<span class="pl-c1">indexOf</span>(a);<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">!==</span>b<span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">__objectsRemoved</span>.<span class="pl-c1">splice</span>(b,<span class="pl-c1">1</span>)}<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-smi">children</span>.<span class="pl-c1">length</span>;b<span class="pl-k">++</span>)<span class="pl-c1">this</span>.<span class="pl-en">__addObject</span>(<span class="pl-smi">a</span>.<span class="pl-smi">children</span>[b])};</td>
      </tr>
      <tr>
        <td id="L271" class="blob-num js-line-number" data-line-number="271"></td>
        <td id="LC271" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Scene</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">__removeObject</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Light</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">__lights</span>.<span class="pl-c1">indexOf</span>(a);<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">!==</span>b<span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">__lights</span>.<span class="pl-c1">splice</span>(b,<span class="pl-c1">1</span>)}<span class="pl-k">else</span> a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Camera</span><span class="pl-k">||</span>(b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">__objects</span>.<span class="pl-c1">indexOf</span>(a),<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">!==</span>b<span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">this</span>.<span class="pl-smi">__objects</span>.<span class="pl-c1">splice</span>(b,<span class="pl-c1">1</span>),<span class="pl-c1">this</span>.<span class="pl-smi">__objectsRemoved</span>.<span class="pl-c1">push</span>(a),b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">__objectsAdded</span>.<span class="pl-c1">indexOf</span>(a),<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">!==</span>b<span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">__objectsAdded</span>.<span class="pl-c1">splice</span>(b,<span class="pl-c1">1</span>)));<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-smi">children</span>.<span class="pl-c1">length</span>;b<span class="pl-k">++</span>)<span class="pl-c1">this</span>.<span class="pl-en">__removeObject</span>(<span class="pl-smi">a</span>.<span class="pl-smi">children</span>[b])};</td>
      </tr>
      <tr>
        <td id="L272" class="blob-num js-line-number" data-line-number="272"></td>
        <td id="LC272" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">Fog</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">this</span>.<span class="pl-c1">color</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(a);<span class="pl-c1">this</span>.<span class="pl-smi">near</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">far</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">?</span>c<span class="pl-k">:</span><span class="pl-c1">1E3</span>};<span class="pl-c1">THREE</span>.<span class="pl-en">FogExp2</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-c1">color</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(a);<span class="pl-c1">this</span>.<span class="pl-smi">density</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-c1">2.5E-4</span>};</td>
      </tr>
      <tr>
        <td id="L273" class="blob-num js-line-number" data-line-number="273"></td>
        <td id="LC273" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">CanvasRenderer</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">function</span> <span class="pl-en">b</span>(<span class="pl-smi">a</span>){<span class="pl-c1">B</span><span class="pl-k">!==</span>a<span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-smi">q</span>.<span class="pl-smi">globalAlpha</span><span class="pl-k">=</span>a)}function c(a){u!==a&amp;&amp;(a===THREE.NormalBlending?q.globalCompositeOperation=&quot;source-over&quot;:a===THREE.AdditiveBlending?q.globalCompositeOperation=&quot;lighter&quot;:a===THREE.SubtractiveBlending&amp;&amp;(q.globalCompositeOperation=&quot;darker&quot;),u=a)}function d(a){s!==a&amp;&amp;(s=q.strokeStyle=a)}function e(a){z!==a&amp;&amp;(z=q.fillStyle=a)}console.log(&quot;THREE.CanvasRenderer&quot;,THREE.REVISION);var a=a||{},f=this,g,h,i,j=new THREE.Projector,l=void 0!==a.canvas?a.canvas:</td>
      </tr>
      <tr>
        <td id="L274" class="blob-num js-line-number" data-line-number="274"></td>
        <td id="LC274" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">document</span>.<span class="pl-c1">createElement</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>canvas<span class="pl-pds">&quot;</span></span>),m,n,p,o,q<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-c1">getContext</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>2d<span class="pl-pds">&quot;</span></span>),r<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">0</span>),t<span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-c1">1</span>,u<span class="pl-k">=</span><span class="pl-c1">0</span>,s<span class="pl-k">=</span><span class="pl-c1">null</span>,z<span class="pl-k">=</span><span class="pl-c1">null</span>,<span class="pl-c1">A</span><span class="pl-k">=</span><span class="pl-c1">null</span>,v<span class="pl-k">=</span><span class="pl-c1">null</span>,y<span class="pl-k">=</span><span class="pl-c1">null</span>,<span class="pl-c1">C</span>,<span class="pl-c1">G</span>,<span class="pl-c1">H</span>,<span class="pl-c1">J</span>,<span class="pl-c1">E</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.RenderableVertex</span>,<span class="pl-c1">M</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.RenderableVertex</span>,<span class="pl-c1">K</span>,<span class="pl-c1">F</span>,<span class="pl-c1">I</span>,<span class="pl-c1">L</span>,<span class="pl-c1">R</span>,$,<span class="pl-c1">Y</span>,<span class="pl-c1">N</span>,ea,<span class="pl-c1">Q</span>,qa,la,<span class="pl-c1">O</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>,fa<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>,<span class="pl-c1">W</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>,<span class="pl-c1">V</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>,ia<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>,<span class="pl-c1">Z</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>,ca<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>,Ga<span class="pl-k">=</span>{},Pa<span class="pl-k">=</span>{},Ia,Ua,na,Va,ib,Ra,eb,pb,Pb,db,$a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Rectangle</span>,Ja<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Rectangle</span>,wa<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Rectangle</span>,wb<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>,Da<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>,qb<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>,</td>
      </tr>
      <tr>
        <td id="L275" class="blob-num js-line-number" data-line-number="275"></td>
        <td id="LC275" class="blob-code blob-code-inner js-file-line">fb<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>,ra<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,gb,Za,Wa,Ea,xb,k,a<span class="pl-k">=</span><span class="pl-c1">16</span>;gb<span class="pl-k">=</span><span class="pl-c1">document</span>.<span class="pl-c1">createElement</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>canvas<span class="pl-pds">&quot;</span></span>);<span class="pl-smi">gb</span>.<span class="pl-c1">width</span><span class="pl-k">=</span><span class="pl-smi">gb</span>.<span class="pl-c1">height</span><span class="pl-k">=</span><span class="pl-c1">2</span>;Za<span class="pl-k">=</span><span class="pl-smi">gb</span>.<span class="pl-c1">getContext</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>2d<span class="pl-pds">&quot;</span></span>);<span class="pl-smi">Za</span>.<span class="pl-smi">fillStyle</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>rgba(0,0,0,1)<span class="pl-pds">&quot;</span></span>;<span class="pl-smi">Za</span>.<span class="pl-en">fillRect</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">2</span>,<span class="pl-c1">2</span>);Wa<span class="pl-k">=</span><span class="pl-smi">Za</span>.<span class="pl-en">getImageData</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">2</span>,<span class="pl-c1">2</span>);Ea<span class="pl-k">=</span><span class="pl-smi">Wa</span>.<span class="pl-c1">data</span>;xb<span class="pl-k">=</span><span class="pl-c1">document</span>.<span class="pl-c1">createElement</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>canvas<span class="pl-pds">&quot;</span></span>);<span class="pl-smi">xb</span>.<span class="pl-c1">width</span><span class="pl-k">=</span><span class="pl-smi">xb</span>.<span class="pl-c1">height</span><span class="pl-k">=</span>a;k<span class="pl-k">=</span><span class="pl-smi">xb</span>.<span class="pl-c1">getContext</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>2d<span class="pl-pds">&quot;</span></span>);<span class="pl-smi">k</span>.<span class="pl-en">translate</span>(<span class="pl-k">-</span>a<span class="pl-k">/</span><span class="pl-c1">2</span>,<span class="pl-k">-</span>a<span class="pl-k">/</span><span class="pl-c1">2</span>);<span class="pl-smi">k</span>.<span class="pl-en">scale</span>(a,a);a<span class="pl-k">--</span>;<span class="pl-c1">this</span>.<span class="pl-smi">domElement</span><span class="pl-k">=</span>l;<span class="pl-c1">this</span>.<span class="pl-smi">sortElements</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">sortObjects</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">autoClear</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">info</span><span class="pl-k">=</span>{render<span class="pl-k">:</span>{vertices<span class="pl-k">:</span><span class="pl-c1">0</span>,faces<span class="pl-k">:</span><span class="pl-c1">0</span>}};<span class="pl-c1">this</span>.<span class="pl-en">setSize</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){m<span class="pl-k">=</span>a;n<span class="pl-k">=</span>b;p<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(m<span class="pl-k">/</span></td>
      </tr>
      <tr>
        <td id="L276" class="blob-num js-line-number" data-line-number="276"></td>
        <td id="LC276" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">2</span>);o<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(n<span class="pl-k">/</span><span class="pl-c1">2</span>);<span class="pl-smi">l</span>.<span class="pl-c1">width</span><span class="pl-k">=</span>m;<span class="pl-smi">l</span>.<span class="pl-c1">height</span><span class="pl-k">=</span>n;<span class="pl-smi">$a</span>.<span class="pl-c1">set</span>(<span class="pl-k">-</span>p,<span class="pl-k">-</span>o,p,o);<span class="pl-smi">Ja</span>.<span class="pl-c1">set</span>(<span class="pl-k">-</span>p,<span class="pl-k">-</span>o,p,o);<span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-c1">1</span>;u<span class="pl-k">=</span><span class="pl-c1">0</span>;y<span class="pl-k">=</span>v<span class="pl-k">=</span><span class="pl-c1">A</span><span class="pl-k">=</span>z<span class="pl-k">=</span>s<span class="pl-k">=</span><span class="pl-c1">null</span>};<span class="pl-c1">this</span>.<span class="pl-en">setClearColor</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-smi">r</span>.<span class="pl-en">copy</span>(a);t<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-c1">1</span>;<span class="pl-smi">Ja</span>.<span class="pl-c1">set</span>(<span class="pl-k">-</span>p,<span class="pl-k">-</span>o,p,o)};<span class="pl-c1">this</span>.<span class="pl-en">setClearColorHex</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-smi">r</span>.<span class="pl-en">setHex</span>(a);t<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-c1">1</span>;<span class="pl-smi">Ja</span>.<span class="pl-c1">set</span>(<span class="pl-k">-</span>p,<span class="pl-k">-</span>o,p,o)};<span class="pl-c1">this</span>.<span class="pl-en">getMaxAnisotropy</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">0</span>};<span class="pl-c1">this</span>.<span class="pl-en">clear</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-smi">q</span>.<span class="pl-en">setTransform</span>(<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,p,o);<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">===</span><span class="pl-smi">Ja</span>.<span class="pl-en">isEmpty</span>()<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">Ja</span>.<span class="pl-en">minSelf</span>($a),<span class="pl-smi">Ja</span>.<span class="pl-en">inflate</span>(<span class="pl-c1">2</span>),<span class="pl-c1">1</span><span class="pl-k">&gt;</span>t<span class="pl-k">&amp;&amp;</span><span class="pl-smi">q</span>.<span class="pl-en">clearRect</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-smi">Ja</span>.<span class="pl-en">getX</span>()),<span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-smi">Ja</span>.<span class="pl-en">getY</span>()),<span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-smi">Ja</span>.<span class="pl-en">getWidth</span>()),<span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-smi">Ja</span>.<span class="pl-en">getHeight</span>())),</td>
      </tr>
      <tr>
        <td id="L277" class="blob-num js-line-number" data-line-number="277"></td>
        <td id="LC277" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span><span class="pl-k">&lt;</span>t<span class="pl-k">&amp;&amp;</span>(<span class="pl-en">c</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">NormalBlending</span>),<span class="pl-en">b</span>(<span class="pl-c1">1</span>),<span class="pl-en">e</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>rgba(<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-c1">255</span><span class="pl-k">*</span><span class="pl-smi">r</span>.<span class="pl-smi">r</span>)<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>,<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-c1">255</span><span class="pl-k">*</span><span class="pl-smi">r</span>.<span class="pl-smi">g</span>)<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>,<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-c1">255</span><span class="pl-k">*</span><span class="pl-smi">r</span>.<span class="pl-smi">b</span>)<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>,<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>t<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>)<span class="pl-pds">&quot;</span></span>),<span class="pl-smi">q</span>.<span class="pl-en">fillRect</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-smi">Ja</span>.<span class="pl-en">getX</span>()),<span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-smi">Ja</span>.<span class="pl-en">getY</span>()),<span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-smi">Ja</span>.<span class="pl-en">getWidth</span>()),<span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-smi">Ja</span>.<span class="pl-en">getHeight</span>()))),<span class="pl-smi">Ja</span>.<span class="pl-en">empty</span>())};<span class="pl-c1">this</span>.<span class="pl-en">render</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">l</span>){<span class="pl-k">function</span> <span class="pl-en">m</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">0</span>,e<span class="pl-k">=</span><span class="pl-smi">i</span>.<span class="pl-c1">length</span>;d<span class="pl-k">&lt;</span>e;d<span class="pl-k">++</span>){<span class="pl-k">var</span> f<span class="pl-k">=</span>i[d],g<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">color</span>;<span class="pl-k">if</span>(f <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">DirectionalLight</span>){<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">matrixWorld</span>.<span class="pl-en">getPosition</span>().<span class="pl-c1">normalize</span>(),k<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">dot</span>(h);<span class="pl-c1">0</span><span class="pl-k">&gt;=</span>k<span class="pl-k">||</span>(k<span class="pl-k">*=</span><span class="pl-smi">f</span>.<span class="pl-smi">intensity</span>,<span class="pl-smi">c</span>.<span class="pl-smi">r</span><span class="pl-k">+=</span><span class="pl-smi">g</span>.<span class="pl-smi">r</span><span class="pl-k">*</span>k,<span class="pl-smi">c</span>.<span class="pl-smi">g</span><span class="pl-k">+=</span><span class="pl-smi">g</span>.<span class="pl-smi">g</span><span class="pl-k">*</span>k,<span class="pl-smi">c</span>.<span class="pl-smi">b</span><span class="pl-k">+=</span><span class="pl-smi">g</span>.<span class="pl-smi">b</span><span class="pl-k">*</span>k)}<span class="pl-k">else</span> f <span class="pl-k">instanceof</span></td>
      </tr>
      <tr>
        <td id="L278" class="blob-num js-line-number" data-line-number="278"></td>
        <td id="LC278" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">PointLight</span><span class="pl-k">&amp;&amp;</span>(h<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">matrixWorld</span>.<span class="pl-en">getPosition</span>(),k<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">dot</span>(<span class="pl-smi">ra</span>.<span class="pl-c1">sub</span>(h,a).<span class="pl-c1">normalize</span>()),<span class="pl-c1">0</span><span class="pl-k">&gt;=</span>k<span class="pl-k">||</span>(k<span class="pl-k">*=</span><span class="pl-c1">0</span><span class="pl-k">==</span><span class="pl-smi">f</span>.<span class="pl-smi">distance</span><span class="pl-k">?</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1</span><span class="pl-k">-</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-smi">a</span>.<span class="pl-en">distanceTo</span>(h)<span class="pl-k">/</span><span class="pl-smi">f</span>.<span class="pl-smi">distance</span>,<span class="pl-c1">1</span>),<span class="pl-c1">0</span><span class="pl-k">!=</span>k<span class="pl-k">&amp;&amp;</span>(k<span class="pl-k">*=</span><span class="pl-smi">f</span>.<span class="pl-smi">intensity</span>,<span class="pl-smi">c</span>.<span class="pl-smi">r</span><span class="pl-k">+=</span><span class="pl-smi">g</span>.<span class="pl-smi">r</span><span class="pl-k">*</span>k,<span class="pl-smi">c</span>.<span class="pl-smi">g</span><span class="pl-k">+=</span><span class="pl-smi">g</span>.<span class="pl-smi">g</span><span class="pl-k">*</span>k,<span class="pl-smi">c</span>.<span class="pl-smi">b</span><span class="pl-k">+=</span><span class="pl-smi">g</span>.<span class="pl-smi">b</span><span class="pl-k">*</span>k)))}}function n(a,d,e,g,h,k,i,j){f.info.render.vertices+=3;f.info.render.faces++;b(j.opacity);c(j.blending);K=a.positionScreen.x;F=a.positionScreen.y;I=d.positionScreen.x;L=d.positionScreen.y;R=e.positionScreen.x;$=e.positionScreen.y;r(K,F,I,L,R,$);(j instanceof THREE.MeshLambertMaterial||j instanceof</td>
      </tr>
      <tr>
        <td id="L279" class="blob-num js-line-number" data-line-number="279"></td>
        <td id="LC279" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">MeshPhongMaterial</span>)<span class="pl-k">&amp;&amp;</span><span class="pl-c1">null</span><span class="pl-k">===</span><span class="pl-smi">j</span>.<span class="pl-smi">map</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">null</span><span class="pl-k">===</span><span class="pl-smi">j</span>.<span class="pl-smi">map</span><span class="pl-k">?</span>(<span class="pl-c1">Z</span>.<span class="pl-en">copy</span>(<span class="pl-smi">j</span>.<span class="pl-c1">color</span>),<span class="pl-smi">ca</span>.<span class="pl-en">copy</span>(<span class="pl-smi">j</span>.<span class="pl-smi">emissive</span>),<span class="pl-smi">j</span>.<span class="pl-smi">vertexColors</span><span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">FaceColors</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">Z</span>.<span class="pl-smi">r</span><span class="pl-k">*=</span><span class="pl-smi">i</span>.<span class="pl-c1">color</span>.<span class="pl-smi">r</span>,<span class="pl-c1">Z</span>.<span class="pl-smi">g</span><span class="pl-k">*=</span><span class="pl-smi">i</span>.<span class="pl-c1">color</span>.<span class="pl-smi">g</span>,<span class="pl-c1">Z</span>.<span class="pl-smi">b</span><span class="pl-k">*=</span><span class="pl-smi">i</span>.<span class="pl-c1">color</span>.<span class="pl-smi">b</span>),<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span>wb)<span class="pl-k">?</span><span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">===</span><span class="pl-smi">j</span>.<span class="pl-smi">wireframe</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">j</span>.<span class="pl-smi">shading</span><span class="pl-k">==</span><span class="pl-c1">THREE</span>.<span class="pl-smi">SmoothShading</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">3</span><span class="pl-k">==</span><span class="pl-smi">i</span>.<span class="pl-smi">vertexNormalsLength</span><span class="pl-k">?</span>(<span class="pl-smi">fa</span>.<span class="pl-smi">r</span><span class="pl-k">=</span><span class="pl-c1">W</span>.<span class="pl-smi">r</span><span class="pl-k">=</span><span class="pl-c1">V</span>.<span class="pl-smi">r</span><span class="pl-k">=</span><span class="pl-smi">Da</span>.<span class="pl-smi">r</span>,<span class="pl-smi">fa</span>.<span class="pl-smi">g</span><span class="pl-k">=</span><span class="pl-c1">W</span>.<span class="pl-smi">g</span><span class="pl-k">=</span><span class="pl-c1">V</span>.<span class="pl-smi">g</span><span class="pl-k">=</span><span class="pl-smi">Da</span>.<span class="pl-smi">g</span>,<span class="pl-smi">fa</span>.<span class="pl-smi">b</span><span class="pl-k">=</span><span class="pl-c1">W</span>.<span class="pl-smi">b</span><span class="pl-k">=</span><span class="pl-c1">V</span>.<span class="pl-smi">b</span><span class="pl-k">=</span><span class="pl-smi">Da</span>.<span class="pl-smi">b</span>,<span class="pl-en">m</span>(<span class="pl-smi">i</span>.<span class="pl-smi">v1</span>.<span class="pl-smi">positionWorld</span>,<span class="pl-smi">i</span>.<span class="pl-smi">vertexNormalsWorld</span>[<span class="pl-c1">0</span>],fa),<span class="pl-en">m</span>(<span class="pl-smi">i</span>.<span class="pl-smi">v2</span>.<span class="pl-smi">positionWorld</span>,<span class="pl-smi">i</span>.<span class="pl-smi">vertexNormalsWorld</span>[<span class="pl-c1">1</span>],<span class="pl-c1">W</span>),<span class="pl-en">m</span>(<span class="pl-smi">i</span>.<span class="pl-smi">v3</span>.<span class="pl-smi">positionWorld</span>,<span class="pl-smi">i</span>.<span class="pl-smi">vertexNormalsWorld</span>[<span class="pl-c1">2</span>],<span class="pl-c1">V</span>),<span class="pl-smi">fa</span>.<span class="pl-smi">r</span><span class="pl-k">=</span><span class="pl-smi">fa</span>.<span class="pl-smi">r</span><span class="pl-k">*</span><span class="pl-c1">Z</span>.<span class="pl-smi">r</span><span class="pl-k">+</span><span class="pl-smi">ca</span>.<span class="pl-smi">r</span>,<span class="pl-smi">fa</span>.<span class="pl-smi">g</span><span class="pl-k">=</span><span class="pl-smi">fa</span>.<span class="pl-smi">g</span><span class="pl-k">*</span><span class="pl-c1">Z</span>.<span class="pl-smi">g</span><span class="pl-k">+</span><span class="pl-smi">ca</span>.<span class="pl-smi">g</span>,<span class="pl-smi">fa</span>.<span class="pl-smi">b</span><span class="pl-k">=</span><span class="pl-smi">fa</span>.<span class="pl-smi">b</span><span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L280" class="blob-num js-line-number" data-line-number="280"></td>
        <td id="LC280" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">Z</span>.<span class="pl-smi">b</span><span class="pl-k">+</span><span class="pl-smi">ca</span>.<span class="pl-smi">b</span>,<span class="pl-c1">W</span>.<span class="pl-smi">r</span><span class="pl-k">=</span><span class="pl-c1">W</span>.<span class="pl-smi">r</span><span class="pl-k">*</span><span class="pl-c1">Z</span>.<span class="pl-smi">r</span><span class="pl-k">+</span><span class="pl-smi">ca</span>.<span class="pl-smi">r</span>,<span class="pl-c1">W</span>.<span class="pl-smi">g</span><span class="pl-k">=</span><span class="pl-c1">W</span>.<span class="pl-smi">g</span><span class="pl-k">*</span><span class="pl-c1">Z</span>.<span class="pl-smi">g</span><span class="pl-k">+</span><span class="pl-smi">ca</span>.<span class="pl-smi">g</span>,<span class="pl-c1">W</span>.<span class="pl-smi">b</span><span class="pl-k">=</span><span class="pl-c1">W</span>.<span class="pl-smi">b</span><span class="pl-k">*</span><span class="pl-c1">Z</span>.<span class="pl-smi">b</span><span class="pl-k">+</span><span class="pl-smi">ca</span>.<span class="pl-smi">b</span>,<span class="pl-c1">V</span>.<span class="pl-smi">r</span><span class="pl-k">=</span><span class="pl-c1">V</span>.<span class="pl-smi">r</span><span class="pl-k">*</span><span class="pl-c1">Z</span>.<span class="pl-smi">r</span><span class="pl-k">+</span><span class="pl-smi">ca</span>.<span class="pl-smi">r</span>,<span class="pl-c1">V</span>.<span class="pl-smi">g</span><span class="pl-k">=</span><span class="pl-c1">V</span>.<span class="pl-smi">g</span><span class="pl-k">*</span><span class="pl-c1">Z</span>.<span class="pl-smi">g</span><span class="pl-k">+</span><span class="pl-smi">ca</span>.<span class="pl-smi">g</span>,<span class="pl-c1">V</span>.<span class="pl-smi">b</span><span class="pl-k">=</span><span class="pl-c1">V</span>.<span class="pl-smi">b</span><span class="pl-k">*</span><span class="pl-c1">Z</span>.<span class="pl-smi">b</span><span class="pl-k">+</span><span class="pl-smi">ca</span>.<span class="pl-smi">b</span>,<span class="pl-smi">ia</span>.<span class="pl-smi">r</span><span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(<span class="pl-c1">W</span>.<span class="pl-smi">r</span><span class="pl-k">+</span><span class="pl-c1">V</span>.<span class="pl-smi">r</span>),<span class="pl-smi">ia</span>.<span class="pl-smi">g</span><span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(<span class="pl-c1">W</span>.<span class="pl-smi">g</span><span class="pl-k">+</span><span class="pl-c1">V</span>.<span class="pl-smi">g</span>),<span class="pl-smi">ia</span>.<span class="pl-smi">b</span><span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(<span class="pl-c1">W</span>.<span class="pl-smi">b</span><span class="pl-k">+</span><span class="pl-c1">V</span>.<span class="pl-smi">b</span>),na<span class="pl-k">=</span><span class="pl-en">Dc</span>(fa,<span class="pl-c1">W</span>,<span class="pl-c1">V</span>,ia),<span class="pl-en">gc</span>(<span class="pl-c1">K</span>,<span class="pl-c1">F</span>,<span class="pl-c1">I</span>,<span class="pl-c1">L</span>,<span class="pl-c1">R</span>,$,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,na))<span class="pl-k">:</span>(<span class="pl-c1">O</span>.<span class="pl-smi">r</span><span class="pl-k">=</span><span class="pl-smi">Da</span>.<span class="pl-smi">r</span>,<span class="pl-c1">O</span>.<span class="pl-smi">g</span><span class="pl-k">=</span><span class="pl-smi">Da</span>.<span class="pl-smi">g</span>,<span class="pl-c1">O</span>.<span class="pl-smi">b</span><span class="pl-k">=</span><span class="pl-smi">Da</span>.<span class="pl-smi">b</span>,<span class="pl-en">m</span>(<span class="pl-smi">i</span>.<span class="pl-smi">centroidWorld</span>,<span class="pl-smi">i</span>.<span class="pl-smi">normalWorld</span>,<span class="pl-c1">O</span>),<span class="pl-c1">O</span>.<span class="pl-smi">r</span><span class="pl-k">=</span><span class="pl-c1">O</span>.<span class="pl-smi">r</span><span class="pl-k">*</span><span class="pl-c1">Z</span>.<span class="pl-smi">r</span><span class="pl-k">+</span><span class="pl-smi">ca</span>.<span class="pl-smi">r</span>,<span class="pl-c1">O</span>.<span class="pl-smi">g</span><span class="pl-k">=</span><span class="pl-c1">O</span>.<span class="pl-smi">g</span><span class="pl-k">*</span><span class="pl-c1">Z</span>.<span class="pl-smi">g</span><span class="pl-k">+</span><span class="pl-smi">ca</span>.<span class="pl-smi">g</span>,<span class="pl-c1">O</span>.<span class="pl-smi">b</span><span class="pl-k">=</span><span class="pl-c1">O</span>.<span class="pl-smi">b</span><span class="pl-k">*</span><span class="pl-c1">Z</span>.<span class="pl-smi">b</span><span class="pl-k">+</span><span class="pl-smi">ca</span>.<span class="pl-smi">b</span>,<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">j</span>.<span class="pl-smi">wireframe</span><span class="pl-k">?</span><span class="pl-en">t</span>(<span class="pl-c1">O</span>,<span class="pl-smi">j</span>.<span class="pl-smi">wireframeLinewidth</span>,<span class="pl-smi">j</span>.<span class="pl-smi">wireframeLinecap</span>,<span class="pl-smi">j</span>.<span class="pl-smi">wireframeLinejoin</span>)<span class="pl-k">:</span><span class="pl-en">u</span>(<span class="pl-c1">O</span>))<span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">j</span>.<span class="pl-smi">wireframe</span><span class="pl-k">?</span><span class="pl-en">t</span>(<span class="pl-smi">j</span>.<span class="pl-c1">color</span>,<span class="pl-smi">j</span>.<span class="pl-smi">wireframeLinewidth</span>,<span class="pl-smi">j</span>.<span class="pl-smi">wireframeLinecap</span>,<span class="pl-smi">j</span>.<span class="pl-smi">wireframeLinejoin</span>)<span class="pl-k">:</span></td>
      </tr>
      <tr>
        <td id="L281" class="blob-num js-line-number" data-line-number="281"></td>
        <td id="LC281" class="blob-code blob-code-inner js-file-line"><span class="pl-en">u</span>(<span class="pl-smi">j</span>.<span class="pl-c1">color</span>)<span class="pl-k">:</span>j <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">MeshBasicMaterial</span><span class="pl-k">||</span>j <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">MeshLambertMaterial</span><span class="pl-k">||</span>j <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">MeshPhongMaterial</span><span class="pl-k">?</span><span class="pl-c1">null</span><span class="pl-k">!==</span><span class="pl-smi">j</span>.<span class="pl-smi">map</span><span class="pl-k">?</span><span class="pl-smi">j</span>.<span class="pl-smi">map</span>.<span class="pl-smi">mapping</span> <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">UVMapping</span><span class="pl-k">&amp;&amp;</span>(Va<span class="pl-k">=</span><span class="pl-smi">i</span>.<span class="pl-smi">uvs</span>[<span class="pl-c1">0</span>],<span class="pl-en">Ba</span>(<span class="pl-c1">K</span>,<span class="pl-c1">F</span>,<span class="pl-c1">I</span>,<span class="pl-c1">L</span>,<span class="pl-c1">R</span>,$,Va[g].<span class="pl-smi">u</span>,Va[g].<span class="pl-smi">v</span>,Va[h].<span class="pl-smi">u</span>,Va[h].<span class="pl-smi">v</span>,Va[k].<span class="pl-smi">u</span>,Va[k].<span class="pl-smi">v</span>,<span class="pl-smi">j</span>.<span class="pl-smi">map</span>))<span class="pl-k">:</span><span class="pl-c1">null</span><span class="pl-k">!==</span><span class="pl-smi">j</span>.<span class="pl-smi">envMap</span><span class="pl-k">?</span><span class="pl-smi">j</span>.<span class="pl-smi">envMap</span>.<span class="pl-smi">mapping</span> <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">SphericalReflectionMapping</span><span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">matrixWorldInverse</span>,<span class="pl-smi">ra</span>.<span class="pl-en">copy</span>(<span class="pl-smi">i</span>.<span class="pl-smi">vertexNormalsWorld</span>[g]),ib<span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(<span class="pl-smi">ra</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">0</span>]<span class="pl-k">+</span><span class="pl-smi">ra</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">4</span>]<span class="pl-k">+</span><span class="pl-smi">ra</span>.<span class="pl-c1">z</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">8</span>])<span class="pl-k">+</span><span class="pl-c1">0.5</span>,Ra<span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(<span class="pl-smi">ra</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">1</span>]<span class="pl-k">+</span><span class="pl-smi">ra</span>.<span class="pl-c1">y</span><span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L282" class="blob-num js-line-number" data-line-number="282"></td>
        <td id="LC282" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">a</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">5</span>]<span class="pl-k">+</span><span class="pl-smi">ra</span>.<span class="pl-c1">z</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">9</span>])<span class="pl-k">+</span><span class="pl-c1">0.5</span>,<span class="pl-smi">ra</span>.<span class="pl-en">copy</span>(<span class="pl-smi">i</span>.<span class="pl-smi">vertexNormalsWorld</span>[h]),eb<span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(<span class="pl-smi">ra</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">0</span>]<span class="pl-k">+</span><span class="pl-smi">ra</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">4</span>]<span class="pl-k">+</span><span class="pl-smi">ra</span>.<span class="pl-c1">z</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">8</span>])<span class="pl-k">+</span><span class="pl-c1">0.5</span>,pb<span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(<span class="pl-smi">ra</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">1</span>]<span class="pl-k">+</span><span class="pl-smi">ra</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">5</span>]<span class="pl-k">+</span><span class="pl-smi">ra</span>.<span class="pl-c1">z</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">9</span>])<span class="pl-k">+</span><span class="pl-c1">0.5</span>,<span class="pl-smi">ra</span>.<span class="pl-en">copy</span>(<span class="pl-smi">i</span>.<span class="pl-smi">vertexNormalsWorld</span>[k]),Pb<span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(<span class="pl-smi">ra</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">0</span>]<span class="pl-k">+</span><span class="pl-smi">ra</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">4</span>]<span class="pl-k">+</span><span class="pl-smi">ra</span>.<span class="pl-c1">z</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">8</span>])<span class="pl-k">+</span><span class="pl-c1">0.5</span>,db<span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(<span class="pl-smi">ra</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">1</span>]<span class="pl-k">+</span><span class="pl-smi">ra</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">5</span>]<span class="pl-k">+</span><span class="pl-smi">ra</span>.<span class="pl-c1">z</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">9</span>])<span class="pl-k">+</span><span class="pl-c1">0.5</span>,<span class="pl-en">Ba</span>(<span class="pl-c1">K</span>,<span class="pl-c1">F</span>,<span class="pl-c1">I</span>,<span class="pl-c1">L</span>,<span class="pl-c1">R</span>,$,ib,Ra,eb,pb,Pb,db,<span class="pl-smi">j</span>.<span class="pl-smi">envMap</span>))<span class="pl-k">:</span>(<span class="pl-c1">O</span>.<span class="pl-en">copy</span>(<span class="pl-smi">j</span>.<span class="pl-c1">color</span>),<span class="pl-smi">j</span>.<span class="pl-smi">vertexColors</span><span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">FaceColors</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">O</span>.<span class="pl-smi">r</span><span class="pl-k">*=</span><span class="pl-smi">i</span>.<span class="pl-c1">color</span>.<span class="pl-smi">r</span>,<span class="pl-c1">O</span>.<span class="pl-smi">g</span><span class="pl-k">*=</span></td>
      </tr>
      <tr>
        <td id="L283" class="blob-num js-line-number" data-line-number="283"></td>
        <td id="LC283" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">i</span>.<span class="pl-c1">color</span>.<span class="pl-smi">g</span>,<span class="pl-c1">O</span>.<span class="pl-smi">b</span><span class="pl-k">*=</span><span class="pl-smi">i</span>.<span class="pl-c1">color</span>.<span class="pl-smi">b</span>),<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">j</span>.<span class="pl-smi">wireframe</span><span class="pl-k">?</span><span class="pl-en">t</span>(<span class="pl-c1">O</span>,<span class="pl-smi">j</span>.<span class="pl-smi">wireframeLinewidth</span>,<span class="pl-smi">j</span>.<span class="pl-smi">wireframeLinecap</span>,<span class="pl-smi">j</span>.<span class="pl-smi">wireframeLinejoin</span>)<span class="pl-k">:</span><span class="pl-en">u</span>(<span class="pl-c1">O</span>))<span class="pl-k">:</span>j <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">MeshDepthMaterial</span><span class="pl-k">?</span>(Ia<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">near</span>,Ua<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">far</span>,<span class="pl-smi">fa</span>.<span class="pl-smi">r</span><span class="pl-k">=</span><span class="pl-smi">fa</span>.<span class="pl-smi">g</span><span class="pl-k">=</span><span class="pl-smi">fa</span>.<span class="pl-smi">b</span><span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">-</span><span class="pl-en">tb</span>(<span class="pl-smi">a</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">z</span>,Ia,Ua),<span class="pl-c1">W</span>.<span class="pl-smi">r</span><span class="pl-k">=</span><span class="pl-c1">W</span>.<span class="pl-smi">g</span><span class="pl-k">=</span><span class="pl-c1">W</span>.<span class="pl-smi">b</span><span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">-</span><span class="pl-en">tb</span>(<span class="pl-smi">d</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">z</span>,Ia,Ua),<span class="pl-c1">V</span>.<span class="pl-smi">r</span><span class="pl-k">=</span><span class="pl-c1">V</span>.<span class="pl-smi">g</span><span class="pl-k">=</span><span class="pl-c1">V</span>.<span class="pl-smi">b</span><span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">-</span><span class="pl-en">tb</span>(<span class="pl-smi">e</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">z</span>,Ia,Ua),<span class="pl-smi">ia</span>.<span class="pl-smi">r</span><span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(<span class="pl-c1">W</span>.<span class="pl-smi">r</span><span class="pl-k">+</span><span class="pl-c1">V</span>.<span class="pl-smi">r</span>),<span class="pl-smi">ia</span>.<span class="pl-smi">g</span><span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(<span class="pl-c1">W</span>.<span class="pl-smi">g</span><span class="pl-k">+</span><span class="pl-c1">V</span>.<span class="pl-smi">g</span>),<span class="pl-smi">ia</span>.<span class="pl-smi">b</span><span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(<span class="pl-c1">W</span>.<span class="pl-smi">b</span><span class="pl-k">+</span><span class="pl-c1">V</span>.<span class="pl-smi">b</span>),na<span class="pl-k">=</span><span class="pl-en">Dc</span>(fa,<span class="pl-c1">W</span>,<span class="pl-c1">V</span>,ia),<span class="pl-en">gc</span>(<span class="pl-c1">K</span>,<span class="pl-c1">F</span>,<span class="pl-c1">I</span>,<span class="pl-c1">L</span>,<span class="pl-c1">R</span>,$,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,na))<span class="pl-k">:</span>j <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">MeshNormalMaterial</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">O</span>.<span class="pl-smi">r</span><span class="pl-k">=</span><span class="pl-en">jc</span>(<span class="pl-smi">i</span>.<span class="pl-smi">normalWorld</span>.<span class="pl-c1">x</span>),<span class="pl-c1">O</span>.<span class="pl-smi">g</span><span class="pl-k">=</span><span class="pl-en">jc</span>(<span class="pl-smi">i</span>.<span class="pl-smi">normalWorld</span>.<span class="pl-c1">y</span>),<span class="pl-c1">O</span>.<span class="pl-smi">b</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L284" class="blob-num js-line-number" data-line-number="284"></td>
        <td id="LC284" class="blob-code blob-code-inner js-file-line"><span class="pl-en">jc</span>(<span class="pl-smi">i</span>.<span class="pl-smi">normalWorld</span>.<span class="pl-c1">z</span>),<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">j</span>.<span class="pl-smi">wireframe</span><span class="pl-k">?</span><span class="pl-en">t</span>(<span class="pl-c1">O</span>,<span class="pl-smi">j</span>.<span class="pl-smi">wireframeLinewidth</span>,<span class="pl-smi">j</span>.<span class="pl-smi">wireframeLinecap</span>,<span class="pl-smi">j</span>.<span class="pl-smi">wireframeLinejoin</span>)<span class="pl-k">:</span><span class="pl-en">u</span>(<span class="pl-c1">O</span>))}function r(a,b,c,d,e,f){q.beginPath();q.moveTo(a,b);q.lineTo(c,d);q.lineTo(e,f);q.closePath()}function s(a,b,c,d,e,f,g,h){q.beginPath();q.moveTo(a,b);q.lineTo(c,d);q.lineTo(e,f);q.lineTo(g,h);q.closePath()}function t(a,b,c,e){A!==b&amp;&amp;(A=q.lineWidth=b);v!==c&amp;&amp;(v=q.lineCap=c);y!==e&amp;&amp;(y=q.lineJoin=e);d(a.getContextStyle());q.stroke();wa.inflate(2*b)}function u(a){e(a.getContextStyle());q.fill()}</td>
      </tr>
      <tr>
        <td id="L285" class="blob-num js-line-number" data-line-number="285"></td>
        <td id="LC285" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">Ba</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">f</span>,<span class="pl-smi">g</span>,<span class="pl-smi">h</span>,<span class="pl-smi">k</span>,<span class="pl-smi">i</span>,<span class="pl-smi">j</span>,<span class="pl-smi">l</span>,<span class="pl-smi">m</span>,<span class="pl-smi">n</span>){<span class="pl-k">if</span>(<span class="pl-k">!</span>(n <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">DataTexture</span><span class="pl-k">||</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">n</span>.<span class="pl-smi">image</span><span class="pl-k">||</span><span class="pl-c1">0</span><span class="pl-k">==</span><span class="pl-smi">n</span>.<span class="pl-smi">image</span>.<span class="pl-c1">width</span>)){<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">n</span>.<span class="pl-smi">needsUpdate</span>){<span class="pl-k">var</span> Ba<span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-smi">wrapS</span><span class="pl-k">==</span><span class="pl-c1">THREE</span>.<span class="pl-smi">RepeatWrapping</span>,o<span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-smi">wrapT</span><span class="pl-k">==</span><span class="pl-c1">THREE</span>.<span class="pl-smi">RepeatWrapping</span>;Ga[<span class="pl-smi">n</span>.<span class="pl-c1">id</span>]<span class="pl-k">=</span><span class="pl-smi">q</span>.<span class="pl-en">createPattern</span>(<span class="pl-smi">n</span>.<span class="pl-smi">image</span>,<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span>Ba<span class="pl-k">&amp;&amp;!</span><span class="pl-c1">0</span><span class="pl-k">===</span>o<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>repeat<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span>Ba<span class="pl-k">&amp;&amp;!</span><span class="pl-c1">1</span><span class="pl-k">===</span>o<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>repeat-x<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">===</span>Ba<span class="pl-k">&amp;&amp;!</span><span class="pl-c1">0</span><span class="pl-k">===</span>o<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>repeat-y<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>no-repeat<span class="pl-pds">&quot;</span></span>);<span class="pl-smi">n</span>.<span class="pl-smi">needsUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>}<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>Ga[<span class="pl-smi">n</span>.<span class="pl-c1">id</span>]<span class="pl-k">?</span><span class="pl-en">e</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>rgba(0,0,0,1)<span class="pl-pds">&quot;</span></span>)<span class="pl-k">:</span><span class="pl-en">e</span>(Ga[<span class="pl-smi">n</span>.<span class="pl-c1">id</span>]);<span class="pl-k">var</span> Ba<span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-smi">offset</span>.<span class="pl-c1">x</span><span class="pl-k">/</span><span class="pl-smi">n</span>.<span class="pl-smi">repeat</span>.<span class="pl-c1">x</span>,o<span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-smi">offset</span>.<span class="pl-c1">y</span><span class="pl-k">/</span><span class="pl-smi">n</span>.<span class="pl-smi">repeat</span>.<span class="pl-c1">y</span>,p<span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-smi">image</span>.<span class="pl-c1">width</span><span class="pl-k">*</span><span class="pl-smi">n</span>.<span class="pl-smi">repeat</span>.<span class="pl-c1">x</span>,tb<span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-smi">image</span>.<span class="pl-c1">height</span><span class="pl-k">*</span><span class="pl-smi">n</span>.<span class="pl-smi">repeat</span>.<span class="pl-c1">y</span>,</td>
      </tr>
      <tr>
        <td id="L286" class="blob-num js-line-number" data-line-number="286"></td>
        <td id="LC286" class="blob-code blob-code-inner js-file-line">h<span class="pl-k">=</span>(h<span class="pl-k">+</span>Ba)<span class="pl-k">*</span>p,k<span class="pl-k">=</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>k<span class="pl-k">+</span>o)<span class="pl-k">*</span>tb,c<span class="pl-k">=</span>c<span class="pl-k">-</span>a,d<span class="pl-k">=</span>d<span class="pl-k">-</span>b,f<span class="pl-k">=</span>f<span class="pl-k">-</span>a,g<span class="pl-k">=</span>g<span class="pl-k">-</span>b,i<span class="pl-k">=</span>(i<span class="pl-k">+</span>Ba)<span class="pl-k">*</span>p<span class="pl-k">-</span>h,j<span class="pl-k">=</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>j<span class="pl-k">+</span>o)<span class="pl-k">*</span>tb<span class="pl-k">-</span>k,l<span class="pl-k">=</span>(l<span class="pl-k">+</span>Ba)<span class="pl-k">*</span>p<span class="pl-k">-</span>h,m<span class="pl-k">=</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>m<span class="pl-k">+</span>o)<span class="pl-k">*</span>tb<span class="pl-k">-</span>k,Ba<span class="pl-k">=</span>i<span class="pl-k">*</span>m<span class="pl-k">-</span>l<span class="pl-k">*</span>j;<span class="pl-c1">0</span><span class="pl-k">===</span>Ba<span class="pl-k">?</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>Pa[<span class="pl-smi">n</span>.<span class="pl-c1">id</span>]<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-c1">document</span>.<span class="pl-c1">createElement</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>canvas<span class="pl-pds">&quot;</span></span>),<span class="pl-smi">b</span>.<span class="pl-c1">width</span><span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-smi">image</span>.<span class="pl-c1">width</span>,<span class="pl-smi">b</span>.<span class="pl-c1">height</span><span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-smi">image</span>.<span class="pl-c1">height</span>,b<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">getContext</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>2d<span class="pl-pds">&quot;</span></span>),<span class="pl-smi">b</span>.<span class="pl-en">drawImage</span>(<span class="pl-smi">n</span>.<span class="pl-smi">image</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>),Pa[<span class="pl-smi">n</span>.<span class="pl-c1">id</span>]<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">getImageData</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-smi">n</span>.<span class="pl-smi">image</span>.<span class="pl-c1">width</span>,<span class="pl-smi">n</span>.<span class="pl-smi">image</span>.<span class="pl-c1">height</span>).<span class="pl-c1">data</span>),b<span class="pl-k">=</span>Pa[<span class="pl-smi">n</span>.<span class="pl-c1">id</span>],h<span class="pl-k">=</span><span class="pl-c1">4</span><span class="pl-k">*</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(h)<span class="pl-k">+</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(k)<span class="pl-k">*</span><span class="pl-smi">n</span>.<span class="pl-smi">image</span>.<span class="pl-c1">width</span>),<span class="pl-c1">O</span>.<span class="pl-en">setRGB</span>(b[h]<span class="pl-k">/</span><span class="pl-c1">255</span>,b[h<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">/</span><span class="pl-c1">255</span>,b[h<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">/</span><span class="pl-c1">255</span>),<span class="pl-en">u</span>(<span class="pl-c1">O</span>))<span class="pl-k">:</span>(Ba<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>Ba,n<span class="pl-k">=</span>(m<span class="pl-k">*</span>c<span class="pl-k">-</span>j<span class="pl-k">*</span>f)<span class="pl-k">*</span>Ba,j<span class="pl-k">=</span>(m<span class="pl-k">*</span>d<span class="pl-k">-</span>j<span class="pl-k">*</span>g)<span class="pl-k">*</span>Ba,c<span class="pl-k">=</span>(i<span class="pl-k">*</span>f<span class="pl-k">-</span>l<span class="pl-k">*</span>c)<span class="pl-k">*</span>Ba,d<span class="pl-k">=</span>(i<span class="pl-k">*</span>g<span class="pl-k">-</span></td>
      </tr>
      <tr>
        <td id="L287" class="blob-num js-line-number" data-line-number="287"></td>
        <td id="LC287" class="blob-code blob-code-inner js-file-line">l<span class="pl-k">*</span>d)<span class="pl-k">*</span>Ba,a<span class="pl-k">=</span>a<span class="pl-k">-</span>n<span class="pl-k">*</span>h<span class="pl-k">-</span>c<span class="pl-k">*</span>k,h<span class="pl-k">=</span>b<span class="pl-k">-</span>j<span class="pl-k">*</span>h<span class="pl-k">-</span>d<span class="pl-k">*</span>k,<span class="pl-smi">q</span>.<span class="pl-en">save</span>(),<span class="pl-smi">q</span>.<span class="pl-en">transform</span>(n,j,c,d,a,h),<span class="pl-smi">q</span>.<span class="pl-en">fill</span>(),<span class="pl-smi">q</span>.<span class="pl-en">restore</span>())}}function gc(a,b,c,d,e,f,g,h,k,i,j,l,n){var m,Ba;m=n.width-1;Ba=n.height-1;g*=m;h*=Ba;c-=a;d-=b;e-=a;f-=b;k=k*m-g;i=i*Ba-h;j=j*m-g;l=l*Ba-h;Ba=1/(k*l-j*i);m=(l*c-i*e)*Ba;i=(l*d-i*f)*Ba;c=(k*e-j*c)*Ba;d=(k*f-j*d)*Ba;a=a-m*g-c*h;b=b-i*g-d*h;q.save();q.transform(m,i,c,d,a,b);q.clip();q.drawImage(n,0,0);q.restore()}function Dc(a,b,c,d){Ea[0]=255*a.r|0;Ea[1]=255*a.g|0;Ea[2]=255*a.b|0;Ea[4]=255*b.r|0;Ea[5]=255*b.g|0;</td>
      </tr>
      <tr>
        <td id="L288" class="blob-num js-line-number" data-line-number="288"></td>
        <td id="LC288" class="blob-code blob-code-inner js-file-line">Ea[<span class="pl-c1">6</span>]<span class="pl-k">=</span><span class="pl-c1">255</span><span class="pl-k">*</span><span class="pl-smi">b</span>.<span class="pl-smi">b</span><span class="pl-k">|</span><span class="pl-c1">0</span>;Ea[<span class="pl-c1">8</span>]<span class="pl-k">=</span><span class="pl-c1">255</span><span class="pl-k">*</span><span class="pl-smi">c</span>.<span class="pl-smi">r</span><span class="pl-k">|</span><span class="pl-c1">0</span>;Ea[<span class="pl-c1">9</span>]<span class="pl-k">=</span><span class="pl-c1">255</span><span class="pl-k">*</span><span class="pl-smi">c</span>.<span class="pl-smi">g</span><span class="pl-k">|</span><span class="pl-c1">0</span>;Ea[<span class="pl-c1">10</span>]<span class="pl-k">=</span><span class="pl-c1">255</span><span class="pl-k">*</span><span class="pl-smi">c</span>.<span class="pl-smi">b</span><span class="pl-k">|</span><span class="pl-c1">0</span>;Ea[<span class="pl-c1">12</span>]<span class="pl-k">=</span><span class="pl-c1">255</span><span class="pl-k">*</span><span class="pl-smi">d</span>.<span class="pl-smi">r</span><span class="pl-k">|</span><span class="pl-c1">0</span>;Ea[<span class="pl-c1">13</span>]<span class="pl-k">=</span><span class="pl-c1">255</span><span class="pl-k">*</span><span class="pl-smi">d</span>.<span class="pl-smi">g</span><span class="pl-k">|</span><span class="pl-c1">0</span>;Ea[<span class="pl-c1">14</span>]<span class="pl-k">=</span><span class="pl-c1">255</span><span class="pl-k">*</span><span class="pl-smi">d</span>.<span class="pl-smi">b</span><span class="pl-k">|</span><span class="pl-c1">0</span>;<span class="pl-smi">Za</span>.<span class="pl-en">putImageData</span>(Wa,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>);<span class="pl-smi">k</span>.<span class="pl-en">drawImage</span>(gb,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>);<span class="pl-k">return</span> xb}function tb(a,b,c){a=(a-b)/(c-b);return a*a*(3-2*a)}function jc(a){a=0.5*(a+1);return 0&gt;a?0:1&lt;a?1:a}function Wb(a,b){var c=b.x-a.x,d=b.y-a.y,e=c*c+d*d;0!==e&amp;&amp;(e=1/Math.sqrt(e),c*=e,d*=e,b.x+=c,b.y+=d,a.x-=c,a.y-=d)}if(!1===l instanceof THREE.Camera)console.error(&quot;THREE.CanvasRenderer.render: camera is not an instance of THREE.Camera.&quot;);</td>
      </tr>
      <tr>
        <td id="L289" class="blob-num js-line-number" data-line-number="289"></td>
        <td id="LC289" class="blob-code blob-code-inner js-file-line"><span class="pl-k">else</span>{<span class="pl-k">var</span> <span class="pl-c1">B</span>,Fc,ja,aa;<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-smi">autoClear</span><span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-c1">clear</span>()<span class="pl-k">:</span><span class="pl-smi">q</span>.<span class="pl-en">setTransform</span>(<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,p,o);<span class="pl-smi">f</span>.<span class="pl-smi">info</span>.<span class="pl-smi">render</span>.<span class="pl-smi">vertices</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-smi">f</span>.<span class="pl-smi">info</span>.<span class="pl-smi">render</span>.<span class="pl-smi">faces</span><span class="pl-k">=</span><span class="pl-c1">0</span>;g<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-en">projectScene</span>(a,l,<span class="pl-c1">this</span>.<span class="pl-smi">sortObjects</span>,<span class="pl-c1">this</span>.<span class="pl-smi">sortElements</span>);h<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-c1">elements</span>;i<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">lights</span>;wb<span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-smi">i</span>.<span class="pl-c1">length</span>;<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span>wb){<span class="pl-smi">Da</span>.<span class="pl-en">setRGB</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>);<span class="pl-smi">qb</span>.<span class="pl-en">setRGB</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>);<span class="pl-smi">fb</span>.<span class="pl-en">setRGB</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>);<span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(Fc<span class="pl-k">=</span><span class="pl-smi">i</span>.<span class="pl-c1">length</span>;<span class="pl-c1">B</span><span class="pl-k">&lt;</span>Fc;<span class="pl-c1">B</span><span class="pl-k">++</span>){aa<span class="pl-k">=</span>i[<span class="pl-c1">B</span>];<span class="pl-k">var</span> z<span class="pl-k">=</span><span class="pl-smi">aa</span>.<span class="pl-c1">color</span>;aa <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">AmbientLight</span><span class="pl-k">?</span>(<span class="pl-smi">Da</span>.<span class="pl-smi">r</span><span class="pl-k">+=</span><span class="pl-smi">z</span>.<span class="pl-smi">r</span>,<span class="pl-smi">Da</span>.<span class="pl-smi">g</span><span class="pl-k">+=</span><span class="pl-smi">z</span>.<span class="pl-smi">g</span>,<span class="pl-smi">Da</span>.<span class="pl-smi">b</span><span class="pl-k">+=</span><span class="pl-smi">z</span>.<span class="pl-smi">b</span>)<span class="pl-k">:</span>aa <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">DirectionalLight</span><span class="pl-k">?</span>(<span class="pl-smi">qb</span>.<span class="pl-smi">r</span><span class="pl-k">+=</span><span class="pl-smi">z</span>.<span class="pl-smi">r</span>,<span class="pl-smi">qb</span>.<span class="pl-smi">g</span><span class="pl-k">+=</span><span class="pl-smi">z</span>.<span class="pl-smi">g</span>,<span class="pl-smi">qb</span>.<span class="pl-smi">b</span><span class="pl-k">+=</span><span class="pl-smi">z</span>.<span class="pl-smi">b</span>)<span class="pl-k">:</span>aa <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">PointLight</span><span class="pl-k">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L290" class="blob-num js-line-number" data-line-number="290"></td>
        <td id="LC290" class="blob-code blob-code-inner js-file-line">(<span class="pl-smi">fb</span>.<span class="pl-smi">r</span><span class="pl-k">+=</span><span class="pl-smi">z</span>.<span class="pl-smi">r</span>,<span class="pl-smi">fb</span>.<span class="pl-smi">g</span><span class="pl-k">+=</span><span class="pl-smi">z</span>.<span class="pl-smi">g</span>,<span class="pl-smi">fb</span>.<span class="pl-smi">b</span><span class="pl-k">+=</span><span class="pl-smi">z</span>.<span class="pl-smi">b</span>)}}<span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(Fc<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-c1">length</span>;<span class="pl-c1">B</span><span class="pl-k">&lt;</span>Fc;<span class="pl-c1">B</span><span class="pl-k">++</span>)<span class="pl-k">if</span>(ja<span class="pl-k">=</span>h[<span class="pl-c1">B</span>],aa<span class="pl-k">=</span><span class="pl-smi">ja</span>.<span class="pl-smi">material</span>,<span class="pl-k">!</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>aa<span class="pl-k">||!</span><span class="pl-c1">1</span><span class="pl-k">===</span><span class="pl-smi">aa</span>.<span class="pl-smi">visible</span>)){<span class="pl-smi">wa</span>.<span class="pl-en">empty</span>();<span class="pl-k">if</span>(ja <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">RenderableParticle</span>){<span class="pl-c1">C</span><span class="pl-k">=</span>ja;<span class="pl-c1">C</span>.<span class="pl-c1">x</span><span class="pl-k">*=</span>p;<span class="pl-c1">C</span>.<span class="pl-c1">y</span><span class="pl-k">*=</span>o;<span class="pl-k">var</span> z<span class="pl-k">=</span><span class="pl-c1">C</span>,Xa<span class="pl-k">=</span>ja;<span class="pl-en">b</span>(<span class="pl-smi">aa</span>.<span class="pl-smi">opacity</span>);<span class="pl-en">c</span>(<span class="pl-smi">aa</span>.<span class="pl-smi">blending</span>);<span class="pl-k">var</span> rb<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,sb<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,jb<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,kb<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,kc<span class="pl-k">=</span>ja<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,Uc<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>;aa <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">ParticleBasicMaterial</span><span class="pl-k">?</span><span class="pl-c1">null</span><span class="pl-k">===</span><span class="pl-smi">aa</span>.<span class="pl-smi">map</span><span class="pl-k">?</span>(jb<span class="pl-k">=</span><span class="pl-smi">Xa</span>.<span class="pl-c1">object</span>.<span class="pl-smi">scale</span>.<span class="pl-c1">x</span>,kb<span class="pl-k">=</span><span class="pl-smi">Xa</span>.<span class="pl-c1">object</span>.<span class="pl-smi">scale</span>.<span class="pl-c1">y</span>,jb<span class="pl-k">*=</span><span class="pl-smi">Xa</span>.<span class="pl-smi">scale</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>p,kb<span class="pl-k">*=</span><span class="pl-smi">Xa</span>.<span class="pl-smi">scale</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>o,<span class="pl-smi">wa</span>.<span class="pl-c1">set</span>(<span class="pl-smi">z</span>.<span class="pl-c1">x</span><span class="pl-k">-</span>jb,<span class="pl-smi">z</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>kb,<span class="pl-smi">z</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>jb,<span class="pl-smi">z</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>kb),<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">!==</span><span class="pl-smi">$a</span>.<span class="pl-en">intersects</span>(wa)<span class="pl-k">&amp;&amp;</span>(<span class="pl-en">e</span>(<span class="pl-smi">aa</span>.<span class="pl-c1">color</span>.<span class="pl-en">getContextStyle</span>()),</td>
      </tr>
      <tr>
        <td id="L291" class="blob-num js-line-number" data-line-number="291"></td>
        <td id="LC291" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">q</span>.<span class="pl-en">save</span>(),<span class="pl-smi">q</span>.<span class="pl-en">translate</span>(<span class="pl-smi">z</span>.<span class="pl-c1">x</span>,<span class="pl-smi">z</span>.<span class="pl-c1">y</span>),<span class="pl-smi">q</span>.<span class="pl-en">rotate</span>(<span class="pl-k">-</span><span class="pl-smi">Xa</span>.<span class="pl-smi">rotation</span>),<span class="pl-smi">q</span>.<span class="pl-en">scale</span>(jb,kb),<span class="pl-smi">q</span>.<span class="pl-en">fillRect</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">2</span>),<span class="pl-smi">q</span>.<span class="pl-en">restore</span>()))<span class="pl-k">:</span>(ja<span class="pl-k">=</span><span class="pl-smi">aa</span>.<span class="pl-smi">map</span>.<span class="pl-smi">image</span>,kc<span class="pl-k">=</span><span class="pl-smi">ja</span>.<span class="pl-c1">width</span><span class="pl-k">&gt;&gt;</span><span class="pl-c1">1</span>,Uc<span class="pl-k">=</span><span class="pl-smi">ja</span>.<span class="pl-c1">height</span><span class="pl-k">&gt;&gt;</span><span class="pl-c1">1</span>,jb<span class="pl-k">=</span><span class="pl-smi">Xa</span>.<span class="pl-smi">scale</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>p,kb<span class="pl-k">=</span><span class="pl-smi">Xa</span>.<span class="pl-smi">scale</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>o,rb<span class="pl-k">=</span>jb<span class="pl-k">*</span>kc,sb<span class="pl-k">=</span>kb<span class="pl-k">*</span>Uc,<span class="pl-smi">wa</span>.<span class="pl-c1">set</span>(<span class="pl-smi">z</span>.<span class="pl-c1">x</span><span class="pl-k">-</span>rb,<span class="pl-smi">z</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>sb,<span class="pl-smi">z</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>rb,<span class="pl-smi">z</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>sb),<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">!==</span><span class="pl-smi">$a</span>.<span class="pl-en">intersects</span>(wa)<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">q</span>.<span class="pl-en">save</span>(),<span class="pl-smi">q</span>.<span class="pl-en">translate</span>(<span class="pl-smi">z</span>.<span class="pl-c1">x</span>,<span class="pl-smi">z</span>.<span class="pl-c1">y</span>),<span class="pl-smi">q</span>.<span class="pl-en">rotate</span>(<span class="pl-k">-</span><span class="pl-smi">Xa</span>.<span class="pl-smi">rotation</span>),<span class="pl-smi">q</span>.<span class="pl-en">scale</span>(jb,<span class="pl-k">-</span>kb),<span class="pl-smi">q</span>.<span class="pl-en">translate</span>(<span class="pl-k">-</span>kc,<span class="pl-k">-</span>Uc),<span class="pl-smi">q</span>.<span class="pl-en">drawImage</span>(ja,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>),<span class="pl-smi">q</span>.<span class="pl-en">restore</span>()))<span class="pl-k">:</span>aa <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">ParticleCanvasMaterial</span><span class="pl-k">&amp;&amp;</span>(rb<span class="pl-k">=</span><span class="pl-smi">Xa</span>.<span class="pl-smi">scale</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>p,sb<span class="pl-k">=</span><span class="pl-smi">Xa</span>.<span class="pl-smi">scale</span>.<span class="pl-c1">y</span><span class="pl-k">*</span>o,<span class="pl-smi">wa</span>.<span class="pl-c1">set</span>(<span class="pl-smi">z</span>.<span class="pl-c1">x</span><span class="pl-k">-</span>rb,<span class="pl-smi">z</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>sb,<span class="pl-smi">z</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>rb,<span class="pl-smi">z</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>sb),<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">!==</span></td>
      </tr>
      <tr>
        <td id="L292" class="blob-num js-line-number" data-line-number="292"></td>
        <td id="LC292" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">$a</span>.<span class="pl-en">intersects</span>(wa)<span class="pl-k">&amp;&amp;</span>(<span class="pl-en">d</span>(<span class="pl-smi">aa</span>.<span class="pl-c1">color</span>.<span class="pl-en">getContextStyle</span>()),<span class="pl-en">e</span>(<span class="pl-smi">aa</span>.<span class="pl-c1">color</span>.<span class="pl-en">getContextStyle</span>()),<span class="pl-smi">q</span>.<span class="pl-en">save</span>(),<span class="pl-smi">q</span>.<span class="pl-en">translate</span>(<span class="pl-smi">z</span>.<span class="pl-c1">x</span>,<span class="pl-smi">z</span>.<span class="pl-c1">y</span>),<span class="pl-smi">q</span>.<span class="pl-en">rotate</span>(<span class="pl-k">-</span><span class="pl-smi">Xa</span>.<span class="pl-smi">rotation</span>),<span class="pl-smi">q</span>.<span class="pl-en">scale</span>(rb,sb),<span class="pl-smi">aa</span>.<span class="pl-en">program</span>(q),<span class="pl-smi">q</span>.<span class="pl-en">restore</span>()))}<span class="pl-k">else</span> <span class="pl-k">if</span>(ja <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">RenderableLine</span>){<span class="pl-k">if</span>(<span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-smi">ja</span>.<span class="pl-smi">v1</span>,<span class="pl-c1">G</span><span class="pl-k">=</span><span class="pl-smi">ja</span>.<span class="pl-smi">v2</span>,<span class="pl-c1">C</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">x</span><span class="pl-k">*=</span>p,<span class="pl-c1">C</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">y</span><span class="pl-k">*=</span>o,<span class="pl-c1">G</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">x</span><span class="pl-k">*=</span>p,<span class="pl-c1">G</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">y</span><span class="pl-k">*=</span>o,<span class="pl-smi">wa</span>.<span class="pl-en">addPoint</span>(<span class="pl-c1">C</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">x</span>,<span class="pl-c1">C</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">y</span>),<span class="pl-smi">wa</span>.<span class="pl-en">addPoint</span>(<span class="pl-c1">G</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">x</span>,<span class="pl-c1">G</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">y</span>),<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">$a</span>.<span class="pl-en">intersects</span>(wa)<span class="pl-k">&amp;&amp;</span>(z<span class="pl-k">=</span><span class="pl-c1">C</span>,Xa<span class="pl-k">=</span><span class="pl-c1">G</span>,<span class="pl-en">b</span>(<span class="pl-smi">aa</span>.<span class="pl-smi">opacity</span>),<span class="pl-en">c</span>(<span class="pl-smi">aa</span>.<span class="pl-smi">blending</span>),<span class="pl-smi">q</span>.<span class="pl-en">beginPath</span>(),</td>
      </tr>
      <tr>
        <td id="L293" class="blob-num js-line-number" data-line-number="293"></td>
        <td id="LC293" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">q</span>.<span class="pl-c1">moveTo</span>(<span class="pl-smi">z</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">x</span>,<span class="pl-smi">z</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">y</span>),<span class="pl-smi">q</span>.<span class="pl-en">lineTo</span>(<span class="pl-smi">Xa</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">x</span>,<span class="pl-smi">Xa</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">y</span>),aa <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">LineBasicMaterial</span>))z<span class="pl-k">=</span><span class="pl-smi">aa</span>.<span class="pl-smi">linewidth</span>,<span class="pl-c1">A</span><span class="pl-k">!==</span>z<span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">A</span><span class="pl-k">=</span><span class="pl-smi">q</span>.<span class="pl-smi">lineWidth</span><span class="pl-k">=</span>z),z<span class="pl-k">=</span><span class="pl-smi">aa</span>.<span class="pl-smi">linecap</span>,v<span class="pl-k">!==</span>z<span class="pl-k">&amp;&amp;</span>(v<span class="pl-k">=</span><span class="pl-smi">q</span>.<span class="pl-smi">lineCap</span><span class="pl-k">=</span>z),z<span class="pl-k">=</span><span class="pl-smi">aa</span>.<span class="pl-smi">linejoin</span>,y<span class="pl-k">!==</span>z<span class="pl-k">&amp;&amp;</span>(y<span class="pl-k">=</span><span class="pl-smi">q</span>.<span class="pl-smi">lineJoin</span><span class="pl-k">=</span>z),<span class="pl-en">d</span>(<span class="pl-smi">aa</span>.<span class="pl-c1">color</span>.<span class="pl-en">getContextStyle</span>()),<span class="pl-smi">q</span>.<span class="pl-en">stroke</span>(),<span class="pl-smi">wa</span>.<span class="pl-en">inflate</span>(<span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-smi">aa</span>.<span class="pl-smi">linewidth</span>)}<span class="pl-k">else</span> <span class="pl-k">if</span>(ja <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">RenderableFace3</span>)<span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-smi">ja</span>.<span class="pl-smi">v1</span>,<span class="pl-c1">G</span><span class="pl-k">=</span><span class="pl-smi">ja</span>.<span class="pl-smi">v2</span>,<span class="pl-c1">H</span><span class="pl-k">=</span><span class="pl-smi">ja</span>.<span class="pl-smi">v3</span>,<span class="pl-c1">C</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">x</span><span class="pl-k">*=</span>p,<span class="pl-c1">C</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">y</span><span class="pl-k">*=</span>o,<span class="pl-c1">G</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">x</span><span class="pl-k">*=</span>p,<span class="pl-c1">G</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">y</span><span class="pl-k">*=</span>o,<span class="pl-c1">H</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">x</span><span class="pl-k">*=</span>p,<span class="pl-c1">H</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">y</span><span class="pl-k">*=</span></td>
      </tr>
      <tr>
        <td id="L294" class="blob-num js-line-number" data-line-number="294"></td>
        <td id="LC294" class="blob-code blob-code-inner js-file-line">o,<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">aa</span>.<span class="pl-smi">overdraw</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-en">Wb</span>(<span class="pl-c1">C</span>.<span class="pl-smi">positionScreen</span>,<span class="pl-c1">G</span>.<span class="pl-smi">positionScreen</span>),<span class="pl-en">Wb</span>(<span class="pl-c1">G</span>.<span class="pl-smi">positionScreen</span>,<span class="pl-c1">H</span>.<span class="pl-smi">positionScreen</span>),<span class="pl-en">Wb</span>(<span class="pl-c1">H</span>.<span class="pl-smi">positionScreen</span>,<span class="pl-c1">C</span>.<span class="pl-smi">positionScreen</span>)),<span class="pl-smi">wa</span>.<span class="pl-en">add3Points</span>(<span class="pl-c1">C</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">x</span>,<span class="pl-c1">C</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">y</span>,<span class="pl-c1">G</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">x</span>,<span class="pl-c1">G</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">y</span>,<span class="pl-c1">H</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">x</span>,<span class="pl-c1">H</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">y</span>),<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">$a</span>.<span class="pl-en">intersects</span>(wa)<span class="pl-k">&amp;&amp;</span><span class="pl-en">n</span>(<span class="pl-c1">C</span>,<span class="pl-c1">G</span>,<span class="pl-c1">H</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,ja,aa,a);<span class="pl-k">else</span> <span class="pl-k">if</span>(ja <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">RenderableFace4</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-smi">ja</span>.<span class="pl-smi">v1</span>,<span class="pl-c1">G</span><span class="pl-k">=</span><span class="pl-smi">ja</span>.<span class="pl-smi">v2</span>,<span class="pl-c1">H</span><span class="pl-k">=</span><span class="pl-smi">ja</span>.<span class="pl-smi">v3</span>,<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-smi">ja</span>.<span class="pl-smi">v4</span>,<span class="pl-c1">C</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">x</span><span class="pl-k">*=</span>p,<span class="pl-c1">C</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">y</span><span class="pl-k">*=</span>o,<span class="pl-c1">G</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">x</span><span class="pl-k">*=</span>p,<span class="pl-c1">G</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">y</span><span class="pl-k">*=</span>o,<span class="pl-c1">H</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">x</span><span class="pl-k">*=</span>p,<span class="pl-c1">H</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">y</span><span class="pl-k">*=</span></td>
      </tr>
      <tr>
        <td id="L295" class="blob-num js-line-number" data-line-number="295"></td>
        <td id="LC295" class="blob-code blob-code-inner js-file-line">o,<span class="pl-c1">J</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">x</span><span class="pl-k">*=</span>p,<span class="pl-c1">J</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">y</span><span class="pl-k">*=</span>o,<span class="pl-c1">E</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-en">copy</span>(<span class="pl-c1">G</span>.<span class="pl-smi">positionScreen</span>),<span class="pl-c1">M</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-en">copy</span>(<span class="pl-c1">J</span>.<span class="pl-smi">positionScreen</span>),<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">aa</span>.<span class="pl-smi">overdraw</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-en">Wb</span>(<span class="pl-c1">C</span>.<span class="pl-smi">positionScreen</span>,<span class="pl-c1">G</span>.<span class="pl-smi">positionScreen</span>),<span class="pl-en">Wb</span>(<span class="pl-c1">G</span>.<span class="pl-smi">positionScreen</span>,<span class="pl-c1">J</span>.<span class="pl-smi">positionScreen</span>),<span class="pl-en">Wb</span>(<span class="pl-c1">J</span>.<span class="pl-smi">positionScreen</span>,<span class="pl-c1">C</span>.<span class="pl-smi">positionScreen</span>),<span class="pl-en">Wb</span>(<span class="pl-c1">H</span>.<span class="pl-smi">positionScreen</span>,<span class="pl-c1">E</span>.<span class="pl-smi">positionScreen</span>),<span class="pl-en">Wb</span>(<span class="pl-c1">H</span>.<span class="pl-smi">positionScreen</span>,<span class="pl-c1">M</span>.<span class="pl-smi">positionScreen</span>)),<span class="pl-smi">wa</span>.<span class="pl-en">addPoint</span>(<span class="pl-c1">C</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">x</span>,<span class="pl-c1">C</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">y</span>),<span class="pl-smi">wa</span>.<span class="pl-en">addPoint</span>(<span class="pl-c1">G</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">x</span>,<span class="pl-c1">G</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">y</span>),<span class="pl-smi">wa</span>.<span class="pl-en">addPoint</span>(<span class="pl-c1">H</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">x</span>,<span class="pl-c1">H</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">y</span>),<span class="pl-smi">wa</span>.<span class="pl-en">addPoint</span>(<span class="pl-c1">J</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">x</span>,</td>
      </tr>
      <tr>
        <td id="L296" class="blob-num js-line-number" data-line-number="296"></td>
        <td id="LC296" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">J</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">y</span>),<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">$a</span>.<span class="pl-en">intersects</span>(wa)))(z<span class="pl-k">=</span><span class="pl-c1">C</span>,Xa<span class="pl-k">=</span><span class="pl-c1">G</span>,rb<span class="pl-k">=</span><span class="pl-c1">H</span>,sb<span class="pl-k">=</span><span class="pl-c1">J</span>,jb<span class="pl-k">=</span><span class="pl-c1">E</span>,kb<span class="pl-k">=</span><span class="pl-c1">M</span>,kc<span class="pl-k">=</span>a,<span class="pl-smi">f</span>.<span class="pl-smi">info</span>.<span class="pl-smi">render</span>.<span class="pl-smi">vertices</span><span class="pl-k">+=</span><span class="pl-c1">4</span>,<span class="pl-smi">f</span>.<span class="pl-smi">info</span>.<span class="pl-smi">render</span>.<span class="pl-smi">faces</span><span class="pl-k">++</span>,<span class="pl-en">b</span>(<span class="pl-smi">aa</span>.<span class="pl-smi">opacity</span>),<span class="pl-en">c</span>(<span class="pl-smi">aa</span>.<span class="pl-smi">blending</span>),<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">aa</span>.<span class="pl-smi">map</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">null</span><span class="pl-k">!==</span><span class="pl-smi">aa</span>.<span class="pl-smi">map</span><span class="pl-k">||</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">aa</span>.<span class="pl-smi">envMap</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">null</span><span class="pl-k">!==</span><span class="pl-smi">aa</span>.<span class="pl-smi">envMap</span>)<span class="pl-k">?</span>(<span class="pl-en">n</span>(z,Xa,sb,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">3</span>,ja,aa,kc),<span class="pl-en">n</span>(jb,rb,kb,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,ja,aa,kc))<span class="pl-k">:</span>(<span class="pl-c1">K</span><span class="pl-k">=</span><span class="pl-smi">z</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">x</span>,<span class="pl-c1">F</span><span class="pl-k">=</span><span class="pl-smi">z</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">y</span>,<span class="pl-c1">I</span><span class="pl-k">=</span><span class="pl-smi">Xa</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">x</span>,<span class="pl-c1">L</span><span class="pl-k">=</span><span class="pl-smi">Xa</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">y</span>,<span class="pl-c1">R</span><span class="pl-k">=</span><span class="pl-smi">rb</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">x</span>,$<span class="pl-k">=</span><span class="pl-smi">rb</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">y</span>,<span class="pl-c1">Y</span><span class="pl-k">=</span><span class="pl-smi">sb</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">x</span>,<span class="pl-c1">N</span><span class="pl-k">=</span><span class="pl-smi">sb</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">y</span>,ea<span class="pl-k">=</span><span class="pl-smi">jb</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">x</span>,<span class="pl-c1">Q</span><span class="pl-k">=</span><span class="pl-smi">jb</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">y</span>,</td>
      </tr>
      <tr>
        <td id="L297" class="blob-num js-line-number" data-line-number="297"></td>
        <td id="LC297" class="blob-code blob-code-inner js-file-line">qa<span class="pl-k">=</span><span class="pl-smi">kb</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">x</span>,la<span class="pl-k">=</span><span class="pl-smi">kb</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">y</span>,aa <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">MeshLambertMaterial</span><span class="pl-k">||</span>aa <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">MeshPhongMaterial</span>)<span class="pl-k">?</span>(<span class="pl-c1">Z</span>.<span class="pl-en">copy</span>(<span class="pl-smi">aa</span>.<span class="pl-c1">color</span>),<span class="pl-smi">ca</span>.<span class="pl-en">copy</span>(<span class="pl-smi">aa</span>.<span class="pl-smi">emissive</span>),<span class="pl-smi">aa</span>.<span class="pl-smi">vertexColors</span><span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">FaceColors</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">Z</span>.<span class="pl-smi">r</span><span class="pl-k">*=</span><span class="pl-smi">ja</span>.<span class="pl-c1">color</span>.<span class="pl-smi">r</span>,<span class="pl-c1">Z</span>.<span class="pl-smi">g</span><span class="pl-k">*=</span><span class="pl-smi">ja</span>.<span class="pl-c1">color</span>.<span class="pl-smi">g</span>,<span class="pl-c1">Z</span>.<span class="pl-smi">b</span><span class="pl-k">*=</span><span class="pl-smi">ja</span>.<span class="pl-c1">color</span>.<span class="pl-smi">b</span>),<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span>wb)<span class="pl-k">?</span><span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">===</span><span class="pl-smi">aa</span>.<span class="pl-smi">wireframe</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">aa</span>.<span class="pl-smi">shading</span><span class="pl-k">==</span><span class="pl-c1">THREE</span>.<span class="pl-smi">SmoothShading</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">4</span><span class="pl-k">==</span><span class="pl-smi">ja</span>.<span class="pl-smi">vertexNormalsLength</span><span class="pl-k">?</span>(<span class="pl-smi">fa</span>.<span class="pl-smi">r</span><span class="pl-k">=</span><span class="pl-c1">W</span>.<span class="pl-smi">r</span><span class="pl-k">=</span><span class="pl-c1">V</span>.<span class="pl-smi">r</span><span class="pl-k">=</span><span class="pl-smi">ia</span>.<span class="pl-smi">r</span><span class="pl-k">=</span><span class="pl-smi">Da</span>.<span class="pl-smi">r</span>,<span class="pl-smi">fa</span>.<span class="pl-smi">g</span><span class="pl-k">=</span><span class="pl-c1">W</span>.<span class="pl-smi">g</span><span class="pl-k">=</span><span class="pl-c1">V</span>.<span class="pl-smi">g</span><span class="pl-k">=</span><span class="pl-smi">ia</span>.<span class="pl-smi">g</span><span class="pl-k">=</span><span class="pl-smi">Da</span>.<span class="pl-smi">g</span>,<span class="pl-smi">fa</span>.<span class="pl-smi">b</span><span class="pl-k">=</span><span class="pl-c1">W</span>.<span class="pl-smi">b</span><span class="pl-k">=</span><span class="pl-c1">V</span>.<span class="pl-smi">b</span><span class="pl-k">=</span><span class="pl-smi">ia</span>.<span class="pl-smi">b</span><span class="pl-k">=</span><span class="pl-smi">Da</span>.<span class="pl-smi">b</span>,<span class="pl-en">m</span>(<span class="pl-smi">ja</span>.<span class="pl-smi">v1</span>.<span class="pl-smi">positionWorld</span>,<span class="pl-smi">ja</span>.<span class="pl-smi">vertexNormalsWorld</span>[<span class="pl-c1">0</span>],fa),<span class="pl-en">m</span>(<span class="pl-smi">ja</span>.<span class="pl-smi">v2</span>.<span class="pl-smi">positionWorld</span>,<span class="pl-smi">ja</span>.<span class="pl-smi">vertexNormalsWorld</span>[<span class="pl-c1">1</span>],</td>
      </tr>
      <tr>
        <td id="L298" class="blob-num js-line-number" data-line-number="298"></td>
        <td id="LC298" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">W</span>),<span class="pl-en">m</span>(<span class="pl-smi">ja</span>.<span class="pl-smi">v4</span>.<span class="pl-smi">positionWorld</span>,<span class="pl-smi">ja</span>.<span class="pl-smi">vertexNormalsWorld</span>[<span class="pl-c1">3</span>],<span class="pl-c1">V</span>),<span class="pl-en">m</span>(<span class="pl-smi">ja</span>.<span class="pl-smi">v3</span>.<span class="pl-smi">positionWorld</span>,<span class="pl-smi">ja</span>.<span class="pl-smi">vertexNormalsWorld</span>[<span class="pl-c1">2</span>],ia),<span class="pl-smi">fa</span>.<span class="pl-smi">r</span><span class="pl-k">=</span><span class="pl-smi">fa</span>.<span class="pl-smi">r</span><span class="pl-k">*</span><span class="pl-c1">Z</span>.<span class="pl-smi">r</span><span class="pl-k">+</span><span class="pl-smi">ca</span>.<span class="pl-smi">r</span>,<span class="pl-smi">fa</span>.<span class="pl-smi">g</span><span class="pl-k">=</span><span class="pl-smi">fa</span>.<span class="pl-smi">g</span><span class="pl-k">*</span><span class="pl-c1">Z</span>.<span class="pl-smi">g</span><span class="pl-k">+</span><span class="pl-smi">ca</span>.<span class="pl-smi">g</span>,<span class="pl-smi">fa</span>.<span class="pl-smi">b</span><span class="pl-k">=</span><span class="pl-smi">fa</span>.<span class="pl-smi">b</span><span class="pl-k">*</span><span class="pl-c1">Z</span>.<span class="pl-smi">b</span><span class="pl-k">+</span><span class="pl-smi">ca</span>.<span class="pl-smi">b</span>,<span class="pl-c1">W</span>.<span class="pl-smi">r</span><span class="pl-k">=</span><span class="pl-c1">W</span>.<span class="pl-smi">r</span><span class="pl-k">*</span><span class="pl-c1">Z</span>.<span class="pl-smi">r</span><span class="pl-k">+</span><span class="pl-smi">ca</span>.<span class="pl-smi">r</span>,<span class="pl-c1">W</span>.<span class="pl-smi">g</span><span class="pl-k">=</span><span class="pl-c1">W</span>.<span class="pl-smi">g</span><span class="pl-k">*</span><span class="pl-c1">Z</span>.<span class="pl-smi">g</span><span class="pl-k">+</span><span class="pl-smi">ca</span>.<span class="pl-smi">g</span>,<span class="pl-c1">W</span>.<span class="pl-smi">b</span><span class="pl-k">=</span><span class="pl-c1">W</span>.<span class="pl-smi">b</span><span class="pl-k">*</span><span class="pl-c1">Z</span>.<span class="pl-smi">b</span><span class="pl-k">+</span><span class="pl-smi">ca</span>.<span class="pl-smi">b</span>,<span class="pl-c1">V</span>.<span class="pl-smi">r</span><span class="pl-k">=</span><span class="pl-c1">V</span>.<span class="pl-smi">r</span><span class="pl-k">*</span><span class="pl-c1">Z</span>.<span class="pl-smi">r</span><span class="pl-k">+</span><span class="pl-smi">ca</span>.<span class="pl-smi">r</span>,<span class="pl-c1">V</span>.<span class="pl-smi">g</span><span class="pl-k">=</span><span class="pl-c1">V</span>.<span class="pl-smi">g</span><span class="pl-k">*</span><span class="pl-c1">Z</span>.<span class="pl-smi">g</span><span class="pl-k">+</span><span class="pl-smi">ca</span>.<span class="pl-smi">g</span>,<span class="pl-c1">V</span>.<span class="pl-smi">b</span><span class="pl-k">=</span><span class="pl-c1">V</span>.<span class="pl-smi">b</span><span class="pl-k">*</span><span class="pl-c1">Z</span>.<span class="pl-smi">b</span><span class="pl-k">+</span><span class="pl-smi">ca</span>.<span class="pl-smi">b</span>,<span class="pl-smi">ia</span>.<span class="pl-smi">r</span><span class="pl-k">=</span><span class="pl-smi">ia</span>.<span class="pl-smi">r</span><span class="pl-k">*</span><span class="pl-c1">Z</span>.<span class="pl-smi">r</span><span class="pl-k">+</span><span class="pl-smi">ca</span>.<span class="pl-smi">r</span>,<span class="pl-smi">ia</span>.<span class="pl-smi">g</span><span class="pl-k">=</span><span class="pl-smi">ia</span>.<span class="pl-smi">g</span><span class="pl-k">*</span><span class="pl-c1">Z</span>.<span class="pl-smi">g</span><span class="pl-k">+</span><span class="pl-smi">ca</span>.<span class="pl-smi">g</span>,<span class="pl-smi">ia</span>.<span class="pl-smi">b</span><span class="pl-k">=</span><span class="pl-smi">ia</span>.<span class="pl-smi">b</span><span class="pl-k">*</span><span class="pl-c1">Z</span>.<span class="pl-smi">b</span><span class="pl-k">+</span><span class="pl-smi">ca</span>.<span class="pl-smi">b</span>,na<span class="pl-k">=</span><span class="pl-en">Dc</span>(fa,<span class="pl-c1">W</span>,<span class="pl-c1">V</span>,ia),<span class="pl-en">r</span>(<span class="pl-c1">K</span>,<span class="pl-c1">F</span>,<span class="pl-c1">I</span>,<span class="pl-c1">L</span>,<span class="pl-c1">Y</span>,<span class="pl-c1">N</span>),<span class="pl-en">gc</span>(<span class="pl-c1">K</span>,<span class="pl-c1">F</span>,<span class="pl-c1">I</span>,<span class="pl-c1">L</span>,<span class="pl-c1">Y</span>,<span class="pl-c1">N</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,na),<span class="pl-en">r</span>(ea,<span class="pl-c1">Q</span>,<span class="pl-c1">R</span>,$,qa,la),<span class="pl-en">gc</span>(ea,<span class="pl-c1">Q</span>,<span class="pl-c1">R</span>,$,qa,la,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,na))<span class="pl-k">:</span>(<span class="pl-c1">O</span>.<span class="pl-smi">r</span><span class="pl-k">=</span><span class="pl-smi">Da</span>.<span class="pl-smi">r</span>,<span class="pl-c1">O</span>.<span class="pl-smi">g</span><span class="pl-k">=</span><span class="pl-smi">Da</span>.<span class="pl-smi">g</span>,<span class="pl-c1">O</span>.<span class="pl-smi">b</span><span class="pl-k">=</span><span class="pl-smi">Da</span>.<span class="pl-smi">b</span>,<span class="pl-en">m</span>(<span class="pl-smi">ja</span>.<span class="pl-smi">centroidWorld</span>,<span class="pl-smi">ja</span>.<span class="pl-smi">normalWorld</span>,<span class="pl-c1">O</span>),</td>
      </tr>
      <tr>
        <td id="L299" class="blob-num js-line-number" data-line-number="299"></td>
        <td id="LC299" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">O</span>.<span class="pl-smi">r</span><span class="pl-k">=</span><span class="pl-c1">O</span>.<span class="pl-smi">r</span><span class="pl-k">*</span><span class="pl-c1">Z</span>.<span class="pl-smi">r</span><span class="pl-k">+</span><span class="pl-smi">ca</span>.<span class="pl-smi">r</span>,<span class="pl-c1">O</span>.<span class="pl-smi">g</span><span class="pl-k">=</span><span class="pl-c1">O</span>.<span class="pl-smi">g</span><span class="pl-k">*</span><span class="pl-c1">Z</span>.<span class="pl-smi">g</span><span class="pl-k">+</span><span class="pl-smi">ca</span>.<span class="pl-smi">g</span>,<span class="pl-c1">O</span>.<span class="pl-smi">b</span><span class="pl-k">=</span><span class="pl-c1">O</span>.<span class="pl-smi">b</span><span class="pl-k">*</span><span class="pl-c1">Z</span>.<span class="pl-smi">b</span><span class="pl-k">+</span><span class="pl-smi">ca</span>.<span class="pl-smi">b</span>,<span class="pl-en">s</span>(<span class="pl-c1">K</span>,<span class="pl-c1">F</span>,<span class="pl-c1">I</span>,<span class="pl-c1">L</span>,<span class="pl-c1">R</span>,$,<span class="pl-c1">Y</span>,<span class="pl-c1">N</span>),<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">aa</span>.<span class="pl-smi">wireframe</span><span class="pl-k">?</span><span class="pl-en">t</span>(<span class="pl-c1">O</span>,<span class="pl-smi">aa</span>.<span class="pl-smi">wireframeLinewidth</span>,<span class="pl-smi">aa</span>.<span class="pl-smi">wireframeLinecap</span>,<span class="pl-smi">aa</span>.<span class="pl-smi">wireframeLinejoin</span>)<span class="pl-k">:</span><span class="pl-en">u</span>(<span class="pl-c1">O</span>))<span class="pl-k">:</span>(<span class="pl-c1">O</span>.<span class="pl-smi">r</span><span class="pl-k">=</span><span class="pl-c1">Z</span>.<span class="pl-smi">r</span><span class="pl-k">+</span><span class="pl-smi">ca</span>.<span class="pl-smi">r</span>,<span class="pl-c1">O</span>.<span class="pl-smi">g</span><span class="pl-k">=</span><span class="pl-c1">Z</span>.<span class="pl-smi">g</span><span class="pl-k">+</span><span class="pl-smi">ca</span>.<span class="pl-smi">g</span>,<span class="pl-c1">O</span>.<span class="pl-smi">b</span><span class="pl-k">=</span><span class="pl-c1">Z</span>.<span class="pl-smi">b</span><span class="pl-k">+</span><span class="pl-smi">ca</span>.<span class="pl-smi">b</span>,<span class="pl-en">s</span>(<span class="pl-c1">K</span>,<span class="pl-c1">F</span>,<span class="pl-c1">I</span>,<span class="pl-c1">L</span>,<span class="pl-c1">R</span>,$,<span class="pl-c1">Y</span>,<span class="pl-c1">N</span>),<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">aa</span>.<span class="pl-smi">wireframe</span><span class="pl-k">?</span><span class="pl-en">t</span>(<span class="pl-c1">O</span>,<span class="pl-smi">aa</span>.<span class="pl-smi">wireframeLinewidth</span>,<span class="pl-smi">aa</span>.<span class="pl-smi">wireframeLinecap</span>,<span class="pl-smi">aa</span>.<span class="pl-smi">wireframeLinejoin</span>)<span class="pl-k">:</span><span class="pl-en">u</span>(<span class="pl-c1">O</span>))<span class="pl-k">:</span>aa <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">MeshBasicMaterial</span><span class="pl-k">?</span>(<span class="pl-c1">O</span>.<span class="pl-en">copy</span>(<span class="pl-smi">aa</span>.<span class="pl-c1">color</span>),<span class="pl-smi">aa</span>.<span class="pl-smi">vertexColors</span><span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">FaceColors</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">O</span>.<span class="pl-smi">r</span><span class="pl-k">*=</span><span class="pl-smi">ja</span>.<span class="pl-c1">color</span>.<span class="pl-smi">r</span>,<span class="pl-c1">O</span>.<span class="pl-smi">g</span><span class="pl-k">*=</span><span class="pl-smi">ja</span>.<span class="pl-c1">color</span>.<span class="pl-smi">g</span>,<span class="pl-c1">O</span>.<span class="pl-smi">b</span><span class="pl-k">*=</span><span class="pl-smi">ja</span>.<span class="pl-c1">color</span>.<span class="pl-smi">b</span>),<span class="pl-en">s</span>(<span class="pl-c1">K</span>,<span class="pl-c1">F</span>,<span class="pl-c1">I</span>,<span class="pl-c1">L</span>,<span class="pl-c1">R</span>,$,<span class="pl-c1">Y</span>,<span class="pl-c1">N</span>),<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">aa</span>.<span class="pl-smi">wireframe</span><span class="pl-k">?</span><span class="pl-en">t</span>(<span class="pl-c1">O</span>,<span class="pl-smi">aa</span>.<span class="pl-smi">wireframeLinewidth</span>,</td>
      </tr>
      <tr>
        <td id="L300" class="blob-num js-line-number" data-line-number="300"></td>
        <td id="LC300" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">aa</span>.<span class="pl-smi">wireframeLinecap</span>,<span class="pl-smi">aa</span>.<span class="pl-smi">wireframeLinejoin</span>)<span class="pl-k">:</span><span class="pl-en">u</span>(<span class="pl-c1">O</span>))<span class="pl-k">:</span>aa <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">MeshNormalMaterial</span><span class="pl-k">?</span>(<span class="pl-c1">O</span>.<span class="pl-smi">r</span><span class="pl-k">=</span><span class="pl-en">jc</span>(<span class="pl-smi">ja</span>.<span class="pl-smi">normalWorld</span>.<span class="pl-c1">x</span>),<span class="pl-c1">O</span>.<span class="pl-smi">g</span><span class="pl-k">=</span><span class="pl-en">jc</span>(<span class="pl-smi">ja</span>.<span class="pl-smi">normalWorld</span>.<span class="pl-c1">y</span>),<span class="pl-c1">O</span>.<span class="pl-smi">b</span><span class="pl-k">=</span><span class="pl-en">jc</span>(<span class="pl-smi">ja</span>.<span class="pl-smi">normalWorld</span>.<span class="pl-c1">z</span>),<span class="pl-en">s</span>(<span class="pl-c1">K</span>,<span class="pl-c1">F</span>,<span class="pl-c1">I</span>,<span class="pl-c1">L</span>,<span class="pl-c1">R</span>,$,<span class="pl-c1">Y</span>,<span class="pl-c1">N</span>),<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">aa</span>.<span class="pl-smi">wireframe</span><span class="pl-k">?</span><span class="pl-en">t</span>(<span class="pl-c1">O</span>,<span class="pl-smi">aa</span>.<span class="pl-smi">wireframeLinewidth</span>,<span class="pl-smi">aa</span>.<span class="pl-smi">wireframeLinecap</span>,<span class="pl-smi">aa</span>.<span class="pl-smi">wireframeLinejoin</span>)<span class="pl-k">:</span><span class="pl-en">u</span>(<span class="pl-c1">O</span>))<span class="pl-k">:</span>aa <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">MeshDepthMaterial</span><span class="pl-k">&amp;&amp;</span>(Ia<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">near</span>,Ua<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">far</span>,<span class="pl-smi">fa</span>.<span class="pl-smi">r</span><span class="pl-k">=</span><span class="pl-smi">fa</span>.<span class="pl-smi">g</span><span class="pl-k">=</span><span class="pl-smi">fa</span>.<span class="pl-smi">b</span><span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">-</span><span class="pl-en">tb</span>(<span class="pl-smi">z</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">z</span>,Ia,Ua),<span class="pl-c1">W</span>.<span class="pl-smi">r</span><span class="pl-k">=</span><span class="pl-c1">W</span>.<span class="pl-smi">g</span><span class="pl-k">=</span><span class="pl-c1">W</span>.<span class="pl-smi">b</span><span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">-</span><span class="pl-en">tb</span>(<span class="pl-smi">Xa</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">z</span>,Ia,Ua),<span class="pl-c1">V</span>.<span class="pl-smi">r</span><span class="pl-k">=</span><span class="pl-c1">V</span>.<span class="pl-smi">g</span><span class="pl-k">=</span><span class="pl-c1">V</span>.<span class="pl-smi">b</span><span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">-</span><span class="pl-en">tb</span>(<span class="pl-smi">sb</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">z</span>,Ia,Ua),<span class="pl-smi">ia</span>.<span class="pl-smi">r</span><span class="pl-k">=</span><span class="pl-smi">ia</span>.<span class="pl-smi">g</span><span class="pl-k">=</span><span class="pl-smi">ia</span>.<span class="pl-smi">b</span><span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">-</span><span class="pl-en">tb</span>(<span class="pl-smi">rb</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">z</span>,</td>
      </tr>
      <tr>
        <td id="L301" class="blob-num js-line-number" data-line-number="301"></td>
        <td id="LC301" class="blob-code blob-code-inner js-file-line">Ia,Ua),na<span class="pl-k">=</span><span class="pl-en">Dc</span>(fa,<span class="pl-c1">W</span>,<span class="pl-c1">V</span>,ia),<span class="pl-en">r</span>(<span class="pl-c1">K</span>,<span class="pl-c1">F</span>,<span class="pl-c1">I</span>,<span class="pl-c1">L</span>,<span class="pl-c1">Y</span>,<span class="pl-c1">N</span>),<span class="pl-en">gc</span>(<span class="pl-c1">K</span>,<span class="pl-c1">F</span>,<span class="pl-c1">I</span>,<span class="pl-c1">L</span>,<span class="pl-c1">Y</span>,<span class="pl-c1">N</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,na),<span class="pl-en">r</span>(ea,<span class="pl-c1">Q</span>,<span class="pl-c1">R</span>,$,qa,la),<span class="pl-en">gc</span>(ea,<span class="pl-c1">Q</span>,<span class="pl-c1">R</span>,$,qa,la,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,na));<span class="pl-smi">Ja</span>.<span class="pl-en">addRectangle</span>(wa)}<span class="pl-smi">q</span>.<span class="pl-en">setTransform</span>(<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>)}}};</td>
      </tr>
      <tr>
        <td id="L302" class="blob-num js-line-number" data-line-number="302"></td>
        <td id="LC302" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span><span class="pl-k">=</span>{fog_pars_fragment<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_FOG<span class="pl-cce">\n</span>uniform vec3 fogColor;<span class="pl-cce">\n</span>#ifdef FOG_EXP2<span class="pl-cce">\n</span>uniform float fogDensity;<span class="pl-cce">\n</span>#else<span class="pl-cce">\n</span>uniform float fogNear;<span class="pl-cce">\n</span>uniform float fogFar;<span class="pl-cce">\n</span>#endif<span class="pl-cce">\n</span>#endif<span class="pl-pds">&quot;</span></span>,fog_fragment<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_FOG<span class="pl-cce">\n</span>float depth = gl_FragCoord.z / gl_FragCoord.w;<span class="pl-cce">\n</span>#ifdef FOG_EXP2<span class="pl-cce">\n</span>const float LOG2 = 1.442695;<span class="pl-cce">\n</span>float fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );<span class="pl-cce">\n</span>fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );<span class="pl-cce">\n</span>#else<span class="pl-cce">\n</span>float fogFactor = smoothstep( fogNear, fogFar, depth );<span class="pl-cce">\n</span>#endif<span class="pl-cce">\n</span>gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );<span class="pl-cce">\n</span>#endif<span class="pl-pds">&quot;</span></span>,envmap_pars_fragment<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_ENVMAP<span class="pl-cce">\n</span>uniform float reflectivity;<span class="pl-cce">\n</span>uniform samplerCube envMap;<span class="pl-cce">\n</span>uniform float flipEnvMap;<span class="pl-cce">\n</span>uniform int combine;<span class="pl-cce">\n</span>#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )<span class="pl-cce">\n</span>uniform bool useRefract;<span class="pl-cce">\n</span>uniform float refractionRatio;<span class="pl-cce">\n</span>#else<span class="pl-cce">\n</span>varying vec3 vReflect;<span class="pl-cce">\n</span>#endif<span class="pl-cce">\n</span>#endif<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L303" class="blob-num js-line-number" data-line-number="303"></td>
        <td id="LC303" class="blob-code blob-code-inner js-file-line">envmap_fragment<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_ENVMAP<span class="pl-cce">\n</span>vec3 reflectVec;<span class="pl-cce">\n</span>#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )<span class="pl-cce">\n</span>vec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );<span class="pl-cce">\n</span>if ( useRefract ) {<span class="pl-cce">\n</span>reflectVec = refract( cameraToVertex, normal, refractionRatio );<span class="pl-cce">\n</span>} else { <span class="pl-cce">\n</span>reflectVec = reflect( cameraToVertex, normal );<span class="pl-cce">\n</span>}<span class="pl-cce">\n</span>#else<span class="pl-cce">\n</span>reflectVec = vReflect;<span class="pl-cce">\n</span>#endif<span class="pl-cce">\n</span>#ifdef DOUBLE_SIDED<span class="pl-cce">\n</span>float flipNormal = ( -1.0 + 2.0 * float( gl_FrontFacing ) );<span class="pl-cce">\n</span>vec4 cubeColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );<span class="pl-cce">\n</span>#else<span class="pl-cce">\n</span>vec4 cubeColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );<span class="pl-cce">\n</span>#endif<span class="pl-cce">\n</span>#ifdef GAMMA_INPUT<span class="pl-cce">\n</span>cubeColor.xyz *= cubeColor.xyz;<span class="pl-cce">\n</span>#endif<span class="pl-cce">\n</span>if ( combine == 1 ) {<span class="pl-cce">\n</span>gl_FragColor.xyz = mix( gl_FragColor.xyz, cubeColor.xyz, specularStrength * reflectivity );<span class="pl-cce">\n</span>} else {<span class="pl-cce">\n</span>gl_FragColor.xyz = mix( gl_FragColor.xyz, gl_FragColor.xyz * cubeColor.xyz, specularStrength * reflectivity );<span class="pl-cce">\n</span>}<span class="pl-cce">\n</span>#endif<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L304" class="blob-num js-line-number" data-line-number="304"></td>
        <td id="LC304" class="blob-code blob-code-inner js-file-line">envmap_pars_vertex<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>#if defined( USE_ENVMAP ) &amp;&amp; ! defined( USE_BUMPMAP ) &amp;&amp; ! defined( USE_NORMALMAP )<span class="pl-cce">\n</span>varying vec3 vReflect;<span class="pl-cce">\n</span>uniform float refractionRatio;<span class="pl-cce">\n</span>uniform bool useRefract;<span class="pl-cce">\n</span>#endif<span class="pl-pds">&quot;</span></span>,worldpos_vertex<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )<span class="pl-cce">\n</span>#ifdef USE_SKINNING<span class="pl-cce">\n</span>vec4 mPosition = modelMatrix * skinned;<span class="pl-cce">\n</span>#endif<span class="pl-cce">\n</span>#if defined( USE_MORPHTARGETS ) &amp;&amp; ! defined( USE_SKINNING )<span class="pl-cce">\n</span>vec4 mPosition = modelMatrix * vec4( morphed, 1.0 );<span class="pl-cce">\n</span>#endif<span class="pl-cce">\n</span>#if ! defined( USE_MORPHTARGETS ) &amp;&amp; ! defined( USE_SKINNING )<span class="pl-cce">\n</span>vec4 mPosition = modelMatrix * vec4( position, 1.0 );<span class="pl-cce">\n</span>#endif<span class="pl-cce">\n</span>#endif<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L305" class="blob-num js-line-number" data-line-number="305"></td>
        <td id="LC305" class="blob-code blob-code-inner js-file-line">envmap_vertex<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>#if defined( USE_ENVMAP ) &amp;&amp; ! defined( USE_BUMPMAP ) &amp;&amp; ! defined( USE_NORMALMAP )<span class="pl-cce">\n</span>vec3 nWorld = mat3( modelMatrix[ 0 ].xyz, modelMatrix[ 1 ].xyz, modelMatrix[ 2 ].xyz ) * objectNormal;<span class="pl-cce">\n</span>if ( useRefract ) {<span class="pl-cce">\n</span>vReflect = refract( normalize( mPosition.xyz - cameraPosition ), normalize( nWorld.xyz ), refractionRatio );<span class="pl-cce">\n</span>} else {<span class="pl-cce">\n</span>vReflect = reflect( normalize( mPosition.xyz - cameraPosition ), normalize( nWorld.xyz ) );<span class="pl-cce">\n</span>}<span class="pl-cce">\n</span>#endif<span class="pl-pds">&quot;</span></span>,map_particle_pars_fragment<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_MAP<span class="pl-cce">\n</span>uniform sampler2D map;<span class="pl-cce">\n</span>#endif<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L306" class="blob-num js-line-number" data-line-number="306"></td>
        <td id="LC306" class="blob-code blob-code-inner js-file-line">map_particle_fragment<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_MAP<span class="pl-cce">\n</span>gl_FragColor = gl_FragColor * texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) );<span class="pl-cce">\n</span>#endif<span class="pl-pds">&quot;</span></span>,map_pars_vertex<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP )<span class="pl-cce">\n</span>varying vec2 vUv;<span class="pl-cce">\n</span>uniform vec4 offsetRepeat;<span class="pl-cce">\n</span>#endif<span class="pl-pds">&quot;</span></span>,map_pars_fragment<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP )<span class="pl-cce">\n</span>varying vec2 vUv;<span class="pl-cce">\n</span>#endif<span class="pl-cce">\n</span>#ifdef USE_MAP<span class="pl-cce">\n</span>uniform sampler2D map;<span class="pl-cce">\n</span>#endif<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L307" class="blob-num js-line-number" data-line-number="307"></td>
        <td id="LC307" class="blob-code blob-code-inner js-file-line">map_vertex<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP )<span class="pl-cce">\n</span>vUv = uv * offsetRepeat.zw + offsetRepeat.xy;<span class="pl-cce">\n</span>#endif<span class="pl-pds">&quot;</span></span>,map_fragment<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_MAP<span class="pl-cce">\n</span>#ifdef GAMMA_INPUT<span class="pl-cce">\n</span>vec4 texelColor = texture2D( map, vUv );<span class="pl-cce">\n</span>texelColor.xyz *= texelColor.xyz;<span class="pl-cce">\n</span>gl_FragColor = gl_FragColor * texelColor;<span class="pl-cce">\n</span>#else<span class="pl-cce">\n</span>gl_FragColor = gl_FragColor * texture2D( map, vUv );<span class="pl-cce">\n</span>#endif<span class="pl-cce">\n</span>#endif<span class="pl-pds">&quot;</span></span>,lightmap_pars_fragment<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_LIGHTMAP<span class="pl-cce">\n</span>varying vec2 vUv2;<span class="pl-cce">\n</span>uniform sampler2D lightMap;<span class="pl-cce">\n</span>#endif<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L308" class="blob-num js-line-number" data-line-number="308"></td>
        <td id="LC308" class="blob-code blob-code-inner js-file-line">lightmap_pars_vertex<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_LIGHTMAP<span class="pl-cce">\n</span>varying vec2 vUv2;<span class="pl-cce">\n</span>#endif<span class="pl-pds">&quot;</span></span>,lightmap_fragment<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_LIGHTMAP<span class="pl-cce">\n</span>gl_FragColor = gl_FragColor * texture2D( lightMap, vUv2 );<span class="pl-cce">\n</span>#endif<span class="pl-pds">&quot;</span></span>,lightmap_vertex<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_LIGHTMAP<span class="pl-cce">\n</span>vUv2 = uv2;<span class="pl-cce">\n</span>#endif<span class="pl-pds">&quot;</span></span>,bumpmap_pars_fragment<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_BUMPMAP<span class="pl-cce">\n</span>uniform sampler2D bumpMap;<span class="pl-cce">\n</span>uniform float bumpScale;<span class="pl-cce">\n</span>vec2 dHdxy_fwd() {<span class="pl-cce">\n</span>vec2 dSTdx = dFdx( vUv );<span class="pl-cce">\n</span>vec2 dSTdy = dFdy( vUv );<span class="pl-cce">\n</span>float Hll = bumpScale * texture2D( bumpMap, vUv ).x;<span class="pl-cce">\n</span>float dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;<span class="pl-cce">\n</span>float dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;<span class="pl-cce">\n</span>return vec2( dBx, dBy );<span class="pl-cce">\n</span>}<span class="pl-cce">\n</span>vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {<span class="pl-cce">\n</span>vec3 vSigmaX = dFdx( surf_pos );<span class="pl-cce">\n</span>vec3 vSigmaY = dFdy( surf_pos );<span class="pl-cce">\n</span>vec3 vN = surf_norm;<span class="pl-cce">\n</span>vec3 R1 = cross( vSigmaY, vN );<span class="pl-cce">\n</span>vec3 R2 = cross( vN, vSigmaX );<span class="pl-cce">\n</span>float fDet = dot( vSigmaX, R1 );<span class="pl-cce">\n</span>vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );<span class="pl-cce">\n</span>return normalize( abs( fDet ) * surf_norm - vGrad );<span class="pl-cce">\n</span>}<span class="pl-cce">\n</span>#endif<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L309" class="blob-num js-line-number" data-line-number="309"></td>
        <td id="LC309" class="blob-code blob-code-inner js-file-line">normalmap_pars_fragment<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_NORMALMAP<span class="pl-cce">\n</span>uniform sampler2D normalMap;<span class="pl-cce">\n</span>uniform vec2 normalScale;<span class="pl-cce">\n</span>vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {<span class="pl-cce">\n</span>vec3 q0 = dFdx( eye_pos.xyz );<span class="pl-cce">\n</span>vec3 q1 = dFdy( eye_pos.xyz );<span class="pl-cce">\n</span>vec2 st0 = dFdx( vUv.st );<span class="pl-cce">\n</span>vec2 st1 = dFdy( vUv.st );<span class="pl-cce">\n</span>vec3 S = normalize(  q0 * st1.t - q1 * st0.t );<span class="pl-cce">\n</span>vec3 T = normalize( -q0 * st1.s + q1 * st0.s );<span class="pl-cce">\n</span>vec3 N = normalize( surf_norm );<span class="pl-cce">\n</span>vec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;<span class="pl-cce">\n</span>mapN.xy = normalScale * mapN.xy;<span class="pl-cce">\n</span>mat3 tsn = mat3( S, T, N );<span class="pl-cce">\n</span>return normalize( tsn * mapN );<span class="pl-cce">\n</span>}<span class="pl-cce">\n</span>#endif<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L310" class="blob-num js-line-number" data-line-number="310"></td>
        <td id="LC310" class="blob-code blob-code-inner js-file-line">specularmap_pars_fragment:&quot;#ifdef USE_SPECULARMAP\nuniform sampler2D specularMap;\n#endif&quot;,specularmap_fragment:&quot;float specularStrength;\n#ifdef USE_SPECULARMAP\nvec4 texelSpecular = texture2D( specularMap, vUv );\nspecularStrength = texelSpecular.r;\n#else\nspecularStrength = 1.0;\n#endif&quot;,lights_lambert_pars_vertex:&quot;uniform vec3 ambient;\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 ambientLightColor;\n#if MAX_DIR_LIGHTS &gt; 0\nuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\nuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n#endif\n#if MAX_HEMI_LIGHTS &gt; 0\nuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\nuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\nuniform vec3 hemisphereLightPosition[ MAX_HEMI_LIGHTS ];\n#endif\n#if MAX_POINT_LIGHTS &gt; 0\nuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\nuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\nuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n#endif\n#if MAX_SPOT_LIGHTS &gt; 0\nuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\nuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\nuniform float spotLightAngle[ MAX_SPOT_LIGHTS ];\nuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\n#endif\n#ifdef WRAP_AROUND\nuniform vec3 wrapRGB;\n#endif&quot;,</td>
      </tr>
      <tr>
        <td id="L311" class="blob-num js-line-number" data-line-number="311"></td>
        <td id="LC311" class="blob-code blob-code-inner js-file-line">lights_lambert_vertex:&quot;vLightFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\nvLightBack = vec3( 0.0 );\n#endif\ntransformedNormal = normalize( transformedNormal );\n#if MAX_DIR_LIGHTS &gt; 0\nfor( int i = 0; i &lt; MAX_DIR_LIGHTS; i ++ ) {\nvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\nvec3 dirVector = normalize( lDirection.xyz );\nfloat dotProduct = dot( transformedNormal, dirVector );\nvec3 directionalLightWeighting = vec3( max( dotProduct, 0.0 ) );\n#ifdef DOUBLE_SIDED\nvec3 directionalLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n#ifdef WRAP_AROUND\nvec3 directionalLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n#endif\n#endif\n#ifdef WRAP_AROUND\nvec3 directionalLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\ndirectionalLightWeighting = mix( directionalLightWeighting, directionalLightWeightingHalf, wrapRGB );\n#ifdef DOUBLE_SIDED\ndirectionalLightWeightingBack = mix( directionalLightWeightingBack, directionalLightWeightingHalfBack, wrapRGB );\n#endif\n#endif\nvLightFront += directionalLightColor[ i ] * directionalLightWeighting;\n#ifdef DOUBLE_SIDED\nvLightBack += directionalLightColor[ i ] * directionalLightWeightingBack;\n#endif\n}\n#endif\n#if MAX_POINT_LIGHTS &gt; 0\nfor( int i = 0; i &lt; MAX_POINT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz - mvPosition.xyz;\nfloat lDistance = 1.0;\nif ( pointLightDistance[ i ] &gt; 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\nlVector = normalize( lVector );\nfloat dotProduct = dot( transformedNormal, lVector );\nvec3 pointLightWeighting = vec3( max( dotProduct, 0.0 ) );\n#ifdef DOUBLE_SIDED\nvec3 pointLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n#ifdef WRAP_AROUND\nvec3 pointLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n#endif\n#endif\n#ifdef WRAP_AROUND\nvec3 pointLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\npointLightWeighting = mix( pointLightWeighting, pointLightWeightingHalf, wrapRGB );\n#ifdef DOUBLE_SIDED\npointLightWeightingBack = mix( pointLightWeightingBack, pointLightWeightingHalfBack, wrapRGB );\n#endif\n#endif\nvLightFront += pointLightColor[ i ] * pointLightWeighting * lDistance;\n#ifdef DOUBLE_SIDED\nvLightBack += pointLightColor[ i ] * pointLightWeightingBack * lDistance;\n#endif\n}\n#endif\n#if MAX_SPOT_LIGHTS &gt; 0\nfor( int i = 0; i &lt; MAX_SPOT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz - mvPosition.xyz;\nlVector = normalize( lVector );\nfloat spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - mPosition.xyz ) );\nif ( spotEffect &gt; spotLightAngle[ i ] ) {\nspotEffect = pow( spotEffect, spotLightExponent[ i ] );\nfloat lDistance = 1.0;\nif ( spotLightDistance[ i ] &gt; 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );\nfloat dotProduct = dot( transformedNormal, lVector );\nvec3 spotLightWeighting = vec3( max( dotProduct, 0.0 ) );\n#ifdef DOUBLE_SIDED\nvec3 spotLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n#ifdef WRAP_AROUND\nvec3 spotLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n#endif\n#endif\n#ifdef WRAP_AROUND\nvec3 spotLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\nspotLightWeighting = mix( spotLightWeighting, spotLightWeightingHalf, wrapRGB );\n#ifdef DOUBLE_SIDED\nspotLightWeightingBack = mix( spotLightWeightingBack, spotLightWeightingHalfBack, wrapRGB );\n#endif\n#endif\nvLightFront += spotLightColor[ i ] * spotLightWeighting * lDistance * spotEffect;\n#ifdef DOUBLE_SIDED\nvLightBack += spotLightColor[ i ] * spotLightWeightingBack * lDistance * spotEffect;\n#endif\n}\n}\n#endif\n#if MAX_HEMI_LIGHTS &gt; 0\nfor( int i = 0; i &lt; MAX_HEMI_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( hemisphereLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz - mvPosition.xyz;\nlVector = normalize( lVector );\nfloat dotProduct = dot( transformedNormal, lVector );\nfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\nfloat hemiDiffuseWeightBack = -0.5 * dotProduct + 0.5;\nvLightFront += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\n#ifdef DOUBLE_SIDED\nvLightBack += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeightBack );\n#endif\n}\n#endif\nvLightFront = vLightFront * diffuse + ambient * ambientLightColor + emissive;\n#ifdef DOUBLE_SIDED\nvLightBack = vLightBack * diffuse + ambient * ambientLightColor + emissive;\n#endif&quot;,</td>
      </tr>
      <tr>
        <td id="L312" class="blob-num js-line-number" data-line-number="312"></td>
        <td id="LC312" class="blob-code blob-code-inner js-file-line">lights_phong_pars_vertex<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifndef PHONG_PER_PIXEL<span class="pl-cce">\n</span>#if MAX_POINT_LIGHTS &gt; 0<span class="pl-cce">\n</span>uniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];<span class="pl-cce">\n</span>uniform float pointLightDistance[ MAX_POINT_LIGHTS ];<span class="pl-cce">\n</span>varying vec4 vPointLight[ MAX_POINT_LIGHTS ];<span class="pl-cce">\n</span>#endif<span class="pl-cce">\n</span>#if MAX_SPOT_LIGHTS &gt; 0<span class="pl-cce">\n</span>uniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];<span class="pl-cce">\n</span>uniform float spotLightDistance[ MAX_SPOT_LIGHTS ];<span class="pl-cce">\n</span>varying vec4 vSpotLight[ MAX_SPOT_LIGHTS ];<span class="pl-cce">\n</span>#endif<span class="pl-cce">\n</span>#endif<span class="pl-cce">\n</span>#if MAX_SPOT_LIGHTS &gt; 0 || defined( USE_BUMPMAP )<span class="pl-cce">\n</span>varying vec3 vWorldPosition;<span class="pl-cce">\n</span>#endif<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L313" class="blob-num js-line-number" data-line-number="313"></td>
        <td id="LC313" class="blob-code blob-code-inner js-file-line">lights_phong_vertex<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifndef PHONG_PER_PIXEL<span class="pl-cce">\n</span>#if MAX_POINT_LIGHTS &gt; 0<span class="pl-cce">\n</span>for( int i = 0; i &lt; MAX_POINT_LIGHTS; i ++ ) {<span class="pl-cce">\n</span>vec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );<span class="pl-cce">\n</span>vec3 lVector = lPosition.xyz - mvPosition.xyz;<span class="pl-cce">\n</span>float lDistance = 1.0;<span class="pl-cce">\n</span>if ( pointLightDistance[ i ] &gt; 0.0 )<span class="pl-cce">\n</span>lDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );<span class="pl-cce">\n</span>vPointLight[ i ] = vec4( lVector, lDistance );<span class="pl-cce">\n</span>}<span class="pl-cce">\n</span>#endif<span class="pl-cce">\n</span>#if MAX_SPOT_LIGHTS &gt; 0<span class="pl-cce">\n</span>for( int i = 0; i &lt; MAX_SPOT_LIGHTS; i ++ ) {<span class="pl-cce">\n</span>vec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );<span class="pl-cce">\n</span>vec3 lVector = lPosition.xyz - mvPosition.xyz;<span class="pl-cce">\n</span>float lDistance = 1.0;<span class="pl-cce">\n</span>if ( spotLightDistance[ i ] &gt; 0.0 )<span class="pl-cce">\n</span>lDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );<span class="pl-cce">\n</span>vSpotLight[ i ] = vec4( lVector, lDistance );<span class="pl-cce">\n</span>}<span class="pl-cce">\n</span>#endif<span class="pl-cce">\n</span>#endif<span class="pl-cce">\n</span>#if MAX_SPOT_LIGHTS &gt; 0 || defined( USE_BUMPMAP )<span class="pl-cce">\n</span>vWorldPosition = mPosition.xyz;<span class="pl-cce">\n</span>#endif<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L314" class="blob-num js-line-number" data-line-number="314"></td>
        <td id="LC314" class="blob-code blob-code-inner js-file-line">lights_phong_pars_fragment:&quot;uniform vec3 ambientLightColor;\n#if MAX_DIR_LIGHTS &gt; 0\nuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\nuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n#endif\n#if MAX_HEMI_LIGHTS &gt; 0\nuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\nuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\nuniform vec3 hemisphereLightPosition[ MAX_HEMI_LIGHTS ];\n#endif\n#if MAX_POINT_LIGHTS &gt; 0\nuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\n#ifdef PHONG_PER_PIXEL\nuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\nuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n#else\nvarying vec4 vPointLight[ MAX_POINT_LIGHTS ];\n#endif\n#endif\n#if MAX_SPOT_LIGHTS &gt; 0\nuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\nuniform float spotLightAngle[ MAX_SPOT_LIGHTS ];\nuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\n#ifdef PHONG_PER_PIXEL\nuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\n#else\nvarying vec4 vSpotLight[ MAX_SPOT_LIGHTS ];\n#endif\n#endif\n#if MAX_SPOT_LIGHTS &gt; 0 || defined( USE_BUMPMAP )\nvarying vec3 vWorldPosition;\n#endif\n#ifdef WRAP_AROUND\nuniform vec3 wrapRGB;\n#endif\nvarying vec3 vViewPosition;\nvarying vec3 vNormal;&quot;,</td>
      </tr>
      <tr>
        <td id="L315" class="blob-num js-line-number" data-line-number="315"></td>
        <td id="LC315" class="blob-code blob-code-inner js-file-line">lights_phong_fragment:&quot;vec3 normal = normalize( vNormal );\nvec3 viewPosition = normalize( vViewPosition );\n#ifdef DOUBLE_SIDED\nnormal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );\n#endif\n#ifdef USE_NORMALMAP\nnormal = perturbNormal2Arb( -viewPosition, normal );\n#elif defined( USE_BUMPMAP )\nnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif\n#if MAX_POINT_LIGHTS &gt; 0\nvec3 pointDiffuse  = vec3( 0.0 );\nvec3 pointSpecular = vec3( 0.0 );\nfor ( int i = 0; i &lt; MAX_POINT_LIGHTS; i ++ ) {\n#ifdef PHONG_PER_PIXEL\nvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz + vViewPosition.xyz;\nfloat lDistance = 1.0;\nif ( pointLightDistance[ i ] &gt; 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\nlVector = normalize( lVector );\n#else\nvec3 lVector = normalize( vPointLight[ i ].xyz );\nfloat lDistance = vPointLight[ i ].w;\n#endif\nfloat dotProduct = dot( normal, lVector );\n#ifdef WRAP_AROUND\nfloat pointDiffuseWeightFull = max( dotProduct, 0.0 );\nfloat pointDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\nvec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );\n#else\nfloat pointDiffuseWeight = max( dotProduct, 0.0 );\n#endif\npointDiffuse  += diffuse * pointLightColor[ i ] * pointDiffuseWeight * lDistance;\nvec3 pointHalfVector = normalize( lVector + viewPosition );\nfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\nfloat pointSpecularWeight = specularStrength * max( pow( pointDotNormalHalf, shininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( shininess + 2.0001 ) / 8.0;\nvec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, pointHalfVector ), 5.0 );\npointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance * specularNormalization;\n#else\npointSpecular += specular * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance;\n#endif\n}\n#endif\n#if MAX_SPOT_LIGHTS &gt; 0\nvec3 spotDiffuse  = vec3( 0.0 );\nvec3 spotSpecular = vec3( 0.0 );\nfor ( int i = 0; i &lt; MAX_SPOT_LIGHTS; i ++ ) {\n#ifdef PHONG_PER_PIXEL\nvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz + vViewPosition.xyz;\nfloat lDistance = 1.0;\nif ( spotLightDistance[ i ] &gt; 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );\nlVector = normalize( lVector );\n#else\nvec3 lVector = normalize( vSpotLight[ i ].xyz );\nfloat lDistance = vSpotLight[ i ].w;\n#endif\nfloat spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - vWorldPosition ) );\nif ( spotEffect &gt; spotLightAngle[ i ] ) {\nspotEffect = pow( spotEffect, spotLightExponent[ i ] );\nfloat dotProduct = dot( normal, lVector );\n#ifdef WRAP_AROUND\nfloat spotDiffuseWeightFull = max( dotProduct, 0.0 );\nfloat spotDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\nvec3 spotDiffuseWeight = mix( vec3 ( spotDiffuseWeightFull ), vec3( spotDiffuseWeightHalf ), wrapRGB );\n#else\nfloat spotDiffuseWeight = max( dotProduct, 0.0 );\n#endif\nspotDiffuse += diffuse * spotLightColor[ i ] * spotDiffuseWeight * lDistance * spotEffect;\nvec3 spotHalfVector = normalize( lVector + viewPosition );\nfloat spotDotNormalHalf = max( dot( normal, spotHalfVector ), 0.0 );\nfloat spotSpecularWeight = specularStrength * max( pow( spotDotNormalHalf, shininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( shininess + 2.0001 ) / 8.0;\nvec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, spotHalfVector ), 5.0 );\nspotSpecular += schlick * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * lDistance * specularNormalization * spotEffect;\n#else\nspotSpecular += specular * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * lDistance * spotEffect;\n#endif\n}\n}\n#endif\n#if MAX_DIR_LIGHTS &gt; 0\nvec3 dirDiffuse  = vec3( 0.0 );\nvec3 dirSpecular = vec3( 0.0 );\nfor( int i = 0; i &lt; MAX_DIR_LIGHTS; i ++ ) {\nvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\nvec3 dirVector = normalize( lDirection.xyz );\nfloat dotProduct = dot( normal, dirVector );\n#ifdef WRAP_AROUND\nfloat dirDiffuseWeightFull = max( dotProduct, 0.0 );\nfloat dirDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\nvec3 dirDiffuseWeight = mix( vec3( dirDiffuseWeightFull ), vec3( dirDiffuseWeightHalf ), wrapRGB );\n#else\nfloat dirDiffuseWeight = max( dotProduct, 0.0 );\n#endif\ndirDiffuse  += diffuse * directionalLightColor[ i ] * dirDiffuseWeight;\nvec3 dirHalfVector = normalize( dirVector + viewPosition );\nfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\nfloat dirSpecularWeight = specularStrength * max( pow( dirDotNormalHalf, shininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( shininess + 2.0001 ) / 8.0;\nvec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( dirVector, dirHalfVector ), 5.0 );\ndirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;\n#else\ndirSpecular += specular * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight;\n#endif\n}\n#endif\n#if MAX_HEMI_LIGHTS &gt; 0\nvec3 hemiDiffuse  = vec3( 0.0 );\nvec3 hemiSpecular = vec3( 0.0 );\nfor( int i = 0; i &lt; MAX_HEMI_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( hemisphereLightPosition[ i ], 1.0 );\nvec3 lVector = normalize( lPosition.xyz + vViewPosition.xyz );\nfloat dotProduct = dot( normal, lVector );\nfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\nvec3 hemiColor = mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\nhemiDiffuse += diffuse * hemiColor;\nvec3 hemiHalfVectorSky = normalize( lVector + viewPosition );\nfloat hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\nfloat hemiSpecularWeightSky = specularStrength * max( pow( hemiDotNormalHalfSky, shininess ), 0.0 );\nvec3 lVectorGround = normalize( -lPosition.xyz + vViewPosition.xyz );\nvec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );\nfloat hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\nfloat hemiSpecularWeightGround = specularStrength * max( pow( hemiDotNormalHalfGround, shininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat dotProductGround = dot( normal, lVectorGround );\nfloat specularNormalization = ( shininess + 2.0001 ) / 8.0;\nvec3 schlickSky = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, hemiHalfVectorSky ), 5.0 );\nvec3 schlickGround = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVectorGround, hemiHalfVectorGround ), 5.0 );\nhemiSpecular += hemiColor * specularNormalization * ( schlickSky * hemiSpecularWeightSky * max( dotProduct, 0.0 ) + schlickGround * hemiSpecularWeightGround * max( dotProductGround, 0.0 ) );\n#else\nhemiSpecular += specular * hemiColor * ( hemiSpecularWeightSky + hemiSpecularWeightGround ) * hemiDiffuseWeight;\n#endif\n}\n#endif\nvec3 totalDiffuse = vec3( 0.0 );\nvec3 totalSpecular = vec3( 0.0 );\n#if MAX_DIR_LIGHTS &gt; 0\ntotalDiffuse += dirDiffuse;\ntotalSpecular += dirSpecular;\n#endif\n#if MAX_HEMI_LIGHTS &gt; 0\ntotalDiffuse += hemiDiffuse;\ntotalSpecular += hemiSpecular;\n#endif\n#if MAX_POINT_LIGHTS &gt; 0\ntotalDiffuse += pointDiffuse;\ntotalSpecular += pointSpecular;\n#endif\n#if MAX_SPOT_LIGHTS &gt; 0\ntotalDiffuse += spotDiffuse;\ntotalSpecular += spotSpecular;\n#endif\n#ifdef METAL\ngl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient + totalSpecular );\n#else\ngl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient ) + totalSpecular;\n#endif&quot;,</td>
      </tr>
      <tr>
        <td id="L316" class="blob-num js-line-number" data-line-number="316"></td>
        <td id="LC316" class="blob-code blob-code-inner js-file-line">color_pars_fragment:&quot;#ifdef USE_COLOR\nvarying vec3 vColor;\n#endif&quot;,color_fragment:&quot;#ifdef USE_COLOR\ngl_FragColor = gl_FragColor * vec4( vColor, opacity );\n#endif&quot;,color_pars_vertex:&quot;#ifdef USE_COLOR\nvarying vec3 vColor;\n#endif&quot;,color_vertex:&quot;#ifdef USE_COLOR\n#ifdef GAMMA_INPUT\nvColor = color * color;\n#else\nvColor = color;\n#endif\n#endif&quot;,skinning_pars_vertex:&quot;#ifdef USE_SKINNING\n#ifdef BONE_TEXTURE\nuniform sampler2D boneTexture;\nmat4 getBoneMatrix( const in float i ) {\nfloat j = i * 4.0;\nfloat x = mod( j, N_BONE_PIXEL_X );\nfloat y = floor( j / N_BONE_PIXEL_X );\nconst float dx = 1.0 / N_BONE_PIXEL_X;\nconst float dy = 1.0 / N_BONE_PIXEL_Y;\ny = dy * ( y + 0.5 );\nvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\nvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\nvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\nvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\nmat4 bone = mat4( v1, v2, v3, v4 );\nreturn bone;\n}\n#else\nuniform mat4 boneGlobalMatrices[ MAX_BONES ];\nmat4 getBoneMatrix( const in float i ) {\nmat4 bone = boneGlobalMatrices[ int(i) ];\nreturn bone;\n}\n#endif\n#endif&quot;,</td>
      </tr>
      <tr>
        <td id="L317" class="blob-num js-line-number" data-line-number="317"></td>
        <td id="LC317" class="blob-code blob-code-inner js-file-line">skinbase_vertex<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_SKINNING<span class="pl-cce">\n</span>mat4 boneMatX = getBoneMatrix( skinIndex.x );<span class="pl-cce">\n</span>mat4 boneMatY = getBoneMatrix( skinIndex.y );<span class="pl-cce">\n</span>#endif<span class="pl-pds">&quot;</span></span>,skinning_vertex<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_SKINNING<span class="pl-cce">\n</span>#ifdef USE_MORPHTARGETS<span class="pl-cce">\n</span>vec4 skinVertex = vec4( morphed, 1.0 );<span class="pl-cce">\n</span>#else<span class="pl-cce">\n</span>vec4 skinVertex = vec4( position, 1.0 );<span class="pl-cce">\n</span>#endif<span class="pl-cce">\n</span>vec4 skinned  = boneMatX * skinVertex * skinWeight.x;<span class="pl-cce">\n</span>skinned <span class="pl-cce">\t</span>  += boneMatY * skinVertex * skinWeight.y;<span class="pl-cce">\n</span>#endif<span class="pl-pds">&quot;</span></span>,morphtarget_pars_vertex<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_MORPHTARGETS<span class="pl-cce">\n</span>#ifndef USE_MORPHNORMALS<span class="pl-cce">\n</span>uniform float morphTargetInfluences[ 8 ];<span class="pl-cce">\n</span>#else<span class="pl-cce">\n</span>uniform float morphTargetInfluences[ 4 ];<span class="pl-cce">\n</span>#endif<span class="pl-cce">\n</span>#endif<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L318" class="blob-num js-line-number" data-line-number="318"></td>
        <td id="LC318" class="blob-code blob-code-inner js-file-line">morphtarget_vertex<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_MORPHTARGETS<span class="pl-cce">\n</span>vec3 morphed = vec3( 0.0 );<span class="pl-cce">\n</span>morphed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];<span class="pl-cce">\n</span>morphed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];<span class="pl-cce">\n</span>morphed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];<span class="pl-cce">\n</span>morphed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];<span class="pl-cce">\n</span>#ifndef USE_MORPHNORMALS<span class="pl-cce">\n</span>morphed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];<span class="pl-cce">\n</span>morphed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];<span class="pl-cce">\n</span>morphed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];<span class="pl-cce">\n</span>morphed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];<span class="pl-cce">\n</span>#endif<span class="pl-cce">\n</span>morphed += position;<span class="pl-cce">\n</span>#endif<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L319" class="blob-num js-line-number" data-line-number="319"></td>
        <td id="LC319" class="blob-code blob-code-inner js-file-line">default_vertex<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>vec4 mvPosition;<span class="pl-cce">\n</span>#ifdef USE_SKINNING<span class="pl-cce">\n</span>mvPosition = modelViewMatrix * skinned;<span class="pl-cce">\n</span>#endif<span class="pl-cce">\n</span>#if !defined( USE_SKINNING ) &amp;&amp; defined( USE_MORPHTARGETS )<span class="pl-cce">\n</span>mvPosition = modelViewMatrix * vec4( morphed, 1.0 );<span class="pl-cce">\n</span>#endif<span class="pl-cce">\n</span>#if !defined( USE_SKINNING ) &amp;&amp; ! defined( USE_MORPHTARGETS )<span class="pl-cce">\n</span>mvPosition = modelViewMatrix * vec4( position, 1.0 );<span class="pl-cce">\n</span>#endif<span class="pl-cce">\n</span>gl_Position = projectionMatrix * mvPosition;<span class="pl-pds">&quot;</span></span>,morphnormal_vertex<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_MORPHNORMALS<span class="pl-cce">\n</span>vec3 morphedNormal = vec3( 0.0 );<span class="pl-cce">\n</span>morphedNormal +=  ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];<span class="pl-cce">\n</span>morphedNormal +=  ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];<span class="pl-cce">\n</span>morphedNormal +=  ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];<span class="pl-cce">\n</span>morphedNormal +=  ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];<span class="pl-cce">\n</span>morphedNormal += normal;<span class="pl-cce">\n</span>#endif<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L320" class="blob-num js-line-number" data-line-number="320"></td>
        <td id="LC320" class="blob-code blob-code-inner js-file-line">skinnormal_vertex<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_SKINNING<span class="pl-cce">\n</span>mat4 skinMatrix = skinWeight.x * boneMatX;<span class="pl-cce">\n</span>skinMatrix <span class="pl-cce">\t</span>+= skinWeight.y * boneMatY;<span class="pl-cce">\n</span>#ifdef USE_MORPHNORMALS<span class="pl-cce">\n</span>vec4 skinnedNormal = skinMatrix * vec4( morphedNormal, 0.0 );<span class="pl-cce">\n</span>#else<span class="pl-cce">\n</span>vec4 skinnedNormal = skinMatrix * vec4( normal, 0.0 );<span class="pl-cce">\n</span>#endif<span class="pl-cce">\n</span>#endif<span class="pl-pds">&quot;</span></span>,defaultnormal_vertex<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>vec3 objectNormal;<span class="pl-cce">\n</span>#ifdef USE_SKINNING<span class="pl-cce">\n</span>objectNormal = skinnedNormal.xyz;<span class="pl-cce">\n</span>#endif<span class="pl-cce">\n</span>#if !defined( USE_SKINNING ) &amp;&amp; defined( USE_MORPHNORMALS )<span class="pl-cce">\n</span>objectNormal = morphedNormal;<span class="pl-cce">\n</span>#endif<span class="pl-cce">\n</span>#if !defined( USE_SKINNING ) &amp;&amp; ! defined( USE_MORPHNORMALS )<span class="pl-cce">\n</span>objectNormal = normal;<span class="pl-cce">\n</span>#endif<span class="pl-cce">\n</span>#ifdef FLIP_SIDED<span class="pl-cce">\n</span>objectNormal = -objectNormal;<span class="pl-cce">\n</span>#endif<span class="pl-cce">\n</span>vec3 transformedNormal = normalMatrix * objectNormal;<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L321" class="blob-num js-line-number" data-line-number="321"></td>
        <td id="LC321" class="blob-code blob-code-inner js-file-line">shadowmap_pars_fragment:&quot;#ifdef USE_SHADOWMAP\nuniform sampler2D shadowMap[ MAX_SHADOWS ];\nuniform vec2 shadowMapSize[ MAX_SHADOWS ];\nuniform float shadowDarkness[ MAX_SHADOWS ];\nuniform float shadowBias[ MAX_SHADOWS ];\nvarying vec4 vShadowCoord[ MAX_SHADOWS ];\nfloat unpackDepth( const in vec4 rgba_depth ) {\nconst vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\nfloat depth = dot( rgba_depth, bit_shift );\nreturn depth;\n}\n#endif&quot;,shadowmap_fragment:&quot;#ifdef USE_SHADOWMAP\n#ifdef SHADOWMAP_DEBUG\nvec3 frustumColors[3];\nfrustumColors[0] = vec3( 1.0, 0.5, 0.0 );\nfrustumColors[1] = vec3( 0.0, 1.0, 0.8 );\nfrustumColors[2] = vec3( 0.0, 0.5, 1.0 );\n#endif\n#ifdef SHADOWMAP_CASCADE\nint inFrustumCount = 0;\n#endif\nfloat fDepth;\nvec3 shadowColor = vec3( 1.0 );\nfor( int i = 0; i &lt; MAX_SHADOWS; i ++ ) {\nvec3 shadowCoord = vShadowCoord[ i ].xyz / vShadowCoord[ i ].w;\nbvec4 inFrustumVec = bvec4 ( shadowCoord.x &gt;= 0.0, shadowCoord.x &lt;= 1.0, shadowCoord.y &gt;= 0.0, shadowCoord.y &lt;= 1.0 );\nbool inFrustum = all( inFrustumVec );\n#ifdef SHADOWMAP_CASCADE\ninFrustumCount += int( inFrustum );\nbvec3 frustumTestVec = bvec3( inFrustum, inFrustumCount == 1, shadowCoord.z &lt;= 1.0 );\n#else\nbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z &lt;= 1.0 );\n#endif\nbool frustumTest = all( frustumTestVec );\nif ( frustumTest ) {\nshadowCoord.z += shadowBias[ i ];\n#ifdef SHADOWMAP_SOFT\nfloat shadow = 0.0;\nconst float shadowDelta = 1.0 / 9.0;\nfloat xPixelOffset = 1.0 / shadowMapSize[ i ].x;\nfloat yPixelOffset = 1.0 / shadowMapSize[ i ].y;\nfloat dx0 = -1.25 * xPixelOffset;\nfloat dy0 = -1.25 * yPixelOffset;\nfloat dx1 = 1.25 * xPixelOffset;\nfloat dy1 = 1.25 * yPixelOffset;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\nif ( fDepth &lt; shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\nif ( fDepth &lt; shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\nif ( fDepth &lt; shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\nif ( fDepth &lt; shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\nif ( fDepth &lt; shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\nif ( fDepth &lt; shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\nif ( fDepth &lt; shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\nif ( fDepth &lt; shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\nif ( fDepth &lt; shadowCoord.z ) shadow += shadowDelta;\nshadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );\n#else\nvec4 rgbaDepth = texture2D( shadowMap[ i ], shadowCoord.xy );\nfloat fDepth = unpackDepth( rgbaDepth );\nif ( fDepth &lt; shadowCoord.z )\nshadowColor = shadowColor * vec3( 1.0 - shadowDarkness[ i ] );\n#endif\n}\n#ifdef SHADOWMAP_DEBUG\n#ifdef SHADOWMAP_CASCADE\nif ( inFrustum &amp;&amp; inFrustumCount == 1 ) gl_FragColor.xyz *= frustumColors[ i ];\n#else\nif ( inFrustum ) gl_FragColor.xyz *= frustumColors[ i ];\n#endif\n#endif\n}\n#ifdef GAMMA_OUTPUT\nshadowColor *= shadowColor;\n#endif\ngl_FragColor.xyz = gl_FragColor.xyz * shadowColor;\n#endif&quot;,</td>
      </tr>
      <tr>
        <td id="L322" class="blob-num js-line-number" data-line-number="322"></td>
        <td id="LC322" class="blob-code blob-code-inner js-file-line">shadowmap_pars_vertex<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_SHADOWMAP<span class="pl-cce">\n</span>varying vec4 vShadowCoord[ MAX_SHADOWS ];<span class="pl-cce">\n</span>uniform mat4 shadowMatrix[ MAX_SHADOWS ];<span class="pl-cce">\n</span>#endif<span class="pl-pds">&quot;</span></span>,shadowmap_vertex<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_SHADOWMAP<span class="pl-cce">\n</span>for( int i = 0; i &lt; MAX_SHADOWS; i ++ ) {<span class="pl-cce">\n</span>vShadowCoord[ i ] = shadowMatrix[ i ] * mPosition;<span class="pl-cce">\n</span>}<span class="pl-cce">\n</span>#endif<span class="pl-pds">&quot;</span></span>,alphatest_fragment<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef ALPHATEST<span class="pl-cce">\n</span>if ( gl_FragColor.a &lt; ALPHATEST ) discard;<span class="pl-cce">\n</span>#endif<span class="pl-pds">&quot;</span></span>,linear_to_gamma_fragment<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef GAMMA_OUTPUT<span class="pl-cce">\n</span>gl_FragColor.xyz = sqrt( gl_FragColor.xyz );<span class="pl-cce">\n</span>#endif<span class="pl-pds">&quot;</span></span>};</td>
      </tr>
      <tr>
        <td id="L323" class="blob-num js-line-number" data-line-number="323"></td>
        <td id="LC323" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">UniformsUtils</span><span class="pl-k">=</span>{<span class="pl-en">merge</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b,c,d,e<span class="pl-k">=</span>{};<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>;b<span class="pl-k">++</span>)<span class="pl-k">for</span>(c <span class="pl-k">in</span> d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">clone</span>(a[b]),d)e[c]<span class="pl-k">=</span>d[c];<span class="pl-k">return</span> e},<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b,c,d,e<span class="pl-k">=</span>{};<span class="pl-k">for</span>(b <span class="pl-k">in</span> a)<span class="pl-k">for</span>(c <span class="pl-k">in</span> e[b]<span class="pl-k">=</span>{},a[b])d<span class="pl-k">=</span>a[b][c],e[b][c]<span class="pl-k">=</span>d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Color</span><span class="pl-k">||</span>d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Vector2</span><span class="pl-k">||</span>d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Vector3</span><span class="pl-k">||</span>d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Vector4</span><span class="pl-k">||</span>d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Matrix4</span><span class="pl-k">||</span>d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Texture</span><span class="pl-k">?</span><span class="pl-smi">d</span>.<span class="pl-en">clone</span>()<span class="pl-k">:</span>d <span class="pl-k">instanceof</span> <span class="pl-c1">Array</span><span class="pl-k">?</span><span class="pl-smi">d</span>.<span class="pl-c1">slice</span>()<span class="pl-k">:</span>d;<span class="pl-k">return</span> e}};</td>
      </tr>
      <tr>
        <td id="L324" class="blob-num js-line-number" data-line-number="324"></td>
        <td id="LC324" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">UniformsLib</span><span class="pl-k">=</span>{common<span class="pl-k">:</span>{diffuse<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>c<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">15658734</span>)},opacity<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">1</span>},map<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>t<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">null</span>},offsetRepeat<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>v4<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector4</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>)},lightMap<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>t<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">null</span>},specularMap<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>t<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">null</span>},envMap<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>t<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">null</span>},flipEnvMap<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-k">-</span><span class="pl-c1">1</span>},useRefract<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>i<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">0</span>},reflectivity<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">1</span>},refractionRatio<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">0.98</span>},combine<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>i<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">0</span>},morphTargetInfluences<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">0</span>}},bump<span class="pl-k">:</span>{bumpMap<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>t<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L325" class="blob-num js-line-number" data-line-number="325"></td>
        <td id="LC325" class="blob-code blob-code-inner js-file-line">value<span class="pl-k">:</span><span class="pl-c1">null</span>},bumpScale<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">1</span>}},normalmap<span class="pl-k">:</span>{normalMap<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>t<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">null</span>},normalScale<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>v2<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(<span class="pl-c1">1</span>,<span class="pl-c1">1</span>)}},fog<span class="pl-k">:</span>{fogDensity<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">2.5E-4</span>},fogNear<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">1</span>},fogFar<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">2E3</span>},fogColor<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>c<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">16777215</span>)}},lights<span class="pl-k">:</span>{ambientLightColor<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>fv<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span>[]},directionalLightDirection<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>fv<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span>[]},directionalLightColor<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>fv<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span>[]},hemisphereLightPosition<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>fv<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span>[]},hemisphereLightSkyColor<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>fv<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L326" class="blob-num js-line-number" data-line-number="326"></td>
        <td id="LC326" class="blob-code blob-code-inner js-file-line">value<span class="pl-k">:</span>[]},hemisphereLightGroundColor<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>fv<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span>[]},pointLightColor<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>fv<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span>[]},pointLightPosition<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>fv<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span>[]},pointLightDistance<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>fv1<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span>[]},spotLightColor<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>fv<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span>[]},spotLightPosition<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>fv<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span>[]},spotLightDirection<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>fv<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span>[]},spotLightDistance<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>fv1<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span>[]},spotLightAngle<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>fv1<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span>[]},spotLightExponent<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>fv1<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span>[]}},particle<span class="pl-k">:</span>{psColor<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>c<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">15658734</span>)},opacity<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">1</span>},size<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L327" class="blob-num js-line-number" data-line-number="327"></td>
        <td id="LC327" class="blob-code blob-code-inner js-file-line">value<span class="pl-k">:</span><span class="pl-c1">1</span>},scale<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">1</span>},map<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>t<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">null</span>},fogDensity<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">2.5E-4</span>},fogNear<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">1</span>},fogFar<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">2E3</span>},fogColor<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>c<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">16777215</span>)}},shadowmap<span class="pl-k">:</span>{shadowMap<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>tv<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span>[]},shadowMapSize<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>v2v<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span>[]},shadowBias<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>fv1<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span>[]},shadowDarkness<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>fv1<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span>[]},shadowMatrix<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>m4v<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span>[]}}};</td>
      </tr>
      <tr>
        <td id="L328" class="blob-num js-line-number" data-line-number="328"></td>
        <td id="LC328" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderLib</span><span class="pl-k">=</span>{depth<span class="pl-k">:</span>{uniforms<span class="pl-k">:</span>{mNear<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">1</span>},mFar<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">2E3</span>},opacity<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">1</span>}},vertexShader<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>void main() {<span class="pl-cce">\n</span>gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );<span class="pl-cce">\n</span>}<span class="pl-pds">&quot;</span></span>,fragmentShader<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>uniform float mNear;<span class="pl-cce">\n</span>uniform float mFar;<span class="pl-cce">\n</span>uniform float opacity;<span class="pl-cce">\n</span>void main() {<span class="pl-cce">\n</span>float depth = gl_FragCoord.z / gl_FragCoord.w;<span class="pl-cce">\n</span>float color = 1.0 - smoothstep( mNear, mFar, depth );<span class="pl-cce">\n</span>gl_FragColor = vec4( vec3( color ), opacity );<span class="pl-cce">\n</span>}<span class="pl-pds">&quot;</span></span>},normal<span class="pl-k">:</span>{uniforms<span class="pl-k">:</span>{opacity<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L329" class="blob-num js-line-number" data-line-number="329"></td>
        <td id="LC329" class="blob-code blob-code-inner js-file-line">value<span class="pl-k">:</span><span class="pl-c1">1</span>}},vertexShader<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>varying vec3 vNormal;<span class="pl-cce">\n</span>void main() {<span class="pl-cce">\n</span>vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );<span class="pl-cce">\n</span>vNormal = normalMatrix * normal;<span class="pl-cce">\n</span>gl_Position = projectionMatrix * mvPosition;<span class="pl-cce">\n</span>}<span class="pl-pds">&quot;</span></span>,fragmentShader<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>uniform float opacity;<span class="pl-cce">\n</span>varying vec3 vNormal;<span class="pl-cce">\n</span>void main() {<span class="pl-cce">\n</span>gl_FragColor = vec4( 0.5 * normalize( vNormal ) + 0.5, opacity );<span class="pl-cce">\n</span>}<span class="pl-pds">&quot;</span></span>},basic<span class="pl-k">:</span>{uniforms<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">UniformsUtils</span>.<span class="pl-en">merge</span>([<span class="pl-c1">THREE</span>.<span class="pl-smi">UniformsLib</span>.<span class="pl-smi">common</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">UniformsLib</span>.<span class="pl-smi">fog</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">UniformsLib</span>.<span class="pl-smi">shadowmap</span>]),vertexShader<span class="pl-k">:</span>[<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">map_pars_vertex</span>,</td>
      </tr>
      <tr>
        <td id="L330" class="blob-num js-line-number" data-line-number="330"></td>
        <td id="LC330" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">lightmap_pars_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">envmap_pars_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">color_pars_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">morphtarget_pars_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">skinning_pars_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">shadowmap_pars_vertex</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>void main() {<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">map_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">lightmap_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">color_vertex</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef USE_ENVMAP<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">morphnormal_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">skinbase_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">skinnormal_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">defaultnormal_vertex</span>,</td>
      </tr>
      <tr>
        <td id="L331" class="blob-num js-line-number" data-line-number="331"></td>
        <td id="LC331" class="blob-code blob-code-inner js-file-line"><span class="pl-s"><span class="pl-pds">&quot;</span>#endif<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">morphtarget_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">skinning_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">default_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">worldpos_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">envmap_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">shadowmap_vertex</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>}<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>),fragmentShader<span class="pl-k">:</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>uniform vec3 diffuse;<span class="pl-cce">\n</span>uniform float opacity;<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">color_pars_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">map_pars_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">lightmap_pars_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">envmap_pars_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">fog_pars_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">shadowmap_pars_fragment</span>,</td>
      </tr>
      <tr>
        <td id="L332" class="blob-num js-line-number" data-line-number="332"></td>
        <td id="LC332" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">specularmap_pars_fragment</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>void main() {<span class="pl-cce">\n</span>gl_FragColor = vec4( diffuse, opacity );<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">map_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">alphatest_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">specularmap_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">lightmap_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">color_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">envmap_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">shadowmap_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">linear_to_gamma_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">fog_fragment</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>}<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>)},lambert<span class="pl-k">:</span>{uniforms<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">UniformsUtils</span>.<span class="pl-en">merge</span>([<span class="pl-c1">THREE</span>.<span class="pl-smi">UniformsLib</span>.<span class="pl-smi">common</span>,</td>
      </tr>
      <tr>
        <td id="L333" class="blob-num js-line-number" data-line-number="333"></td>
        <td id="LC333" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">UniformsLib</span>.<span class="pl-smi">fog</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">UniformsLib</span>.<span class="pl-smi">lights</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">UniformsLib</span>.<span class="pl-smi">shadowmap</span>,{ambient<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>c<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">16777215</span>)},emissive<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>c<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">0</span>)},wrapRGB<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>v3<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>)}}]),vertexShader<span class="pl-k">:</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>#define LAMBERT<span class="pl-cce">\n</span>varying vec3 vLightFront;<span class="pl-cce">\n</span>#ifdef DOUBLE_SIDED<span class="pl-cce">\n</span>varying vec3 vLightBack;<span class="pl-cce">\n</span>#endif<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">map_pars_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">lightmap_pars_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">envmap_pars_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">lights_lambert_pars_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">color_pars_vertex</span>,</td>
      </tr>
      <tr>
        <td id="L334" class="blob-num js-line-number" data-line-number="334"></td>
        <td id="LC334" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">morphtarget_pars_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">skinning_pars_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">shadowmap_pars_vertex</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>void main() {<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">map_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">lightmap_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">color_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">morphnormal_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">skinbase_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">skinnormal_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">defaultnormal_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">morphtarget_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">skinning_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">default_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">worldpos_vertex</span>,</td>
      </tr>
      <tr>
        <td id="L335" class="blob-num js-line-number" data-line-number="335"></td>
        <td id="LC335" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">envmap_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">lights_lambert_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">shadowmap_vertex</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>}<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>),fragmentShader<span class="pl-k">:</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>uniform float opacity;<span class="pl-cce">\n</span>varying vec3 vLightFront;<span class="pl-cce">\n</span>#ifdef DOUBLE_SIDED<span class="pl-cce">\n</span>varying vec3 vLightBack;<span class="pl-cce">\n</span>#endif<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">color_pars_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">map_pars_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">lightmap_pars_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">envmap_pars_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">fog_pars_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">shadowmap_pars_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">specularmap_pars_fragment</span>,</td>
      </tr>
      <tr>
        <td id="L336" class="blob-num js-line-number" data-line-number="336"></td>
        <td id="LC336" class="blob-code blob-code-inner js-file-line"><span class="pl-s"><span class="pl-pds">&quot;</span>void main() {<span class="pl-cce">\n</span>gl_FragColor = vec4( vec3 ( 1.0 ), opacity );<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">map_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">alphatest_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">specularmap_fragment</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>#ifdef DOUBLE_SIDED<span class="pl-cce">\n</span>if ( gl_FrontFacing )<span class="pl-cce">\n</span>gl_FragColor.xyz *= vLightFront;<span class="pl-cce">\n</span>else<span class="pl-cce">\n</span>gl_FragColor.xyz *= vLightBack;<span class="pl-cce">\n</span>#else<span class="pl-cce">\n</span>gl_FragColor.xyz *= vLightFront;<span class="pl-cce">\n</span>#endif<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">lightmap_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">color_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">envmap_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">shadowmap_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">linear_to_gamma_fragment</span>,</td>
      </tr>
      <tr>
        <td id="L337" class="blob-num js-line-number" data-line-number="337"></td>
        <td id="LC337" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">fog_fragment</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>}<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>)},phong<span class="pl-k">:</span>{uniforms<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">UniformsUtils</span>.<span class="pl-en">merge</span>([<span class="pl-c1">THREE</span>.<span class="pl-smi">UniformsLib</span>.<span class="pl-smi">common</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">UniformsLib</span>.<span class="pl-smi">bump</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">UniformsLib</span>.<span class="pl-smi">normalmap</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">UniformsLib</span>.<span class="pl-smi">fog</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">UniformsLib</span>.<span class="pl-smi">lights</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">UniformsLib</span>.<span class="pl-smi">shadowmap</span>,{ambient<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>c<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">16777215</span>)},emissive<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>c<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">0</span>)},specular<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>c<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">1118481</span>)},shininess<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">30</span>},wrapRGB<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>v3<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>)}}]),vertexShader<span class="pl-k">:</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>#define PHONG<span class="pl-cce">\n</span>varying vec3 vViewPosition;<span class="pl-cce">\n</span>varying vec3 vNormal;<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L338" class="blob-num js-line-number" data-line-number="338"></td>
        <td id="LC338" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">map_pars_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">lightmap_pars_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">envmap_pars_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">lights_phong_pars_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">color_pars_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">morphtarget_pars_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">skinning_pars_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">shadowmap_pars_vertex</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>void main() {<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">map_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">lightmap_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">color_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">morphnormal_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">skinbase_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">skinnormal_vertex</span>,</td>
      </tr>
      <tr>
        <td id="L339" class="blob-num js-line-number" data-line-number="339"></td>
        <td id="LC339" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">defaultnormal_vertex</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>vNormal = transformedNormal;<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">morphtarget_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">skinning_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">default_vertex</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>vViewPosition = -mvPosition.xyz;<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">worldpos_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">envmap_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">lights_phong_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">shadowmap_vertex</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>}<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>),fragmentShader<span class="pl-k">:</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>uniform vec3 diffuse;<span class="pl-cce">\n</span>uniform float opacity;<span class="pl-cce">\n</span>uniform vec3 ambient;<span class="pl-cce">\n</span>uniform vec3 emissive;<span class="pl-cce">\n</span>uniform vec3 specular;<span class="pl-cce">\n</span>uniform float shininess;<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L340" class="blob-num js-line-number" data-line-number="340"></td>
        <td id="LC340" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">color_pars_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">map_pars_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">lightmap_pars_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">envmap_pars_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">fog_pars_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">lights_phong_pars_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">shadowmap_pars_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">bumpmap_pars_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">normalmap_pars_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">specularmap_pars_fragment</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>void main() {<span class="pl-cce">\n</span>gl_FragColor = vec4( vec3 ( 1.0 ), opacity );<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">map_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">alphatest_fragment</span>,</td>
      </tr>
      <tr>
        <td id="L341" class="blob-num js-line-number" data-line-number="341"></td>
        <td id="LC341" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">specularmap_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">lights_phong_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">lightmap_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">color_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">envmap_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">shadowmap_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">linear_to_gamma_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">fog_fragment</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>}<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>)},particle_basic<span class="pl-k">:</span>{uniforms<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">UniformsUtils</span>.<span class="pl-en">merge</span>([<span class="pl-c1">THREE</span>.<span class="pl-smi">UniformsLib</span>.<span class="pl-smi">particle</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">UniformsLib</span>.<span class="pl-smi">shadowmap</span>]),vertexShader<span class="pl-k">:</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>uniform float size;<span class="pl-cce">\n</span>uniform float scale;<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">color_pars_vertex</span>,</td>
      </tr>
      <tr>
        <td id="L342" class="blob-num js-line-number" data-line-number="342"></td>
        <td id="LC342" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">shadowmap_pars_vertex</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>void main() {<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">color_vertex</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );<span class="pl-cce">\n</span>#ifdef USE_SIZEATTENUATION<span class="pl-cce">\n</span>gl_PointSize = size * ( scale / length( mvPosition.xyz ) );<span class="pl-cce">\n</span>#else<span class="pl-cce">\n</span>gl_PointSize = size;<span class="pl-cce">\n</span>#endif<span class="pl-cce">\n</span>gl_Position = projectionMatrix * mvPosition;<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">worldpos_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">shadowmap_vertex</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>}<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>),fragmentShader<span class="pl-k">:</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>uniform vec3 psColor;<span class="pl-cce">\n</span>uniform float opacity;<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">color_pars_fragment</span>,</td>
      </tr>
      <tr>
        <td id="L343" class="blob-num js-line-number" data-line-number="343"></td>
        <td id="LC343" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">map_particle_pars_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">fog_pars_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">shadowmap_pars_fragment</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>void main() {<span class="pl-cce">\n</span>gl_FragColor = vec4( psColor, opacity );<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">map_particle_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">alphatest_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">color_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">shadowmap_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">fog_fragment</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>}<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>)},depthRGBA<span class="pl-k">:</span>{uniforms<span class="pl-k">:</span>{},vertexShader<span class="pl-k">:</span>[<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">morphtarget_pars_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">skinning_pars_vertex</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>void main() {<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L344" class="blob-num js-line-number" data-line-number="344"></td>
        <td id="LC344" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">skinbase_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">morphtarget_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">skinning_vertex</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">default_vertex</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>}<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>),fragmentShader<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>vec4 pack_depth( const in float depth ) {<span class="pl-cce">\n</span>const vec4 bit_shift = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );<span class="pl-cce">\n</span>const vec4 bit_mask  = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );<span class="pl-cce">\n</span>vec4 res = fract( depth * bit_shift );<span class="pl-cce">\n</span>res -= res.xxyz * bit_mask;<span class="pl-cce">\n</span>return res;<span class="pl-cce">\n</span>}<span class="pl-cce">\n</span>void main() {<span class="pl-cce">\n</span>gl_FragData[ 0 ] = pack_depth( gl_FragCoord.z );<span class="pl-cce">\n</span>}<span class="pl-pds">&quot;</span></span>}};</td>
      </tr>
      <tr>
        <td id="L345" class="blob-num js-line-number" data-line-number="345"></td>
        <td id="LC345" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">WebGLRenderer</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">function</span> <span class="pl-en">b</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">length</span>,d<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">material</span>;<span class="pl-k">if</span>(<span class="pl-smi">d</span>.<span class="pl-c1">attributes</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">a</span>.<span class="pl-smi">__webglCustomAttributesList</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">a</span>.<span class="pl-smi">__webglCustomAttributesList</span><span class="pl-k">=</span>[]);<span class="pl-k">for</span>(<span class="pl-k">var</span> e <span class="pl-k">in</span> <span class="pl-smi">d</span>.<span class="pl-c1">attributes</span>){<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-c1">attributes</span>[e];<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-smi">f</span>.<span class="pl-smi">__webglInitialized</span><span class="pl-k">||</span><span class="pl-smi">f</span>.<span class="pl-smi">createUniqueBuffers</span>){<span class="pl-smi">f</span>.<span class="pl-smi">__webglInitialized</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-s"><span class="pl-pds">&quot;</span>v2<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-smi">f</span>.<span class="pl-c1">type</span><span class="pl-k">?</span>g<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>v3<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-smi">f</span>.<span class="pl-c1">type</span><span class="pl-k">?</span>g<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>v4<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-smi">f</span>.<span class="pl-c1">type</span><span class="pl-k">?</span>g<span class="pl-k">=</span><span class="pl-c1">4</span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>c<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-smi">f</span>.<span class="pl-c1">type</span><span class="pl-k">&amp;&amp;</span>(g<span class="pl-k">=</span><span class="pl-c1">3</span>);<span class="pl-smi">f</span>.<span class="pl-c1">size</span><span class="pl-k">=</span>g;<span class="pl-smi">f</span>.<span class="pl-smi">array</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(c<span class="pl-k">*</span>g);<span class="pl-smi">f</span>.<span class="pl-smi">buffer</span><span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-en">createBuffer</span>();<span class="pl-smi">f</span>.<span class="pl-smi">buffer</span>.<span class="pl-smi">belongsToAttribute</span><span class="pl-k">=</span>e;<span class="pl-smi">f</span>.<span class="pl-smi">needsUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>}<span class="pl-smi">a</span>.<span class="pl-smi">__webglCustomAttributesList</span>.<span class="pl-c1">push</span>(f)}}}</td>
      </tr>
      <tr>
        <td id="L346" class="blob-num js-line-number" data-line-number="346"></td>
        <td id="LC346" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">c</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">material</span><span class="pl-k">&amp;&amp;!</span>(<span class="pl-smi">a</span>.<span class="pl-smi">material</span> <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">MeshFaceMaterial</span>))<span class="pl-k">return</span> <span class="pl-smi">a</span>.<span class="pl-smi">material</span>;<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&lt;=</span><span class="pl-smi">b</span>.<span class="pl-smi">materialIndex</span>)<span class="pl-k">return</span> <span class="pl-smi">a</span>.<span class="pl-smi">geometry</span>.<span class="pl-smi">materials</span>[<span class="pl-smi">b</span>.<span class="pl-smi">materialIndex</span>]}function d(a){return a instanceof THREE.MeshBasicMaterial&amp;&amp;!a.envMap||a instanceof THREE.MeshDepthMaterial?!1:a&amp;&amp;void 0!==a.shading&amp;&amp;a.shading===THREE.SmoothShading?THREE.SmoothShading:THREE.FlatShading}function e(a){return a.map||a.lightMap||a.bumpMap||a.normalMap||a.specularMap||a instanceof THREE.ShaderMaterial?!0:!1}function f(a){var b,</td>
      </tr>
      <tr>
        <td id="L347" class="blob-num js-line-number" data-line-number="347"></td>
        <td id="LC347" class="blob-code blob-code-inner js-file-line">c,d;<span class="pl-k">for</span>(b <span class="pl-k">in</span> <span class="pl-smi">a</span>.<span class="pl-c1">attributes</span>)d<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>index<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>b<span class="pl-k">?</span><span class="pl-smi">k</span>.<span class="pl-c1">ELEMENT_ARRAY_BUFFER</span><span class="pl-k">:</span><span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">attributes</span>[b],<span class="pl-smi">c</span>.<span class="pl-smi">buffer</span><span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-en">createBuffer</span>(),<span class="pl-smi">k</span>.<span class="pl-en">bindBuffer</span>(d,<span class="pl-smi">c</span>.<span class="pl-smi">buffer</span>),<span class="pl-smi">k</span>.<span class="pl-en">bufferData</span>(d,<span class="pl-smi">c</span>.<span class="pl-smi">array</span>,<span class="pl-smi">k</span>.<span class="pl-c1">STATIC_DRAW</span>)}function g(a,b,c){var d,e,f,g,h=a.vertices;g=h.length;var i=a.colors,j=i.length,l=a.__vertexArray,n=a.__colorArray,m=a.__sortArray,o=a.verticesNeedUpdate,p=a.colorsNeedUpdate,q=a.__webglCustomAttributesList;if(c.sortParticles){gb.copy(ra);gb.multiplySelf(c.matrixWorld);for(d=0;d&lt;g;d++)e=h[d],Za.copy(e),gb.multiplyVector3(Za),</td>
      </tr>
      <tr>
        <td id="L348" class="blob-num js-line-number" data-line-number="348"></td>
        <td id="LC348" class="blob-code blob-code-inner js-file-line">m[d]<span class="pl-k">=</span>[<span class="pl-smi">Za</span>.<span class="pl-c1">z</span>,d];<span class="pl-smi">m</span>.<span class="pl-c1">sort</span>(<span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> b[<span class="pl-c1">0</span>]<span class="pl-k">-</span>a[<span class="pl-c1">0</span>]});<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span>g;d<span class="pl-k">++</span>)e<span class="pl-k">=</span>h[m[d][<span class="pl-c1">1</span>]],f<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span>d,l[f]<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-c1">x</span>,l[f<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-c1">y</span>,l[f<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-c1">z</span>;<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span>j;d<span class="pl-k">++</span>)f<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span>d,e<span class="pl-k">=</span>i[m[d][<span class="pl-c1">1</span>]],n[f]<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">r</span>,n[f<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">g</span>,n[f<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">b</span>;<span class="pl-k">if</span>(q){i<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(j<span class="pl-k">=</span><span class="pl-smi">q</span>.<span class="pl-c1">length</span>;i<span class="pl-k">&lt;</span>j;i<span class="pl-k">++</span>)<span class="pl-k">if</span>(h<span class="pl-k">=</span>q[i],<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">h</span>.<span class="pl-smi">boundTo</span><span class="pl-k">||</span><span class="pl-s"><span class="pl-pds">&quot;</span>vertices<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-smi">h</span>.<span class="pl-smi">boundTo</span>)<span class="pl-k">if</span>(f<span class="pl-k">=</span><span class="pl-c1">0</span>,e<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-c1">value</span>.<span class="pl-c1">length</span>,<span class="pl-c1">1</span><span class="pl-k">===</span><span class="pl-smi">h</span>.<span class="pl-c1">size</span>)<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span>e;d<span class="pl-k">++</span>)g<span class="pl-k">=</span>m[d][<span class="pl-c1">1</span>],<span class="pl-smi">h</span>.<span class="pl-smi">array</span>[d]<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-c1">value</span>[g];<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-c1">2</span><span class="pl-k">===</span><span class="pl-smi">h</span>.<span class="pl-c1">size</span>)<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span>e;d<span class="pl-k">++</span>)g<span class="pl-k">=</span>m[d][<span class="pl-c1">1</span>],g<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-c1">value</span>[g],<span class="pl-smi">h</span>.<span class="pl-smi">array</span>[f]<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-c1">x</span>,<span class="pl-smi">h</span>.<span class="pl-smi">array</span>[f<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-c1">y</span>,f<span class="pl-k">+=</span><span class="pl-c1">2</span>;<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-c1">3</span><span class="pl-k">===</span><span class="pl-smi">h</span>.<span class="pl-c1">size</span>)<span class="pl-k">if</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>c<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-smi">h</span>.<span class="pl-c1">type</span>)<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span>e;d<span class="pl-k">++</span>)g<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L349" class="blob-num js-line-number" data-line-number="349"></td>
        <td id="LC349" class="blob-code blob-code-inner js-file-line">m[d][<span class="pl-c1">1</span>],g<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-c1">value</span>[g],<span class="pl-smi">h</span>.<span class="pl-smi">array</span>[f]<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">r</span>,<span class="pl-smi">h</span>.<span class="pl-smi">array</span>[f<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">g</span>,<span class="pl-smi">h</span>.<span class="pl-smi">array</span>[f<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">b</span>,f<span class="pl-k">+=</span><span class="pl-c1">3</span>;<span class="pl-k">else</span> <span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span>e;d<span class="pl-k">++</span>)g<span class="pl-k">=</span>m[d][<span class="pl-c1">1</span>],g<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-c1">value</span>[g],<span class="pl-smi">h</span>.<span class="pl-smi">array</span>[f]<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-c1">x</span>,<span class="pl-smi">h</span>.<span class="pl-smi">array</span>[f<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-c1">y</span>,<span class="pl-smi">h</span>.<span class="pl-smi">array</span>[f<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-c1">z</span>,f<span class="pl-k">+=</span><span class="pl-c1">3</span>;<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-c1">4</span><span class="pl-k">===</span><span class="pl-smi">h</span>.<span class="pl-c1">size</span>)<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span>e;d<span class="pl-k">++</span>)g<span class="pl-k">=</span>m[d][<span class="pl-c1">1</span>],g<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-c1">value</span>[g],<span class="pl-smi">h</span>.<span class="pl-smi">array</span>[f]<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-c1">x</span>,<span class="pl-smi">h</span>.<span class="pl-smi">array</span>[f<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-c1">y</span>,<span class="pl-smi">h</span>.<span class="pl-smi">array</span>[f<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-c1">z</span>,<span class="pl-smi">h</span>.<span class="pl-smi">array</span>[f<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">w</span>,f<span class="pl-k">+=</span><span class="pl-c1">4</span>}}<span class="pl-k">else</span>{<span class="pl-k">if</span>(o)<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span>g;d<span class="pl-k">++</span>)e<span class="pl-k">=</span>h[d],f<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span>d,l[f]<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-c1">x</span>,l[f<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-c1">y</span>,l[f<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-c1">z</span>;<span class="pl-k">if</span>(p)<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span>j;d<span class="pl-k">++</span>)e<span class="pl-k">=</span>i[d],f<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span>d,n[f]<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">r</span>,n[f<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">g</span>,n[f<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">b</span>;<span class="pl-k">if</span>(q){i<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(j<span class="pl-k">=</span><span class="pl-smi">q</span>.<span class="pl-c1">length</span>;i<span class="pl-k">&lt;</span>j;i<span class="pl-k">++</span>)<span class="pl-k">if</span>(h<span class="pl-k">=</span>q[i],<span class="pl-smi">h</span>.<span class="pl-smi">needsUpdate</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span></td>
      </tr>
      <tr>
        <td id="L350" class="blob-num js-line-number" data-line-number="350"></td>
        <td id="LC350" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">h</span>.<span class="pl-smi">boundTo</span><span class="pl-k">||</span><span class="pl-s"><span class="pl-pds">&quot;</span>vertices<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-smi">h</span>.<span class="pl-smi">boundTo</span>))<span class="pl-k">if</span>(e<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-c1">value</span>.<span class="pl-c1">length</span>,f<span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-c1">1</span><span class="pl-k">===</span><span class="pl-smi">h</span>.<span class="pl-c1">size</span>)<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span>e;d<span class="pl-k">++</span>)<span class="pl-smi">h</span>.<span class="pl-smi">array</span>[d]<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-c1">value</span>[d];<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-c1">2</span><span class="pl-k">===</span><span class="pl-smi">h</span>.<span class="pl-c1">size</span>)<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span>e;d<span class="pl-k">++</span>)g<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-c1">value</span>[d],<span class="pl-smi">h</span>.<span class="pl-smi">array</span>[f]<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-c1">x</span>,<span class="pl-smi">h</span>.<span class="pl-smi">array</span>[f<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-c1">y</span>,f<span class="pl-k">+=</span><span class="pl-c1">2</span>;<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-c1">3</span><span class="pl-k">===</span><span class="pl-smi">h</span>.<span class="pl-c1">size</span>)<span class="pl-k">if</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>c<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-smi">h</span>.<span class="pl-c1">type</span>)<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span>e;d<span class="pl-k">++</span>)g<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-c1">value</span>[d],<span class="pl-smi">h</span>.<span class="pl-smi">array</span>[f]<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">r</span>,<span class="pl-smi">h</span>.<span class="pl-smi">array</span>[f<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">g</span>,<span class="pl-smi">h</span>.<span class="pl-smi">array</span>[f<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">b</span>,f<span class="pl-k">+=</span><span class="pl-c1">3</span>;<span class="pl-k">else</span> <span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span>e;d<span class="pl-k">++</span>)g<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-c1">value</span>[d],<span class="pl-smi">h</span>.<span class="pl-smi">array</span>[f]<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-c1">x</span>,<span class="pl-smi">h</span>.<span class="pl-smi">array</span>[f<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-c1">y</span>,<span class="pl-smi">h</span>.<span class="pl-smi">array</span>[f<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-c1">z</span>,f<span class="pl-k">+=</span><span class="pl-c1">3</span>;<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-c1">4</span><span class="pl-k">===</span><span class="pl-smi">h</span>.<span class="pl-c1">size</span>)<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span>e;d<span class="pl-k">++</span>)g<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-c1">value</span>[d],<span class="pl-smi">h</span>.<span class="pl-smi">array</span>[f]<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-c1">x</span>,<span class="pl-smi">h</span>.<span class="pl-smi">array</span>[f<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-c1">y</span>,<span class="pl-smi">h</span>.<span class="pl-smi">array</span>[f<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-c1">z</span>,<span class="pl-smi">h</span>.<span class="pl-smi">array</span>[f<span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L351" class="blob-num js-line-number" data-line-number="351"></td>
        <td id="LC351" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">3</span>]<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">w</span>,f<span class="pl-k">+=</span><span class="pl-c1">4</span>}}<span class="pl-k">if</span>(o<span class="pl-k">||</span><span class="pl-smi">c</span>.<span class="pl-smi">sortParticles</span>)<span class="pl-smi">k</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">a</span>.<span class="pl-smi">__webglVertexBuffer</span>),<span class="pl-smi">k</span>.<span class="pl-en">bufferData</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,l,b);<span class="pl-k">if</span>(p<span class="pl-k">||</span><span class="pl-smi">c</span>.<span class="pl-smi">sortParticles</span>)<span class="pl-smi">k</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">a</span>.<span class="pl-smi">__webglColorBuffer</span>),<span class="pl-smi">k</span>.<span class="pl-en">bufferData</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,n,b);<span class="pl-k">if</span>(q){i<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(j<span class="pl-k">=</span><span class="pl-smi">q</span>.<span class="pl-c1">length</span>;i<span class="pl-k">&lt;</span>j;i<span class="pl-k">++</span>)<span class="pl-k">if</span>(h<span class="pl-k">=</span>q[i],<span class="pl-smi">h</span>.<span class="pl-smi">needsUpdate</span><span class="pl-k">||</span><span class="pl-smi">c</span>.<span class="pl-smi">sortParticles</span>)<span class="pl-smi">k</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">h</span>.<span class="pl-smi">buffer</span>),<span class="pl-smi">k</span>.<span class="pl-en">bufferData</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">h</span>.<span class="pl-smi">array</span>,b)}}function h(a,b,c){var d=a.attributes,f=d.index,e=d.position,g=d.normal,h=d.uv,i=d.color,d=d.tangent;a.elementsNeedUpdate&amp;&amp;void 0!==</td>
      </tr>
      <tr>
        <td id="L352" class="blob-num js-line-number" data-line-number="352"></td>
        <td id="LC352" class="blob-code blob-code-inner js-file-line">f<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">k</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ELEMENT_ARRAY_BUFFER</span>,<span class="pl-smi">f</span>.<span class="pl-smi">buffer</span>),<span class="pl-smi">k</span>.<span class="pl-en">bufferData</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ELEMENT_ARRAY_BUFFER</span>,<span class="pl-smi">f</span>.<span class="pl-smi">array</span>,b));<span class="pl-smi">a</span>.<span class="pl-smi">verticesNeedUpdate</span><span class="pl-k">&amp;&amp;</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>e<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">k</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">e</span>.<span class="pl-smi">buffer</span>),<span class="pl-smi">k</span>.<span class="pl-en">bufferData</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">e</span>.<span class="pl-smi">array</span>,b));<span class="pl-smi">a</span>.<span class="pl-smi">normalsNeedUpdate</span><span class="pl-k">&amp;&amp;</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>g<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">k</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">g</span>.<span class="pl-smi">buffer</span>),<span class="pl-smi">k</span>.<span class="pl-en">bufferData</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">g</span>.<span class="pl-smi">array</span>,b));<span class="pl-smi">a</span>.<span class="pl-smi">uvsNeedUpdate</span><span class="pl-k">&amp;&amp;</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>h<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">k</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">h</span>.<span class="pl-smi">buffer</span>),<span class="pl-smi">k</span>.<span class="pl-en">bufferData</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">h</span>.<span class="pl-smi">array</span>,b));<span class="pl-smi">a</span>.<span class="pl-smi">colorsNeedUpdate</span><span class="pl-k">&amp;&amp;</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>i<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">k</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">i</span>.<span class="pl-smi">buffer</span>),</td>
      </tr>
      <tr>
        <td id="L353" class="blob-num js-line-number" data-line-number="353"></td>
        <td id="LC353" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">k</span>.<span class="pl-en">bufferData</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">i</span>.<span class="pl-smi">array</span>,b));<span class="pl-smi">a</span>.<span class="pl-smi">tangentsNeedUpdate</span><span class="pl-k">&amp;&amp;</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>d<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">k</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">d</span>.<span class="pl-smi">buffer</span>),<span class="pl-smi">k</span>.<span class="pl-en">bufferData</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">d</span>.<span class="pl-smi">array</span>,b));<span class="pl-k">if</span>(c)<span class="pl-k">for</span>(<span class="pl-k">var</span> j <span class="pl-k">in</span> <span class="pl-smi">a</span>.<span class="pl-c1">attributes</span>)<span class="pl-k">delete</span> <span class="pl-smi">a</span>.<span class="pl-c1">attributes</span>[j].<span class="pl-smi">array</span>}function i(a,b){return b.z-a.z}function j(a,b){return b[1]-a[1]}function l(a,b,c){if(a.length)for(var d=0,f=a.length;d&lt;f;d++)ia=O=null,W=V=Pa=Ga=Ra=ib=Ia=-1,Ea=!0,a[d].render(b,c,Da,qb),ia=O=null,W=V=Pa=Ga=Ra=ib=Ia=-1,Ea=!0}function m(a,b,c,d,f,e,g,h){var k,i,j,l;b?(i=a.length-1,l=b=-1):</td>
      </tr>
      <tr>
        <td id="L354" class="blob-num js-line-number" data-line-number="354"></td>
        <td id="LC354" class="blob-code blob-code-inner js-file-line">(i<span class="pl-k">=</span><span class="pl-c1">0</span>,b<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>,l<span class="pl-k">=</span><span class="pl-c1">1</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> n<span class="pl-k">=</span>i;n<span class="pl-k">!==</span>b;n<span class="pl-k">+=</span>l)<span class="pl-k">if</span>(k<span class="pl-k">=</span>a[n],<span class="pl-smi">k</span>.<span class="pl-smi">render</span>){i<span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-c1">object</span>;j<span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-smi">buffer</span>;<span class="pl-k">if</span>(h)k<span class="pl-k">=</span>h;<span class="pl-k">else</span>{k<span class="pl-k">=</span>k[c];<span class="pl-k">if</span>(<span class="pl-k">!</span>k)<span class="pl-k">continue</span>;g<span class="pl-k">&amp;&amp;</span><span class="pl-c1">Q</span>.<span class="pl-en">setBlending</span>(<span class="pl-smi">k</span>.<span class="pl-smi">blending</span>,<span class="pl-smi">k</span>.<span class="pl-smi">blendEquation</span>,<span class="pl-smi">k</span>.<span class="pl-smi">blendSrc</span>,<span class="pl-smi">k</span>.<span class="pl-smi">blendDst</span>);<span class="pl-c1">Q</span>.<span class="pl-en">setDepthTest</span>(<span class="pl-smi">k</span>.<span class="pl-smi">depthTest</span>);<span class="pl-c1">Q</span>.<span class="pl-en">setDepthWrite</span>(<span class="pl-smi">k</span>.<span class="pl-smi">depthWrite</span>);<span class="pl-en">v</span>(<span class="pl-smi">k</span>.<span class="pl-smi">polygonOffset</span>,<span class="pl-smi">k</span>.<span class="pl-smi">polygonOffsetFactor</span>,<span class="pl-smi">k</span>.<span class="pl-smi">polygonOffsetUnits</span>)}<span class="pl-c1">Q</span>.<span class="pl-en">setMaterialFaces</span>(k);j <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">BufferGeometry</span><span class="pl-k">?</span><span class="pl-c1">Q</span>.<span class="pl-en">renderBufferDirect</span>(d,f,e,k,j,i)<span class="pl-k">:</span><span class="pl-c1">Q</span>.<span class="pl-en">renderBuffer</span>(d,f,e,k,j,i)}}function n(a,b,c,d,f,e,g){for(var h,k,i=0,j=a.length;i&lt;j;i++)if(h=a[i],k=</td>
      </tr>
      <tr>
        <td id="L355" class="blob-num js-line-number" data-line-number="355"></td>
        <td id="LC355" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">h</span>.<span class="pl-c1">object</span>,<span class="pl-smi">k</span>.<span class="pl-smi">visible</span>){<span class="pl-k">if</span>(g)h<span class="pl-k">=</span>g;<span class="pl-k">else</span>{h<span class="pl-k">=</span>h[b];<span class="pl-k">if</span>(<span class="pl-k">!</span>h)<span class="pl-k">continue</span>;e<span class="pl-k">&amp;&amp;</span><span class="pl-c1">Q</span>.<span class="pl-en">setBlending</span>(<span class="pl-smi">h</span>.<span class="pl-smi">blending</span>,<span class="pl-smi">h</span>.<span class="pl-smi">blendEquation</span>,<span class="pl-smi">h</span>.<span class="pl-smi">blendSrc</span>,<span class="pl-smi">h</span>.<span class="pl-smi">blendDst</span>);<span class="pl-c1">Q</span>.<span class="pl-en">setDepthTest</span>(<span class="pl-smi">h</span>.<span class="pl-smi">depthTest</span>);<span class="pl-c1">Q</span>.<span class="pl-en">setDepthWrite</span>(<span class="pl-smi">h</span>.<span class="pl-smi">depthWrite</span>);<span class="pl-en">v</span>(<span class="pl-smi">h</span>.<span class="pl-smi">polygonOffset</span>,<span class="pl-smi">h</span>.<span class="pl-smi">polygonOffsetFactor</span>,<span class="pl-smi">h</span>.<span class="pl-smi">polygonOffsetUnits</span>)}<span class="pl-c1">Q</span>.<span class="pl-en">renderImmediateObject</span>(c,d,f,h,k)}}function p(a,b,c){a.push({buffer:b,object:c,opaque:null,transparent:null})}function o(a){for(var b in a.attributes)if(a.attributes[b].needsUpdate)return!0;return!1}function q(a){for(var b in a.attributes)a.attributes[b].needsUpdate=</td>
      </tr>
      <tr>
        <td id="L356" class="blob-num js-line-number" data-line-number="356"></td>
        <td id="LC356" class="blob-code blob-code-inner js-file-line"><span class="pl-k">!</span><span class="pl-c1">1</span>}function r(a,b){for(var c=a.length-1;0&lt;=c;c--)a[c].object===b&amp;&amp;a.splice(c,1)}function t(a,b){for(var c=a.length-1;0&lt;=c;c--)a[c]===b&amp;&amp;a.splice(c,1)}function B(a,b,c,d,f){ca=0;d.needsUpdate&amp;&amp;(d.program&amp;&amp;Q.deallocateMaterial(d),Q.initMaterial(d,b,c,f),d.needsUpdate=!1);d.morphTargets&amp;&amp;!f.__webglMorphTargetInfluences&amp;&amp;(f.__webglMorphTargetInfluences=new Float32Array(Q.maxMorphTargets));var e=!1,g=d.program,h=g.uniforms,i=d.uniforms;g!==O&amp;&amp;(k.useProgram(g),O=g,e=!0);d.id!==W&amp;&amp;(W=d.id,e=!0);if(e||a!==</td>
      </tr>
      <tr>
        <td id="L357" class="blob-num js-line-number" data-line-number="357"></td>
        <td id="LC357" class="blob-code blob-code-inner js-file-line">ia)<span class="pl-smi">k</span>.<span class="pl-en">uniformMatrix4fv</span>(<span class="pl-smi">h</span>.<span class="pl-smi">projectionMatrix</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-smi">a</span>.<span class="pl-smi">_projectionMatrixArray</span>),a<span class="pl-k">!==</span>ia<span class="pl-k">&amp;&amp;</span>(ia<span class="pl-k">=</span>a);<span class="pl-k">if</span>(<span class="pl-smi">d</span>.<span class="pl-smi">skinning</span>)<span class="pl-k">if</span>(ic<span class="pl-k">&amp;&amp;</span><span class="pl-smi">f</span>.<span class="pl-smi">useVertexTexture</span>){<span class="pl-k">if</span>(<span class="pl-c1">null</span><span class="pl-k">!==</span><span class="pl-smi">h</span>.<span class="pl-smi">boneTexture</span>){<span class="pl-k">var</span> j<span class="pl-k">=</span><span class="pl-en">u</span>();<span class="pl-smi">k</span>.<span class="pl-en">uniform1i</span>(<span class="pl-smi">h</span>.<span class="pl-smi">boneTexture</span>,j);<span class="pl-c1">Q</span>.<span class="pl-en">setTexture</span>(<span class="pl-smi">f</span>.<span class="pl-smi">boneTexture</span>,j)}}<span class="pl-k">else</span> <span class="pl-c1">null</span><span class="pl-k">!==</span><span class="pl-smi">h</span>.<span class="pl-smi">boneGlobalMatrices</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">k</span>.<span class="pl-en">uniformMatrix4fv</span>(<span class="pl-smi">h</span>.<span class="pl-smi">boneGlobalMatrices</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-smi">f</span>.<span class="pl-smi">boneMatrices</span>);<span class="pl-k">if</span>(e){c<span class="pl-k">&amp;&amp;</span><span class="pl-smi">d</span>.<span class="pl-smi">fog</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">i</span>.<span class="pl-smi">fogColor</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">color</span>,c <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Fog</span><span class="pl-k">?</span>(<span class="pl-smi">i</span>.<span class="pl-smi">fogNear</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">near</span>,<span class="pl-smi">i</span>.<span class="pl-smi">fogFar</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">far</span>)<span class="pl-k">:</span>c <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">FogExp2</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">i</span>.<span class="pl-smi">fogDensity</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">density</span>));<span class="pl-k">if</span>(d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">MeshPhongMaterial</span><span class="pl-k">||</span></td>
      </tr>
      <tr>
        <td id="L358" class="blob-num js-line-number" data-line-number="358"></td>
        <td id="LC358" class="blob-code blob-code-inner js-file-line">d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">MeshLambertMaterial</span><span class="pl-k">||</span><span class="pl-smi">d</span>.<span class="pl-smi">lights</span>){<span class="pl-k">if</span>(Ea){<span class="pl-k">for</span>(<span class="pl-k">var</span> l<span class="pl-k">=</span><span class="pl-c1">0</span>,n<span class="pl-k">=</span><span class="pl-c1">0</span>,m<span class="pl-k">=</span><span class="pl-c1">0</span>,o,p,q,r,s<span class="pl-k">=</span>xb,t<span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-smi">directional</span>.<span class="pl-smi">colors</span>,v<span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-smi">directional</span>.<span class="pl-smi">positions</span>,y<span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-smi">point</span>.<span class="pl-smi">colors</span>,<span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-smi">point</span>.<span class="pl-smi">positions</span>,<span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-smi">point</span>.<span class="pl-smi">distances</span>,<span class="pl-c1">H</span><span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-smi">spot</span>.<span class="pl-smi">colors</span>,<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-smi">spot</span>.<span class="pl-smi">positions</span>,<span class="pl-c1">I</span><span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-smi">spot</span>.<span class="pl-smi">distances</span>,<span class="pl-c1">K</span><span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-smi">spot</span>.<span class="pl-smi">directions</span>,<span class="pl-c1">F</span><span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-smi">spot</span>.<span class="pl-smi">angles</span>,<span class="pl-c1">L</span><span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-smi">spot</span>.<span class="pl-smi">exponents</span>,<span class="pl-c1">N</span><span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-smi">hemi</span>.<span class="pl-smi">skyColors</span>,<span class="pl-c1">V</span><span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-smi">hemi</span>.<span class="pl-smi">groundColors</span>,<span class="pl-c1">Z</span><span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-smi">hemi</span>.<span class="pl-smi">positions</span>,fa<span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-c1">R</span><span class="pl-k">=</span><span class="pl-c1">0</span>,ea<span class="pl-k">=</span><span class="pl-c1">0</span>,$<span class="pl-k">=</span><span class="pl-c1">0</span>,c<span class="pl-k">=</span>o<span class="pl-k">=</span>q<span class="pl-k">=</span>q<span class="pl-k">=</span>p<span class="pl-k">=</span><span class="pl-c1">0</span>,e<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>e;c<span class="pl-k">++</span>)j<span class="pl-k">=</span>b[c],<span class="pl-k">!</span><span class="pl-smi">j</span>.<span class="pl-smi">onlyShadow</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">j</span>.<span class="pl-smi">visible</span><span class="pl-k">&amp;&amp;</span>(o<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-c1">color</span>,r<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">intensity</span>,p<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">distance</span>,j <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">AmbientLight</span><span class="pl-k">?</span></td>
      </tr>
      <tr>
        <td id="L359" class="blob-num js-line-number" data-line-number="359"></td>
        <td id="LC359" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">Q</span>.<span class="pl-smi">gammaInput</span><span class="pl-k">?</span>(l<span class="pl-k">+=</span><span class="pl-smi">o</span>.<span class="pl-smi">r</span><span class="pl-k">*</span><span class="pl-smi">o</span>.<span class="pl-smi">r</span>,n<span class="pl-k">+=</span><span class="pl-smi">o</span>.<span class="pl-smi">g</span><span class="pl-k">*</span><span class="pl-smi">o</span>.<span class="pl-smi">g</span>,m<span class="pl-k">+=</span><span class="pl-smi">o</span>.<span class="pl-smi">b</span><span class="pl-k">*</span><span class="pl-smi">o</span>.<span class="pl-smi">b</span>)<span class="pl-k">:</span>(l<span class="pl-k">+=</span><span class="pl-smi">o</span>.<span class="pl-smi">r</span>,n<span class="pl-k">+=</span><span class="pl-smi">o</span>.<span class="pl-smi">g</span>,m<span class="pl-k">+=</span><span class="pl-smi">o</span>.<span class="pl-smi">b</span>)<span class="pl-k">:</span>j <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">DirectionalLight</span><span class="pl-k">?</span>(p<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span>fa,<span class="pl-c1">Q</span>.<span class="pl-smi">gammaInput</span><span class="pl-k">?</span><span class="pl-en">z</span>(t,p,o,r<span class="pl-k">*</span>r)<span class="pl-k">:</span><span class="pl-en">A</span>(t,p,o,r),<span class="pl-smi">Wa</span>.<span class="pl-en">copy</span>(<span class="pl-smi">j</span>.<span class="pl-smi">matrixWorld</span>.<span class="pl-en">getPosition</span>()),<span class="pl-smi">Wa</span>.<span class="pl-en">subSelf</span>(<span class="pl-smi">j</span>.<span class="pl-c1">target</span>.<span class="pl-smi">matrixWorld</span>.<span class="pl-en">getPosition</span>()),<span class="pl-smi">Wa</span>.<span class="pl-c1">normalize</span>(),v[p]<span class="pl-k">=</span><span class="pl-smi">Wa</span>.<span class="pl-c1">x</span>,v[p<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-smi">Wa</span>.<span class="pl-c1">y</span>,v[p<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-smi">Wa</span>.<span class="pl-c1">z</span>,fa<span class="pl-k">+=</span><span class="pl-c1">1</span>)<span class="pl-k">:</span>j <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">PointLight</span><span class="pl-k">?</span>(q<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span><span class="pl-c1">R</span>,<span class="pl-c1">Q</span>.<span class="pl-smi">gammaInput</span><span class="pl-k">?</span><span class="pl-en">z</span>(y,q,o,r<span class="pl-k">*</span>r)<span class="pl-k">:</span><span class="pl-en">A</span>(y,q,o,r),r<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">matrixWorld</span>.<span class="pl-en">getPosition</span>(),<span class="pl-c1">B</span>[q]<span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-c1">x</span>,<span class="pl-c1">B</span>[q<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-c1">y</span>,<span class="pl-c1">B</span>[q<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-c1">z</span>,<span class="pl-c1">C</span>[<span class="pl-c1">R</span>]<span class="pl-k">=</span>p,<span class="pl-c1">R</span><span class="pl-k">+=</span><span class="pl-c1">1</span>)<span class="pl-k">:</span>j <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">SpotLight</span><span class="pl-k">?</span>(q<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span>ea,<span class="pl-c1">Q</span>.<span class="pl-smi">gammaInput</span><span class="pl-k">?</span><span class="pl-en">z</span>(<span class="pl-c1">H</span>,q,o,r<span class="pl-k">*</span>r)<span class="pl-k">:</span></td>
      </tr>
      <tr>
        <td id="L360" class="blob-num js-line-number" data-line-number="360"></td>
        <td id="LC360" class="blob-code blob-code-inner js-file-line"><span class="pl-en">A</span>(<span class="pl-c1">H</span>,q,o,r),r<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">matrixWorld</span>.<span class="pl-en">getPosition</span>(),<span class="pl-c1">J</span>[q]<span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-c1">x</span>,<span class="pl-c1">J</span>[q<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-c1">y</span>,<span class="pl-c1">J</span>[q<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-c1">z</span>,<span class="pl-c1">I</span>[ea]<span class="pl-k">=</span>p,<span class="pl-smi">Wa</span>.<span class="pl-en">copy</span>(r),<span class="pl-smi">Wa</span>.<span class="pl-en">subSelf</span>(<span class="pl-smi">j</span>.<span class="pl-c1">target</span>.<span class="pl-smi">matrixWorld</span>.<span class="pl-en">getPosition</span>()),<span class="pl-smi">Wa</span>.<span class="pl-c1">normalize</span>(),<span class="pl-c1">K</span>[q]<span class="pl-k">=</span><span class="pl-smi">Wa</span>.<span class="pl-c1">x</span>,<span class="pl-c1">K</span>[q<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-smi">Wa</span>.<span class="pl-c1">y</span>,<span class="pl-c1">K</span>[q<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-smi">Wa</span>.<span class="pl-c1">z</span>,<span class="pl-c1">F</span>[ea]<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(<span class="pl-smi">j</span>.<span class="pl-smi">angle</span>),<span class="pl-c1">L</span>[ea]<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">exponent</span>,ea<span class="pl-k">+=</span><span class="pl-c1">1</span>)<span class="pl-k">:</span>j <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">HemisphereLight</span><span class="pl-k">&amp;&amp;</span>(p<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-c1">color</span>,q<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">groundColor</span>,o<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span>$,<span class="pl-c1">Q</span>.<span class="pl-smi">gammaInput</span><span class="pl-k">?</span>(r<span class="pl-k">*=</span>r,<span class="pl-en">z</span>(<span class="pl-c1">N</span>,o,p,r),<span class="pl-en">z</span>(<span class="pl-c1">V</span>,o,q,r))<span class="pl-k">:</span>(<span class="pl-en">A</span>(<span class="pl-c1">N</span>,o,p,r),<span class="pl-en">A</span>(<span class="pl-c1">V</span>,o,q,r)),r<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">matrixWorld</span>.<span class="pl-en">getPosition</span>(),<span class="pl-c1">Z</span>[o]<span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-c1">x</span>,<span class="pl-c1">Z</span>[o<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-c1">y</span>,<span class="pl-c1">Z</span>[o<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-c1">z</span>,$<span class="pl-k">+=</span><span class="pl-c1">1</span>));c<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span>fa;<span class="pl-k">for</span>(e<span class="pl-k">=</span><span class="pl-smi">t</span>.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>e;c<span class="pl-k">++</span>)t[c]<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span><span class="pl-c1">R</span>;<span class="pl-k">for</span>(e<span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>e;c<span class="pl-k">++</span>)y[c]<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L361" class="blob-num js-line-number" data-line-number="361"></td>
        <td id="LC361" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>;c<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span>ea;<span class="pl-k">for</span>(e<span class="pl-k">=</span><span class="pl-c1">H</span>.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>e;c<span class="pl-k">++</span>)<span class="pl-c1">H</span>[c]<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span>$;<span class="pl-k">for</span>(e<span class="pl-k">=</span><span class="pl-c1">N</span>.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>e;c<span class="pl-k">++</span>)<span class="pl-c1">N</span>[c]<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span>$;<span class="pl-k">for</span>(e<span class="pl-k">=</span><span class="pl-c1">V</span>.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>e;c<span class="pl-k">++</span>)<span class="pl-c1">V</span>[c]<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-smi">s</span>.<span class="pl-smi">directional</span>.<span class="pl-c1">length</span><span class="pl-k">=</span>fa;<span class="pl-smi">s</span>.<span class="pl-smi">point</span>.<span class="pl-c1">length</span><span class="pl-k">=</span><span class="pl-c1">R</span>;<span class="pl-smi">s</span>.<span class="pl-smi">spot</span>.<span class="pl-c1">length</span><span class="pl-k">=</span>ea;<span class="pl-smi">s</span>.<span class="pl-smi">hemi</span>.<span class="pl-c1">length</span><span class="pl-k">=</span>$;<span class="pl-smi">s</span>.<span class="pl-smi">ambient</span>[<span class="pl-c1">0</span>]<span class="pl-k">=</span>l;<span class="pl-smi">s</span>.<span class="pl-smi">ambient</span>[<span class="pl-c1">1</span>]<span class="pl-k">=</span>n;<span class="pl-smi">s</span>.<span class="pl-smi">ambient</span>[<span class="pl-c1">2</span>]<span class="pl-k">=</span>m;Ea<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>}c<span class="pl-k">=</span>xb;<span class="pl-smi">i</span>.<span class="pl-smi">ambientLightColor</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">ambient</span>;<span class="pl-smi">i</span>.<span class="pl-smi">directionalLightColor</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">directional</span>.<span class="pl-smi">colors</span>;<span class="pl-smi">i</span>.<span class="pl-smi">directionalLightDirection</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">directional</span>.<span class="pl-smi">positions</span>;<span class="pl-smi">i</span>.<span class="pl-smi">pointLightColor</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">point</span>.<span class="pl-smi">colors</span>;<span class="pl-smi">i</span>.<span class="pl-smi">pointLightPosition</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">point</span>.<span class="pl-smi">positions</span>;<span class="pl-smi">i</span>.<span class="pl-smi">pointLightDistance</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">point</span>.<span class="pl-smi">distances</span>;</td>
      </tr>
      <tr>
        <td id="L362" class="blob-num js-line-number" data-line-number="362"></td>
        <td id="LC362" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">i</span>.<span class="pl-smi">spotLightColor</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">spot</span>.<span class="pl-smi">colors</span>;<span class="pl-smi">i</span>.<span class="pl-smi">spotLightPosition</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">spot</span>.<span class="pl-smi">positions</span>;<span class="pl-smi">i</span>.<span class="pl-smi">spotLightDistance</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">spot</span>.<span class="pl-smi">distances</span>;<span class="pl-smi">i</span>.<span class="pl-smi">spotLightDirection</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">spot</span>.<span class="pl-smi">directions</span>;<span class="pl-smi">i</span>.<span class="pl-smi">spotLightAngle</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">spot</span>.<span class="pl-smi">angles</span>;<span class="pl-smi">i</span>.<span class="pl-smi">spotLightExponent</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">spot</span>.<span class="pl-smi">exponents</span>;<span class="pl-smi">i</span>.<span class="pl-smi">hemisphereLightSkyColor</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">hemi</span>.<span class="pl-smi">skyColors</span>;<span class="pl-smi">i</span>.<span class="pl-smi">hemisphereLightGroundColor</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">hemi</span>.<span class="pl-smi">groundColors</span>;<span class="pl-smi">i</span>.<span class="pl-smi">hemisphereLightPosition</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">hemi</span>.<span class="pl-smi">positions</span>}<span class="pl-k">if</span>(d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">MeshBasicMaterial</span><span class="pl-k">||</span>d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">MeshLambertMaterial</span><span class="pl-k">||</span>d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">MeshPhongMaterial</span>){<span class="pl-smi">i</span>.<span class="pl-smi">opacity</span>.<span class="pl-c1">value</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L363" class="blob-num js-line-number" data-line-number="363"></td>
        <td id="LC363" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">d</span>.<span class="pl-smi">opacity</span>;<span class="pl-c1">Q</span>.<span class="pl-smi">gammaInput</span><span class="pl-k">?</span><span class="pl-smi">i</span>.<span class="pl-smi">diffuse</span>.<span class="pl-c1">value</span>.<span class="pl-en">copyGammaToLinear</span>(<span class="pl-smi">d</span>.<span class="pl-c1">color</span>)<span class="pl-k">:</span><span class="pl-smi">i</span>.<span class="pl-smi">diffuse</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-c1">color</span>;<span class="pl-smi">i</span>.<span class="pl-smi">map</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">map</span>;<span class="pl-smi">i</span>.<span class="pl-smi">lightMap</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">lightMap</span>;<span class="pl-smi">i</span>.<span class="pl-smi">specularMap</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">specularMap</span>;<span class="pl-smi">d</span>.<span class="pl-smi">bumpMap</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">i</span>.<span class="pl-smi">bumpMap</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">bumpMap</span>,<span class="pl-smi">i</span>.<span class="pl-smi">bumpScale</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">bumpScale</span>);<span class="pl-smi">d</span>.<span class="pl-smi">normalMap</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">i</span>.<span class="pl-smi">normalMap</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">normalMap</span>,<span class="pl-smi">i</span>.<span class="pl-smi">normalScale</span>.<span class="pl-c1">value</span>.<span class="pl-en">copy</span>(<span class="pl-smi">d</span>.<span class="pl-smi">normalScale</span>));<span class="pl-k">var</span> <span class="pl-c1">Y</span>;<span class="pl-smi">d</span>.<span class="pl-smi">map</span><span class="pl-k">?</span><span class="pl-c1">Y</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">map</span><span class="pl-k">:</span><span class="pl-smi">d</span>.<span class="pl-smi">specularMap</span><span class="pl-k">?</span><span class="pl-c1">Y</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">specularMap</span><span class="pl-k">:</span><span class="pl-smi">d</span>.<span class="pl-smi">normalMap</span><span class="pl-k">?</span><span class="pl-c1">Y</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">normalMap</span><span class="pl-k">:</span><span class="pl-smi">d</span>.<span class="pl-smi">bumpMap</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">Y</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">bumpMap</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-c1">Y</span><span class="pl-k">&amp;&amp;</span>(c<span class="pl-k">=</span><span class="pl-c1">Y</span>.<span class="pl-smi">offset</span>,<span class="pl-c1">Y</span><span class="pl-k">=</span><span class="pl-c1">Y</span>.<span class="pl-smi">repeat</span>,<span class="pl-smi">i</span>.<span class="pl-smi">offsetRepeat</span>.<span class="pl-c1">value</span>.<span class="pl-c1">set</span>(<span class="pl-smi">c</span>.<span class="pl-c1">x</span>,<span class="pl-smi">c</span>.<span class="pl-c1">y</span>,<span class="pl-c1">Y</span>.<span class="pl-c1">x</span>,<span class="pl-c1">Y</span>.<span class="pl-c1">y</span>));</td>
      </tr>
      <tr>
        <td id="L364" class="blob-num js-line-number" data-line-number="364"></td>
        <td id="LC364" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">i</span>.<span class="pl-smi">envMap</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">envMap</span>;<span class="pl-smi">i</span>.<span class="pl-smi">flipEnvMap</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">envMap</span> <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">WebGLRenderTargetCube</span><span class="pl-k">?</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-smi">i</span>.<span class="pl-smi">reflectivity</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">reflectivity</span>;<span class="pl-smi">i</span>.<span class="pl-smi">refractionRatio</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">refractionRatio</span>;<span class="pl-smi">i</span>.<span class="pl-smi">combine</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">combine</span>;<span class="pl-smi">i</span>.<span class="pl-smi">useRefract</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">envMap</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">d</span>.<span class="pl-smi">envMap</span>.<span class="pl-smi">mapping</span> <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">CubeRefractionMapping</span>}d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">LineBasicMaterial</span><span class="pl-k">?</span>(<span class="pl-smi">i</span>.<span class="pl-smi">diffuse</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-c1">color</span>,<span class="pl-smi">i</span>.<span class="pl-smi">opacity</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">opacity</span>)<span class="pl-k">:</span>d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">ParticleBasicMaterial</span><span class="pl-k">?</span>(<span class="pl-smi">i</span>.<span class="pl-smi">psColor</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-c1">color</span>,<span class="pl-smi">i</span>.<span class="pl-smi">opacity</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">opacity</span>,<span class="pl-smi">i</span>.<span class="pl-c1">size</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-c1">size</span>,<span class="pl-smi">i</span>.<span class="pl-smi">scale</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-c1">M</span>.<span class="pl-c1">height</span><span class="pl-k">/</span></td>
      </tr>
      <tr>
        <td id="L365" class="blob-num js-line-number" data-line-number="365"></td>
        <td id="LC365" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">2</span>,<span class="pl-smi">i</span>.<span class="pl-smi">map</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">map</span>)<span class="pl-k">:</span>d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">MeshPhongMaterial</span><span class="pl-k">?</span>(<span class="pl-smi">i</span>.<span class="pl-smi">shininess</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">shininess</span>,<span class="pl-c1">Q</span>.<span class="pl-smi">gammaInput</span><span class="pl-k">?</span>(<span class="pl-smi">i</span>.<span class="pl-smi">ambient</span>.<span class="pl-c1">value</span>.<span class="pl-en">copyGammaToLinear</span>(<span class="pl-smi">d</span>.<span class="pl-smi">ambient</span>),<span class="pl-smi">i</span>.<span class="pl-smi">emissive</span>.<span class="pl-c1">value</span>.<span class="pl-en">copyGammaToLinear</span>(<span class="pl-smi">d</span>.<span class="pl-smi">emissive</span>),<span class="pl-smi">i</span>.<span class="pl-smi">specular</span>.<span class="pl-c1">value</span>.<span class="pl-en">copyGammaToLinear</span>(<span class="pl-smi">d</span>.<span class="pl-smi">specular</span>))<span class="pl-k">:</span>(<span class="pl-smi">i</span>.<span class="pl-smi">ambient</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">ambient</span>,<span class="pl-smi">i</span>.<span class="pl-smi">emissive</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">emissive</span>,<span class="pl-smi">i</span>.<span class="pl-smi">specular</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">specular</span>),<span class="pl-smi">d</span>.<span class="pl-smi">wrapAround</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">i</span>.<span class="pl-smi">wrapRGB</span>.<span class="pl-c1">value</span>.<span class="pl-en">copy</span>(<span class="pl-smi">d</span>.<span class="pl-smi">wrapRGB</span>))<span class="pl-k">:</span>d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">MeshLambertMaterial</span><span class="pl-k">?</span>(<span class="pl-c1">Q</span>.<span class="pl-smi">gammaInput</span><span class="pl-k">?</span>(<span class="pl-smi">i</span>.<span class="pl-smi">ambient</span>.<span class="pl-c1">value</span>.<span class="pl-en">copyGammaToLinear</span>(<span class="pl-smi">d</span>.<span class="pl-smi">ambient</span>),<span class="pl-smi">i</span>.<span class="pl-smi">emissive</span>.<span class="pl-c1">value</span>.<span class="pl-en">copyGammaToLinear</span>(<span class="pl-smi">d</span>.<span class="pl-smi">emissive</span>))<span class="pl-k">:</span></td>
      </tr>
      <tr>
        <td id="L366" class="blob-num js-line-number" data-line-number="366"></td>
        <td id="LC366" class="blob-code blob-code-inner js-file-line">(<span class="pl-smi">i</span>.<span class="pl-smi">ambient</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">ambient</span>,<span class="pl-smi">i</span>.<span class="pl-smi">emissive</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">emissive</span>),<span class="pl-smi">d</span>.<span class="pl-smi">wrapAround</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">i</span>.<span class="pl-smi">wrapRGB</span>.<span class="pl-c1">value</span>.<span class="pl-en">copy</span>(<span class="pl-smi">d</span>.<span class="pl-smi">wrapRGB</span>))<span class="pl-k">:</span>d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">MeshDepthMaterial</span><span class="pl-k">?</span>(<span class="pl-smi">i</span>.<span class="pl-smi">mNear</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">near</span>,<span class="pl-smi">i</span>.<span class="pl-smi">mFar</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">far</span>,<span class="pl-smi">i</span>.<span class="pl-smi">opacity</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">opacity</span>)<span class="pl-k">:</span>d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">MeshNormalMaterial</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">i</span>.<span class="pl-smi">opacity</span>.<span class="pl-c1">value</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">opacity</span>);<span class="pl-k">if</span>(<span class="pl-smi">f</span>.<span class="pl-smi">receiveShadow</span><span class="pl-k">&amp;&amp;!</span><span class="pl-smi">d</span>.<span class="pl-smi">_shadowPass</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">i</span>.<span class="pl-smi">shadowMatrix</span>){c<span class="pl-k">=</span><span class="pl-c1">Y</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(e<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>e;c<span class="pl-k">++</span>)<span class="pl-k">if</span>(j<span class="pl-k">=</span>b[c],<span class="pl-smi">j</span>.<span class="pl-smi">castShadow</span><span class="pl-k">&amp;&amp;</span>(j <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">SpotLight</span><span class="pl-k">||</span>j <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">DirectionalLight</span><span class="pl-k">&amp;&amp;!</span><span class="pl-smi">j</span>.<span class="pl-smi">shadowCascade</span>))<span class="pl-smi">i</span>.<span class="pl-smi">shadowMap</span>.<span class="pl-c1">value</span>[<span class="pl-c1">Y</span>]<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">shadowMap</span>,<span class="pl-smi">i</span>.<span class="pl-smi">shadowMapSize</span>.<span class="pl-c1">value</span>[<span class="pl-c1">Y</span>]<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L367" class="blob-num js-line-number" data-line-number="367"></td>
        <td id="LC367" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">j</span>.<span class="pl-smi">shadowMapSize</span>,<span class="pl-smi">i</span>.<span class="pl-smi">shadowMatrix</span>.<span class="pl-c1">value</span>[<span class="pl-c1">Y</span>]<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">shadowMatrix</span>,<span class="pl-smi">i</span>.<span class="pl-smi">shadowDarkness</span>.<span class="pl-c1">value</span>[<span class="pl-c1">Y</span>]<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">shadowDarkness</span>,<span class="pl-smi">i</span>.<span class="pl-smi">shadowBias</span>.<span class="pl-c1">value</span>[<span class="pl-c1">Y</span>]<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">shadowBias</span>,<span class="pl-c1">Y</span><span class="pl-k">++</span>}b<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">uniformsList</span>;i<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">Y</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span>;i<span class="pl-k">&lt;</span><span class="pl-c1">Y</span>;i<span class="pl-k">++</span>)<span class="pl-k">if</span>(e<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">uniforms</span>[b[i][<span class="pl-c1">1</span>]])<span class="pl-k">if</span>(c<span class="pl-k">=</span>b[i][<span class="pl-c1">0</span>],l<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">type</span>,j<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">value</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>i<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>l)<span class="pl-smi">k</span>.<span class="pl-en">uniform1i</span>(e,j);<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>l)<span class="pl-smi">k</span>.<span class="pl-en">uniform1f</span>(e,j);<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>v2<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>l)<span class="pl-smi">k</span>.<span class="pl-en">uniform2f</span>(e,<span class="pl-smi">j</span>.<span class="pl-c1">x</span>,<span class="pl-smi">j</span>.<span class="pl-c1">y</span>);<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>v3<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>l)<span class="pl-smi">k</span>.<span class="pl-en">uniform3f</span>(e,<span class="pl-smi">j</span>.<span class="pl-c1">x</span>,<span class="pl-smi">j</span>.<span class="pl-c1">y</span>,<span class="pl-smi">j</span>.<span class="pl-c1">z</span>);<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>v4<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>l)<span class="pl-smi">k</span>.<span class="pl-en">uniform4f</span>(e,<span class="pl-smi">j</span>.<span class="pl-c1">x</span>,<span class="pl-smi">j</span>.<span class="pl-c1">y</span>,<span class="pl-smi">j</span>.<span class="pl-c1">z</span>,<span class="pl-smi">j</span>.<span class="pl-smi">w</span>);<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>c<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>l)<span class="pl-smi">k</span>.<span class="pl-en">uniform3f</span>(e,<span class="pl-smi">j</span>.<span class="pl-smi">r</span>,<span class="pl-smi">j</span>.<span class="pl-smi">g</span>,<span class="pl-smi">j</span>.<span class="pl-smi">b</span>);<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>iv1<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>l)<span class="pl-smi">k</span>.<span class="pl-en">uniform1iv</span>(e,</td>
      </tr>
      <tr>
        <td id="L368" class="blob-num js-line-number" data-line-number="368"></td>
        <td id="LC368" class="blob-code blob-code-inner js-file-line">j);<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>iv<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>l)<span class="pl-smi">k</span>.<span class="pl-en">uniform3iv</span>(e,j);<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>fv1<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>l)<span class="pl-smi">k</span>.<span class="pl-en">uniform1fv</span>(e,j);<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>fv<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>l)<span class="pl-smi">k</span>.<span class="pl-en">uniform3fv</span>(e,j);<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>v2v<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>l){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">c</span>.<span class="pl-smi">_array</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">c</span>.<span class="pl-smi">_array</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-smi">j</span>.<span class="pl-c1">length</span>));l<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(n<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-c1">length</span>;l<span class="pl-k">&lt;</span>n;l<span class="pl-k">++</span>)m<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">*</span>l,<span class="pl-smi">c</span>.<span class="pl-smi">_array</span>[m]<span class="pl-k">=</span>j[l].<span class="pl-c1">x</span>,<span class="pl-smi">c</span>.<span class="pl-smi">_array</span>[m<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>j[l].<span class="pl-c1">y</span>;<span class="pl-smi">k</span>.<span class="pl-en">uniform2fv</span>(e,<span class="pl-smi">c</span>.<span class="pl-smi">_array</span>)}<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>v3v<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>l){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">c</span>.<span class="pl-smi">_array</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">c</span>.<span class="pl-smi">_array</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">3</span><span class="pl-k">*</span><span class="pl-smi">j</span>.<span class="pl-c1">length</span>));l<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(n<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-c1">length</span>;l<span class="pl-k">&lt;</span>n;l<span class="pl-k">++</span>)m<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span>l,<span class="pl-smi">c</span>.<span class="pl-smi">_array</span>[m]<span class="pl-k">=</span>j[l].<span class="pl-c1">x</span>,<span class="pl-smi">c</span>.<span class="pl-smi">_array</span>[m<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>j[l].<span class="pl-c1">y</span>,<span class="pl-smi">c</span>.<span class="pl-smi">_array</span>[m<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span>j[l].<span class="pl-c1">z</span>;<span class="pl-smi">k</span>.<span class="pl-en">uniform3fv</span>(e,<span class="pl-smi">c</span>.<span class="pl-smi">_array</span>)}<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>v4v<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>l){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span></td>
      </tr>
      <tr>
        <td id="L369" class="blob-num js-line-number" data-line-number="369"></td>
        <td id="LC369" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">c</span>.<span class="pl-smi">_array</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">c</span>.<span class="pl-smi">_array</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">4</span><span class="pl-k">*</span><span class="pl-smi">j</span>.<span class="pl-c1">length</span>));l<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(n<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-c1">length</span>;l<span class="pl-k">&lt;</span>n;l<span class="pl-k">++</span>)m<span class="pl-k">=</span><span class="pl-c1">4</span><span class="pl-k">*</span>l,<span class="pl-smi">c</span>.<span class="pl-smi">_array</span>[m]<span class="pl-k">=</span>j[l].<span class="pl-c1">x</span>,<span class="pl-smi">c</span>.<span class="pl-smi">_array</span>[m<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>j[l].<span class="pl-c1">y</span>,<span class="pl-smi">c</span>.<span class="pl-smi">_array</span>[m<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span>j[l].<span class="pl-c1">z</span>,<span class="pl-smi">c</span>.<span class="pl-smi">_array</span>[m<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span>j[l].<span class="pl-smi">w</span>;<span class="pl-smi">k</span>.<span class="pl-en">uniform4fv</span>(e,<span class="pl-smi">c</span>.<span class="pl-smi">_array</span>)}<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>m4<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>l)<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">c</span>.<span class="pl-smi">_array</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">c</span>.<span class="pl-smi">_array</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">16</span>)),<span class="pl-smi">j</span>.<span class="pl-en">flattenToArray</span>(<span class="pl-smi">c</span>.<span class="pl-smi">_array</span>),<span class="pl-smi">k</span>.<span class="pl-en">uniformMatrix4fv</span>(e,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-smi">c</span>.<span class="pl-smi">_array</span>);<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>m4v<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>l){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">c</span>.<span class="pl-smi">_array</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">c</span>.<span class="pl-smi">_array</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">16</span><span class="pl-k">*</span><span class="pl-smi">j</span>.<span class="pl-c1">length</span>));l<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(n<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-c1">length</span>;l<span class="pl-k">&lt;</span>n;l<span class="pl-k">++</span>)j[l].<span class="pl-en">flattenToArrayOffset</span>(<span class="pl-smi">c</span>.<span class="pl-smi">_array</span>,<span class="pl-c1">16</span><span class="pl-k">*</span>l);<span class="pl-smi">k</span>.<span class="pl-en">uniformMatrix4fv</span>(e,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-smi">c</span>.<span class="pl-smi">_array</span>)}<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>t<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span></td>
      </tr>
      <tr>
        <td id="L370" class="blob-num js-line-number" data-line-number="370"></td>
        <td id="LC370" class="blob-code blob-code-inner js-file-line">l){<span class="pl-k">if</span>(m<span class="pl-k">=</span>j,j<span class="pl-k">=</span><span class="pl-en">u</span>(),<span class="pl-smi">k</span>.<span class="pl-en">uniform1i</span>(e,j),m)<span class="pl-k">if</span>(<span class="pl-smi">m</span>.<span class="pl-smi">image</span> <span class="pl-k">instanceof</span> <span class="pl-c1">Array</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">6</span><span class="pl-k">===</span><span class="pl-smi">m</span>.<span class="pl-smi">image</span>.<span class="pl-c1">length</span>){<span class="pl-k">if</span>(c<span class="pl-k">=</span>m,e<span class="pl-k">=</span>j,<span class="pl-c1">6</span><span class="pl-k">===</span><span class="pl-smi">c</span>.<span class="pl-smi">image</span>.<span class="pl-c1">length</span>)<span class="pl-k">if</span>(<span class="pl-smi">c</span>.<span class="pl-smi">needsUpdate</span>){<span class="pl-smi">c</span>.<span class="pl-smi">image</span>.<span class="pl-smi">__webglTextureCube</span><span class="pl-k">||</span>(<span class="pl-smi">c</span>.<span class="pl-smi">image</span>.<span class="pl-smi">__webglTextureCube</span><span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-en">createTexture</span>());<span class="pl-smi">k</span>.<span class="pl-en">activeTexture</span>(<span class="pl-smi">k</span>.<span class="pl-c1">TEXTURE0</span><span class="pl-k">+</span>e);<span class="pl-smi">k</span>.<span class="pl-en">bindTexture</span>(<span class="pl-smi">k</span>.<span class="pl-c1">TEXTURE_CUBE_MAP</span>,<span class="pl-smi">c</span>.<span class="pl-smi">image</span>.<span class="pl-smi">__webglTextureCube</span>);<span class="pl-smi">k</span>.<span class="pl-en">pixelStorei</span>(<span class="pl-smi">k</span>.<span class="pl-c1">UNPACK_FLIP_Y_WEBGL</span>,<span class="pl-smi">c</span>.<span class="pl-smi">flipY</span>);e<span class="pl-k">=</span>c <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">CompressedTexture</span>;j<span class="pl-k">=</span>[];<span class="pl-k">for</span>(l<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">6</span><span class="pl-k">&gt;</span>l;l<span class="pl-k">++</span>)<span class="pl-c1">Q</span>.<span class="pl-smi">autoScaleCubemaps</span><span class="pl-k">&amp;&amp;!</span>e<span class="pl-k">?</span>(n<span class="pl-k">=</span>j,m<span class="pl-k">=</span>l,s<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">image</span>[l],v<span class="pl-k">=</span>Tc,<span class="pl-smi">s</span>.<span class="pl-c1">width</span><span class="pl-k">&lt;=</span>v<span class="pl-k">&amp;&amp;</span><span class="pl-smi">s</span>.<span class="pl-c1">height</span><span class="pl-k">&lt;=</span>v<span class="pl-k">||</span>(y<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-smi">s</span>.<span class="pl-c1">width</span>,<span class="pl-smi">s</span>.<span class="pl-c1">height</span>),</td>
      </tr>
      <tr>
        <td id="L371" class="blob-num js-line-number" data-line-number="371"></td>
        <td id="LC371" class="blob-code blob-code-inner js-file-line">t<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-smi">s</span>.<span class="pl-c1">width</span><span class="pl-k">*</span>v<span class="pl-k">/</span>y),v<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-smi">s</span>.<span class="pl-c1">height</span><span class="pl-k">*</span>v<span class="pl-k">/</span>y),y<span class="pl-k">=</span><span class="pl-c1">document</span>.<span class="pl-c1">createElement</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>canvas<span class="pl-pds">&quot;</span></span>),<span class="pl-smi">y</span>.<span class="pl-c1">width</span><span class="pl-k">=</span>t,<span class="pl-smi">y</span>.<span class="pl-c1">height</span><span class="pl-k">=</span>v,<span class="pl-smi">y</span>.<span class="pl-c1">getContext</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>2d<span class="pl-pds">&quot;</span></span>).<span class="pl-en">drawImage</span>(s,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-smi">s</span>.<span class="pl-c1">width</span>,<span class="pl-smi">s</span>.<span class="pl-c1">height</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,t,v),s<span class="pl-k">=</span>y),n[m]<span class="pl-k">=</span>s)<span class="pl-k">:</span>j[l]<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">image</span>[l];l<span class="pl-k">=</span>j[<span class="pl-c1">0</span>];n<span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">===</span>(<span class="pl-smi">l</span>.<span class="pl-c1">width</span><span class="pl-k">&amp;</span><span class="pl-smi">l</span>.<span class="pl-c1">width</span><span class="pl-k">-</span><span class="pl-c1">1</span>)<span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">===</span>(<span class="pl-smi">l</span>.<span class="pl-c1">height</span><span class="pl-k">&amp;</span><span class="pl-smi">l</span>.<span class="pl-c1">height</span><span class="pl-k">-</span><span class="pl-c1">1</span>);m<span class="pl-k">=</span><span class="pl-en">E</span>(<span class="pl-smi">c</span>.<span class="pl-smi">format</span>);s<span class="pl-k">=</span><span class="pl-en">E</span>(<span class="pl-smi">c</span>.<span class="pl-c1">type</span>);<span class="pl-en">G</span>(<span class="pl-smi">k</span>.<span class="pl-c1">TEXTURE_CUBE_MAP</span>,c,n);<span class="pl-k">for</span>(l<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">6</span><span class="pl-k">&gt;</span>l;l<span class="pl-k">++</span>)<span class="pl-k">if</span>(e){v<span class="pl-k">=</span>j[l].<span class="pl-smi">mipmaps</span>;y<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-smi">v</span>.<span class="pl-c1">length</span>;y<span class="pl-k">&lt;</span><span class="pl-c1">B</span>;y<span class="pl-k">++</span>)t<span class="pl-k">=</span>v[y],<span class="pl-smi">k</span>.<span class="pl-en">compressedTexImage2D</span>(<span class="pl-smi">k</span>.<span class="pl-c1">TEXTURE_CUBE_MAP_POSITIVE_X</span><span class="pl-k">+</span>l,y,m,<span class="pl-smi">t</span>.<span class="pl-c1">width</span>,<span class="pl-smi">t</span>.<span class="pl-c1">height</span>,<span class="pl-c1">0</span>,<span class="pl-smi">t</span>.<span class="pl-c1">data</span>)}<span class="pl-k">else</span> <span class="pl-smi">k</span>.<span class="pl-en">texImage2D</span>(<span class="pl-smi">k</span>.<span class="pl-c1">TEXTURE_CUBE_MAP_POSITIVE_X</span><span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L372" class="blob-num js-line-number" data-line-number="372"></td>
        <td id="LC372" class="blob-code blob-code-inner js-file-line">l,<span class="pl-c1">0</span>,m,m,s,j[l]);<span class="pl-smi">c</span>.<span class="pl-smi">generateMipmaps</span><span class="pl-k">&amp;&amp;</span>n<span class="pl-k">&amp;&amp;</span><span class="pl-smi">k</span>.<span class="pl-en">generateMipmap</span>(<span class="pl-smi">k</span>.<span class="pl-c1">TEXTURE_CUBE_MAP</span>);<span class="pl-smi">c</span>.<span class="pl-smi">needsUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-k">if</span>(<span class="pl-smi">c</span>.<span class="pl-smi">onUpdate</span>)<span class="pl-smi">c</span>.<span class="pl-en">onUpdate</span>()}<span class="pl-k">else</span> <span class="pl-smi">k</span>.<span class="pl-en">activeTexture</span>(<span class="pl-smi">k</span>.<span class="pl-c1">TEXTURE0</span><span class="pl-k">+</span>e),<span class="pl-smi">k</span>.<span class="pl-en">bindTexture</span>(<span class="pl-smi">k</span>.<span class="pl-c1">TEXTURE_CUBE_MAP</span>,<span class="pl-smi">c</span>.<span class="pl-smi">image</span>.<span class="pl-smi">__webglTextureCube</span>)}<span class="pl-k">else</span> m <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">WebGLRenderTargetCube</span><span class="pl-k">?</span>(c<span class="pl-k">=</span>m,<span class="pl-smi">k</span>.<span class="pl-en">activeTexture</span>(<span class="pl-smi">k</span>.<span class="pl-c1">TEXTURE0</span><span class="pl-k">+</span>j),<span class="pl-smi">k</span>.<span class="pl-en">bindTexture</span>(<span class="pl-smi">k</span>.<span class="pl-c1">TEXTURE_CUBE_MAP</span>,<span class="pl-smi">c</span>.<span class="pl-smi">__webglTexture</span>))<span class="pl-k">:</span><span class="pl-c1">Q</span>.<span class="pl-en">setTexture</span>(m,j)}<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>tv<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>l){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">c</span>.<span class="pl-smi">_array</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">c</span>.<span class="pl-smi">_array</span><span class="pl-k">=</span>[]);l<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(n<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">value</span>.<span class="pl-c1">length</span>;l<span class="pl-k">&lt;</span>n;l<span class="pl-k">++</span>)<span class="pl-smi">c</span>.<span class="pl-smi">_array</span>[l]<span class="pl-k">=</span><span class="pl-en">u</span>();<span class="pl-smi">k</span>.<span class="pl-en">uniform1iv</span>(e,<span class="pl-smi">c</span>.<span class="pl-smi">_array</span>);l<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(n<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L373" class="blob-num js-line-number" data-line-number="373"></td>
        <td id="LC373" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">c</span>.<span class="pl-c1">value</span>.<span class="pl-c1">length</span>;l<span class="pl-k">&lt;</span>n;l<span class="pl-k">++</span>)m<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">value</span>[l],j<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">_array</span>[l],m<span class="pl-k">&amp;&amp;</span><span class="pl-c1">Q</span>.<span class="pl-en">setTexture</span>(m,j)}<span class="pl-k">if</span>((d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderMaterial</span><span class="pl-k">||</span>d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">MeshPhongMaterial</span><span class="pl-k">||</span><span class="pl-smi">d</span>.<span class="pl-smi">envMap</span>)<span class="pl-k">&amp;&amp;</span><span class="pl-c1">null</span><span class="pl-k">!==</span><span class="pl-smi">h</span>.<span class="pl-smi">cameraPosition</span>)b<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">matrixWorld</span>.<span class="pl-en">getPosition</span>(),<span class="pl-smi">k</span>.<span class="pl-en">uniform3f</span>(<span class="pl-smi">h</span>.<span class="pl-smi">cameraPosition</span>,<span class="pl-smi">b</span>.<span class="pl-c1">x</span>,<span class="pl-smi">b</span>.<span class="pl-c1">y</span>,<span class="pl-smi">b</span>.<span class="pl-c1">z</span>);(d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">MeshPhongMaterial</span><span class="pl-k">||</span>d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">MeshLambertMaterial</span><span class="pl-k">||</span>d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderMaterial</span><span class="pl-k">||</span><span class="pl-smi">d</span>.<span class="pl-smi">skinning</span>)<span class="pl-k">&amp;&amp;</span><span class="pl-c1">null</span><span class="pl-k">!==</span><span class="pl-smi">h</span>.<span class="pl-smi">viewMatrix</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">k</span>.<span class="pl-en">uniformMatrix4fv</span>(<span class="pl-smi">h</span>.<span class="pl-smi">viewMatrix</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-smi">a</span>.<span class="pl-smi">_viewMatrixArray</span>)}<span class="pl-smi">k</span>.<span class="pl-en">uniformMatrix4fv</span>(<span class="pl-smi">h</span>.<span class="pl-smi">modelViewMatrix</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-smi">f</span>.<span class="pl-smi">_modelViewMatrix</span>.<span class="pl-c1">elements</span>);</td>
      </tr>
      <tr>
        <td id="L374" class="blob-num js-line-number" data-line-number="374"></td>
        <td id="LC374" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">h</span>.<span class="pl-smi">normalMatrix</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">k</span>.<span class="pl-en">uniformMatrix3fv</span>(<span class="pl-smi">h</span>.<span class="pl-smi">normalMatrix</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-smi">f</span>.<span class="pl-smi">_normalMatrix</span>.<span class="pl-c1">elements</span>);<span class="pl-c1">null</span><span class="pl-k">!==</span><span class="pl-smi">h</span>.<span class="pl-smi">modelMatrix</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">k</span>.<span class="pl-en">uniformMatrix4fv</span>(<span class="pl-smi">h</span>.<span class="pl-smi">modelMatrix</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-smi">f</span>.<span class="pl-smi">matrixWorld</span>.<span class="pl-c1">elements</span>);<span class="pl-k">return</span> g}function u(){var a=ca;a&gt;=rc&amp;&amp;console.warn(&quot;Trying to use &quot;+a+&quot; texture units while this GPU supports only &quot;+rc);ca+=1;return a}function s(a,b){a._modelViewMatrix.multiply(b.matrixWorldInverse,a.matrixWorld);a._normalMatrix.getInverse(a._modelViewMatrix);a._normalMatrix.transpose()}function z(a,b,c,d){a[b]=c.r*c.r*d;a[b+1]=c.g*c.g*</td>
      </tr>
      <tr>
        <td id="L375" class="blob-num js-line-number" data-line-number="375"></td>
        <td id="LC375" class="blob-code blob-code-inner js-file-line">d;a[b<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">b</span><span class="pl-k">*</span><span class="pl-smi">c</span>.<span class="pl-smi">b</span><span class="pl-k">*</span>d}function A(a,b,c,d){a[b]=c.r*d;a[b+1]=c.g*d;a[b+2]=c.b*d}function v(a,b,c){eb!==a&amp;&amp;(a?k.enable(k.POLYGON_OFFSET_FILL):k.disable(k.POLYGON_OFFSET_FILL),eb=a);if(a&amp;&amp;(pb!==b||Pb!==c))k.polygonOffset(b,c),pb=b,Pb=c}function y(a){for(var a=a.split(&quot;\n&quot;),b=0,c=a.length;b&lt;c;b++)a[b]=b+1+&quot;: &quot;+a[b];return a.join(&quot;\n&quot;)}function C(a,b){var c;&quot;fragment&quot;===a?c=k.createShader(k.FRAGMENT_SHADER):&quot;vertex&quot;===a&amp;&amp;(c=k.createShader(k.VERTEX_SHADER));k.shaderSource(c,b);k.compileShader(c);return!k.getShaderParameter(c,</td>
      </tr>
      <tr>
        <td id="L376" class="blob-num js-line-number" data-line-number="376"></td>
        <td id="LC376" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">k</span>.<span class="pl-c1">COMPILE_STATUS</span>)<span class="pl-k">?</span>(<span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-smi">k</span>.<span class="pl-en">getShaderInfoLog</span>(c)),<span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-en">y</span>(b)),<span class="pl-c1">null</span>)<span class="pl-k">:</span>c}function G(a,b,c){c?(k.texParameteri(a,k.TEXTURE_WRAP_S,E(b.wrapS)),k.texParameteri(a,k.TEXTURE_WRAP_T,E(b.wrapT)),k.texParameteri(a,k.TEXTURE_MAG_FILTER,E(b.magFilter)),k.texParameteri(a,k.TEXTURE_MIN_FILTER,E(b.minFilter))):(k.texParameteri(a,k.TEXTURE_WRAP_S,k.CLAMP_TO_EDGE),k.texParameteri(a,k.TEXTURE_WRAP_T,k.CLAMP_TO_EDGE),k.texParameteri(a,k.TEXTURE_MAG_FILTER,J(b.magFilter)),k.texParameteri(a,k.TEXTURE_MIN_FILTER,</td>
      </tr>
      <tr>
        <td id="L377" class="blob-num js-line-number" data-line-number="377"></td>
        <td id="LC377" class="blob-code blob-code-inner js-file-line"><span class="pl-en">J</span>(<span class="pl-smi">b</span>.<span class="pl-smi">minFilter</span>)));<span class="pl-k">if</span>(Qb<span class="pl-k">&amp;&amp;</span><span class="pl-smi">b</span>.<span class="pl-c1">type</span><span class="pl-k">!==</span><span class="pl-c1">THREE</span>.<span class="pl-smi">FloatType</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">1</span><span class="pl-k">&lt;</span><span class="pl-smi">b</span>.<span class="pl-smi">anisotropy</span><span class="pl-k">||</span><span class="pl-smi">b</span>.<span class="pl-smi">__oldAnisotropy</span>))<span class="pl-smi">k</span>.<span class="pl-en">texParameterf</span>(a,<span class="pl-smi">Qb</span>.<span class="pl-c1">TEXTURE_MAX_ANISOTROPY_EXT</span>,<span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-smi">b</span>.<span class="pl-smi">anisotropy</span>,Ec)),<span class="pl-smi">b</span>.<span class="pl-smi">__oldAnisotropy</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">anisotropy</span>}function H(a,b){k.bindRenderbuffer(k.RENDERBUFFER,a);b.depthBuffer&amp;&amp;!b.stencilBuffer?(k.renderbufferStorage(k.RENDERBUFFER,k.DEPTH_COMPONENT16,b.width,b.height),k.framebufferRenderbuffer(k.FRAMEBUFFER,k.DEPTH_ATTACHMENT,k.RENDERBUFFER,a)):b.depthBuffer&amp;&amp;b.stencilBuffer?(k.renderbufferStorage(k.RENDERBUFFER,k.DEPTH_STENCIL,</td>
      </tr>
      <tr>
        <td id="L378" class="blob-num js-line-number" data-line-number="378"></td>
        <td id="LC378" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">b</span>.<span class="pl-c1">width</span>,<span class="pl-smi">b</span>.<span class="pl-c1">height</span>),<span class="pl-smi">k</span>.<span class="pl-en">framebufferRenderbuffer</span>(<span class="pl-smi">k</span>.<span class="pl-c1">FRAMEBUFFER</span>,<span class="pl-smi">k</span>.<span class="pl-c1">DEPTH_STENCIL_ATTACHMENT</span>,<span class="pl-smi">k</span>.<span class="pl-c1">RENDERBUFFER</span>,a))<span class="pl-k">:</span><span class="pl-smi">k</span>.<span class="pl-en">renderbufferStorage</span>(<span class="pl-smi">k</span>.<span class="pl-c1">RENDERBUFFER</span>,<span class="pl-smi">k</span>.<span class="pl-c1">RGBA4</span>,<span class="pl-smi">b</span>.<span class="pl-c1">width</span>,<span class="pl-smi">b</span>.<span class="pl-c1">height</span>)}function J(a){return a===THREE.NearestFilter||a===THREE.NearestMipMapNearestFilter||a===THREE.NearestMipMapLinearFilter?k.NEAREST:k.LINEAR}function E(a){if(a===THREE.RepeatWrapping)return k.REPEAT;if(a===THREE.ClampToEdgeWrapping)return k.CLAMP_TO_EDGE;if(a===THREE.MirroredRepeatWrapping)return k.MIRRORED_REPEAT;if(a===THREE.NearestFilter)return k.NEAREST;</td>
      </tr>
      <tr>
        <td id="L379" class="blob-num js-line-number" data-line-number="379"></td>
        <td id="LC379" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">NearestMipMapNearestFilter</span>)<span class="pl-k">return</span> <span class="pl-smi">k</span>.<span class="pl-c1">NEAREST_MIPMAP_NEAREST</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">NearestMipMapLinearFilter</span>)<span class="pl-k">return</span> <span class="pl-smi">k</span>.<span class="pl-c1">NEAREST_MIPMAP_LINEAR</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">LinearFilter</span>)<span class="pl-k">return</span> <span class="pl-smi">k</span>.<span class="pl-c1">LINEAR</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">LinearMipMapNearestFilter</span>)<span class="pl-k">return</span> <span class="pl-smi">k</span>.<span class="pl-c1">LINEAR_MIPMAP_NEAREST</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">LinearMipMapLinearFilter</span>)<span class="pl-k">return</span> <span class="pl-smi">k</span>.<span class="pl-c1">LINEAR_MIPMAP_LINEAR</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">UnsignedByteType</span>)<span class="pl-k">return</span> <span class="pl-smi">k</span>.<span class="pl-c1">UNSIGNED_BYTE</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">UnsignedShort4444Type</span>)<span class="pl-k">return</span> <span class="pl-smi">k</span>.<span class="pl-c1">UNSIGNED_SHORT_4_4_4_4</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">UnsignedShort5551Type</span>)<span class="pl-k">return</span> <span class="pl-smi">k</span>.<span class="pl-c1">UNSIGNED_SHORT_5_5_5_1</span>;</td>
      </tr>
      <tr>
        <td id="L380" class="blob-num js-line-number" data-line-number="380"></td>
        <td id="LC380" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">UnsignedShort565Type</span>)<span class="pl-k">return</span> <span class="pl-smi">k</span>.<span class="pl-c1">UNSIGNED_SHORT_5_6_5</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">ByteType</span>)<span class="pl-k">return</span> <span class="pl-smi">k</span>.<span class="pl-c1">BYTE</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">ShortType</span>)<span class="pl-k">return</span> <span class="pl-smi">k</span>.<span class="pl-c1">SHORT</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">UnsignedShortType</span>)<span class="pl-k">return</span> <span class="pl-smi">k</span>.<span class="pl-c1">UNSIGNED_SHORT</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">IntType</span>)<span class="pl-k">return</span> <span class="pl-smi">k</span>.<span class="pl-c1">INT</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">UnsignedIntType</span>)<span class="pl-k">return</span> <span class="pl-smi">k</span>.<span class="pl-c1">UNSIGNED_INT</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">FloatType</span>)<span class="pl-k">return</span> <span class="pl-smi">k</span>.<span class="pl-c1">FLOAT</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">AlphaFormat</span>)<span class="pl-k">return</span> <span class="pl-smi">k</span>.<span class="pl-c1">ALPHA</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">RGBFormat</span>)<span class="pl-k">return</span> <span class="pl-smi">k</span>.<span class="pl-c1">RGB</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">RGBAFormat</span>)<span class="pl-k">return</span> <span class="pl-smi">k</span>.<span class="pl-c1">RGBA</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">LuminanceFormat</span>)<span class="pl-k">return</span> <span class="pl-smi">k</span>.<span class="pl-c1">LUMINANCE</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">LuminanceAlphaFormat</span>)<span class="pl-k">return</span> <span class="pl-smi">k</span>.<span class="pl-c1">LUMINANCE_ALPHA</span>;</td>
      </tr>
      <tr>
        <td id="L381" class="blob-num js-line-number" data-line-number="381"></td>
        <td id="LC381" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">AddEquation</span>)<span class="pl-k">return</span> <span class="pl-smi">k</span>.<span class="pl-c1">FUNC_ADD</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">SubtractEquation</span>)<span class="pl-k">return</span> <span class="pl-smi">k</span>.<span class="pl-c1">FUNC_SUBTRACT</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">ReverseSubtractEquation</span>)<span class="pl-k">return</span> <span class="pl-smi">k</span>.<span class="pl-c1">FUNC_REVERSE_SUBTRACT</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">ZeroFactor</span>)<span class="pl-k">return</span> <span class="pl-smi">k</span>.<span class="pl-c1">ZERO</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">OneFactor</span>)<span class="pl-k">return</span> <span class="pl-smi">k</span>.<span class="pl-c1">ONE</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">SrcColorFactor</span>)<span class="pl-k">return</span> <span class="pl-smi">k</span>.<span class="pl-c1">SRC_COLOR</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">OneMinusSrcColorFactor</span>)<span class="pl-k">return</span> <span class="pl-smi">k</span>.<span class="pl-c1">ONE_MINUS_SRC_COLOR</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">SrcAlphaFactor</span>)<span class="pl-k">return</span> <span class="pl-smi">k</span>.<span class="pl-c1">SRC_ALPHA</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">OneMinusSrcAlphaFactor</span>)<span class="pl-k">return</span> <span class="pl-smi">k</span>.<span class="pl-c1">ONE_MINUS_SRC_ALPHA</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">DstAlphaFactor</span>)<span class="pl-k">return</span> <span class="pl-smi">k</span>.<span class="pl-c1">DST_ALPHA</span>;</td>
      </tr>
      <tr>
        <td id="L382" class="blob-num js-line-number" data-line-number="382"></td>
        <td id="LC382" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">OneMinusDstAlphaFactor</span>)<span class="pl-k">return</span> <span class="pl-smi">k</span>.<span class="pl-c1">ONE_MINUS_DST_ALPHA</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">DstColorFactor</span>)<span class="pl-k">return</span> <span class="pl-smi">k</span>.<span class="pl-c1">DST_COLOR</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">OneMinusDstColorFactor</span>)<span class="pl-k">return</span> <span class="pl-smi">k</span>.<span class="pl-c1">ONE_MINUS_DST_COLOR</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">SrcAlphaSaturateFactor</span>)<span class="pl-k">return</span> <span class="pl-smi">k</span>.<span class="pl-c1">SRC_ALPHA_SATURATE</span>;<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>yb){<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">RGB_S3TC_DXT1_Format</span>)<span class="pl-k">return</span> <span class="pl-smi">yb</span>.<span class="pl-c1">COMPRESSED_RGB_S3TC_DXT1_EXT</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">RGBA_S3TC_DXT1_Format</span>)<span class="pl-k">return</span> <span class="pl-smi">yb</span>.<span class="pl-c1">COMPRESSED_RGBA_S3TC_DXT1_EXT</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">RGBA_S3TC_DXT3_Format</span>)<span class="pl-k">return</span> <span class="pl-smi">yb</span>.<span class="pl-c1">COMPRESSED_RGBA_S3TC_DXT3_EXT</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">RGBA_S3TC_DXT5_Format</span>)<span class="pl-k">return</span> <span class="pl-smi">yb</span>.<span class="pl-c1">COMPRESSED_RGBA_S3TC_DXT5_EXT</span>}<span class="pl-k">return</span> <span class="pl-c1">0</span>}</td>
      </tr>
      <tr>
        <td id="L383" class="blob-num js-line-number" data-line-number="383"></td>
        <td id="LC383" class="blob-code blob-code-inner js-file-line"><span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">THREE</span>.<span class="pl-c1">REVISION</span>);<span class="pl-k">var</span> a<span class="pl-k">=</span>a<span class="pl-k">||</span>{},<span class="pl-c1">M</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">canvas</span><span class="pl-k">?</span><span class="pl-smi">a</span>.<span class="pl-smi">canvas</span><span class="pl-k">:</span><span class="pl-c1">document</span>.<span class="pl-c1">createElement</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>canvas<span class="pl-pds">&quot;</span></span>),<span class="pl-c1">K</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">precision</span><span class="pl-k">?</span><span class="pl-smi">a</span>.<span class="pl-smi">precision</span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>highp<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">F</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">alpha</span><span class="pl-k">?</span><span class="pl-smi">a</span>.<span class="pl-smi">alpha</span><span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">0</span>,<span class="pl-c1">I</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">premultipliedAlpha</span><span class="pl-k">?</span><span class="pl-smi">a</span>.<span class="pl-smi">premultipliedAlpha</span><span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">0</span>,<span class="pl-c1">L</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">antialias</span><span class="pl-k">?</span><span class="pl-smi">a</span>.<span class="pl-smi">antialias</span><span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-c1">R</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">stencil</span><span class="pl-k">?</span><span class="pl-smi">a</span>.<span class="pl-smi">stencil</span><span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">0</span>,$<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">preserveDrawingBuffer</span><span class="pl-k">?</span><span class="pl-smi">a</span>.<span class="pl-smi">preserveDrawingBuffer</span><span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-c1">Y</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">clearColor</span><span class="pl-k">?</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-smi">a</span>.<span class="pl-smi">clearColor</span>)<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">0</span>),<span class="pl-c1">N</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">clearAlpha</span><span class="pl-k">?</span><span class="pl-smi">a</span>.<span class="pl-smi">clearAlpha</span><span class="pl-k">:</span><span class="pl-c1">0</span>,ea<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L384" class="blob-num js-line-number" data-line-number="384"></td>
        <td id="LC384" class="blob-code blob-code-inner js-file-line"><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">a</span>.<span class="pl-smi">maxLights</span><span class="pl-k">?</span><span class="pl-smi">a</span>.<span class="pl-smi">maxLights</span><span class="pl-k">:</span><span class="pl-c1">4</span>;<span class="pl-c1">this</span>.<span class="pl-smi">domElement</span><span class="pl-k">=</span><span class="pl-c1">M</span>;<span class="pl-c1">this</span>.<span class="pl-smi">context</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">autoUpdateScene</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">autoUpdateObjects</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">sortObjects</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">autoClearStencil</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">autoClearDepth</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">autoClearColor</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">autoClear</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">shadowMapEnabled</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">physicallyBasedShading</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">gammaOutput</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">gammaInput</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">shadowMapCullFrontFaces</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">shadowMapSoft</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">shadowMapAutoUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">shadowMapCascade</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">shadowMapDebug</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">maxMorphTargets</span><span class="pl-k">=</span><span class="pl-c1">8</span>;<span class="pl-c1">this</span>.<span class="pl-smi">maxMorphNormals</span><span class="pl-k">=</span><span class="pl-c1">4</span>;<span class="pl-c1">this</span>.<span class="pl-smi">autoScaleCubemaps</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">renderPluginsPre</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L385" class="blob-num js-line-number" data-line-number="385"></td>
        <td id="LC385" class="blob-code blob-code-inner js-file-line">[];<span class="pl-c1">this</span>.<span class="pl-smi">renderPluginsPost</span><span class="pl-k">=</span>[];<span class="pl-c1">this</span>.<span class="pl-smi">info</span><span class="pl-k">=</span>{memory<span class="pl-k">:</span>{programs<span class="pl-k">:</span><span class="pl-c1">0</span>,geometries<span class="pl-k">:</span><span class="pl-c1">0</span>,textures<span class="pl-k">:</span><span class="pl-c1">0</span>},render<span class="pl-k">:</span>{calls<span class="pl-k">:</span><span class="pl-c1">0</span>,vertices<span class="pl-k">:</span><span class="pl-c1">0</span>,faces<span class="pl-k">:</span><span class="pl-c1">0</span>,points<span class="pl-k">:</span><span class="pl-c1">0</span>}};<span class="pl-k">var</span> <span class="pl-c1">Q</span><span class="pl-k">=</span><span class="pl-c1">this</span>,qa<span class="pl-k">=</span>[],la<span class="pl-k">=</span><span class="pl-c1">0</span>,<span class="pl-c1">O</span><span class="pl-k">=</span><span class="pl-c1">null</span>,fa<span class="pl-k">=</span><span class="pl-c1">null</span>,<span class="pl-c1">W</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">V</span><span class="pl-k">=</span><span class="pl-c1">null</span>,ia<span class="pl-k">=</span><span class="pl-c1">null</span>,<span class="pl-c1">Z</span><span class="pl-k">=</span><span class="pl-c1">0</span>,ca<span class="pl-k">=</span><span class="pl-c1">0</span>,Ga<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">1</span>,Pa<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">1</span>,Ia<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">1</span>,Ua<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">1</span>,na<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">1</span>,Va<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">1</span>,ib<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">1</span>,Ra<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">1</span>,eb<span class="pl-k">=</span><span class="pl-c1">null</span>,pb<span class="pl-k">=</span><span class="pl-c1">null</span>,Pb<span class="pl-k">=</span><span class="pl-c1">null</span>,db<span class="pl-k">=</span><span class="pl-c1">null</span>,$a<span class="pl-k">=</span><span class="pl-c1">0</span>,Ja<span class="pl-k">=</span><span class="pl-c1">0</span>,wa<span class="pl-k">=</span><span class="pl-c1">0</span>,wb<span class="pl-k">=</span><span class="pl-c1">0</span>,Da<span class="pl-k">=</span><span class="pl-c1">0</span>,qb<span class="pl-k">=</span><span class="pl-c1">0</span>,fb<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Frustum</span>,ra<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>,gb<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>,Za<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector4</span>,Wa<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,Ea<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>,xb<span class="pl-k">=</span>{ambient<span class="pl-k">:</span>[<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>],directional<span class="pl-k">:</span>{length<span class="pl-k">:</span><span class="pl-c1">0</span>,colors<span class="pl-k">:</span>[],positions<span class="pl-k">:</span>[]},point<span class="pl-k">:</span>{length<span class="pl-k">:</span><span class="pl-c1">0</span>,colors<span class="pl-k">:</span>[],</td>
      </tr>
      <tr>
        <td id="L386" class="blob-num js-line-number" data-line-number="386"></td>
        <td id="LC386" class="blob-code blob-code-inner js-file-line">positions<span class="pl-k">:</span>[],distances<span class="pl-k">:</span>[]},spot<span class="pl-k">:</span>{length<span class="pl-k">:</span><span class="pl-c1">0</span>,colors<span class="pl-k">:</span>[],positions<span class="pl-k">:</span>[],distances<span class="pl-k">:</span>[],directions<span class="pl-k">:</span>[],angles<span class="pl-k">:</span>[],exponents<span class="pl-k">:</span>[]},hemi<span class="pl-k">:</span>{length<span class="pl-k">:</span><span class="pl-c1">0</span>,skyColors<span class="pl-k">:</span>[],groundColors<span class="pl-k">:</span>[],positions<span class="pl-k">:</span>[]}},k,Qb,yb;<span class="pl-k">try</span>{<span class="pl-k">if</span>(<span class="pl-k">!</span>(k<span class="pl-k">=</span><span class="pl-c1">M</span>.<span class="pl-c1">getContext</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>experimental-webgl<span class="pl-pds">&quot;</span></span>,{alpha<span class="pl-k">:</span><span class="pl-c1">F</span>,premultipliedAlpha<span class="pl-k">:</span><span class="pl-c1">I</span>,antialias<span class="pl-k">:</span><span class="pl-c1">L</span>,stencil<span class="pl-k">:</span><span class="pl-c1">R</span>,preserveDrawingBuffer<span class="pl-k">:</span>$})))<span class="pl-k">throw</span><span class="pl-s"><span class="pl-pds">&quot;</span>Error creating WebGL context.<span class="pl-pds">&quot;</span></span>;}<span class="pl-k">catch</span>(Sc){<span class="pl-en">console</span>.<span class="pl-c1">error</span>(Sc)}a<span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-en">getExtension</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>OES_texture_float<span class="pl-pds">&quot;</span></span>);<span class="pl-c1">F</span><span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-en">getExtension</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>OES_standard_derivatives<span class="pl-pds">&quot;</span></span>);Qb<span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-en">getExtension</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>EXT_texture_filter_anisotropic<span class="pl-pds">&quot;</span></span>)<span class="pl-k">||</span></td>
      </tr>
      <tr>
        <td id="L387" class="blob-num js-line-number" data-line-number="387"></td>
        <td id="LC387" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">k</span>.<span class="pl-en">getExtension</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>MOZ_EXT_texture_filter_anisotropic<span class="pl-pds">&quot;</span></span>)<span class="pl-k">||</span><span class="pl-smi">k</span>.<span class="pl-en">getExtension</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>WEBKIT_EXT_texture_filter_anisotropic<span class="pl-pds">&quot;</span></span>);yb<span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-en">getExtension</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>WEBGL_compressed_texture_s3tc<span class="pl-pds">&quot;</span></span>)<span class="pl-k">||</span><span class="pl-smi">k</span>.<span class="pl-en">getExtension</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>MOZ_WEBGL_compressed_texture_s3tc<span class="pl-pds">&quot;</span></span>)<span class="pl-k">||</span><span class="pl-smi">k</span>.<span class="pl-en">getExtension</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>WEBKIT_WEBGL_compressed_texture_s3tc<span class="pl-pds">&quot;</span></span>);a<span class="pl-k">||</span><span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer: Float textures not supported.<span class="pl-pds">&quot;</span></span>);<span class="pl-c1">F</span><span class="pl-k">||</span><span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer: Standard derivatives not supported.<span class="pl-pds">&quot;</span></span>);Qb<span class="pl-k">||</span><span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer: Anisotropic texture filtering not supported.<span class="pl-pds">&quot;</span></span>);yb<span class="pl-k">||</span></td>
      </tr>
      <tr>
        <td id="L388" class="blob-num js-line-number" data-line-number="388"></td>
        <td id="LC388" class="blob-code blob-code-inner js-file-line"><span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer: S3TC compressed textures not supported.<span class="pl-pds">&quot;</span></span>);<span class="pl-smi">k</span>.<span class="pl-en">clearColor</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);<span class="pl-smi">k</span>.<span class="pl-en">clearDepth</span>(<span class="pl-c1">1</span>);<span class="pl-smi">k</span>.<span class="pl-en">clearStencil</span>(<span class="pl-c1">0</span>);<span class="pl-smi">k</span>.<span class="pl-en">enable</span>(<span class="pl-smi">k</span>.<span class="pl-c1">DEPTH_TEST</span>);<span class="pl-smi">k</span>.<span class="pl-en">depthFunc</span>(<span class="pl-smi">k</span>.<span class="pl-c1">LEQUAL</span>);<span class="pl-smi">k</span>.<span class="pl-en">frontFace</span>(<span class="pl-smi">k</span>.<span class="pl-c1">CCW</span>);<span class="pl-smi">k</span>.<span class="pl-en">cullFace</span>(<span class="pl-smi">k</span>.<span class="pl-c1">BACK</span>);<span class="pl-smi">k</span>.<span class="pl-en">enable</span>(<span class="pl-smi">k</span>.<span class="pl-c1">CULL_FACE</span>);<span class="pl-smi">k</span>.<span class="pl-en">enable</span>(<span class="pl-smi">k</span>.<span class="pl-c1">BLEND</span>);<span class="pl-smi">k</span>.<span class="pl-en">blendEquation</span>(<span class="pl-smi">k</span>.<span class="pl-c1">FUNC_ADD</span>);<span class="pl-smi">k</span>.<span class="pl-en">blendFunc</span>(<span class="pl-smi">k</span>.<span class="pl-c1">SRC_ALPHA</span>,<span class="pl-smi">k</span>.<span class="pl-c1">ONE_MINUS_SRC_ALPHA</span>);<span class="pl-smi">k</span>.<span class="pl-en">clearColor</span>(<span class="pl-c1">Y</span>.<span class="pl-smi">r</span>,<span class="pl-c1">Y</span>.<span class="pl-smi">g</span>,<span class="pl-c1">Y</span>.<span class="pl-smi">b</span>,<span class="pl-c1">N</span>);<span class="pl-c1">this</span>.<span class="pl-smi">context</span><span class="pl-k">=</span>k;<span class="pl-k">var</span> rc<span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-en">getParameter</span>(<span class="pl-smi">k</span>.<span class="pl-c1">MAX_TEXTURE_IMAGE_UNITS</span>),<span class="pl-c1">F</span><span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-en">getParameter</span>(<span class="pl-smi">k</span>.<span class="pl-c1">MAX_VERTEX_TEXTURE_IMAGE_UNITS</span>);<span class="pl-smi">k</span>.<span class="pl-en">getParameter</span>(<span class="pl-smi">k</span>.<span class="pl-c1">MAX_TEXTURE_SIZE</span>);</td>
      </tr>
      <tr>
        <td id="L389" class="blob-num js-line-number" data-line-number="389"></td>
        <td id="LC389" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> Tc<span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-en">getParameter</span>(<span class="pl-smi">k</span>.<span class="pl-c1">MAX_CUBE_MAP_TEXTURE_SIZE</span>),Ec<span class="pl-k">=</span>Qb<span class="pl-k">?</span><span class="pl-smi">k</span>.<span class="pl-en">getParameter</span>(<span class="pl-smi">Qb</span>.<span class="pl-c1">MAX_TEXTURE_MAX_ANISOTROPY_EXT</span>)<span class="pl-k">:</span><span class="pl-c1">0</span>,hc<span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-c1">F</span>,ic<span class="pl-k">=</span>hc<span class="pl-k">&amp;&amp;</span>a;yb<span class="pl-k">&amp;&amp;</span><span class="pl-smi">k</span>.<span class="pl-en">getParameter</span>(<span class="pl-smi">k</span>.<span class="pl-c1">COMPRESSED_TEXTURE_FORMATS</span>);<span class="pl-c1">this</span>.<span class="pl-en">getContext</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> k};<span class="pl-c1">this</span>.<span class="pl-en">supportsVertexTextures</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> hc};<span class="pl-c1">this</span>.<span class="pl-en">getMaxAnisotropy</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> Ec};<span class="pl-c1">this</span>.<span class="pl-en">setSize</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">M</span>.<span class="pl-c1">width</span><span class="pl-k">=</span>a;<span class="pl-c1">M</span>.<span class="pl-c1">height</span><span class="pl-k">=</span>b;<span class="pl-c1">this</span>.<span class="pl-en">setViewport</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">M</span>.<span class="pl-c1">width</span>,<span class="pl-c1">M</span>.<span class="pl-c1">height</span>)};<span class="pl-c1">this</span>.<span class="pl-en">setViewport</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){$a<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>a<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-c1">0</span>;Ja<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-c1">0</span>;wa<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>c<span class="pl-k">?</span>c<span class="pl-k">:</span><span class="pl-c1">M</span>.<span class="pl-c1">width</span>;wb<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>d<span class="pl-k">?</span></td>
      </tr>
      <tr>
        <td id="L390" class="blob-num js-line-number" data-line-number="390"></td>
        <td id="LC390" class="blob-code blob-code-inner js-file-line">d<span class="pl-k">:</span><span class="pl-c1">M</span>.<span class="pl-c1">height</span>;<span class="pl-smi">k</span>.<span class="pl-en">viewport</span>($a,Ja,wa,wb)};<span class="pl-c1">this</span>.<span class="pl-en">setScissor</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-smi">k</span>.<span class="pl-en">scissor</span>(a,b,c,d)};<span class="pl-c1">this</span>.<span class="pl-en">enableScissorTest</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">?</span><span class="pl-smi">k</span>.<span class="pl-en">enable</span>(<span class="pl-smi">k</span>.<span class="pl-c1">SCISSOR_TEST</span>)<span class="pl-k">:</span><span class="pl-smi">k</span>.<span class="pl-en">disable</span>(<span class="pl-smi">k</span>.<span class="pl-c1">SCISSOR_TEST</span>)};<span class="pl-c1">this</span>.<span class="pl-en">setClearColorHex</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">Y</span>.<span class="pl-en">setHex</span>(a);<span class="pl-c1">N</span><span class="pl-k">=</span>b;<span class="pl-smi">k</span>.<span class="pl-en">clearColor</span>(<span class="pl-c1">Y</span>.<span class="pl-smi">r</span>,<span class="pl-c1">Y</span>.<span class="pl-smi">g</span>,<span class="pl-c1">Y</span>.<span class="pl-smi">b</span>,<span class="pl-c1">N</span>)};<span class="pl-c1">this</span>.<span class="pl-en">setClearColor</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">Y</span>.<span class="pl-en">copy</span>(a);<span class="pl-c1">N</span><span class="pl-k">=</span>b;<span class="pl-smi">k</span>.<span class="pl-en">clearColor</span>(<span class="pl-c1">Y</span>.<span class="pl-smi">r</span>,<span class="pl-c1">Y</span>.<span class="pl-smi">g</span>,<span class="pl-c1">Y</span>.<span class="pl-smi">b</span>,<span class="pl-c1">N</span>)};<span class="pl-c1">this</span>.<span class="pl-en">getClearColor</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">Y</span>};<span class="pl-c1">this</span>.<span class="pl-en">getClearAlpha</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">N</span>};<span class="pl-c1">this</span>.<span class="pl-en">clear</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>a<span class="pl-k">||</span>a)d<span class="pl-k">|=</span><span class="pl-smi">k</span>.<span class="pl-c1">COLOR_BUFFER_BIT</span>;<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span></td>
      </tr>
      <tr>
        <td id="L391" class="blob-num js-line-number" data-line-number="391"></td>
        <td id="LC391" class="blob-code blob-code-inner js-file-line">b<span class="pl-k">||</span>b)d<span class="pl-k">|=</span><span class="pl-smi">k</span>.<span class="pl-c1">DEPTH_BUFFER_BIT</span>;<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>c<span class="pl-k">||</span>c)d<span class="pl-k">|=</span><span class="pl-smi">k</span>.<span class="pl-c1">STENCIL_BUFFER_BIT</span>;<span class="pl-smi">k</span>.<span class="pl-c1">clear</span>(d)};<span class="pl-c1">this</span>.<span class="pl-en">clearTarget</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-c1">this</span>.<span class="pl-en">setRenderTarget</span>(a);<span class="pl-c1">this</span>.<span class="pl-c1">clear</span>(b,c,d)};<span class="pl-c1">this</span>.<span class="pl-en">addPostPlugin</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-smi">a</span>.<span class="pl-en">init</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-smi">renderPluginsPost</span>.<span class="pl-c1">push</span>(a)};<span class="pl-c1">this</span>.<span class="pl-en">addPrePlugin</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-smi">a</span>.<span class="pl-en">init</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-smi">renderPluginsPre</span>.<span class="pl-c1">push</span>(a)};<span class="pl-c1">this</span>.<span class="pl-en">deallocateObject</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">__webglInit</span>)<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">__webglInit</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-k">delete</span> <span class="pl-smi">a</span>.<span class="pl-smi">_modelViewMatrix</span>,<span class="pl-k">delete</span> <span class="pl-smi">a</span>.<span class="pl-smi">_normalMatrix</span>,<span class="pl-k">delete</span> <span class="pl-smi">a</span>.<span class="pl-smi">_normalMatrixArray</span>,<span class="pl-k">delete</span> <span class="pl-smi">a</span>.<span class="pl-smi">_modelViewMatrixArray</span>,<span class="pl-k">delete</span> <span class="pl-smi">a</span>.<span class="pl-smi">_modelMatrixArray</span>,</td>
      </tr>
      <tr>
        <td id="L392" class="blob-num js-line-number" data-line-number="392"></td>
        <td id="LC392" class="blob-code blob-code-inner js-file-line">a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Mesh</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> b <span class="pl-k">in</span> <span class="pl-smi">a</span>.<span class="pl-smi">geometry</span>.<span class="pl-smi">geometryGroups</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">geometry</span>.<span class="pl-smi">geometryGroups</span>[b];<span class="pl-smi">k</span>.<span class="pl-en">deleteBuffer</span>(<span class="pl-smi">c</span>.<span class="pl-smi">__webglVertexBuffer</span>);<span class="pl-smi">k</span>.<span class="pl-en">deleteBuffer</span>(<span class="pl-smi">c</span>.<span class="pl-smi">__webglNormalBuffer</span>);<span class="pl-smi">k</span>.<span class="pl-en">deleteBuffer</span>(<span class="pl-smi">c</span>.<span class="pl-smi">__webglTangentBuffer</span>);<span class="pl-smi">k</span>.<span class="pl-en">deleteBuffer</span>(<span class="pl-smi">c</span>.<span class="pl-smi">__webglColorBuffer</span>);<span class="pl-smi">k</span>.<span class="pl-en">deleteBuffer</span>(<span class="pl-smi">c</span>.<span class="pl-smi">__webglUVBuffer</span>);<span class="pl-smi">k</span>.<span class="pl-en">deleteBuffer</span>(<span class="pl-smi">c</span>.<span class="pl-smi">__webglUV2Buffer</span>);<span class="pl-smi">k</span>.<span class="pl-en">deleteBuffer</span>(<span class="pl-smi">c</span>.<span class="pl-smi">__webglSkinIndicesBuffer</span>);<span class="pl-smi">k</span>.<span class="pl-en">deleteBuffer</span>(<span class="pl-smi">c</span>.<span class="pl-smi">__webglSkinWeightsBuffer</span>);<span class="pl-smi">k</span>.<span class="pl-en">deleteBuffer</span>(<span class="pl-smi">c</span>.<span class="pl-smi">__webglFaceBuffer</span>);<span class="pl-smi">k</span>.<span class="pl-en">deleteBuffer</span>(<span class="pl-smi">c</span>.<span class="pl-smi">__webglLineBuffer</span>);<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,e<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-smi">c</span>.<span class="pl-smi">numMorphTargets</span>){d<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L393" class="blob-num js-line-number" data-line-number="393"></td>
        <td id="LC393" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>;<span class="pl-k">for</span>(e<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">numMorphTargets</span>;d<span class="pl-k">&lt;</span>e;d<span class="pl-k">++</span>)<span class="pl-smi">k</span>.<span class="pl-en">deleteBuffer</span>(<span class="pl-smi">c</span>.<span class="pl-smi">__webglMorphTargetsBuffers</span>[d])}<span class="pl-k">if</span>(<span class="pl-smi">c</span>.<span class="pl-smi">numMorphNormals</span>){d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(e<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">numMorphNormals</span>;d<span class="pl-k">&lt;</span>e;d<span class="pl-k">++</span>)<span class="pl-smi">k</span>.<span class="pl-en">deleteBuffer</span>(<span class="pl-smi">c</span>.<span class="pl-smi">__webglMorphNormalsBuffers</span>[d])}<span class="pl-k">if</span>(<span class="pl-smi">c</span>.<span class="pl-smi">__webglCustomAttributesList</span>)<span class="pl-k">for</span>(d <span class="pl-k">in</span> d<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,<span class="pl-smi">c</span>.<span class="pl-smi">__webglCustomAttributesList</span>)<span class="pl-smi">k</span>.<span class="pl-en">deleteBuffer</span>(<span class="pl-smi">c</span>.<span class="pl-smi">__webglCustomAttributesList</span>[d].<span class="pl-smi">buffer</span>);<span class="pl-c1">Q</span>.<span class="pl-smi">info</span>.<span class="pl-smi">memory</span>.<span class="pl-smi">geometries</span><span class="pl-k">--</span>}<span class="pl-k">else</span> a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Ribbon</span><span class="pl-k">?</span>(a<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">geometry</span>,<span class="pl-smi">k</span>.<span class="pl-en">deleteBuffer</span>(<span class="pl-smi">a</span>.<span class="pl-smi">__webglVertexBuffer</span>),<span class="pl-smi">k</span>.<span class="pl-en">deleteBuffer</span>(<span class="pl-smi">a</span>.<span class="pl-smi">__webglColorBuffer</span>),<span class="pl-c1">Q</span>.<span class="pl-smi">info</span>.<span class="pl-smi">memory</span>.<span class="pl-smi">geometries</span><span class="pl-k">--</span>)<span class="pl-k">:</span>a <span class="pl-k">instanceof</span></td>
      </tr>
      <tr>
        <td id="L394" class="blob-num js-line-number" data-line-number="394"></td>
        <td id="LC394" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Line</span><span class="pl-k">?</span>(a<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">geometry</span>,<span class="pl-smi">k</span>.<span class="pl-en">deleteBuffer</span>(<span class="pl-smi">a</span>.<span class="pl-smi">__webglVertexBuffer</span>),<span class="pl-smi">k</span>.<span class="pl-en">deleteBuffer</span>(<span class="pl-smi">a</span>.<span class="pl-smi">__webglColorBuffer</span>),<span class="pl-c1">Q</span>.<span class="pl-smi">info</span>.<span class="pl-smi">memory</span>.<span class="pl-smi">geometries</span><span class="pl-k">--</span>)<span class="pl-k">:</span>a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">ParticleSystem</span><span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">geometry</span>,<span class="pl-smi">k</span>.<span class="pl-en">deleteBuffer</span>(<span class="pl-smi">a</span>.<span class="pl-smi">__webglVertexBuffer</span>),<span class="pl-smi">k</span>.<span class="pl-en">deleteBuffer</span>(<span class="pl-smi">a</span>.<span class="pl-smi">__webglColorBuffer</span>),<span class="pl-c1">Q</span>.<span class="pl-smi">info</span>.<span class="pl-smi">memory</span>.<span class="pl-smi">geometries</span><span class="pl-k">--</span>)};<span class="pl-c1">this</span>.<span class="pl-en">deallocateTexture</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-smi">a</span>.<span class="pl-smi">__webglInit</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">a</span>.<span class="pl-smi">__webglInit</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-smi">k</span>.<span class="pl-en">deleteTexture</span>(<span class="pl-smi">a</span>.<span class="pl-smi">__webglTexture</span>),<span class="pl-c1">Q</span>.<span class="pl-smi">info</span>.<span class="pl-smi">memory</span>.<span class="pl-smi">textures</span><span class="pl-k">--</span>)};<span class="pl-c1">this</span>.<span class="pl-en">deallocateRenderTarget</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(a<span class="pl-k">&amp;&amp;</span><span class="pl-smi">a</span>.<span class="pl-smi">__webglTexture</span>)<span class="pl-k">if</span>(<span class="pl-smi">k</span>.<span class="pl-en">deleteTexture</span>(<span class="pl-smi">a</span>.<span class="pl-smi">__webglTexture</span>),</td>
      </tr>
      <tr>
        <td id="L395" class="blob-num js-line-number" data-line-number="395"></td>
        <td id="LC395" class="blob-code blob-code-inner js-file-line">a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">WebGLRenderTargetCube</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">6</span><span class="pl-k">&gt;</span>b;b<span class="pl-k">++</span>)<span class="pl-smi">k</span>.<span class="pl-en">deleteFramebuffer</span>(<span class="pl-smi">a</span>.<span class="pl-smi">__webglFramebuffer</span>[b]),<span class="pl-smi">k</span>.<span class="pl-en">deleteRenderbuffer</span>(<span class="pl-smi">a</span>.<span class="pl-smi">__webglRenderbuffer</span>[b]);<span class="pl-k">else</span> <span class="pl-smi">k</span>.<span class="pl-en">deleteFramebuffer</span>(<span class="pl-smi">a</span>.<span class="pl-smi">__webglFramebuffer</span>),<span class="pl-smi">k</span>.<span class="pl-en">deleteRenderbuffer</span>(<span class="pl-smi">a</span>.<span class="pl-smi">__webglRenderbuffer</span>)};<span class="pl-c1">this</span>.<span class="pl-en">deallocateMaterial</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">program</span>;<span class="pl-k">if</span>(b){<span class="pl-smi">a</span>.<span class="pl-smi">program</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>;<span class="pl-k">var</span> c,d,e<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>,a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-smi">qa</span>.<span class="pl-c1">length</span>;a<span class="pl-k">&lt;</span>c;a<span class="pl-k">++</span>)<span class="pl-k">if</span>(d<span class="pl-k">=</span>qa[a],<span class="pl-smi">d</span>.<span class="pl-smi">program</span><span class="pl-k">===</span>b){<span class="pl-smi">d</span>.<span class="pl-smi">usedTimes</span><span class="pl-k">--</span>;<span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">d</span>.<span class="pl-smi">usedTimes</span><span class="pl-k">&amp;&amp;</span>(e<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>);<span class="pl-k">break</span>}<span class="pl-k">if</span>(e){e<span class="pl-k">=</span>[];a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-smi">qa</span>.<span class="pl-c1">length</span>;a<span class="pl-k">&lt;</span>c;a<span class="pl-k">++</span>)d<span class="pl-k">=</span>qa[a],<span class="pl-smi">d</span>.<span class="pl-smi">program</span><span class="pl-k">!==</span>b<span class="pl-k">&amp;&amp;</span><span class="pl-smi">e</span>.<span class="pl-c1">push</span>(d);</td>
      </tr>
      <tr>
        <td id="L396" class="blob-num js-line-number" data-line-number="396"></td>
        <td id="LC396" class="blob-code blob-code-inner js-file-line">qa<span class="pl-k">=</span>e;<span class="pl-smi">k</span>.<span class="pl-en">deleteProgram</span>(b);<span class="pl-c1">Q</span>.<span class="pl-smi">info</span>.<span class="pl-smi">memory</span>.<span class="pl-smi">programs</span><span class="pl-k">--</span>}}};<span class="pl-c1">this</span>.<span class="pl-en">updateShadowMap</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">O</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">W</span><span class="pl-k">=</span><span class="pl-c1">V</span><span class="pl-k">=</span>Ra<span class="pl-k">=</span>ib<span class="pl-k">=</span>Ia<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">1</span>;Ea<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;Pa<span class="pl-k">=</span>Ga<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">shadowMapPlugin</span>.<span class="pl-en">update</span>(a,b)};<span class="pl-c1">this</span>.<span class="pl-en">renderBufferImmediate</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-smi">a</span>.<span class="pl-smi">hasPositions</span><span class="pl-k">&amp;&amp;!</span><span class="pl-smi">a</span>.<span class="pl-smi">__webglVertexBuffer</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">a</span>.<span class="pl-smi">__webglVertexBuffer</span><span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-en">createBuffer</span>());<span class="pl-smi">a</span>.<span class="pl-smi">hasNormals</span><span class="pl-k">&amp;&amp;!</span><span class="pl-smi">a</span>.<span class="pl-smi">__webglNormalBuffer</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">a</span>.<span class="pl-smi">__webglNormalBuffer</span><span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-en">createBuffer</span>());<span class="pl-smi">a</span>.<span class="pl-smi">hasUvs</span><span class="pl-k">&amp;&amp;!</span><span class="pl-smi">a</span>.<span class="pl-smi">__webglUvBuffer</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">a</span>.<span class="pl-smi">__webglUvBuffer</span><span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-en">createBuffer</span>());<span class="pl-smi">a</span>.<span class="pl-smi">hasColors</span><span class="pl-k">&amp;&amp;!</span><span class="pl-smi">a</span>.<span class="pl-smi">__webglColorBuffer</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">a</span>.<span class="pl-smi">__webglColorBuffer</span><span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-en">createBuffer</span>());</td>
      </tr>
      <tr>
        <td id="L397" class="blob-num js-line-number" data-line-number="397"></td>
        <td id="LC397" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">a</span>.<span class="pl-smi">hasPositions</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">k</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">a</span>.<span class="pl-smi">__webglVertexBuffer</span>),<span class="pl-smi">k</span>.<span class="pl-en">bufferData</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">a</span>.<span class="pl-smi">positionArray</span>,<span class="pl-smi">k</span>.<span class="pl-c1">DYNAMIC_DRAW</span>),<span class="pl-smi">k</span>.<span class="pl-en">enableVertexAttribArray</span>(<span class="pl-smi">b</span>.<span class="pl-c1">attributes</span>.<span class="pl-smi">position</span>),<span class="pl-smi">k</span>.<span class="pl-en">vertexAttribPointer</span>(<span class="pl-smi">b</span>.<span class="pl-c1">attributes</span>.<span class="pl-smi">position</span>,<span class="pl-c1">3</span>,<span class="pl-smi">k</span>.<span class="pl-c1">FLOAT</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>));<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">hasNormals</span>){<span class="pl-smi">k</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">a</span>.<span class="pl-smi">__webglNormalBuffer</span>);<span class="pl-k">if</span>(<span class="pl-smi">c</span>.<span class="pl-smi">shading</span><span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">FlatShading</span>){<span class="pl-k">var</span> d,e,f,g,h,i,j,l,n,m,o,p<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-smi">count</span>;<span class="pl-k">for</span>(o<span class="pl-k">=</span><span class="pl-c1">0</span>;o<span class="pl-k">&lt;</span>p;o<span class="pl-k">+=</span><span class="pl-c1">9</span>)m<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">normalArray</span>,d<span class="pl-k">=</span>m[o],e<span class="pl-k">=</span>m[o<span class="pl-k">+</span><span class="pl-c1">1</span>],f<span class="pl-k">=</span>m[o<span class="pl-k">+</span><span class="pl-c1">2</span>],g<span class="pl-k">=</span>m[o<span class="pl-k">+</span><span class="pl-c1">3</span>],i<span class="pl-k">=</span>m[o<span class="pl-k">+</span><span class="pl-c1">4</span>],l<span class="pl-k">=</span>m[o<span class="pl-k">+</span><span class="pl-c1">5</span>],h<span class="pl-k">=</span>m[o<span class="pl-k">+</span><span class="pl-c1">6</span>],j<span class="pl-k">=</span>m[o<span class="pl-k">+</span><span class="pl-c1">7</span>],n<span class="pl-k">=</span>m[o<span class="pl-k">+</span><span class="pl-c1">8</span>],d<span class="pl-k">=</span>(d<span class="pl-k">+</span>g<span class="pl-k">+</span>h)<span class="pl-k">/</span></td>
      </tr>
      <tr>
        <td id="L398" class="blob-num js-line-number" data-line-number="398"></td>
        <td id="LC398" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">3</span>,e<span class="pl-k">=</span>(e<span class="pl-k">+</span>i<span class="pl-k">+</span>j)<span class="pl-k">/</span><span class="pl-c1">3</span>,f<span class="pl-k">=</span>(f<span class="pl-k">+</span>l<span class="pl-k">+</span>n)<span class="pl-k">/</span><span class="pl-c1">3</span>,m[o]<span class="pl-k">=</span>d,m[o<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>e,m[o<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span>f,m[o<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span>d,m[o<span class="pl-k">+</span><span class="pl-c1">4</span>]<span class="pl-k">=</span>e,m[o<span class="pl-k">+</span><span class="pl-c1">5</span>]<span class="pl-k">=</span>f,m[o<span class="pl-k">+</span><span class="pl-c1">6</span>]<span class="pl-k">=</span>d,m[o<span class="pl-k">+</span><span class="pl-c1">7</span>]<span class="pl-k">=</span>e,m[o<span class="pl-k">+</span><span class="pl-c1">8</span>]<span class="pl-k">=</span>f}<span class="pl-smi">k</span>.<span class="pl-en">bufferData</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">a</span>.<span class="pl-smi">normalArray</span>,<span class="pl-smi">k</span>.<span class="pl-c1">DYNAMIC_DRAW</span>);<span class="pl-smi">k</span>.<span class="pl-en">enableVertexAttribArray</span>(<span class="pl-smi">b</span>.<span class="pl-c1">attributes</span>.<span class="pl-smi">normal</span>);<span class="pl-smi">k</span>.<span class="pl-en">vertexAttribPointer</span>(<span class="pl-smi">b</span>.<span class="pl-c1">attributes</span>.<span class="pl-smi">normal</span>,<span class="pl-c1">3</span>,<span class="pl-smi">k</span>.<span class="pl-c1">FLOAT</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>)}<span class="pl-smi">a</span>.<span class="pl-smi">hasUvs</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">c</span>.<span class="pl-smi">map</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">k</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">a</span>.<span class="pl-smi">__webglUvBuffer</span>),<span class="pl-smi">k</span>.<span class="pl-en">bufferData</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">a</span>.<span class="pl-smi">uvArray</span>,<span class="pl-smi">k</span>.<span class="pl-c1">DYNAMIC_DRAW</span>),<span class="pl-smi">k</span>.<span class="pl-en">enableVertexAttribArray</span>(<span class="pl-smi">b</span>.<span class="pl-c1">attributes</span>.<span class="pl-smi">uv</span>),<span class="pl-smi">k</span>.<span class="pl-en">vertexAttribPointer</span>(<span class="pl-smi">b</span>.<span class="pl-c1">attributes</span>.<span class="pl-smi">uv</span>,<span class="pl-c1">2</span>,<span class="pl-smi">k</span>.<span class="pl-c1">FLOAT</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>));<span class="pl-smi">a</span>.<span class="pl-smi">hasColors</span><span class="pl-k">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L399" class="blob-num js-line-number" data-line-number="399"></td>
        <td id="LC399" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">c</span>.<span class="pl-smi">vertexColors</span><span class="pl-k">!==</span><span class="pl-c1">THREE</span>.<span class="pl-smi">NoColors</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">k</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">a</span>.<span class="pl-smi">__webglColorBuffer</span>),<span class="pl-smi">k</span>.<span class="pl-en">bufferData</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">a</span>.<span class="pl-smi">colorArray</span>,<span class="pl-smi">k</span>.<span class="pl-c1">DYNAMIC_DRAW</span>),<span class="pl-smi">k</span>.<span class="pl-en">enableVertexAttribArray</span>(<span class="pl-smi">b</span>.<span class="pl-c1">attributes</span>.<span class="pl-c1">color</span>),<span class="pl-smi">k</span>.<span class="pl-en">vertexAttribPointer</span>(<span class="pl-smi">b</span>.<span class="pl-c1">attributes</span>.<span class="pl-c1">color</span>,<span class="pl-c1">3</span>,<span class="pl-smi">k</span>.<span class="pl-c1">FLOAT</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>));<span class="pl-smi">k</span>.<span class="pl-en">drawArrays</span>(<span class="pl-smi">k</span>.<span class="pl-c1">TRIANGLES</span>,<span class="pl-c1">0</span>,<span class="pl-smi">a</span>.<span class="pl-smi">count</span>);<span class="pl-smi">a</span>.<span class="pl-smi">count</span><span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-c1">this</span>.<span class="pl-en">renderBufferDirect</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>){<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">!==</span><span class="pl-smi">d</span>.<span class="pl-smi">visible</span>)<span class="pl-k">if</span>(c<span class="pl-k">=</span><span class="pl-en">B</span>(a,b,c,d,f),a<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">attributes</span>,b<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>,d<span class="pl-k">=</span><span class="pl-c1">16777215</span><span class="pl-k">*</span><span class="pl-smi">e</span>.<span class="pl-c1">id</span><span class="pl-k">+</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-smi">c</span>.<span class="pl-c1">id</span><span class="pl-k">+</span>(<span class="pl-smi">d</span>.<span class="pl-smi">wireframe</span><span class="pl-k">?</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">0</span>),d<span class="pl-k">!==</span><span class="pl-c1">V</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">V</span><span class="pl-k">=</span>d,b<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>),f <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Mesh</span>){f<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">offsets</span>;<span class="pl-c1">1</span><span class="pl-k">&lt;</span><span class="pl-smi">f</span>.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L400" class="blob-num js-line-number" data-line-number="400"></td>
        <td id="LC400" class="blob-code blob-code-inner js-file-line">(b<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>);d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">length</span>;d<span class="pl-k">&lt;</span>c;<span class="pl-k">++</span>d){<span class="pl-k">var</span> g<span class="pl-k">=</span>f[d].<span class="pl-c1">index</span>;<span class="pl-k">if</span>(b){<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-c1">attributes</span>.<span class="pl-smi">position</span>,i<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">itemSize</span>;<span class="pl-smi">k</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">h</span>.<span class="pl-smi">buffer</span>);<span class="pl-smi">k</span>.<span class="pl-en">vertexAttribPointer</span>(<span class="pl-smi">a</span>.<span class="pl-smi">position</span>,i,<span class="pl-smi">k</span>.<span class="pl-c1">FLOAT</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">4</span><span class="pl-k">*</span>g<span class="pl-k">*</span>i);h<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-c1">attributes</span>.<span class="pl-smi">normal</span>;<span class="pl-c1">0</span><span class="pl-k">&lt;=</span><span class="pl-smi">a</span>.<span class="pl-smi">normal</span><span class="pl-k">&amp;&amp;</span>h<span class="pl-k">&amp;&amp;</span>(i<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">itemSize</span>,<span class="pl-smi">k</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">h</span>.<span class="pl-smi">buffer</span>),<span class="pl-smi">k</span>.<span class="pl-en">vertexAttribPointer</span>(<span class="pl-smi">a</span>.<span class="pl-smi">normal</span>,i,<span class="pl-smi">k</span>.<span class="pl-c1">FLOAT</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">4</span><span class="pl-k">*</span>g<span class="pl-k">*</span>i));h<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-c1">attributes</span>.<span class="pl-smi">uv</span>;<span class="pl-c1">0</span><span class="pl-k">&lt;=</span><span class="pl-smi">a</span>.<span class="pl-smi">uv</span><span class="pl-k">&amp;&amp;</span>h<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">h</span>.<span class="pl-smi">buffer</span><span class="pl-k">?</span>(i<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">itemSize</span>,<span class="pl-smi">k</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">h</span>.<span class="pl-smi">buffer</span>),<span class="pl-smi">k</span>.<span class="pl-en">vertexAttribPointer</span>(<span class="pl-smi">a</span>.<span class="pl-smi">uv</span>,i,<span class="pl-smi">k</span>.<span class="pl-c1">FLOAT</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">4</span><span class="pl-k">*</span>g<span class="pl-k">*</span>i),<span class="pl-smi">k</span>.<span class="pl-en">enableVertexAttribArray</span>(<span class="pl-smi">a</span>.<span class="pl-smi">uv</span>))<span class="pl-k">:</span></td>
      </tr>
      <tr>
        <td id="L401" class="blob-num js-line-number" data-line-number="401"></td>
        <td id="LC401" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">k</span>.<span class="pl-en">disableVertexAttribArray</span>(<span class="pl-smi">a</span>.<span class="pl-smi">uv</span>));i<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-c1">attributes</span>.<span class="pl-c1">color</span>;<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&lt;=</span><span class="pl-smi">a</span>.<span class="pl-c1">color</span><span class="pl-k">&amp;&amp;</span>i){<span class="pl-k">var</span> j<span class="pl-k">=</span><span class="pl-smi">i</span>.<span class="pl-smi">itemSize</span>;<span class="pl-smi">k</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">i</span>.<span class="pl-smi">buffer</span>);<span class="pl-smi">k</span>.<span class="pl-en">vertexAttribPointer</span>(<span class="pl-smi">a</span>.<span class="pl-c1">color</span>,j,<span class="pl-smi">k</span>.<span class="pl-c1">FLOAT</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">4</span><span class="pl-k">*</span>g<span class="pl-k">*</span>j)}h<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-c1">attributes</span>.<span class="pl-smi">tangent</span>;<span class="pl-c1">0</span><span class="pl-k">&lt;=</span><span class="pl-smi">a</span>.<span class="pl-smi">tangent</span><span class="pl-k">&amp;&amp;</span>h<span class="pl-k">&amp;&amp;</span>(i<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">itemSize</span>,<span class="pl-smi">k</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">h</span>.<span class="pl-smi">buffer</span>),<span class="pl-smi">k</span>.<span class="pl-en">vertexAttribPointer</span>(<span class="pl-smi">a</span>.<span class="pl-smi">tangent</span>,i,<span class="pl-smi">k</span>.<span class="pl-c1">FLOAT</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">4</span><span class="pl-k">*</span>g<span class="pl-k">*</span>i));<span class="pl-smi">k</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ELEMENT_ARRAY_BUFFER</span>,<span class="pl-smi">e</span>.<span class="pl-c1">attributes</span>.<span class="pl-c1">index</span>.<span class="pl-smi">buffer</span>)}<span class="pl-smi">k</span>.<span class="pl-en">drawElements</span>(<span class="pl-smi">k</span>.<span class="pl-c1">TRIANGLES</span>,f[d].<span class="pl-smi">count</span>,<span class="pl-smi">k</span>.<span class="pl-c1">UNSIGNED_SHORT</span>,<span class="pl-c1">2</span><span class="pl-k">*</span>f[d].<span class="pl-c1">start</span>);<span class="pl-c1">Q</span>.<span class="pl-smi">info</span>.<span class="pl-smi">render</span>.<span class="pl-smi">calls</span><span class="pl-k">++</span>;<span class="pl-c1">Q</span>.<span class="pl-smi">info</span>.<span class="pl-smi">render</span>.<span class="pl-smi">vertices</span><span class="pl-k">+=</span></td>
      </tr>
      <tr>
        <td id="L402" class="blob-num js-line-number" data-line-number="402"></td>
        <td id="LC402" class="blob-code blob-code-inner js-file-line">f[d].<span class="pl-smi">count</span>;<span class="pl-c1">Q</span>.<span class="pl-smi">info</span>.<span class="pl-smi">render</span>.<span class="pl-smi">faces</span><span class="pl-k">+=</span>f[d].<span class="pl-smi">count</span><span class="pl-k">/</span><span class="pl-c1">3</span>}}<span class="pl-k">else</span> f <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">ParticleSystem</span><span class="pl-k">&amp;&amp;</span>b<span class="pl-k">&amp;&amp;</span>(h<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-c1">attributes</span>.<span class="pl-smi">position</span>,i<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-smi">itemSize</span>,<span class="pl-smi">k</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">h</span>.<span class="pl-smi">buffer</span>),<span class="pl-smi">k</span>.<span class="pl-en">vertexAttribPointer</span>(<span class="pl-smi">a</span>.<span class="pl-smi">position</span>,i,<span class="pl-smi">k</span>.<span class="pl-c1">FLOAT</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>),i<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-c1">attributes</span>.<span class="pl-c1">color</span>,<span class="pl-c1">0</span><span class="pl-k">&lt;=</span><span class="pl-smi">a</span>.<span class="pl-c1">color</span><span class="pl-k">&amp;&amp;</span>i<span class="pl-k">&amp;&amp;</span>(j<span class="pl-k">=</span><span class="pl-smi">i</span>.<span class="pl-smi">itemSize</span>,<span class="pl-smi">k</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">i</span>.<span class="pl-smi">buffer</span>),<span class="pl-smi">k</span>.<span class="pl-en">vertexAttribPointer</span>(<span class="pl-smi">a</span>.<span class="pl-c1">color</span>,j,<span class="pl-smi">k</span>.<span class="pl-c1">FLOAT</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>)),<span class="pl-smi">k</span>.<span class="pl-en">drawArrays</span>(<span class="pl-smi">k</span>.<span class="pl-c1">POINTS</span>,<span class="pl-c1">0</span>,<span class="pl-smi">h</span>.<span class="pl-smi">numItems</span><span class="pl-k">/</span><span class="pl-c1">3</span>),<span class="pl-c1">Q</span>.<span class="pl-smi">info</span>.<span class="pl-smi">render</span>.<span class="pl-smi">calls</span><span class="pl-k">++</span>,<span class="pl-c1">Q</span>.<span class="pl-smi">info</span>.<span class="pl-smi">render</span>.<span class="pl-smi">points</span><span class="pl-k">+=</span><span class="pl-smi">h</span>.<span class="pl-smi">numItems</span><span class="pl-k">/</span><span class="pl-c1">3</span>)};<span class="pl-c1">this</span>.<span class="pl-en">renderBuffer</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>){<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">!==</span><span class="pl-smi">d</span>.<span class="pl-smi">visible</span>){<span class="pl-k">var</span> g,</td>
      </tr>
      <tr>
        <td id="L403" class="blob-num js-line-number" data-line-number="403"></td>
        <td id="LC403" class="blob-code blob-code-inner js-file-line">h,c<span class="pl-k">=</span><span class="pl-en">B</span>(a,b,c,d,f),b<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">attributes</span>,a<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>,c<span class="pl-k">=</span><span class="pl-c1">16777215</span><span class="pl-k">*</span><span class="pl-smi">e</span>.<span class="pl-c1">id</span><span class="pl-k">+</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-smi">c</span>.<span class="pl-c1">id</span><span class="pl-k">+</span>(<span class="pl-smi">d</span>.<span class="pl-smi">wireframe</span><span class="pl-k">?</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">0</span>);c<span class="pl-k">!==</span><span class="pl-c1">V</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">V</span><span class="pl-k">=</span>c,a<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>);<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-smi">d</span>.<span class="pl-smi">morphTargets</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">&lt;=</span><span class="pl-smi">b</span>.<span class="pl-smi">position</span>)a<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">k</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">e</span>.<span class="pl-smi">__webglVertexBuffer</span>),<span class="pl-smi">k</span>.<span class="pl-en">vertexAttribPointer</span>(<span class="pl-smi">b</span>.<span class="pl-smi">position</span>,<span class="pl-c1">3</span>,<span class="pl-smi">k</span>.<span class="pl-c1">FLOAT</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>));<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-smi">f</span>.<span class="pl-smi">morphTargetBase</span>){c<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">program</span>.<span class="pl-c1">attributes</span>;<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">!==</span><span class="pl-smi">f</span>.<span class="pl-smi">morphTargetBase</span><span class="pl-k">?</span>(<span class="pl-smi">k</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">e</span>.<span class="pl-smi">__webglMorphTargetsBuffers</span>[<span class="pl-smi">f</span>.<span class="pl-smi">morphTargetBase</span>]),<span class="pl-smi">k</span>.<span class="pl-en">vertexAttribPointer</span>(<span class="pl-smi">c</span>.<span class="pl-smi">position</span>,<span class="pl-c1">3</span>,<span class="pl-smi">k</span>.<span class="pl-c1">FLOAT</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>))<span class="pl-k">:</span><span class="pl-c1">0</span><span class="pl-k">&lt;=</span><span class="pl-smi">c</span>.<span class="pl-smi">position</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">k</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">e</span>.<span class="pl-smi">__webglVertexBuffer</span>),</td>
      </tr>
      <tr>
        <td id="L404" class="blob-num js-line-number" data-line-number="404"></td>
        <td id="LC404" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">k</span>.<span class="pl-en">vertexAttribPointer</span>(<span class="pl-smi">c</span>.<span class="pl-smi">position</span>,<span class="pl-c1">3</span>,<span class="pl-smi">k</span>.<span class="pl-c1">FLOAT</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>));<span class="pl-k">if</span>(<span class="pl-smi">f</span>.<span class="pl-smi">morphTargetForcedOrder</span>.<span class="pl-c1">length</span>){<span class="pl-k">var</span> i<span class="pl-k">=</span><span class="pl-c1">0</span>;h<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">morphTargetForcedOrder</span>;<span class="pl-k">for</span>(g<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">morphTargetInfluences</span>;i<span class="pl-k">&lt;</span><span class="pl-smi">d</span>.<span class="pl-smi">numSupportedMorphTargets</span><span class="pl-k">&amp;&amp;</span>i<span class="pl-k">&lt;</span><span class="pl-smi">h</span>.<span class="pl-c1">length</span>;)<span class="pl-smi">k</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">e</span>.<span class="pl-smi">__webglMorphTargetsBuffers</span>[h[i]]),<span class="pl-smi">k</span>.<span class="pl-en">vertexAttribPointer</span>(c[<span class="pl-s"><span class="pl-pds">&quot;</span>morphTarget<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>i],<span class="pl-c1">3</span>,<span class="pl-smi">k</span>.<span class="pl-c1">FLOAT</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>),<span class="pl-smi">d</span>.<span class="pl-smi">morphNormals</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">k</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">e</span>.<span class="pl-smi">__webglMorphNormalsBuffers</span>[h[i]]),<span class="pl-smi">k</span>.<span class="pl-en">vertexAttribPointer</span>(c[<span class="pl-s"><span class="pl-pds">&quot;</span>morphNormal<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>i],<span class="pl-c1">3</span>,<span class="pl-smi">k</span>.<span class="pl-c1">FLOAT</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>)),<span class="pl-smi">f</span>.<span class="pl-smi">__webglMorphTargetInfluences</span>[i]<span class="pl-k">=</span>g[h[i]],</td>
      </tr>
      <tr>
        <td id="L405" class="blob-num js-line-number" data-line-number="405"></td>
        <td id="LC405" class="blob-code blob-code-inner js-file-line">i<span class="pl-k">++</span>}<span class="pl-k">else</span>{h<span class="pl-k">=</span>[];g<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">morphTargetInfluences</span>;<span class="pl-k">var</span> l,m<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-c1">length</span>;<span class="pl-k">for</span>(l<span class="pl-k">=</span><span class="pl-c1">0</span>;l<span class="pl-k">&lt;</span>m;l<span class="pl-k">++</span>)i<span class="pl-k">=</span>g[l],<span class="pl-c1">0</span><span class="pl-k">&lt;</span>i<span class="pl-k">&amp;&amp;</span><span class="pl-smi">h</span>.<span class="pl-c1">push</span>([l,i]);<span class="pl-smi">h</span>.<span class="pl-c1">length</span><span class="pl-k">&gt;</span><span class="pl-smi">d</span>.<span class="pl-smi">numSupportedMorphTargets</span><span class="pl-k">?</span>(<span class="pl-smi">h</span>.<span class="pl-c1">sort</span>(j),<span class="pl-smi">h</span>.<span class="pl-c1">length</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">numSupportedMorphTargets</span>)<span class="pl-k">:</span><span class="pl-smi">h</span>.<span class="pl-c1">length</span><span class="pl-k">&gt;</span><span class="pl-smi">d</span>.<span class="pl-smi">numSupportedMorphNormals</span><span class="pl-k">?</span><span class="pl-smi">h</span>.<span class="pl-c1">sort</span>(j)<span class="pl-k">:</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">h</span>.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">h</span>.<span class="pl-c1">push</span>([<span class="pl-c1">0</span>,<span class="pl-c1">0</span>]);<span class="pl-k">for</span>(i<span class="pl-k">=</span><span class="pl-c1">0</span>;i<span class="pl-k">&lt;</span><span class="pl-smi">d</span>.<span class="pl-smi">numSupportedMorphTargets</span>;)h[i]<span class="pl-k">?</span>(l<span class="pl-k">=</span>h[i][<span class="pl-c1">0</span>],<span class="pl-smi">k</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">e</span>.<span class="pl-smi">__webglMorphTargetsBuffers</span>[l]),<span class="pl-smi">k</span>.<span class="pl-en">vertexAttribPointer</span>(c[<span class="pl-s"><span class="pl-pds">&quot;</span>morphTarget<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>i],<span class="pl-c1">3</span>,<span class="pl-smi">k</span>.<span class="pl-c1">FLOAT</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>),<span class="pl-smi">d</span>.<span class="pl-smi">morphNormals</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">k</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">e</span>.<span class="pl-smi">__webglMorphNormalsBuffers</span>[l]),</td>
      </tr>
      <tr>
        <td id="L406" class="blob-num js-line-number" data-line-number="406"></td>
        <td id="LC406" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">k</span>.<span class="pl-en">vertexAttribPointer</span>(c[<span class="pl-s"><span class="pl-pds">&quot;</span>morphNormal<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>i],<span class="pl-c1">3</span>,<span class="pl-smi">k</span>.<span class="pl-c1">FLOAT</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>)),<span class="pl-smi">f</span>.<span class="pl-smi">__webglMorphTargetInfluences</span>[i]<span class="pl-k">=</span>g[l])<span class="pl-k">:</span>(<span class="pl-smi">k</span>.<span class="pl-en">vertexAttribPointer</span>(c[<span class="pl-s"><span class="pl-pds">&quot;</span>morphTarget<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>i],<span class="pl-c1">3</span>,<span class="pl-smi">k</span>.<span class="pl-c1">FLOAT</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>),<span class="pl-smi">d</span>.<span class="pl-smi">morphNormals</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">k</span>.<span class="pl-en">vertexAttribPointer</span>(c[<span class="pl-s"><span class="pl-pds">&quot;</span>morphNormal<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>i],<span class="pl-c1">3</span>,<span class="pl-smi">k</span>.<span class="pl-c1">FLOAT</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>),<span class="pl-smi">f</span>.<span class="pl-smi">__webglMorphTargetInfluences</span>[i]<span class="pl-k">=</span><span class="pl-c1">0</span>),i<span class="pl-k">++</span>}<span class="pl-c1">null</span><span class="pl-k">!==</span><span class="pl-smi">d</span>.<span class="pl-smi">program</span>.<span class="pl-smi">uniforms</span>.<span class="pl-smi">morphTargetInfluences</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">k</span>.<span class="pl-en">uniform1fv</span>(<span class="pl-smi">d</span>.<span class="pl-smi">program</span>.<span class="pl-smi">uniforms</span>.<span class="pl-smi">morphTargetInfluences</span>,<span class="pl-smi">f</span>.<span class="pl-smi">__webglMorphTargetInfluences</span>)}<span class="pl-k">if</span>(a){<span class="pl-k">if</span>(<span class="pl-smi">e</span>.<span class="pl-smi">__webglCustomAttributesList</span>){g<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(h<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">__webglCustomAttributesList</span>.<span class="pl-c1">length</span>;g<span class="pl-k">&lt;</span>h;g<span class="pl-k">++</span>)c<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L407" class="blob-num js-line-number" data-line-number="407"></td>
        <td id="LC407" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">e</span>.<span class="pl-smi">__webglCustomAttributesList</span>[g],<span class="pl-c1">0</span><span class="pl-k">&lt;=</span>b[<span class="pl-smi">c</span>.<span class="pl-smi">buffer</span>.<span class="pl-smi">belongsToAttribute</span>]<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">k</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">c</span>.<span class="pl-smi">buffer</span>),<span class="pl-smi">k</span>.<span class="pl-en">vertexAttribPointer</span>(b[<span class="pl-smi">c</span>.<span class="pl-smi">buffer</span>.<span class="pl-smi">belongsToAttribute</span>],<span class="pl-smi">c</span>.<span class="pl-c1">size</span>,<span class="pl-smi">k</span>.<span class="pl-c1">FLOAT</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>))}<span class="pl-c1">0</span><span class="pl-k">&lt;=</span><span class="pl-smi">b</span>.<span class="pl-c1">color</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">k</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">e</span>.<span class="pl-smi">__webglColorBuffer</span>),<span class="pl-smi">k</span>.<span class="pl-en">vertexAttribPointer</span>(<span class="pl-smi">b</span>.<span class="pl-c1">color</span>,<span class="pl-c1">3</span>,<span class="pl-smi">k</span>.<span class="pl-c1">FLOAT</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>));<span class="pl-c1">0</span><span class="pl-k">&lt;=</span><span class="pl-smi">b</span>.<span class="pl-smi">normal</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">k</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">e</span>.<span class="pl-smi">__webglNormalBuffer</span>),<span class="pl-smi">k</span>.<span class="pl-en">vertexAttribPointer</span>(<span class="pl-smi">b</span>.<span class="pl-smi">normal</span>,<span class="pl-c1">3</span>,<span class="pl-smi">k</span>.<span class="pl-c1">FLOAT</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>));<span class="pl-c1">0</span><span class="pl-k">&lt;=</span><span class="pl-smi">b</span>.<span class="pl-smi">tangent</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">k</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">e</span>.<span class="pl-smi">__webglTangentBuffer</span>),<span class="pl-smi">k</span>.<span class="pl-en">vertexAttribPointer</span>(<span class="pl-smi">b</span>.<span class="pl-smi">tangent</span>,</td>
      </tr>
      <tr>
        <td id="L408" class="blob-num js-line-number" data-line-number="408"></td>
        <td id="LC408" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">4</span>,<span class="pl-smi">k</span>.<span class="pl-c1">FLOAT</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>));<span class="pl-c1">0</span><span class="pl-k">&lt;=</span><span class="pl-smi">b</span>.<span class="pl-smi">uv</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">e</span>.<span class="pl-smi">__webglUVBuffer</span><span class="pl-k">?</span>(<span class="pl-smi">k</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">e</span>.<span class="pl-smi">__webglUVBuffer</span>),<span class="pl-smi">k</span>.<span class="pl-en">vertexAttribPointer</span>(<span class="pl-smi">b</span>.<span class="pl-smi">uv</span>,<span class="pl-c1">2</span>,<span class="pl-smi">k</span>.<span class="pl-c1">FLOAT</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>),<span class="pl-smi">k</span>.<span class="pl-en">enableVertexAttribArray</span>(<span class="pl-smi">b</span>.<span class="pl-smi">uv</span>))<span class="pl-k">:</span><span class="pl-smi">k</span>.<span class="pl-en">disableVertexAttribArray</span>(<span class="pl-smi">b</span>.<span class="pl-smi">uv</span>));<span class="pl-c1">0</span><span class="pl-k">&lt;=</span><span class="pl-smi">b</span>.<span class="pl-smi">uv2</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">e</span>.<span class="pl-smi">__webglUV2Buffer</span><span class="pl-k">?</span>(<span class="pl-smi">k</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">e</span>.<span class="pl-smi">__webglUV2Buffer</span>),<span class="pl-smi">k</span>.<span class="pl-en">vertexAttribPointer</span>(<span class="pl-smi">b</span>.<span class="pl-smi">uv2</span>,<span class="pl-c1">2</span>,<span class="pl-smi">k</span>.<span class="pl-c1">FLOAT</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>),<span class="pl-smi">k</span>.<span class="pl-en">enableVertexAttribArray</span>(<span class="pl-smi">b</span>.<span class="pl-smi">uv2</span>))<span class="pl-k">:</span><span class="pl-smi">k</span>.<span class="pl-en">disableVertexAttribArray</span>(<span class="pl-smi">b</span>.<span class="pl-smi">uv2</span>));<span class="pl-smi">d</span>.<span class="pl-smi">skinning</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">0</span><span class="pl-k">&lt;=</span><span class="pl-smi">b</span>.<span class="pl-smi">skinIndex</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">&lt;=</span><span class="pl-smi">b</span>.<span class="pl-smi">skinWeight</span>)<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">k</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">e</span>.<span class="pl-smi">__webglSkinIndicesBuffer</span>),</td>
      </tr>
      <tr>
        <td id="L409" class="blob-num js-line-number" data-line-number="409"></td>
        <td id="LC409" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">k</span>.<span class="pl-en">vertexAttribPointer</span>(<span class="pl-smi">b</span>.<span class="pl-smi">skinIndex</span>,<span class="pl-c1">4</span>,<span class="pl-smi">k</span>.<span class="pl-c1">FLOAT</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>),<span class="pl-smi">k</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">e</span>.<span class="pl-smi">__webglSkinWeightsBuffer</span>),<span class="pl-smi">k</span>.<span class="pl-en">vertexAttribPointer</span>(<span class="pl-smi">b</span>.<span class="pl-smi">skinWeight</span>,<span class="pl-c1">4</span>,<span class="pl-smi">k</span>.<span class="pl-c1">FLOAT</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>))}f <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Mesh</span><span class="pl-k">?</span>(<span class="pl-smi">d</span>.<span class="pl-smi">wireframe</span><span class="pl-k">?</span>(d<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">wireframeLinewidth</span>,d<span class="pl-k">!==</span>db<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">k</span>.<span class="pl-en">lineWidth</span>(d),db<span class="pl-k">=</span>d),a<span class="pl-k">&amp;&amp;</span><span class="pl-smi">k</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ELEMENT_ARRAY_BUFFER</span>,<span class="pl-smi">e</span>.<span class="pl-smi">__webglLineBuffer</span>),<span class="pl-smi">k</span>.<span class="pl-en">drawElements</span>(<span class="pl-smi">k</span>.<span class="pl-c1">LINES</span>,<span class="pl-smi">e</span>.<span class="pl-smi">__webglLineCount</span>,<span class="pl-smi">k</span>.<span class="pl-c1">UNSIGNED_SHORT</span>,<span class="pl-c1">0</span>))<span class="pl-k">:</span>(a<span class="pl-k">&amp;&amp;</span><span class="pl-smi">k</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ELEMENT_ARRAY_BUFFER</span>,<span class="pl-smi">e</span>.<span class="pl-smi">__webglFaceBuffer</span>),<span class="pl-smi">k</span>.<span class="pl-en">drawElements</span>(<span class="pl-smi">k</span>.<span class="pl-c1">TRIANGLES</span>,<span class="pl-smi">e</span>.<span class="pl-smi">__webglFaceCount</span>,<span class="pl-smi">k</span>.<span class="pl-c1">UNSIGNED_SHORT</span>,<span class="pl-c1">0</span>)),</td>
      </tr>
      <tr>
        <td id="L410" class="blob-num js-line-number" data-line-number="410"></td>
        <td id="LC410" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">Q</span>.<span class="pl-smi">info</span>.<span class="pl-smi">render</span>.<span class="pl-smi">calls</span><span class="pl-k">++</span>,<span class="pl-c1">Q</span>.<span class="pl-smi">info</span>.<span class="pl-smi">render</span>.<span class="pl-smi">vertices</span><span class="pl-k">+=</span><span class="pl-smi">e</span>.<span class="pl-smi">__webglFaceCount</span>,<span class="pl-c1">Q</span>.<span class="pl-smi">info</span>.<span class="pl-smi">render</span>.<span class="pl-smi">faces</span><span class="pl-k">+=</span><span class="pl-smi">e</span>.<span class="pl-smi">__webglFaceCount</span><span class="pl-k">/</span><span class="pl-c1">3</span>)<span class="pl-k">:</span>f <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Line</span><span class="pl-k">?</span>(f<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">type</span><span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">LineStrip</span><span class="pl-k">?</span><span class="pl-smi">k</span>.<span class="pl-c1">LINE_STRIP</span><span class="pl-k">:</span><span class="pl-smi">k</span>.<span class="pl-c1">LINES</span>,d<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">linewidth</span>,d<span class="pl-k">!==</span>db<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">k</span>.<span class="pl-en">lineWidth</span>(d),db<span class="pl-k">=</span>d),<span class="pl-smi">k</span>.<span class="pl-en">drawArrays</span>(f,<span class="pl-c1">0</span>,<span class="pl-smi">e</span>.<span class="pl-smi">__webglLineCount</span>),<span class="pl-c1">Q</span>.<span class="pl-smi">info</span>.<span class="pl-smi">render</span>.<span class="pl-smi">calls</span><span class="pl-k">++</span>)<span class="pl-k">:</span>f <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">ParticleSystem</span><span class="pl-k">?</span>(<span class="pl-smi">k</span>.<span class="pl-en">drawArrays</span>(<span class="pl-smi">k</span>.<span class="pl-c1">POINTS</span>,<span class="pl-c1">0</span>,<span class="pl-smi">e</span>.<span class="pl-smi">__webglParticleCount</span>),<span class="pl-c1">Q</span>.<span class="pl-smi">info</span>.<span class="pl-smi">render</span>.<span class="pl-smi">calls</span><span class="pl-k">++</span>,<span class="pl-c1">Q</span>.<span class="pl-smi">info</span>.<span class="pl-smi">render</span>.<span class="pl-smi">points</span><span class="pl-k">+=</span><span class="pl-smi">e</span>.<span class="pl-smi">__webglParticleCount</span>)<span class="pl-k">:</span>f <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Ribbon</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">k</span>.<span class="pl-en">drawArrays</span>(<span class="pl-smi">k</span>.<span class="pl-c1">TRIANGLE_STRIP</span>,<span class="pl-c1">0</span>,<span class="pl-smi">e</span>.<span class="pl-smi">__webglVertexCount</span>),</td>
      </tr>
      <tr>
        <td id="L411" class="blob-num js-line-number" data-line-number="411"></td>
        <td id="LC411" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">Q</span>.<span class="pl-smi">info</span>.<span class="pl-smi">render</span>.<span class="pl-smi">calls</span><span class="pl-k">++</span>)}};<span class="pl-c1">this</span>.<span class="pl-en">render</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">===</span>b <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Camera</span>)<span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.<span class="pl-pds">&quot;</span></span>);<span class="pl-k">else</span>{<span class="pl-k">var</span> e,f,g,h,j<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">__lights</span>,o<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">fog</span>;<span class="pl-c1">W</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">1</span>;Ea<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">autoUpdateScene</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">a</span>.<span class="pl-en">updateMatrixWorld</span>();<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">b</span>.<span class="pl-c1">parent</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">b</span>.<span class="pl-en">updateMatrixWorld</span>();<span class="pl-smi">b</span>.<span class="pl-smi">_viewMatrixArray</span><span class="pl-k">||</span>(<span class="pl-smi">b</span>.<span class="pl-smi">_viewMatrixArray</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">16</span>));<span class="pl-smi">b</span>.<span class="pl-smi">_projectionMatrixArray</span><span class="pl-k">||</span>(<span class="pl-smi">b</span>.<span class="pl-smi">_projectionMatrixArray</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">16</span>));<span class="pl-smi">b</span>.<span class="pl-smi">matrixWorldInverse</span>.<span class="pl-en">getInverse</span>(<span class="pl-smi">b</span>.<span class="pl-smi">matrixWorld</span>);<span class="pl-smi">b</span>.<span class="pl-smi">matrixWorldInverse</span>.<span class="pl-en">flattenToArray</span>(<span class="pl-smi">b</span>.<span class="pl-smi">_viewMatrixArray</span>);</td>
      </tr>
      <tr>
        <td id="L412" class="blob-num js-line-number" data-line-number="412"></td>
        <td id="LC412" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">b</span>.<span class="pl-smi">projectionMatrix</span>.<span class="pl-en">flattenToArray</span>(<span class="pl-smi">b</span>.<span class="pl-smi">_projectionMatrixArray</span>);<span class="pl-smi">ra</span>.<span class="pl-en">multiply</span>(<span class="pl-smi">b</span>.<span class="pl-smi">projectionMatrix</span>,<span class="pl-smi">b</span>.<span class="pl-smi">matrixWorldInverse</span>);<span class="pl-smi">fb</span>.<span class="pl-en">setFromMatrix</span>(ra);<span class="pl-c1">this</span>.<span class="pl-smi">autoUpdateObjects</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-en">initWebGLObjects</span>(a);<span class="pl-en">l</span>(<span class="pl-c1">this</span>.<span class="pl-smi">renderPluginsPre</span>,a,b);<span class="pl-c1">Q</span>.<span class="pl-smi">info</span>.<span class="pl-smi">render</span>.<span class="pl-smi">calls</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">Q</span>.<span class="pl-smi">info</span>.<span class="pl-smi">render</span>.<span class="pl-smi">vertices</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">Q</span>.<span class="pl-smi">info</span>.<span class="pl-smi">render</span>.<span class="pl-smi">faces</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">Q</span>.<span class="pl-smi">info</span>.<span class="pl-smi">render</span>.<span class="pl-smi">points</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-en">setRenderTarget</span>(c);(<span class="pl-c1">this</span>.<span class="pl-smi">autoClear</span><span class="pl-k">||</span>d)<span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-c1">clear</span>(<span class="pl-c1">this</span>.<span class="pl-smi">autoClearColor</span>,<span class="pl-c1">this</span>.<span class="pl-smi">autoClearDepth</span>,<span class="pl-c1">this</span>.<span class="pl-smi">autoClearStencil</span>);h<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">__webglObjects</span>;d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(e<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-c1">length</span>;d<span class="pl-k">&lt;</span>e;d<span class="pl-k">++</span>)<span class="pl-k">if</span>(f<span class="pl-k">=</span>h[d],g<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">object</span>,<span class="pl-smi">f</span>.<span class="pl-smi">render</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>,</td>
      </tr>
      <tr>
        <td id="L413" class="blob-num js-line-number" data-line-number="413"></td>
        <td id="LC413" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">g</span>.<span class="pl-smi">visible</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-k">!</span>(g <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Mesh</span><span class="pl-k">||</span>g <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">ParticleSystem</span>)<span class="pl-k">||!</span><span class="pl-smi">g</span>.<span class="pl-smi">frustumCulled</span><span class="pl-k">||</span><span class="pl-smi">fb</span>.<span class="pl-c1">contains</span>(g))){<span class="pl-en">s</span>(g,b);<span class="pl-k">var</span> p<span class="pl-k">=</span>f,q<span class="pl-k">=</span><span class="pl-smi">p</span>.<span class="pl-c1">object</span>,r<span class="pl-k">=</span><span class="pl-smi">p</span>.<span class="pl-smi">buffer</span>,t<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,t<span class="pl-k">=</span>t<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,t<span class="pl-k">=</span><span class="pl-smi">q</span>.<span class="pl-smi">material</span>;t <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">MeshFaceMaterial</span><span class="pl-k">?</span>(t<span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-smi">materialIndex</span>,<span class="pl-c1">0</span><span class="pl-k">&lt;=</span>t<span class="pl-k">&amp;&amp;</span>(t<span class="pl-k">=</span><span class="pl-smi">q</span>.<span class="pl-smi">geometry</span>.<span class="pl-smi">materials</span>[t],<span class="pl-smi">t</span>.<span class="pl-smi">transparent</span><span class="pl-k">?</span>(<span class="pl-smi">p</span>.<span class="pl-smi">transparent</span><span class="pl-k">=</span>t,<span class="pl-smi">p</span>.<span class="pl-smi">opaque</span><span class="pl-k">=</span><span class="pl-c1">null</span>)<span class="pl-k">:</span>(<span class="pl-smi">p</span>.<span class="pl-smi">opaque</span><span class="pl-k">=</span>t,<span class="pl-smi">p</span>.<span class="pl-smi">transparent</span><span class="pl-k">=</span><span class="pl-c1">null</span>)))<span class="pl-k">:</span>t<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">t</span>.<span class="pl-smi">transparent</span><span class="pl-k">?</span>(<span class="pl-smi">p</span>.<span class="pl-smi">transparent</span><span class="pl-k">=</span>t,<span class="pl-smi">p</span>.<span class="pl-smi">opaque</span><span class="pl-k">=</span><span class="pl-c1">null</span>)<span class="pl-k">:</span>(<span class="pl-smi">p</span>.<span class="pl-smi">opaque</span><span class="pl-k">=</span>t,<span class="pl-smi">p</span>.<span class="pl-smi">transparent</span><span class="pl-k">=</span><span class="pl-c1">null</span>));<span class="pl-smi">f</span>.<span class="pl-smi">render</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-k">!</span><span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-c1">this</span>.<span class="pl-smi">sortObjects</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">null</span><span class="pl-k">!==</span><span class="pl-smi">g</span>.<span class="pl-smi">renderDepth</span><span class="pl-k">?</span><span class="pl-smi">f</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">renderDepth</span><span class="pl-k">:</span></td>
      </tr>
      <tr>
        <td id="L414" class="blob-num js-line-number" data-line-number="414"></td>
        <td id="LC414" class="blob-code blob-code-inner js-file-line">(<span class="pl-smi">Za</span>.<span class="pl-en">copy</span>(<span class="pl-smi">g</span>.<span class="pl-smi">matrixWorld</span>.<span class="pl-en">getPosition</span>()),<span class="pl-smi">ra</span>.<span class="pl-en">multiplyVector3</span>(Za),<span class="pl-smi">f</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-smi">Za</span>.<span class="pl-c1">z</span>))}<span class="pl-c1">this</span>.<span class="pl-smi">sortObjects</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">h</span>.<span class="pl-c1">sort</span>(i);h<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">__webglObjectsImmediate</span>;d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(e<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-c1">length</span>;d<span class="pl-k">&lt;</span>e;d<span class="pl-k">++</span>)f<span class="pl-k">=</span>h[d],g<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">object</span>,<span class="pl-smi">g</span>.<span class="pl-smi">visible</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-en">s</span>(g,b),g<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">object</span>.<span class="pl-smi">material</span>,<span class="pl-smi">g</span>.<span class="pl-smi">transparent</span><span class="pl-k">?</span>(<span class="pl-smi">f</span>.<span class="pl-smi">transparent</span><span class="pl-k">=</span>g,<span class="pl-smi">f</span>.<span class="pl-smi">opaque</span><span class="pl-k">=</span><span class="pl-c1">null</span>)<span class="pl-k">:</span>(<span class="pl-smi">f</span>.<span class="pl-smi">opaque</span><span class="pl-k">=</span>g,<span class="pl-smi">f</span>.<span class="pl-smi">transparent</span><span class="pl-k">=</span><span class="pl-c1">null</span>));<span class="pl-smi">a</span>.<span class="pl-smi">overrideMaterial</span><span class="pl-k">?</span>(d<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">overrideMaterial</span>,<span class="pl-c1">this</span>.<span class="pl-en">setBlending</span>(<span class="pl-smi">d</span>.<span class="pl-smi">blending</span>,<span class="pl-smi">d</span>.<span class="pl-smi">blendEquation</span>,<span class="pl-smi">d</span>.<span class="pl-smi">blendSrc</span>,<span class="pl-smi">d</span>.<span class="pl-smi">blendDst</span>),<span class="pl-c1">this</span>.<span class="pl-en">setDepthTest</span>(<span class="pl-smi">d</span>.<span class="pl-smi">depthTest</span>),<span class="pl-c1">this</span>.<span class="pl-en">setDepthWrite</span>(<span class="pl-smi">d</span>.<span class="pl-smi">depthWrite</span>),<span class="pl-en">v</span>(<span class="pl-smi">d</span>.<span class="pl-smi">polygonOffset</span>,<span class="pl-smi">d</span>.<span class="pl-smi">polygonOffsetFactor</span>,</td>
      </tr>
      <tr>
        <td id="L415" class="blob-num js-line-number" data-line-number="415"></td>
        <td id="LC415" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">d</span>.<span class="pl-smi">polygonOffsetUnits</span>),<span class="pl-en">m</span>(<span class="pl-smi">a</span>.<span class="pl-smi">__webglObjects</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,b,j,o,<span class="pl-k">!</span><span class="pl-c1">0</span>,d),<span class="pl-en">n</span>(<span class="pl-smi">a</span>.<span class="pl-smi">__webglObjectsImmediate</span>,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,b,j,o,<span class="pl-k">!</span><span class="pl-c1">1</span>,d))<span class="pl-k">:</span>(<span class="pl-c1">this</span>.<span class="pl-en">setBlending</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">NormalBlending</span>),<span class="pl-en">m</span>(<span class="pl-smi">a</span>.<span class="pl-smi">__webglObjects</span>,<span class="pl-k">!</span><span class="pl-c1">0</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>opaque<span class="pl-pds">&quot;</span></span>,b,j,o,<span class="pl-k">!</span><span class="pl-c1">1</span>),<span class="pl-en">n</span>(<span class="pl-smi">a</span>.<span class="pl-smi">__webglObjectsImmediate</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>opaque<span class="pl-pds">&quot;</span></span>,b,j,o,<span class="pl-k">!</span><span class="pl-c1">1</span>),<span class="pl-en">m</span>(<span class="pl-smi">a</span>.<span class="pl-smi">__webglObjects</span>,<span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>transparent<span class="pl-pds">&quot;</span></span>,b,j,o,<span class="pl-k">!</span><span class="pl-c1">0</span>),<span class="pl-en">n</span>(<span class="pl-smi">a</span>.<span class="pl-smi">__webglObjectsImmediate</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>transparent<span class="pl-pds">&quot;</span></span>,b,j,o,<span class="pl-k">!</span><span class="pl-c1">0</span>));<span class="pl-en">l</span>(<span class="pl-c1">this</span>.<span class="pl-smi">renderPluginsPost</span>,a,b);c<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">c</span>.<span class="pl-smi">generateMipmaps</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">c</span>.<span class="pl-smi">minFilter</span><span class="pl-k">!==</span><span class="pl-c1">THREE</span>.<span class="pl-smi">NearestFilter</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">c</span>.<span class="pl-smi">minFilter</span><span class="pl-k">!==</span><span class="pl-c1">THREE</span>.<span class="pl-smi">LinearFilter</span>)<span class="pl-k">&amp;&amp;</span>(c <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">WebGLRenderTargetCube</span><span class="pl-k">?</span>(<span class="pl-smi">k</span>.<span class="pl-en">bindTexture</span>(<span class="pl-smi">k</span>.<span class="pl-c1">TEXTURE_CUBE_MAP</span>,</td>
      </tr>
      <tr>
        <td id="L416" class="blob-num js-line-number" data-line-number="416"></td>
        <td id="LC416" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">c</span>.<span class="pl-smi">__webglTexture</span>),<span class="pl-smi">k</span>.<span class="pl-en">generateMipmap</span>(<span class="pl-smi">k</span>.<span class="pl-c1">TEXTURE_CUBE_MAP</span>),<span class="pl-smi">k</span>.<span class="pl-en">bindTexture</span>(<span class="pl-smi">k</span>.<span class="pl-c1">TEXTURE_CUBE_MAP</span>,<span class="pl-c1">null</span>))<span class="pl-k">:</span>(<span class="pl-smi">k</span>.<span class="pl-en">bindTexture</span>(<span class="pl-smi">k</span>.<span class="pl-c1">TEXTURE_2D</span>,<span class="pl-smi">c</span>.<span class="pl-smi">__webglTexture</span>),<span class="pl-smi">k</span>.<span class="pl-en">generateMipmap</span>(<span class="pl-smi">k</span>.<span class="pl-c1">TEXTURE_2D</span>),<span class="pl-smi">k</span>.<span class="pl-en">bindTexture</span>(<span class="pl-smi">k</span>.<span class="pl-c1">TEXTURE_2D</span>,<span class="pl-c1">null</span>)));<span class="pl-c1">this</span>.<span class="pl-en">setDepthTest</span>(<span class="pl-k">!</span><span class="pl-c1">0</span>);<span class="pl-c1">this</span>.<span class="pl-en">setDepthWrite</span>(<span class="pl-k">!</span><span class="pl-c1">0</span>)}};<span class="pl-c1">this</span>.<span class="pl-en">renderImmediateObject</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-en">B</span>(a,b,c,d,e);<span class="pl-c1">V</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-c1">Q</span>.<span class="pl-en">setMaterialFaces</span>(d);<span class="pl-smi">e</span>.<span class="pl-smi">immediateRenderCallback</span><span class="pl-k">?</span><span class="pl-smi">e</span>.<span class="pl-en">immediateRenderCallback</span>(f,k,fb)<span class="pl-k">:</span><span class="pl-smi">e</span>.<span class="pl-en">render</span>(<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">Q</span>.<span class="pl-en">renderBufferImmediate</span>(a,f,d)})};<span class="pl-c1">this</span>.<span class="pl-en">initWebGLObjects</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-smi">a</span>.<span class="pl-smi">__webglObjects</span><span class="pl-k">||</span></td>
      </tr>
      <tr>
        <td id="L417" class="blob-num js-line-number" data-line-number="417"></td>
        <td id="LC417" class="blob-code blob-code-inner js-file-line">(<span class="pl-smi">a</span>.<span class="pl-smi">__webglObjects</span><span class="pl-k">=</span>[],<span class="pl-smi">a</span>.<span class="pl-smi">__webglObjectsImmediate</span><span class="pl-k">=</span>[],<span class="pl-smi">a</span>.<span class="pl-smi">__webglSprites</span><span class="pl-k">=</span>[],<span class="pl-smi">a</span>.<span class="pl-smi">__webglFlares</span><span class="pl-k">=</span>[]);<span class="pl-k">for</span>(;<span class="pl-smi">a</span>.<span class="pl-smi">__objectsAdded</span>.<span class="pl-c1">length</span>;){<span class="pl-k">var</span> i<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">__objectsAdded</span>[<span class="pl-c1">0</span>],j<span class="pl-k">=</span>a,l<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,m<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,n<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-smi">i</span>.<span class="pl-smi">__webglInit</span>)<span class="pl-k">if</span>(<span class="pl-smi">i</span>.<span class="pl-smi">__webglInit</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>,<span class="pl-smi">i</span>.<span class="pl-smi">_modelViewMatrix</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>,<span class="pl-smi">i</span>.<span class="pl-smi">_normalMatrix</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix3</span>,i <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Mesh</span>)<span class="pl-k">if</span>(m<span class="pl-k">=</span><span class="pl-smi">i</span>.<span class="pl-smi">geometry</span>,m <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>){<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">m</span>.<span class="pl-smi">geometryGroups</span>){<span class="pl-k">var</span> s<span class="pl-k">=</span>m,u<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,v<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,y<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,z<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,<span class="pl-c1">A</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,<span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,<span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,<span class="pl-c1">E</span><span class="pl-k">=</span>{},<span class="pl-c1">G</span><span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-smi">morphTargets</span>.<span class="pl-c1">length</span>,<span class="pl-c1">H</span><span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-smi">morphNormals</span>.<span class="pl-c1">length</span>;</td>
      </tr>
      <tr>
        <td id="L418" class="blob-num js-line-number" data-line-number="418"></td>
        <td id="LC418" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">s</span>.<span class="pl-smi">geometryGroups</span><span class="pl-k">=</span>{};u<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(v<span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">length</span>;u<span class="pl-k">&lt;</span>v;u<span class="pl-k">++</span>)y<span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-smi">faces</span>[u],z<span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-smi">materialIndex</span>,<span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>z<span class="pl-k">?</span>z<span class="pl-k">:</span><span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-c1">E</span>[<span class="pl-c1">B</span>]<span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">E</span>[<span class="pl-c1">B</span>]<span class="pl-k">=</span>{hash<span class="pl-k">:</span><span class="pl-c1">B</span>,counter<span class="pl-k">:</span><span class="pl-c1">0</span>}),<span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-c1">E</span>[<span class="pl-c1">B</span>].<span class="pl-c1">hash</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>_<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-c1">E</span>[<span class="pl-c1">B</span>].<span class="pl-smi">counter</span>,<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">s</span>.<span class="pl-smi">geometryGroups</span>[<span class="pl-c1">C</span>]<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">s</span>.<span class="pl-smi">geometryGroups</span>[<span class="pl-c1">C</span>]<span class="pl-k">=</span>{faces3<span class="pl-k">:</span>[],faces4<span class="pl-k">:</span>[],materialIndex<span class="pl-k">:</span>z,vertices<span class="pl-k">:</span><span class="pl-c1">0</span>,numMorphTargets<span class="pl-k">:</span><span class="pl-c1">G</span>,numMorphNormals<span class="pl-k">:</span><span class="pl-c1">H</span>}),<span class="pl-c1">A</span><span class="pl-k">=</span>y <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Face3</span><span class="pl-k">?</span><span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">4</span>,<span class="pl-c1">65535</span><span class="pl-k">&lt;</span><span class="pl-smi">s</span>.<span class="pl-smi">geometryGroups</span>[<span class="pl-c1">C</span>].<span class="pl-smi">vertices</span><span class="pl-k">+</span><span class="pl-c1">A</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">E</span>[<span class="pl-c1">B</span>].<span class="pl-smi">counter</span><span class="pl-k">+=</span><span class="pl-c1">1</span>,<span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-c1">E</span>[<span class="pl-c1">B</span>].<span class="pl-c1">hash</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>_<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-c1">E</span>[<span class="pl-c1">B</span>].<span class="pl-smi">counter</span>,<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">s</span>.<span class="pl-smi">geometryGroups</span>[<span class="pl-c1">C</span>]<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">s</span>.<span class="pl-smi">geometryGroups</span>[<span class="pl-c1">C</span>]<span class="pl-k">=</span>{faces3<span class="pl-k">:</span>[],faces4<span class="pl-k">:</span>[],materialIndex<span class="pl-k">:</span>z,</td>
      </tr>
      <tr>
        <td id="L419" class="blob-num js-line-number" data-line-number="419"></td>
        <td id="LC419" class="blob-code blob-code-inner js-file-line">vertices<span class="pl-k">:</span><span class="pl-c1">0</span>,numMorphTargets<span class="pl-k">:</span><span class="pl-c1">G</span>,numMorphNormals<span class="pl-k">:</span><span class="pl-c1">H</span>})),y <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Face3</span><span class="pl-k">?</span><span class="pl-smi">s</span>.<span class="pl-smi">geometryGroups</span>[<span class="pl-c1">C</span>].<span class="pl-smi">faces3</span>.<span class="pl-c1">push</span>(u)<span class="pl-k">:</span><span class="pl-smi">s</span>.<span class="pl-smi">geometryGroups</span>[<span class="pl-c1">C</span>].<span class="pl-smi">faces4</span>.<span class="pl-c1">push</span>(u),<span class="pl-smi">s</span>.<span class="pl-smi">geometryGroups</span>[<span class="pl-c1">C</span>].<span class="pl-smi">vertices</span><span class="pl-k">+=</span><span class="pl-c1">A</span>;<span class="pl-smi">s</span>.<span class="pl-smi">geometryGroupsList</span><span class="pl-k">=</span>[];<span class="pl-k">var</span> <span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">J</span> <span class="pl-k">in</span> <span class="pl-smi">s</span>.<span class="pl-smi">geometryGroups</span>)<span class="pl-smi">s</span>.<span class="pl-smi">geometryGroups</span>[<span class="pl-c1">J</span>].<span class="pl-c1">id</span><span class="pl-k">=</span><span class="pl-c1">Z</span><span class="pl-k">++</span>,<span class="pl-smi">s</span>.<span class="pl-smi">geometryGroupsList</span>.<span class="pl-c1">push</span>(<span class="pl-smi">s</span>.<span class="pl-smi">geometryGroups</span>[<span class="pl-c1">J</span>])}<span class="pl-k">for</span>(l <span class="pl-k">in</span> <span class="pl-smi">m</span>.<span class="pl-smi">geometryGroups</span>)<span class="pl-k">if</span>(n<span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-smi">geometryGroups</span>[l],<span class="pl-k">!</span><span class="pl-smi">n</span>.<span class="pl-smi">__webglVertexBuffer</span>){<span class="pl-k">var</span> <span class="pl-c1">I</span><span class="pl-k">=</span>n;<span class="pl-c1">I</span>.<span class="pl-smi">__webglVertexBuffer</span><span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-en">createBuffer</span>();<span class="pl-c1">I</span>.<span class="pl-smi">__webglNormalBuffer</span><span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-en">createBuffer</span>();<span class="pl-c1">I</span>.<span class="pl-smi">__webglTangentBuffer</span><span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-en">createBuffer</span>();</td>
      </tr>
      <tr>
        <td id="L420" class="blob-num js-line-number" data-line-number="420"></td>
        <td id="LC420" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">I</span>.<span class="pl-smi">__webglColorBuffer</span><span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-en">createBuffer</span>();<span class="pl-c1">I</span>.<span class="pl-smi">__webglUVBuffer</span><span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-en">createBuffer</span>();<span class="pl-c1">I</span>.<span class="pl-smi">__webglUV2Buffer</span><span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-en">createBuffer</span>();<span class="pl-c1">I</span>.<span class="pl-smi">__webglSkinIndicesBuffer</span><span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-en">createBuffer</span>();<span class="pl-c1">I</span>.<span class="pl-smi">__webglSkinWeightsBuffer</span><span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-en">createBuffer</span>();<span class="pl-c1">I</span>.<span class="pl-smi">__webglFaceBuffer</span><span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-en">createBuffer</span>();<span class="pl-c1">I</span>.<span class="pl-smi">__webglLineBuffer</span><span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-en">createBuffer</span>();<span class="pl-k">var</span> <span class="pl-c1">O</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,<span class="pl-c1">K</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-c1">I</span>.<span class="pl-smi">numMorphTargets</span>){<span class="pl-c1">I</span>.<span class="pl-smi">__webglMorphTargetsBuffers</span><span class="pl-k">=</span>[];<span class="pl-c1">O</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">K</span><span class="pl-k">=</span><span class="pl-c1">I</span>.<span class="pl-smi">numMorphTargets</span>;<span class="pl-c1">O</span><span class="pl-k">&lt;</span><span class="pl-c1">K</span>;<span class="pl-c1">O</span><span class="pl-k">++</span>)<span class="pl-c1">I</span>.<span class="pl-smi">__webglMorphTargetsBuffers</span>.<span class="pl-c1">push</span>(<span class="pl-smi">k</span>.<span class="pl-en">createBuffer</span>())}<span class="pl-k">if</span>(<span class="pl-c1">I</span>.<span class="pl-smi">numMorphNormals</span>){<span class="pl-c1">I</span>.<span class="pl-smi">__webglMorphNormalsBuffers</span><span class="pl-k">=</span>[];<span class="pl-c1">O</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">K</span><span class="pl-k">=</span><span class="pl-c1">I</span>.<span class="pl-smi">numMorphNormals</span>;<span class="pl-c1">O</span><span class="pl-k">&lt;</span></td>
      </tr>
      <tr>
        <td id="L421" class="blob-num js-line-number" data-line-number="421"></td>
        <td id="LC421" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">K</span>;<span class="pl-c1">O</span><span class="pl-k">++</span>)<span class="pl-c1">I</span>.<span class="pl-smi">__webglMorphNormalsBuffers</span>.<span class="pl-c1">push</span>(<span class="pl-smi">k</span>.<span class="pl-en">createBuffer</span>())}<span class="pl-c1">Q</span>.<span class="pl-smi">info</span>.<span class="pl-smi">memory</span>.<span class="pl-smi">geometries</span><span class="pl-k">++</span>;<span class="pl-k">var</span> <span class="pl-c1">F</span><span class="pl-k">=</span>n,<span class="pl-c1">M</span><span class="pl-k">=</span>i,<span class="pl-c1">L</span><span class="pl-k">=</span><span class="pl-c1">M</span>.<span class="pl-smi">geometry</span>,<span class="pl-c1">N</span><span class="pl-k">=</span><span class="pl-c1">F</span>.<span class="pl-smi">faces3</span>,<span class="pl-c1">W</span><span class="pl-k">=</span><span class="pl-c1">F</span>.<span class="pl-smi">faces4</span>,<span class="pl-c1">V</span><span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span><span class="pl-c1">N</span>.<span class="pl-c1">length</span><span class="pl-k">+</span><span class="pl-c1">4</span><span class="pl-k">*</span><span class="pl-c1">W</span>.<span class="pl-c1">length</span>,fa<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">*</span><span class="pl-c1">N</span>.<span class="pl-c1">length</span><span class="pl-k">+</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">W</span>.<span class="pl-c1">length</span>,ca<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span><span class="pl-c1">N</span>.<span class="pl-c1">length</span><span class="pl-k">+</span><span class="pl-c1">4</span><span class="pl-k">*</span><span class="pl-c1">W</span>.<span class="pl-c1">length</span>,<span class="pl-c1">R</span><span class="pl-k">=</span><span class="pl-en">c</span>(<span class="pl-c1">M</span>,<span class="pl-c1">F</span>),<span class="pl-c1">Y</span><span class="pl-k">=</span><span class="pl-en">e</span>(<span class="pl-c1">R</span>),ea<span class="pl-k">=</span><span class="pl-en">d</span>(<span class="pl-c1">R</span>),ia<span class="pl-k">=</span><span class="pl-c1">R</span>.<span class="pl-smi">vertexColors</span><span class="pl-k">?</span><span class="pl-c1">R</span>.<span class="pl-smi">vertexColors</span><span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-c1">F</span>.<span class="pl-smi">__vertexArray</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">3</span><span class="pl-k">*</span><span class="pl-c1">V</span>);ea<span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">F</span>.<span class="pl-smi">__normalArray</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">3</span><span class="pl-k">*</span><span class="pl-c1">V</span>));<span class="pl-c1">L</span>.<span class="pl-smi">hasTangents</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">F</span>.<span class="pl-smi">__tangentArray</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">4</span><span class="pl-k">*</span><span class="pl-c1">V</span>));ia<span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">F</span>.<span class="pl-smi">__colorArray</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">3</span><span class="pl-k">*</span><span class="pl-c1">V</span>));<span class="pl-k">if</span>(<span class="pl-c1">Y</span>){<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-c1">L</span>.<span class="pl-smi">faceUvs</span>.<span class="pl-c1">length</span><span class="pl-k">||</span><span class="pl-c1">0</span><span class="pl-k">&lt;</span><span class="pl-c1">L</span>.<span class="pl-smi">faceVertexUvs</span>.<span class="pl-c1">length</span>)<span class="pl-c1">F</span>.<span class="pl-smi">__uvArray</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L422" class="blob-num js-line-number" data-line-number="422"></td>
        <td id="LC422" class="blob-code blob-code-inner js-file-line"><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">V</span>);<span class="pl-k">if</span>(<span class="pl-c1">1</span><span class="pl-k">&lt;</span><span class="pl-c1">L</span>.<span class="pl-smi">faceUvs</span>.<span class="pl-c1">length</span><span class="pl-k">||</span><span class="pl-c1">1</span><span class="pl-k">&lt;</span><span class="pl-c1">L</span>.<span class="pl-smi">faceVertexUvs</span>.<span class="pl-c1">length</span>)<span class="pl-c1">F</span>.<span class="pl-smi">__uv2Array</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">V</span>)}<span class="pl-c1">M</span>.<span class="pl-smi">geometry</span>.<span class="pl-smi">skinWeights</span>.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">M</span>.<span class="pl-smi">geometry</span>.<span class="pl-smi">skinIndices</span>.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">F</span>.<span class="pl-smi">__skinIndexArray</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">4</span><span class="pl-k">*</span><span class="pl-c1">V</span>),<span class="pl-c1">F</span>.<span class="pl-smi">__skinWeightArray</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">4</span><span class="pl-k">*</span><span class="pl-c1">V</span>));<span class="pl-c1">F</span>.<span class="pl-smi">__faceArray</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Uint16Array</span>(<span class="pl-c1">3</span><span class="pl-k">*</span>fa);<span class="pl-c1">F</span>.<span class="pl-smi">__lineArray</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Uint16Array</span>(<span class="pl-c1">2</span><span class="pl-k">*</span>ca);<span class="pl-k">var</span> $<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,qa<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-c1">F</span>.<span class="pl-smi">numMorphTargets</span>){<span class="pl-c1">F</span>.<span class="pl-smi">__morphTargetsArrays</span><span class="pl-k">=</span>[];$<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(qa<span class="pl-k">=</span><span class="pl-c1">F</span>.<span class="pl-smi">numMorphTargets</span>;$<span class="pl-k">&lt;</span>qa;$<span class="pl-k">++</span>)<span class="pl-c1">F</span>.<span class="pl-smi">__morphTargetsArrays</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">3</span><span class="pl-k">*</span><span class="pl-c1">V</span>))}<span class="pl-k">if</span>(<span class="pl-c1">F</span>.<span class="pl-smi">numMorphNormals</span>){<span class="pl-c1">F</span>.<span class="pl-smi">__morphNormalsArrays</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L423" class="blob-num js-line-number" data-line-number="423"></td>
        <td id="LC423" class="blob-code blob-code-inner js-file-line">[];$<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(qa<span class="pl-k">=</span><span class="pl-c1">F</span>.<span class="pl-smi">numMorphNormals</span>;$<span class="pl-k">&lt;</span>qa;$<span class="pl-k">++</span>)<span class="pl-c1">F</span>.<span class="pl-smi">__morphNormalsArrays</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">3</span><span class="pl-k">*</span><span class="pl-c1">V</span>))}<span class="pl-c1">F</span>.<span class="pl-smi">__webglFaceCount</span><span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span>fa;<span class="pl-c1">F</span>.<span class="pl-smi">__webglLineCount</span><span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">*</span>ca;<span class="pl-k">if</span>(<span class="pl-c1">R</span>.<span class="pl-c1">attributes</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-c1">F</span>.<span class="pl-smi">__webglCustomAttributesList</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">F</span>.<span class="pl-smi">__webglCustomAttributesList</span><span class="pl-k">=</span>[]);<span class="pl-k">var</span> Ga<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>;<span class="pl-k">for</span>(Ga <span class="pl-k">in</span> <span class="pl-c1">R</span>.<span class="pl-c1">attributes</span>){<span class="pl-k">var</span> na<span class="pl-k">=</span><span class="pl-c1">R</span>.<span class="pl-c1">attributes</span>[Ga],la<span class="pl-k">=</span>{},Pa;<span class="pl-k">for</span>(Pa <span class="pl-k">in</span> na)la[Pa]<span class="pl-k">=</span>na[Pa];<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-smi">la</span>.<span class="pl-smi">__webglInitialized</span><span class="pl-k">||</span><span class="pl-smi">la</span>.<span class="pl-smi">createUniqueBuffers</span>){<span class="pl-smi">la</span>.<span class="pl-smi">__webglInitialized</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> ra<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-s"><span class="pl-pds">&quot;</span>v2<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-smi">la</span>.<span class="pl-c1">type</span><span class="pl-k">?</span>ra<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>v3<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-smi">la</span>.<span class="pl-c1">type</span><span class="pl-k">?</span>ra<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>v4<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-smi">la</span>.<span class="pl-c1">type</span><span class="pl-k">?</span>ra<span class="pl-k">=</span><span class="pl-c1">4</span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>c<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-smi">la</span>.<span class="pl-c1">type</span><span class="pl-k">&amp;&amp;</span>(ra<span class="pl-k">=</span><span class="pl-c1">3</span>);<span class="pl-smi">la</span>.<span class="pl-c1">size</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L424" class="blob-num js-line-number" data-line-number="424"></td>
        <td id="LC424" class="blob-code blob-code-inner js-file-line">ra;<span class="pl-smi">la</span>.<span class="pl-smi">array</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">V</span><span class="pl-k">*</span>ra);<span class="pl-smi">la</span>.<span class="pl-smi">buffer</span><span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-en">createBuffer</span>();<span class="pl-smi">la</span>.<span class="pl-smi">buffer</span>.<span class="pl-smi">belongsToAttribute</span><span class="pl-k">=</span>Ga;<span class="pl-smi">na</span>.<span class="pl-smi">needsUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-smi">la</span>.<span class="pl-smi">__original</span><span class="pl-k">=</span>na}<span class="pl-c1">F</span>.<span class="pl-smi">__webglCustomAttributesList</span>.<span class="pl-c1">push</span>(la)}}<span class="pl-c1">F</span>.<span class="pl-smi">__inittedArrays</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-smi">m</span>.<span class="pl-smi">verticesNeedUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-smi">m</span>.<span class="pl-smi">morphTargetsNeedUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-smi">m</span>.<span class="pl-smi">elementsNeedUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-smi">m</span>.<span class="pl-smi">uvsNeedUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-smi">m</span>.<span class="pl-smi">normalsNeedUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-smi">m</span>.<span class="pl-smi">tangentsNeedUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-smi">m</span>.<span class="pl-smi">colorsNeedUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>}}<span class="pl-k">else</span> m <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">BufferGeometry</span><span class="pl-k">&amp;&amp;</span><span class="pl-en">f</span>(m);<span class="pl-k">else</span> <span class="pl-k">if</span>(i <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Ribbon</span>){<span class="pl-k">if</span>(m<span class="pl-k">=</span><span class="pl-smi">i</span>.<span class="pl-smi">geometry</span>,<span class="pl-k">!</span><span class="pl-smi">m</span>.<span class="pl-smi">__webglVertexBuffer</span>){<span class="pl-k">var</span> Ia<span class="pl-k">=</span>m;<span class="pl-smi">Ia</span>.<span class="pl-smi">__webglVertexBuffer</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L425" class="blob-num js-line-number" data-line-number="425"></td>
        <td id="LC425" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">k</span>.<span class="pl-en">createBuffer</span>();<span class="pl-smi">Ia</span>.<span class="pl-smi">__webglColorBuffer</span><span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-en">createBuffer</span>();<span class="pl-c1">Q</span>.<span class="pl-smi">info</span>.<span class="pl-smi">memory</span>.<span class="pl-smi">geometries</span><span class="pl-k">++</span>;<span class="pl-k">var</span> wa<span class="pl-k">=</span>m,Da<span class="pl-k">=</span><span class="pl-smi">wa</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">length</span>;<span class="pl-smi">wa</span>.<span class="pl-smi">__vertexArray</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">3</span><span class="pl-k">*</span>Da);<span class="pl-smi">wa</span>.<span class="pl-smi">__colorArray</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">3</span><span class="pl-k">*</span>Da);<span class="pl-smi">wa</span>.<span class="pl-smi">__webglVertexCount</span><span class="pl-k">=</span>Da;<span class="pl-smi">m</span>.<span class="pl-smi">verticesNeedUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-smi">m</span>.<span class="pl-smi">colorsNeedUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>}}<span class="pl-k">else</span> <span class="pl-k">if</span>(i <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Line</span>){<span class="pl-k">if</span>(m<span class="pl-k">=</span><span class="pl-smi">i</span>.<span class="pl-smi">geometry</span>,<span class="pl-k">!</span><span class="pl-smi">m</span>.<span class="pl-smi">__webglVertexBuffer</span>){<span class="pl-k">var</span> Ja<span class="pl-k">=</span>m;<span class="pl-smi">Ja</span>.<span class="pl-smi">__webglVertexBuffer</span><span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-en">createBuffer</span>();<span class="pl-smi">Ja</span>.<span class="pl-smi">__webglColorBuffer</span><span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-en">createBuffer</span>();<span class="pl-c1">Q</span>.<span class="pl-smi">info</span>.<span class="pl-smi">memory</span>.<span class="pl-smi">geometries</span><span class="pl-k">++</span>;<span class="pl-k">var</span> Ea<span class="pl-k">=</span>m,Ua<span class="pl-k">=</span>i,Va<span class="pl-k">=</span><span class="pl-smi">Ea</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">length</span>;<span class="pl-smi">Ea</span>.<span class="pl-smi">__vertexArray</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L426" class="blob-num js-line-number" data-line-number="426"></td>
        <td id="LC426" class="blob-code blob-code-inner js-file-line"><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">3</span><span class="pl-k">*</span>Va);<span class="pl-smi">Ea</span>.<span class="pl-smi">__colorArray</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">3</span><span class="pl-k">*</span>Va);<span class="pl-smi">Ea</span>.<span class="pl-smi">__webglLineCount</span><span class="pl-k">=</span>Va;<span class="pl-en">b</span>(Ea,Ua);<span class="pl-smi">m</span>.<span class="pl-smi">verticesNeedUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-smi">m</span>.<span class="pl-smi">colorsNeedUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>}}<span class="pl-k">else</span> <span class="pl-k">if</span>(i <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">ParticleSystem</span><span class="pl-k">&amp;&amp;</span>(m<span class="pl-k">=</span><span class="pl-smi">i</span>.<span class="pl-smi">geometry</span>,<span class="pl-k">!</span><span class="pl-smi">m</span>.<span class="pl-smi">__webglVertexBuffer</span>))<span class="pl-k">if</span>(m <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>){<span class="pl-k">var</span> Wa<span class="pl-k">=</span>m;<span class="pl-smi">Wa</span>.<span class="pl-smi">__webglVertexBuffer</span><span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-en">createBuffer</span>();<span class="pl-smi">Wa</span>.<span class="pl-smi">__webglColorBuffer</span><span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-en">createBuffer</span>();<span class="pl-c1">Q</span>.<span class="pl-smi">info</span>.<span class="pl-smi">memory</span>.<span class="pl-smi">geometries</span><span class="pl-k">++</span>;<span class="pl-k">var</span> Ra<span class="pl-k">=</span>m,ib<span class="pl-k">=</span>i,$a<span class="pl-k">=</span><span class="pl-smi">Ra</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">length</span>;<span class="pl-smi">Ra</span>.<span class="pl-smi">__vertexArray</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">3</span><span class="pl-k">*</span>$a);<span class="pl-smi">Ra</span>.<span class="pl-smi">__colorArray</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">3</span><span class="pl-k">*</span>$a);<span class="pl-smi">Ra</span>.<span class="pl-smi">__sortArray</span><span class="pl-k">=</span>[];</td>
      </tr>
      <tr>
        <td id="L427" class="blob-num js-line-number" data-line-number="427"></td>
        <td id="LC427" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">Ra</span>.<span class="pl-smi">__webglParticleCount</span><span class="pl-k">=</span>$a;<span class="pl-en">b</span>(Ra,ib);<span class="pl-smi">m</span>.<span class="pl-smi">verticesNeedUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-smi">m</span>.<span class="pl-smi">colorsNeedUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>}<span class="pl-k">else</span> m <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">BufferGeometry</span><span class="pl-k">&amp;&amp;</span><span class="pl-en">f</span>(m);<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-smi">i</span>.<span class="pl-smi">__webglActive</span>){<span class="pl-k">if</span>(i <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Mesh</span>)<span class="pl-k">if</span>(m<span class="pl-k">=</span><span class="pl-smi">i</span>.<span class="pl-smi">geometry</span>,m <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">BufferGeometry</span>)<span class="pl-en">p</span>(<span class="pl-smi">j</span>.<span class="pl-smi">__webglObjects</span>,m,i);<span class="pl-k">else</span> <span class="pl-k">for</span>(l <span class="pl-k">in</span> <span class="pl-smi">m</span>.<span class="pl-smi">geometryGroups</span>)n<span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-smi">geometryGroups</span>[l],<span class="pl-en">p</span>(<span class="pl-smi">j</span>.<span class="pl-smi">__webglObjects</span>,n,i);<span class="pl-k">else</span> i <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Ribbon</span><span class="pl-k">||</span>i <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Line</span><span class="pl-k">||</span>i <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">ParticleSystem</span><span class="pl-k">?</span>(m<span class="pl-k">=</span><span class="pl-smi">i</span>.<span class="pl-smi">geometry</span>,<span class="pl-en">p</span>(<span class="pl-smi">j</span>.<span class="pl-smi">__webglObjects</span>,m,i))<span class="pl-k">:</span>i <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">ImmediateRenderObject</span><span class="pl-k">||</span><span class="pl-smi">i</span>.<span class="pl-smi">immediateRenderCallback</span><span class="pl-k">?</span></td>
      </tr>
      <tr>
        <td id="L428" class="blob-num js-line-number" data-line-number="428"></td>
        <td id="LC428" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">j</span>.<span class="pl-smi">__webglObjectsImmediate</span>.<span class="pl-c1">push</span>({object<span class="pl-k">:</span>i,opaque<span class="pl-k">:</span><span class="pl-c1">null</span>,transparent<span class="pl-k">:</span><span class="pl-c1">null</span>})<span class="pl-k">:</span>i <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Sprite</span><span class="pl-k">?</span><span class="pl-smi">j</span>.<span class="pl-smi">__webglSprites</span>.<span class="pl-c1">push</span>(i)<span class="pl-k">:</span>i <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">LensFlare</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">j</span>.<span class="pl-smi">__webglFlares</span>.<span class="pl-c1">push</span>(i);<span class="pl-smi">i</span>.<span class="pl-smi">__webglActive</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>}<span class="pl-smi">a</span>.<span class="pl-smi">__objectsAdded</span>.<span class="pl-c1">splice</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>)}<span class="pl-k">for</span>(;<span class="pl-smi">a</span>.<span class="pl-smi">__objectsRemoved</span>.<span class="pl-c1">length</span>;){<span class="pl-k">var</span> lb<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">__objectsRemoved</span>[<span class="pl-c1">0</span>],Za<span class="pl-k">=</span>a;lb <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Mesh</span><span class="pl-k">||</span>lb <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">ParticleSystem</span><span class="pl-k">||</span>lb <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Ribbon</span><span class="pl-k">||</span>lb <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Line</span><span class="pl-k">?</span><span class="pl-en">r</span>(<span class="pl-smi">Za</span>.<span class="pl-smi">__webglObjects</span>,lb)<span class="pl-k">:</span>lb <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Sprite</span><span class="pl-k">?</span><span class="pl-en">t</span>(<span class="pl-smi">Za</span>.<span class="pl-smi">__webglSprites</span>,lb)<span class="pl-k">:</span>lb <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">LensFlare</span><span class="pl-k">?</span></td>
      </tr>
      <tr>
        <td id="L429" class="blob-num js-line-number" data-line-number="429"></td>
        <td id="LC429" class="blob-code blob-code-inner js-file-line"><span class="pl-en">t</span>(<span class="pl-smi">Za</span>.<span class="pl-smi">__webglFlares</span>,lb)<span class="pl-k">:</span>(lb <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">ImmediateRenderObject</span><span class="pl-k">||</span><span class="pl-smi">lb</span>.<span class="pl-smi">immediateRenderCallback</span>)<span class="pl-k">&amp;&amp;</span><span class="pl-en">r</span>(<span class="pl-smi">Za</span>.<span class="pl-smi">__webglObjectsImmediate</span>,lb);<span class="pl-smi">lb</span>.<span class="pl-smi">__webglActive</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-smi">a</span>.<span class="pl-smi">__objectsRemoved</span>.<span class="pl-c1">splice</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>)}<span class="pl-k">for</span>(<span class="pl-k">var</span> fb<span class="pl-k">=</span><span class="pl-c1">0</span>,qb<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">__webglObjects</span>.<span class="pl-c1">length</span>;fb<span class="pl-k">&lt;</span>qb;fb<span class="pl-k">++</span>){<span class="pl-k">var</span> ub<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">__webglObjects</span>[fb].<span class="pl-c1">object</span>,ga<span class="pl-k">=</span><span class="pl-smi">ub</span>.<span class="pl-smi">geometry</span>,gb<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,eb<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,ab<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>;<span class="pl-k">if</span>(ub <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Mesh</span>)<span class="pl-k">if</span>(ga <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">BufferGeometry</span>)(<span class="pl-smi">ga</span>.<span class="pl-smi">verticesNeedUpdate</span><span class="pl-k">||</span><span class="pl-smi">ga</span>.<span class="pl-smi">elementsNeedUpdate</span><span class="pl-k">||</span><span class="pl-smi">ga</span>.<span class="pl-smi">uvsNeedUpdate</span><span class="pl-k">||</span><span class="pl-smi">ga</span>.<span class="pl-smi">normalsNeedUpdate</span><span class="pl-k">||</span><span class="pl-smi">ga</span>.<span class="pl-smi">colorsNeedUpdate</span><span class="pl-k">||</span><span class="pl-smi">ga</span>.<span class="pl-smi">tangentsNeedUpdate</span>)<span class="pl-k">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L430" class="blob-num js-line-number" data-line-number="430"></td>
        <td id="LC430" class="blob-code blob-code-inner js-file-line"><span class="pl-en">h</span>(ga,<span class="pl-smi">k</span>.<span class="pl-c1">DYNAMIC_DRAW</span>,<span class="pl-k">!</span><span class="pl-smi">ga</span>.<span class="pl-smi">dynamic</span>),<span class="pl-smi">ga</span>.<span class="pl-smi">verticesNeedUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-smi">ga</span>.<span class="pl-smi">elementsNeedUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-smi">ga</span>.<span class="pl-smi">uvsNeedUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-smi">ga</span>.<span class="pl-smi">normalsNeedUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-smi">ga</span>.<span class="pl-smi">colorsNeedUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-smi">ga</span>.<span class="pl-smi">tangentsNeedUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-k">else</span>{<span class="pl-k">for</span>(<span class="pl-k">var</span> pb<span class="pl-k">=</span><span class="pl-c1">0</span>,wb<span class="pl-k">=</span><span class="pl-smi">ga</span>.<span class="pl-smi">geometryGroupsList</span>.<span class="pl-c1">length</span>;pb<span class="pl-k">&lt;</span>wb;pb<span class="pl-k">++</span>)<span class="pl-k">if</span>(gb<span class="pl-k">=</span><span class="pl-smi">ga</span>.<span class="pl-smi">geometryGroupsList</span>[pb],ab<span class="pl-k">=</span><span class="pl-en">c</span>(ub,gb),eb<span class="pl-k">=</span><span class="pl-smi">ab</span>.<span class="pl-c1">attributes</span><span class="pl-k">&amp;&amp;</span><span class="pl-en">o</span>(ab),<span class="pl-smi">ga</span>.<span class="pl-smi">verticesNeedUpdate</span><span class="pl-k">||</span><span class="pl-smi">ga</span>.<span class="pl-smi">morphTargetsNeedUpdate</span><span class="pl-k">||</span><span class="pl-smi">ga</span>.<span class="pl-smi">elementsNeedUpdate</span><span class="pl-k">||</span><span class="pl-smi">ga</span>.<span class="pl-smi">uvsNeedUpdate</span><span class="pl-k">||</span><span class="pl-smi">ga</span>.<span class="pl-smi">normalsNeedUpdate</span><span class="pl-k">||</span><span class="pl-smi">ga</span>.<span class="pl-smi">colorsNeedUpdate</span><span class="pl-k">||</span><span class="pl-smi">ga</span>.<span class="pl-smi">tangentsNeedUpdate</span><span class="pl-k">||</span>eb){<span class="pl-k">var</span> ma<span class="pl-k">=</span>gb,xb<span class="pl-k">=</span>ub,mb<span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-c1">DYNAMIC_DRAW</span>,yb<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L431" class="blob-num js-line-number" data-line-number="431"></td>
        <td id="LC431" class="blob-code blob-code-inner js-file-line"><span class="pl-k">!</span><span class="pl-smi">ga</span>.<span class="pl-smi">dynamic</span>,db<span class="pl-k">=</span>ab;<span class="pl-k">if</span>(<span class="pl-smi">ma</span>.<span class="pl-smi">__inittedArrays</span>){<span class="pl-k">var</span> Qb<span class="pl-k">=</span><span class="pl-en">d</span>(db),Pb<span class="pl-k">=</span><span class="pl-smi">db</span>.<span class="pl-smi">vertexColors</span><span class="pl-k">?</span><span class="pl-smi">db</span>.<span class="pl-smi">vertexColors</span><span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">1</span>,hc<span class="pl-k">=</span><span class="pl-en">e</span>(db),Gc<span class="pl-k">=</span>Qb<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">SmoothShading</span>,<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,<span class="pl-c1">X</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,Xb<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,<span class="pl-c1">P</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,lc<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,Yb<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,vb<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,Hc<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,Rb<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,mc<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,nc<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,<span class="pl-c1">S</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,<span class="pl-c1">T</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,<span class="pl-c1">U</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,ka<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,zb<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,Ab<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,Bb<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,sc<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,Cb<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,Db<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,Eb<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,tc<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,Fb<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,Gb<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,Hb<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,uc<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,Ib<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,Jb<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,Kb<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,vc<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,Lb<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,Mb<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,Nb<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,wc<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,sa<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,ic<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,Zb<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,</td>
      </tr>
      <tr>
        <td id="L432" class="blob-num js-line-number" data-line-number="432"></td>
        <td id="LC432" class="blob-code blob-code-inner js-file-line">oc<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,pc<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,Ma<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,rc<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,Ka<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,La<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,$b<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,Sb<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,Ca<span class="pl-k">=</span><span class="pl-c1">0</span>,Ha<span class="pl-k">=</span><span class="pl-c1">0</span>,Tb<span class="pl-k">=</span><span class="pl-c1">0</span>,Ub<span class="pl-k">=</span><span class="pl-c1">0</span>,nb<span class="pl-k">=</span><span class="pl-c1">0</span>,Sa<span class="pl-k">=</span><span class="pl-c1">0</span>,ua<span class="pl-k">=</span><span class="pl-c1">0</span>,Ya<span class="pl-k">=</span><span class="pl-c1">0</span>,Fa<span class="pl-k">=</span><span class="pl-c1">0</span>,da<span class="pl-k">=</span><span class="pl-c1">0</span>,ha<span class="pl-k">=</span><span class="pl-c1">0</span>,x<span class="pl-k">=</span><span class="pl-c1">0</span>,ta<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,Na<span class="pl-k">=</span><span class="pl-smi">ma</span>.<span class="pl-smi">__vertexArray</span>,xc<span class="pl-k">=</span><span class="pl-smi">ma</span>.<span class="pl-smi">__uvArray</span>,yc<span class="pl-k">=</span><span class="pl-smi">ma</span>.<span class="pl-smi">__uv2Array</span>,ob<span class="pl-k">=</span><span class="pl-smi">ma</span>.<span class="pl-smi">__normalArray</span>,xa<span class="pl-k">=</span><span class="pl-smi">ma</span>.<span class="pl-smi">__tangentArray</span>,Oa<span class="pl-k">=</span><span class="pl-smi">ma</span>.<span class="pl-smi">__colorArray</span>,ya<span class="pl-k">=</span><span class="pl-smi">ma</span>.<span class="pl-smi">__skinIndexArray</span>,za<span class="pl-k">=</span><span class="pl-smi">ma</span>.<span class="pl-smi">__skinWeightArray</span>,Vc<span class="pl-k">=</span><span class="pl-smi">ma</span>.<span class="pl-smi">__morphTargetsArrays</span>,Wc<span class="pl-k">=</span><span class="pl-smi">ma</span>.<span class="pl-smi">__morphNormalsArrays</span>,Xc<span class="pl-k">=</span><span class="pl-smi">ma</span>.<span class="pl-smi">__webglCustomAttributesList</span>,w<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,Ob<span class="pl-k">=</span><span class="pl-smi">ma</span>.<span class="pl-smi">__faceArray</span>,hb<span class="pl-k">=</span><span class="pl-smi">ma</span>.<span class="pl-smi">__lineArray</span>,bb<span class="pl-k">=</span><span class="pl-smi">xb</span>.<span class="pl-smi">geometry</span>,Ec<span class="pl-k">=</span><span class="pl-smi">bb</span>.<span class="pl-smi">elementsNeedUpdate</span>,bd<span class="pl-k">=</span><span class="pl-smi">bb</span>.<span class="pl-smi">uvsNeedUpdate</span>,</td>
      </tr>
      <tr>
        <td id="L433" class="blob-num js-line-number" data-line-number="433"></td>
        <td id="LC433" class="blob-code blob-code-inner js-file-line">Sc<span class="pl-k">=</span><span class="pl-smi">bb</span>.<span class="pl-smi">normalsNeedUpdate</span>,Tc<span class="pl-k">=</span><span class="pl-smi">bb</span>.<span class="pl-smi">tangentsNeedUpdate</span>,id<span class="pl-k">=</span><span class="pl-smi">bb</span>.<span class="pl-smi">colorsNeedUpdate</span>,jd<span class="pl-k">=</span><span class="pl-smi">bb</span>.<span class="pl-smi">morphTargetsNeedUpdate</span>,ec<span class="pl-k">=</span><span class="pl-smi">bb</span>.<span class="pl-smi">vertices</span>,oa<span class="pl-k">=</span><span class="pl-smi">ma</span>.<span class="pl-smi">faces3</span>,pa<span class="pl-k">=</span><span class="pl-smi">ma</span>.<span class="pl-smi">faces4</span>,Ta<span class="pl-k">=</span><span class="pl-smi">bb</span>.<span class="pl-smi">faces</span>,Yc<span class="pl-k">=</span><span class="pl-smi">bb</span>.<span class="pl-smi">faceVertexUvs</span>[<span class="pl-c1">0</span>],Zc<span class="pl-k">=</span><span class="pl-smi">bb</span>.<span class="pl-smi">faceVertexUvs</span>[<span class="pl-c1">1</span>],fc<span class="pl-k">=</span><span class="pl-smi">bb</span>.<span class="pl-smi">skinIndices</span>,ac<span class="pl-k">=</span><span class="pl-smi">bb</span>.<span class="pl-smi">skinWeights</span>,bc<span class="pl-k">=</span><span class="pl-smi">bb</span>.<span class="pl-smi">morphTargets</span>,Ic<span class="pl-k">=</span><span class="pl-smi">bb</span>.<span class="pl-smi">morphNormals</span>;<span class="pl-k">if</span>(<span class="pl-smi">bb</span>.<span class="pl-smi">verticesNeedUpdate</span>){<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">X</span><span class="pl-k">=</span><span class="pl-smi">oa</span>.<span class="pl-c1">length</span>;<span class="pl-c1">D</span><span class="pl-k">&lt;</span><span class="pl-c1">X</span>;<span class="pl-c1">D</span><span class="pl-k">++</span>)<span class="pl-c1">P</span><span class="pl-k">=</span>Ta[oa[<span class="pl-c1">D</span>]],<span class="pl-c1">S</span><span class="pl-k">=</span>ec[<span class="pl-c1">P</span>.<span class="pl-smi">a</span>],<span class="pl-c1">T</span><span class="pl-k">=</span>ec[<span class="pl-c1">P</span>.<span class="pl-smi">b</span>],<span class="pl-c1">U</span><span class="pl-k">=</span>ec[<span class="pl-c1">P</span>.<span class="pl-smi">c</span>],Na[Ha]<span class="pl-k">=</span><span class="pl-c1">S</span>.<span class="pl-c1">x</span>,Na[Ha<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-c1">S</span>.<span class="pl-c1">y</span>,Na[Ha<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-c1">S</span>.<span class="pl-c1">z</span>,Na[Ha<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span><span class="pl-c1">T</span>.<span class="pl-c1">x</span>,Na[Ha<span class="pl-k">+</span><span class="pl-c1">4</span>]<span class="pl-k">=</span><span class="pl-c1">T</span>.<span class="pl-c1">y</span>,Na[Ha<span class="pl-k">+</span><span class="pl-c1">5</span>]<span class="pl-k">=</span><span class="pl-c1">T</span>.<span class="pl-c1">z</span>,Na[Ha<span class="pl-k">+</span><span class="pl-c1">6</span>]<span class="pl-k">=</span><span class="pl-c1">U</span>.<span class="pl-c1">x</span>,Na[Ha<span class="pl-k">+</span><span class="pl-c1">7</span>]<span class="pl-k">=</span><span class="pl-c1">U</span>.<span class="pl-c1">y</span>,Na[Ha<span class="pl-k">+</span><span class="pl-c1">8</span>]<span class="pl-k">=</span><span class="pl-c1">U</span>.<span class="pl-c1">z</span>,Ha<span class="pl-k">+=</span><span class="pl-c1">9</span>;<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">X</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L434" class="blob-num js-line-number" data-line-number="434"></td>
        <td id="LC434" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">pa</span>.<span class="pl-c1">length</span>;<span class="pl-c1">D</span><span class="pl-k">&lt;</span><span class="pl-c1">X</span>;<span class="pl-c1">D</span><span class="pl-k">++</span>)<span class="pl-c1">P</span><span class="pl-k">=</span>Ta[pa[<span class="pl-c1">D</span>]],<span class="pl-c1">S</span><span class="pl-k">=</span>ec[<span class="pl-c1">P</span>.<span class="pl-smi">a</span>],<span class="pl-c1">T</span><span class="pl-k">=</span>ec[<span class="pl-c1">P</span>.<span class="pl-smi">b</span>],<span class="pl-c1">U</span><span class="pl-k">=</span>ec[<span class="pl-c1">P</span>.<span class="pl-smi">c</span>],ka<span class="pl-k">=</span>ec[<span class="pl-c1">P</span>.<span class="pl-smi">d</span>],Na[Ha]<span class="pl-k">=</span><span class="pl-c1">S</span>.<span class="pl-c1">x</span>,Na[Ha<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-c1">S</span>.<span class="pl-c1">y</span>,Na[Ha<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-c1">S</span>.<span class="pl-c1">z</span>,Na[Ha<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span><span class="pl-c1">T</span>.<span class="pl-c1">x</span>,Na[Ha<span class="pl-k">+</span><span class="pl-c1">4</span>]<span class="pl-k">=</span><span class="pl-c1">T</span>.<span class="pl-c1">y</span>,Na[Ha<span class="pl-k">+</span><span class="pl-c1">5</span>]<span class="pl-k">=</span><span class="pl-c1">T</span>.<span class="pl-c1">z</span>,Na[Ha<span class="pl-k">+</span><span class="pl-c1">6</span>]<span class="pl-k">=</span><span class="pl-c1">U</span>.<span class="pl-c1">x</span>,Na[Ha<span class="pl-k">+</span><span class="pl-c1">7</span>]<span class="pl-k">=</span><span class="pl-c1">U</span>.<span class="pl-c1">y</span>,Na[Ha<span class="pl-k">+</span><span class="pl-c1">8</span>]<span class="pl-k">=</span><span class="pl-c1">U</span>.<span class="pl-c1">z</span>,Na[Ha<span class="pl-k">+</span><span class="pl-c1">9</span>]<span class="pl-k">=</span><span class="pl-smi">ka</span>.<span class="pl-c1">x</span>,Na[Ha<span class="pl-k">+</span><span class="pl-c1">10</span>]<span class="pl-k">=</span><span class="pl-smi">ka</span>.<span class="pl-c1">y</span>,Na[Ha<span class="pl-k">+</span><span class="pl-c1">11</span>]<span class="pl-k">=</span><span class="pl-smi">ka</span>.<span class="pl-c1">z</span>,Ha<span class="pl-k">+=</span><span class="pl-c1">12</span>;<span class="pl-smi">k</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">ma</span>.<span class="pl-smi">__webglVertexBuffer</span>);<span class="pl-smi">k</span>.<span class="pl-en">bufferData</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,Na,mb)}<span class="pl-k">if</span>(jd){Ma<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(rc<span class="pl-k">=</span><span class="pl-smi">bc</span>.<span class="pl-c1">length</span>;Ma<span class="pl-k">&lt;</span>rc;Ma<span class="pl-k">++</span>){<span class="pl-c1">D</span><span class="pl-k">=</span>ha<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">X</span><span class="pl-k">=</span><span class="pl-smi">oa</span>.<span class="pl-c1">length</span>;<span class="pl-c1">D</span><span class="pl-k">&lt;</span><span class="pl-c1">X</span>;<span class="pl-c1">D</span><span class="pl-k">++</span>)$b<span class="pl-k">=</span>oa[<span class="pl-c1">D</span>],<span class="pl-c1">P</span><span class="pl-k">=</span>Ta[$b],<span class="pl-c1">S</span><span class="pl-k">=</span>bc[Ma].<span class="pl-smi">vertices</span>[<span class="pl-c1">P</span>.<span class="pl-smi">a</span>],<span class="pl-c1">T</span><span class="pl-k">=</span>bc[Ma].<span class="pl-smi">vertices</span>[<span class="pl-c1">P</span>.<span class="pl-smi">b</span>],<span class="pl-c1">U</span><span class="pl-k">=</span>bc[Ma].<span class="pl-smi">vertices</span>[<span class="pl-c1">P</span>.<span class="pl-smi">c</span>],Ka<span class="pl-k">=</span>Vc[Ma],Ka[ha]<span class="pl-k">=</span><span class="pl-c1">S</span>.<span class="pl-c1">x</span>,</td>
      </tr>
      <tr>
        <td id="L435" class="blob-num js-line-number" data-line-number="435"></td>
        <td id="LC435" class="blob-code blob-code-inner js-file-line">Ka[ha<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-c1">S</span>.<span class="pl-c1">y</span>,Ka[ha<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-c1">S</span>.<span class="pl-c1">z</span>,Ka[ha<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span><span class="pl-c1">T</span>.<span class="pl-c1">x</span>,Ka[ha<span class="pl-k">+</span><span class="pl-c1">4</span>]<span class="pl-k">=</span><span class="pl-c1">T</span>.<span class="pl-c1">y</span>,Ka[ha<span class="pl-k">+</span><span class="pl-c1">5</span>]<span class="pl-k">=</span><span class="pl-c1">T</span>.<span class="pl-c1">z</span>,Ka[ha<span class="pl-k">+</span><span class="pl-c1">6</span>]<span class="pl-k">=</span><span class="pl-c1">U</span>.<span class="pl-c1">x</span>,Ka[ha<span class="pl-k">+</span><span class="pl-c1">7</span>]<span class="pl-k">=</span><span class="pl-c1">U</span>.<span class="pl-c1">y</span>,Ka[ha<span class="pl-k">+</span><span class="pl-c1">8</span>]<span class="pl-k">=</span><span class="pl-c1">U</span>.<span class="pl-c1">z</span>,<span class="pl-smi">db</span>.<span class="pl-smi">morphNormals</span><span class="pl-k">&amp;&amp;</span>(Gc<span class="pl-k">?</span>(Sb<span class="pl-k">=</span>Ic[Ma].<span class="pl-smi">vertexNormals</span>[$b],Cb<span class="pl-k">=</span><span class="pl-smi">Sb</span>.<span class="pl-smi">a</span>,Db<span class="pl-k">=</span><span class="pl-smi">Sb</span>.<span class="pl-smi">b</span>,Eb<span class="pl-k">=</span><span class="pl-smi">Sb</span>.<span class="pl-smi">c</span>)<span class="pl-k">:</span>Eb<span class="pl-k">=</span>Db<span class="pl-k">=</span>Cb<span class="pl-k">=</span>Ic[Ma].<span class="pl-smi">faceNormals</span>[$b],La<span class="pl-k">=</span>Wc[Ma],La[ha]<span class="pl-k">=</span><span class="pl-smi">Cb</span>.<span class="pl-c1">x</span>,La[ha<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-smi">Cb</span>.<span class="pl-c1">y</span>,La[ha<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-smi">Cb</span>.<span class="pl-c1">z</span>,La[ha<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span><span class="pl-smi">Db</span>.<span class="pl-c1">x</span>,La[ha<span class="pl-k">+</span><span class="pl-c1">4</span>]<span class="pl-k">=</span><span class="pl-smi">Db</span>.<span class="pl-c1">y</span>,La[ha<span class="pl-k">+</span><span class="pl-c1">5</span>]<span class="pl-k">=</span><span class="pl-smi">Db</span>.<span class="pl-c1">z</span>,La[ha<span class="pl-k">+</span><span class="pl-c1">6</span>]<span class="pl-k">=</span><span class="pl-smi">Eb</span>.<span class="pl-c1">x</span>,La[ha<span class="pl-k">+</span><span class="pl-c1">7</span>]<span class="pl-k">=</span><span class="pl-smi">Eb</span>.<span class="pl-c1">y</span>,La[ha<span class="pl-k">+</span><span class="pl-c1">8</span>]<span class="pl-k">=</span><span class="pl-smi">Eb</span>.<span class="pl-c1">z</span>),ha<span class="pl-k">+=</span><span class="pl-c1">9</span>;<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">X</span><span class="pl-k">=</span><span class="pl-smi">pa</span>.<span class="pl-c1">length</span>;<span class="pl-c1">D</span><span class="pl-k">&lt;</span><span class="pl-c1">X</span>;<span class="pl-c1">D</span><span class="pl-k">++</span>)$b<span class="pl-k">=</span>pa[<span class="pl-c1">D</span>],<span class="pl-c1">P</span><span class="pl-k">=</span>Ta[$b],<span class="pl-c1">S</span><span class="pl-k">=</span>bc[Ma].<span class="pl-smi">vertices</span>[<span class="pl-c1">P</span>.<span class="pl-smi">a</span>],<span class="pl-c1">T</span><span class="pl-k">=</span>bc[Ma].<span class="pl-smi">vertices</span>[<span class="pl-c1">P</span>.<span class="pl-smi">b</span>],<span class="pl-c1">U</span><span class="pl-k">=</span>bc[Ma].<span class="pl-smi">vertices</span>[<span class="pl-c1">P</span>.<span class="pl-smi">c</span>],ka<span class="pl-k">=</span>bc[Ma].<span class="pl-smi">vertices</span>[<span class="pl-c1">P</span>.<span class="pl-smi">d</span>],Ka<span class="pl-k">=</span>Vc[Ma],</td>
      </tr>
      <tr>
        <td id="L436" class="blob-num js-line-number" data-line-number="436"></td>
        <td id="LC436" class="blob-code blob-code-inner js-file-line">Ka[ha]<span class="pl-k">=</span><span class="pl-c1">S</span>.<span class="pl-c1">x</span>,Ka[ha<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-c1">S</span>.<span class="pl-c1">y</span>,Ka[ha<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-c1">S</span>.<span class="pl-c1">z</span>,Ka[ha<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span><span class="pl-c1">T</span>.<span class="pl-c1">x</span>,Ka[ha<span class="pl-k">+</span><span class="pl-c1">4</span>]<span class="pl-k">=</span><span class="pl-c1">T</span>.<span class="pl-c1">y</span>,Ka[ha<span class="pl-k">+</span><span class="pl-c1">5</span>]<span class="pl-k">=</span><span class="pl-c1">T</span>.<span class="pl-c1">z</span>,Ka[ha<span class="pl-k">+</span><span class="pl-c1">6</span>]<span class="pl-k">=</span><span class="pl-c1">U</span>.<span class="pl-c1">x</span>,Ka[ha<span class="pl-k">+</span><span class="pl-c1">7</span>]<span class="pl-k">=</span><span class="pl-c1">U</span>.<span class="pl-c1">y</span>,Ka[ha<span class="pl-k">+</span><span class="pl-c1">8</span>]<span class="pl-k">=</span><span class="pl-c1">U</span>.<span class="pl-c1">z</span>,Ka[ha<span class="pl-k">+</span><span class="pl-c1">9</span>]<span class="pl-k">=</span><span class="pl-smi">ka</span>.<span class="pl-c1">x</span>,Ka[ha<span class="pl-k">+</span><span class="pl-c1">10</span>]<span class="pl-k">=</span><span class="pl-smi">ka</span>.<span class="pl-c1">y</span>,Ka[ha<span class="pl-k">+</span><span class="pl-c1">11</span>]<span class="pl-k">=</span><span class="pl-smi">ka</span>.<span class="pl-c1">z</span>,<span class="pl-smi">db</span>.<span class="pl-smi">morphNormals</span><span class="pl-k">&amp;&amp;</span>(Gc<span class="pl-k">?</span>(Sb<span class="pl-k">=</span>Ic[Ma].<span class="pl-smi">vertexNormals</span>[$b],Cb<span class="pl-k">=</span><span class="pl-smi">Sb</span>.<span class="pl-smi">a</span>,Db<span class="pl-k">=</span><span class="pl-smi">Sb</span>.<span class="pl-smi">b</span>,Eb<span class="pl-k">=</span><span class="pl-smi">Sb</span>.<span class="pl-smi">c</span>,tc<span class="pl-k">=</span><span class="pl-smi">Sb</span>.<span class="pl-smi">d</span>)<span class="pl-k">:</span>tc<span class="pl-k">=</span>Eb<span class="pl-k">=</span>Db<span class="pl-k">=</span>Cb<span class="pl-k">=</span>Ic[Ma].<span class="pl-smi">faceNormals</span>[$b],La<span class="pl-k">=</span>Wc[Ma],La[ha]<span class="pl-k">=</span><span class="pl-smi">Cb</span>.<span class="pl-c1">x</span>,La[ha<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-smi">Cb</span>.<span class="pl-c1">y</span>,La[ha<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-smi">Cb</span>.<span class="pl-c1">z</span>,La[ha<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span><span class="pl-smi">Db</span>.<span class="pl-c1">x</span>,La[ha<span class="pl-k">+</span><span class="pl-c1">4</span>]<span class="pl-k">=</span><span class="pl-smi">Db</span>.<span class="pl-c1">y</span>,La[ha<span class="pl-k">+</span><span class="pl-c1">5</span>]<span class="pl-k">=</span><span class="pl-smi">Db</span>.<span class="pl-c1">z</span>,La[ha<span class="pl-k">+</span><span class="pl-c1">6</span>]<span class="pl-k">=</span><span class="pl-smi">Eb</span>.<span class="pl-c1">x</span>,La[ha<span class="pl-k">+</span><span class="pl-c1">7</span>]<span class="pl-k">=</span><span class="pl-smi">Eb</span>.<span class="pl-c1">y</span>,La[ha<span class="pl-k">+</span><span class="pl-c1">8</span>]<span class="pl-k">=</span><span class="pl-smi">Eb</span>.<span class="pl-c1">z</span>,La[ha<span class="pl-k">+</span><span class="pl-c1">9</span>]<span class="pl-k">=</span><span class="pl-smi">tc</span>.<span class="pl-c1">x</span>,La[ha<span class="pl-k">+</span><span class="pl-c1">10</span>]<span class="pl-k">=</span><span class="pl-smi">tc</span>.<span class="pl-c1">y</span>,La[ha<span class="pl-k">+</span><span class="pl-c1">11</span>]<span class="pl-k">=</span><span class="pl-smi">tc</span>.<span class="pl-c1">z</span>),ha<span class="pl-k">+=</span><span class="pl-c1">12</span>;<span class="pl-smi">k</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">ma</span>.<span class="pl-smi">__webglMorphTargetsBuffers</span>[Ma]);</td>
      </tr>
      <tr>
        <td id="L437" class="blob-num js-line-number" data-line-number="437"></td>
        <td id="LC437" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">k</span>.<span class="pl-en">bufferData</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,Vc[Ma],mb);<span class="pl-smi">db</span>.<span class="pl-smi">morphNormals</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">k</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">ma</span>.<span class="pl-smi">__webglMorphNormalsBuffers</span>[Ma]),<span class="pl-smi">k</span>.<span class="pl-en">bufferData</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,Wc[Ma],mb))}}<span class="pl-k">if</span>(<span class="pl-smi">ac</span>.<span class="pl-c1">length</span>){<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">X</span><span class="pl-k">=</span><span class="pl-smi">oa</span>.<span class="pl-c1">length</span>;<span class="pl-c1">D</span><span class="pl-k">&lt;</span><span class="pl-c1">X</span>;<span class="pl-c1">D</span><span class="pl-k">++</span>)<span class="pl-c1">P</span><span class="pl-k">=</span>Ta[oa[<span class="pl-c1">D</span>]],Ib<span class="pl-k">=</span>ac[<span class="pl-c1">P</span>.<span class="pl-smi">a</span>],Jb<span class="pl-k">=</span>ac[<span class="pl-c1">P</span>.<span class="pl-smi">b</span>],Kb<span class="pl-k">=</span>ac[<span class="pl-c1">P</span>.<span class="pl-smi">c</span>],za[da]<span class="pl-k">=</span><span class="pl-smi">Ib</span>.<span class="pl-c1">x</span>,za[da<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-smi">Ib</span>.<span class="pl-c1">y</span>,za[da<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-smi">Ib</span>.<span class="pl-c1">z</span>,za[da<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span><span class="pl-smi">Ib</span>.<span class="pl-smi">w</span>,za[da<span class="pl-k">+</span><span class="pl-c1">4</span>]<span class="pl-k">=</span><span class="pl-smi">Jb</span>.<span class="pl-c1">x</span>,za[da<span class="pl-k">+</span><span class="pl-c1">5</span>]<span class="pl-k">=</span><span class="pl-smi">Jb</span>.<span class="pl-c1">y</span>,za[da<span class="pl-k">+</span><span class="pl-c1">6</span>]<span class="pl-k">=</span><span class="pl-smi">Jb</span>.<span class="pl-c1">z</span>,za[da<span class="pl-k">+</span><span class="pl-c1">7</span>]<span class="pl-k">=</span><span class="pl-smi">Jb</span>.<span class="pl-smi">w</span>,za[da<span class="pl-k">+</span><span class="pl-c1">8</span>]<span class="pl-k">=</span><span class="pl-smi">Kb</span>.<span class="pl-c1">x</span>,za[da<span class="pl-k">+</span><span class="pl-c1">9</span>]<span class="pl-k">=</span><span class="pl-smi">Kb</span>.<span class="pl-c1">y</span>,za[da<span class="pl-k">+</span><span class="pl-c1">10</span>]<span class="pl-k">=</span><span class="pl-smi">Kb</span>.<span class="pl-c1">z</span>,za[da<span class="pl-k">+</span><span class="pl-c1">11</span>]<span class="pl-k">=</span><span class="pl-smi">Kb</span>.<span class="pl-smi">w</span>,Lb<span class="pl-k">=</span>fc[<span class="pl-c1">P</span>.<span class="pl-smi">a</span>],Mb<span class="pl-k">=</span>fc[<span class="pl-c1">P</span>.<span class="pl-smi">b</span>],Nb<span class="pl-k">=</span>fc[<span class="pl-c1">P</span>.<span class="pl-smi">c</span>],ya[da]<span class="pl-k">=</span><span class="pl-smi">Lb</span>.<span class="pl-c1">x</span>,ya[da<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-smi">Lb</span>.<span class="pl-c1">y</span>,ya[da<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-smi">Lb</span>.<span class="pl-c1">z</span>,ya[da<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span><span class="pl-smi">Lb</span>.<span class="pl-smi">w</span>,</td>
      </tr>
      <tr>
        <td id="L438" class="blob-num js-line-number" data-line-number="438"></td>
        <td id="LC438" class="blob-code blob-code-inner js-file-line">ya[da<span class="pl-k">+</span><span class="pl-c1">4</span>]<span class="pl-k">=</span><span class="pl-smi">Mb</span>.<span class="pl-c1">x</span>,ya[da<span class="pl-k">+</span><span class="pl-c1">5</span>]<span class="pl-k">=</span><span class="pl-smi">Mb</span>.<span class="pl-c1">y</span>,ya[da<span class="pl-k">+</span><span class="pl-c1">6</span>]<span class="pl-k">=</span><span class="pl-smi">Mb</span>.<span class="pl-c1">z</span>,ya[da<span class="pl-k">+</span><span class="pl-c1">7</span>]<span class="pl-k">=</span><span class="pl-smi">Mb</span>.<span class="pl-smi">w</span>,ya[da<span class="pl-k">+</span><span class="pl-c1">8</span>]<span class="pl-k">=</span><span class="pl-smi">Nb</span>.<span class="pl-c1">x</span>,ya[da<span class="pl-k">+</span><span class="pl-c1">9</span>]<span class="pl-k">=</span><span class="pl-smi">Nb</span>.<span class="pl-c1">y</span>,ya[da<span class="pl-k">+</span><span class="pl-c1">10</span>]<span class="pl-k">=</span><span class="pl-smi">Nb</span>.<span class="pl-c1">z</span>,ya[da<span class="pl-k">+</span><span class="pl-c1">11</span>]<span class="pl-k">=</span><span class="pl-smi">Nb</span>.<span class="pl-smi">w</span>,da<span class="pl-k">+=</span><span class="pl-c1">12</span>;<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">X</span><span class="pl-k">=</span><span class="pl-smi">pa</span>.<span class="pl-c1">length</span>;<span class="pl-c1">D</span><span class="pl-k">&lt;</span><span class="pl-c1">X</span>;<span class="pl-c1">D</span><span class="pl-k">++</span>)<span class="pl-c1">P</span><span class="pl-k">=</span>Ta[pa[<span class="pl-c1">D</span>]],Ib<span class="pl-k">=</span>ac[<span class="pl-c1">P</span>.<span class="pl-smi">a</span>],Jb<span class="pl-k">=</span>ac[<span class="pl-c1">P</span>.<span class="pl-smi">b</span>],Kb<span class="pl-k">=</span>ac[<span class="pl-c1">P</span>.<span class="pl-smi">c</span>],vc<span class="pl-k">=</span>ac[<span class="pl-c1">P</span>.<span class="pl-smi">d</span>],za[da]<span class="pl-k">=</span><span class="pl-smi">Ib</span>.<span class="pl-c1">x</span>,za[da<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-smi">Ib</span>.<span class="pl-c1">y</span>,za[da<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-smi">Ib</span>.<span class="pl-c1">z</span>,za[da<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span><span class="pl-smi">Ib</span>.<span class="pl-smi">w</span>,za[da<span class="pl-k">+</span><span class="pl-c1">4</span>]<span class="pl-k">=</span><span class="pl-smi">Jb</span>.<span class="pl-c1">x</span>,za[da<span class="pl-k">+</span><span class="pl-c1">5</span>]<span class="pl-k">=</span><span class="pl-smi">Jb</span>.<span class="pl-c1">y</span>,za[da<span class="pl-k">+</span><span class="pl-c1">6</span>]<span class="pl-k">=</span><span class="pl-smi">Jb</span>.<span class="pl-c1">z</span>,za[da<span class="pl-k">+</span><span class="pl-c1">7</span>]<span class="pl-k">=</span><span class="pl-smi">Jb</span>.<span class="pl-smi">w</span>,za[da<span class="pl-k">+</span><span class="pl-c1">8</span>]<span class="pl-k">=</span><span class="pl-smi">Kb</span>.<span class="pl-c1">x</span>,za[da<span class="pl-k">+</span><span class="pl-c1">9</span>]<span class="pl-k">=</span><span class="pl-smi">Kb</span>.<span class="pl-c1">y</span>,za[da<span class="pl-k">+</span><span class="pl-c1">10</span>]<span class="pl-k">=</span><span class="pl-smi">Kb</span>.<span class="pl-c1">z</span>,za[da<span class="pl-k">+</span><span class="pl-c1">11</span>]<span class="pl-k">=</span><span class="pl-smi">Kb</span>.<span class="pl-smi">w</span>,za[da<span class="pl-k">+</span><span class="pl-c1">12</span>]<span class="pl-k">=</span><span class="pl-smi">vc</span>.<span class="pl-c1">x</span>,za[da<span class="pl-k">+</span><span class="pl-c1">13</span>]<span class="pl-k">=</span><span class="pl-smi">vc</span>.<span class="pl-c1">y</span>,za[da<span class="pl-k">+</span><span class="pl-c1">14</span>]<span class="pl-k">=</span><span class="pl-smi">vc</span>.<span class="pl-c1">z</span>,za[da<span class="pl-k">+</span><span class="pl-c1">15</span>]<span class="pl-k">=</span><span class="pl-smi">vc</span>.<span class="pl-smi">w</span>,Lb<span class="pl-k">=</span>fc[<span class="pl-c1">P</span>.<span class="pl-smi">a</span>],Mb<span class="pl-k">=</span>fc[<span class="pl-c1">P</span>.<span class="pl-smi">b</span>],Nb<span class="pl-k">=</span>fc[<span class="pl-c1">P</span>.<span class="pl-smi">c</span>],wc<span class="pl-k">=</span>fc[<span class="pl-c1">P</span>.<span class="pl-smi">d</span>],ya[da]<span class="pl-k">=</span><span class="pl-smi">Lb</span>.<span class="pl-c1">x</span>,ya[da<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-smi">Lb</span>.<span class="pl-c1">y</span>,</td>
      </tr>
      <tr>
        <td id="L439" class="blob-num js-line-number" data-line-number="439"></td>
        <td id="LC439" class="blob-code blob-code-inner js-file-line">ya[da<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-smi">Lb</span>.<span class="pl-c1">z</span>,ya[da<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span><span class="pl-smi">Lb</span>.<span class="pl-smi">w</span>,ya[da<span class="pl-k">+</span><span class="pl-c1">4</span>]<span class="pl-k">=</span><span class="pl-smi">Mb</span>.<span class="pl-c1">x</span>,ya[da<span class="pl-k">+</span><span class="pl-c1">5</span>]<span class="pl-k">=</span><span class="pl-smi">Mb</span>.<span class="pl-c1">y</span>,ya[da<span class="pl-k">+</span><span class="pl-c1">6</span>]<span class="pl-k">=</span><span class="pl-smi">Mb</span>.<span class="pl-c1">z</span>,ya[da<span class="pl-k">+</span><span class="pl-c1">7</span>]<span class="pl-k">=</span><span class="pl-smi">Mb</span>.<span class="pl-smi">w</span>,ya[da<span class="pl-k">+</span><span class="pl-c1">8</span>]<span class="pl-k">=</span><span class="pl-smi">Nb</span>.<span class="pl-c1">x</span>,ya[da<span class="pl-k">+</span><span class="pl-c1">9</span>]<span class="pl-k">=</span><span class="pl-smi">Nb</span>.<span class="pl-c1">y</span>,ya[da<span class="pl-k">+</span><span class="pl-c1">10</span>]<span class="pl-k">=</span><span class="pl-smi">Nb</span>.<span class="pl-c1">z</span>,ya[da<span class="pl-k">+</span><span class="pl-c1">11</span>]<span class="pl-k">=</span><span class="pl-smi">Nb</span>.<span class="pl-smi">w</span>,ya[da<span class="pl-k">+</span><span class="pl-c1">12</span>]<span class="pl-k">=</span><span class="pl-smi">wc</span>.<span class="pl-c1">x</span>,ya[da<span class="pl-k">+</span><span class="pl-c1">13</span>]<span class="pl-k">=</span><span class="pl-smi">wc</span>.<span class="pl-c1">y</span>,ya[da<span class="pl-k">+</span><span class="pl-c1">14</span>]<span class="pl-k">=</span><span class="pl-smi">wc</span>.<span class="pl-c1">z</span>,ya[da<span class="pl-k">+</span><span class="pl-c1">15</span>]<span class="pl-k">=</span><span class="pl-smi">wc</span>.<span class="pl-smi">w</span>,da<span class="pl-k">+=</span><span class="pl-c1">16</span>;<span class="pl-c1">0</span><span class="pl-k">&lt;</span>da<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">k</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">ma</span>.<span class="pl-smi">__webglSkinIndicesBuffer</span>),<span class="pl-smi">k</span>.<span class="pl-en">bufferData</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,ya,mb),<span class="pl-smi">k</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">ma</span>.<span class="pl-smi">__webglSkinWeightsBuffer</span>),<span class="pl-smi">k</span>.<span class="pl-en">bufferData</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,za,mb))}<span class="pl-k">if</span>(id<span class="pl-k">&amp;&amp;</span>Pb){<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">X</span><span class="pl-k">=</span><span class="pl-smi">oa</span>.<span class="pl-c1">length</span>;<span class="pl-c1">D</span><span class="pl-k">&lt;</span><span class="pl-c1">X</span>;<span class="pl-c1">D</span><span class="pl-k">++</span>)<span class="pl-c1">P</span><span class="pl-k">=</span>Ta[oa[<span class="pl-c1">D</span>]],vb<span class="pl-k">=</span><span class="pl-c1">P</span>.<span class="pl-smi">vertexColors</span>,Hc<span class="pl-k">=</span><span class="pl-c1">P</span>.<span class="pl-c1">color</span>,<span class="pl-c1">3</span><span class="pl-k">===</span><span class="pl-smi">vb</span>.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>Pb<span class="pl-k">===</span></td>
      </tr>
      <tr>
        <td id="L440" class="blob-num js-line-number" data-line-number="440"></td>
        <td id="LC440" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">VertexColors</span><span class="pl-k">?</span>(Fb<span class="pl-k">=</span>vb[<span class="pl-c1">0</span>],Gb<span class="pl-k">=</span>vb[<span class="pl-c1">1</span>],Hb<span class="pl-k">=</span>vb[<span class="pl-c1">2</span>])<span class="pl-k">:</span>Hb<span class="pl-k">=</span>Gb<span class="pl-k">=</span>Fb<span class="pl-k">=</span>Hc,Oa[Fa]<span class="pl-k">=</span><span class="pl-smi">Fb</span>.<span class="pl-smi">r</span>,Oa[Fa<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-smi">Fb</span>.<span class="pl-smi">g</span>,Oa[Fa<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-smi">Fb</span>.<span class="pl-smi">b</span>,Oa[Fa<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span><span class="pl-smi">Gb</span>.<span class="pl-smi">r</span>,Oa[Fa<span class="pl-k">+</span><span class="pl-c1">4</span>]<span class="pl-k">=</span><span class="pl-smi">Gb</span>.<span class="pl-smi">g</span>,Oa[Fa<span class="pl-k">+</span><span class="pl-c1">5</span>]<span class="pl-k">=</span><span class="pl-smi">Gb</span>.<span class="pl-smi">b</span>,Oa[Fa<span class="pl-k">+</span><span class="pl-c1">6</span>]<span class="pl-k">=</span><span class="pl-smi">Hb</span>.<span class="pl-smi">r</span>,Oa[Fa<span class="pl-k">+</span><span class="pl-c1">7</span>]<span class="pl-k">=</span><span class="pl-smi">Hb</span>.<span class="pl-smi">g</span>,Oa[Fa<span class="pl-k">+</span><span class="pl-c1">8</span>]<span class="pl-k">=</span><span class="pl-smi">Hb</span>.<span class="pl-smi">b</span>,Fa<span class="pl-k">+=</span><span class="pl-c1">9</span>;<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">X</span><span class="pl-k">=</span><span class="pl-smi">pa</span>.<span class="pl-c1">length</span>;<span class="pl-c1">D</span><span class="pl-k">&lt;</span><span class="pl-c1">X</span>;<span class="pl-c1">D</span><span class="pl-k">++</span>)<span class="pl-c1">P</span><span class="pl-k">=</span>Ta[pa[<span class="pl-c1">D</span>]],vb<span class="pl-k">=</span><span class="pl-c1">P</span>.<span class="pl-smi">vertexColors</span>,Hc<span class="pl-k">=</span><span class="pl-c1">P</span>.<span class="pl-c1">color</span>,<span class="pl-c1">4</span><span class="pl-k">===</span><span class="pl-smi">vb</span>.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>Pb<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">VertexColors</span><span class="pl-k">?</span>(Fb<span class="pl-k">=</span>vb[<span class="pl-c1">0</span>],Gb<span class="pl-k">=</span>vb[<span class="pl-c1">1</span>],Hb<span class="pl-k">=</span>vb[<span class="pl-c1">2</span>],uc<span class="pl-k">=</span>vb[<span class="pl-c1">3</span>])<span class="pl-k">:</span>uc<span class="pl-k">=</span>Hb<span class="pl-k">=</span>Gb<span class="pl-k">=</span>Fb<span class="pl-k">=</span>Hc,Oa[Fa]<span class="pl-k">=</span><span class="pl-smi">Fb</span>.<span class="pl-smi">r</span>,Oa[Fa<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-smi">Fb</span>.<span class="pl-smi">g</span>,Oa[Fa<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-smi">Fb</span>.<span class="pl-smi">b</span>,Oa[Fa<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span><span class="pl-smi">Gb</span>.<span class="pl-smi">r</span>,Oa[Fa<span class="pl-k">+</span><span class="pl-c1">4</span>]<span class="pl-k">=</span><span class="pl-smi">Gb</span>.<span class="pl-smi">g</span>,Oa[Fa<span class="pl-k">+</span><span class="pl-c1">5</span>]<span class="pl-k">=</span><span class="pl-smi">Gb</span>.<span class="pl-smi">b</span>,Oa[Fa<span class="pl-k">+</span><span class="pl-c1">6</span>]<span class="pl-k">=</span><span class="pl-smi">Hb</span>.<span class="pl-smi">r</span>,Oa[Fa<span class="pl-k">+</span><span class="pl-c1">7</span>]<span class="pl-k">=</span><span class="pl-smi">Hb</span>.<span class="pl-smi">g</span>,Oa[Fa<span class="pl-k">+</span><span class="pl-c1">8</span>]<span class="pl-k">=</span><span class="pl-smi">Hb</span>.<span class="pl-smi">b</span>,Oa[Fa<span class="pl-k">+</span><span class="pl-c1">9</span>]<span class="pl-k">=</span><span class="pl-smi">uc</span>.<span class="pl-smi">r</span>,Oa[Fa<span class="pl-k">+</span><span class="pl-c1">10</span>]<span class="pl-k">=</span><span class="pl-smi">uc</span>.<span class="pl-smi">g</span>,</td>
      </tr>
      <tr>
        <td id="L441" class="blob-num js-line-number" data-line-number="441"></td>
        <td id="LC441" class="blob-code blob-code-inner js-file-line">Oa[Fa<span class="pl-k">+</span><span class="pl-c1">11</span>]<span class="pl-k">=</span><span class="pl-smi">uc</span>.<span class="pl-smi">b</span>,Fa<span class="pl-k">+=</span><span class="pl-c1">12</span>;<span class="pl-c1">0</span><span class="pl-k">&lt;</span>Fa<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">k</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">ma</span>.<span class="pl-smi">__webglColorBuffer</span>),<span class="pl-smi">k</span>.<span class="pl-en">bufferData</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,Oa,mb))}<span class="pl-k">if</span>(Tc<span class="pl-k">&amp;&amp;</span><span class="pl-smi">bb</span>.<span class="pl-smi">hasTangents</span>){<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">X</span><span class="pl-k">=</span><span class="pl-smi">oa</span>.<span class="pl-c1">length</span>;<span class="pl-c1">D</span><span class="pl-k">&lt;</span><span class="pl-c1">X</span>;<span class="pl-c1">D</span><span class="pl-k">++</span>)<span class="pl-c1">P</span><span class="pl-k">=</span>Ta[oa[<span class="pl-c1">D</span>]],Rb<span class="pl-k">=</span><span class="pl-c1">P</span>.<span class="pl-smi">vertexTangents</span>,zb<span class="pl-k">=</span>Rb[<span class="pl-c1">0</span>],Ab<span class="pl-k">=</span>Rb[<span class="pl-c1">1</span>],Bb<span class="pl-k">=</span>Rb[<span class="pl-c1">2</span>],xa[ua]<span class="pl-k">=</span><span class="pl-smi">zb</span>.<span class="pl-c1">x</span>,xa[ua<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-smi">zb</span>.<span class="pl-c1">y</span>,xa[ua<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-smi">zb</span>.<span class="pl-c1">z</span>,xa[ua<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span><span class="pl-smi">zb</span>.<span class="pl-smi">w</span>,xa[ua<span class="pl-k">+</span><span class="pl-c1">4</span>]<span class="pl-k">=</span><span class="pl-smi">Ab</span>.<span class="pl-c1">x</span>,xa[ua<span class="pl-k">+</span><span class="pl-c1">5</span>]<span class="pl-k">=</span><span class="pl-smi">Ab</span>.<span class="pl-c1">y</span>,xa[ua<span class="pl-k">+</span><span class="pl-c1">6</span>]<span class="pl-k">=</span><span class="pl-smi">Ab</span>.<span class="pl-c1">z</span>,xa[ua<span class="pl-k">+</span><span class="pl-c1">7</span>]<span class="pl-k">=</span><span class="pl-smi">Ab</span>.<span class="pl-smi">w</span>,xa[ua<span class="pl-k">+</span><span class="pl-c1">8</span>]<span class="pl-k">=</span><span class="pl-smi">Bb</span>.<span class="pl-c1">x</span>,xa[ua<span class="pl-k">+</span><span class="pl-c1">9</span>]<span class="pl-k">=</span><span class="pl-smi">Bb</span>.<span class="pl-c1">y</span>,xa[ua<span class="pl-k">+</span><span class="pl-c1">10</span>]<span class="pl-k">=</span><span class="pl-smi">Bb</span>.<span class="pl-c1">z</span>,xa[ua<span class="pl-k">+</span><span class="pl-c1">11</span>]<span class="pl-k">=</span><span class="pl-smi">Bb</span>.<span class="pl-smi">w</span>,ua<span class="pl-k">+=</span><span class="pl-c1">12</span>;<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">X</span><span class="pl-k">=</span><span class="pl-smi">pa</span>.<span class="pl-c1">length</span>;<span class="pl-c1">D</span><span class="pl-k">&lt;</span><span class="pl-c1">X</span>;<span class="pl-c1">D</span><span class="pl-k">++</span>)<span class="pl-c1">P</span><span class="pl-k">=</span>Ta[pa[<span class="pl-c1">D</span>]],Rb<span class="pl-k">=</span><span class="pl-c1">P</span>.<span class="pl-smi">vertexTangents</span>,zb<span class="pl-k">=</span>Rb[<span class="pl-c1">0</span>],Ab<span class="pl-k">=</span>Rb[<span class="pl-c1">1</span>],Bb<span class="pl-k">=</span>Rb[<span class="pl-c1">2</span>],sc<span class="pl-k">=</span>Rb[<span class="pl-c1">3</span>],xa[ua]<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L442" class="blob-num js-line-number" data-line-number="442"></td>
        <td id="LC442" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">zb</span>.<span class="pl-c1">x</span>,xa[ua<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-smi">zb</span>.<span class="pl-c1">y</span>,xa[ua<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-smi">zb</span>.<span class="pl-c1">z</span>,xa[ua<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span><span class="pl-smi">zb</span>.<span class="pl-smi">w</span>,xa[ua<span class="pl-k">+</span><span class="pl-c1">4</span>]<span class="pl-k">=</span><span class="pl-smi">Ab</span>.<span class="pl-c1">x</span>,xa[ua<span class="pl-k">+</span><span class="pl-c1">5</span>]<span class="pl-k">=</span><span class="pl-smi">Ab</span>.<span class="pl-c1">y</span>,xa[ua<span class="pl-k">+</span><span class="pl-c1">6</span>]<span class="pl-k">=</span><span class="pl-smi">Ab</span>.<span class="pl-c1">z</span>,xa[ua<span class="pl-k">+</span><span class="pl-c1">7</span>]<span class="pl-k">=</span><span class="pl-smi">Ab</span>.<span class="pl-smi">w</span>,xa[ua<span class="pl-k">+</span><span class="pl-c1">8</span>]<span class="pl-k">=</span><span class="pl-smi">Bb</span>.<span class="pl-c1">x</span>,xa[ua<span class="pl-k">+</span><span class="pl-c1">9</span>]<span class="pl-k">=</span><span class="pl-smi">Bb</span>.<span class="pl-c1">y</span>,xa[ua<span class="pl-k">+</span><span class="pl-c1">10</span>]<span class="pl-k">=</span><span class="pl-smi">Bb</span>.<span class="pl-c1">z</span>,xa[ua<span class="pl-k">+</span><span class="pl-c1">11</span>]<span class="pl-k">=</span><span class="pl-smi">Bb</span>.<span class="pl-smi">w</span>,xa[ua<span class="pl-k">+</span><span class="pl-c1">12</span>]<span class="pl-k">=</span><span class="pl-smi">sc</span>.<span class="pl-c1">x</span>,xa[ua<span class="pl-k">+</span><span class="pl-c1">13</span>]<span class="pl-k">=</span><span class="pl-smi">sc</span>.<span class="pl-c1">y</span>,xa[ua<span class="pl-k">+</span><span class="pl-c1">14</span>]<span class="pl-k">=</span><span class="pl-smi">sc</span>.<span class="pl-c1">z</span>,xa[ua<span class="pl-k">+</span><span class="pl-c1">15</span>]<span class="pl-k">=</span><span class="pl-smi">sc</span>.<span class="pl-smi">w</span>,ua<span class="pl-k">+=</span><span class="pl-c1">16</span>;<span class="pl-smi">k</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">ma</span>.<span class="pl-smi">__webglTangentBuffer</span>);<span class="pl-smi">k</span>.<span class="pl-en">bufferData</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,xa,mb)}<span class="pl-k">if</span>(Sc<span class="pl-k">&amp;&amp;</span>Qb){<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">X</span><span class="pl-k">=</span><span class="pl-smi">oa</span>.<span class="pl-c1">length</span>;<span class="pl-c1">D</span><span class="pl-k">&lt;</span><span class="pl-c1">X</span>;<span class="pl-c1">D</span><span class="pl-k">++</span>)<span class="pl-k">if</span>(<span class="pl-c1">P</span><span class="pl-k">=</span>Ta[oa[<span class="pl-c1">D</span>]],lc<span class="pl-k">=</span><span class="pl-c1">P</span>.<span class="pl-smi">vertexNormals</span>,Yb<span class="pl-k">=</span><span class="pl-c1">P</span>.<span class="pl-smi">normal</span>,<span class="pl-c1">3</span><span class="pl-k">===</span><span class="pl-smi">lc</span>.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>Gc)<span class="pl-k">for</span>(sa<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">3</span><span class="pl-k">&gt;</span>sa;sa<span class="pl-k">++</span>)Zb<span class="pl-k">=</span>lc[sa],ob[Sa]<span class="pl-k">=</span><span class="pl-smi">Zb</span>.<span class="pl-c1">x</span>,ob[Sa<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-smi">Zb</span>.<span class="pl-c1">y</span>,ob[Sa<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-smi">Zb</span>.<span class="pl-c1">z</span>,Sa<span class="pl-k">+=</span><span class="pl-c1">3</span>;<span class="pl-k">else</span> <span class="pl-k">for</span>(sa<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L443" class="blob-num js-line-number" data-line-number="443"></td>
        <td id="LC443" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>;<span class="pl-c1">3</span><span class="pl-k">&gt;</span>sa;sa<span class="pl-k">++</span>)ob[Sa]<span class="pl-k">=</span><span class="pl-smi">Yb</span>.<span class="pl-c1">x</span>,ob[Sa<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-smi">Yb</span>.<span class="pl-c1">y</span>,ob[Sa<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-smi">Yb</span>.<span class="pl-c1">z</span>,Sa<span class="pl-k">+=</span><span class="pl-c1">3</span>;<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">X</span><span class="pl-k">=</span><span class="pl-smi">pa</span>.<span class="pl-c1">length</span>;<span class="pl-c1">D</span><span class="pl-k">&lt;</span><span class="pl-c1">X</span>;<span class="pl-c1">D</span><span class="pl-k">++</span>)<span class="pl-k">if</span>(<span class="pl-c1">P</span><span class="pl-k">=</span>Ta[pa[<span class="pl-c1">D</span>]],lc<span class="pl-k">=</span><span class="pl-c1">P</span>.<span class="pl-smi">vertexNormals</span>,Yb<span class="pl-k">=</span><span class="pl-c1">P</span>.<span class="pl-smi">normal</span>,<span class="pl-c1">4</span><span class="pl-k">===</span><span class="pl-smi">lc</span>.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>Gc)<span class="pl-k">for</span>(sa<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">4</span><span class="pl-k">&gt;</span>sa;sa<span class="pl-k">++</span>)Zb<span class="pl-k">=</span>lc[sa],ob[Sa]<span class="pl-k">=</span><span class="pl-smi">Zb</span>.<span class="pl-c1">x</span>,ob[Sa<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-smi">Zb</span>.<span class="pl-c1">y</span>,ob[Sa<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-smi">Zb</span>.<span class="pl-c1">z</span>,Sa<span class="pl-k">+=</span><span class="pl-c1">3</span>;<span class="pl-k">else</span> <span class="pl-k">for</span>(sa<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">4</span><span class="pl-k">&gt;</span>sa;sa<span class="pl-k">++</span>)ob[Sa]<span class="pl-k">=</span><span class="pl-smi">Yb</span>.<span class="pl-c1">x</span>,ob[Sa<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-smi">Yb</span>.<span class="pl-c1">y</span>,ob[Sa<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-smi">Yb</span>.<span class="pl-c1">z</span>,Sa<span class="pl-k">+=</span><span class="pl-c1">3</span>;<span class="pl-smi">k</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">ma</span>.<span class="pl-smi">__webglNormalBuffer</span>);<span class="pl-smi">k</span>.<span class="pl-en">bufferData</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,ob,mb)}<span class="pl-k">if</span>(bd<span class="pl-k">&amp;&amp;</span>Yc<span class="pl-k">&amp;&amp;</span>hc){<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">X</span><span class="pl-k">=</span><span class="pl-smi">oa</span>.<span class="pl-c1">length</span>;<span class="pl-c1">D</span><span class="pl-k">&lt;</span><span class="pl-c1">X</span>;<span class="pl-c1">D</span><span class="pl-k">++</span>)<span class="pl-k">if</span>(Xb<span class="pl-k">=</span>oa[<span class="pl-c1">D</span>],mc<span class="pl-k">=</span>Yc[Xb],<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>mc)<span class="pl-k">for</span>(sa<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">3</span><span class="pl-k">&gt;</span>sa;sa<span class="pl-k">++</span>)oc<span class="pl-k">=</span>mc[sa],xc[Tb]<span class="pl-k">=</span><span class="pl-smi">oc</span>.<span class="pl-smi">u</span>,xc[Tb<span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L444" class="blob-num js-line-number" data-line-number="444"></td>
        <td id="LC444" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-smi">oc</span>.<span class="pl-smi">v</span>,Tb<span class="pl-k">+=</span><span class="pl-c1">2</span>;<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">X</span><span class="pl-k">=</span><span class="pl-smi">pa</span>.<span class="pl-c1">length</span>;<span class="pl-c1">D</span><span class="pl-k">&lt;</span><span class="pl-c1">X</span>;<span class="pl-c1">D</span><span class="pl-k">++</span>)<span class="pl-k">if</span>(Xb<span class="pl-k">=</span>pa[<span class="pl-c1">D</span>],mc<span class="pl-k">=</span>Yc[Xb],<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>mc)<span class="pl-k">for</span>(sa<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">4</span><span class="pl-k">&gt;</span>sa;sa<span class="pl-k">++</span>)oc<span class="pl-k">=</span>mc[sa],xc[Tb]<span class="pl-k">=</span><span class="pl-smi">oc</span>.<span class="pl-smi">u</span>,xc[Tb<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-smi">oc</span>.<span class="pl-smi">v</span>,Tb<span class="pl-k">+=</span><span class="pl-c1">2</span>;<span class="pl-c1">0</span><span class="pl-k">&lt;</span>Tb<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">k</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">ma</span>.<span class="pl-smi">__webglUVBuffer</span>),<span class="pl-smi">k</span>.<span class="pl-en">bufferData</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,xc,mb))}<span class="pl-k">if</span>(bd<span class="pl-k">&amp;&amp;</span>Zc<span class="pl-k">&amp;&amp;</span>hc){<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">X</span><span class="pl-k">=</span><span class="pl-smi">oa</span>.<span class="pl-c1">length</span>;<span class="pl-c1">D</span><span class="pl-k">&lt;</span><span class="pl-c1">X</span>;<span class="pl-c1">D</span><span class="pl-k">++</span>)<span class="pl-k">if</span>(Xb<span class="pl-k">=</span>oa[<span class="pl-c1">D</span>],nc<span class="pl-k">=</span>Zc[Xb],<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>nc)<span class="pl-k">for</span>(sa<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">3</span><span class="pl-k">&gt;</span>sa;sa<span class="pl-k">++</span>)pc<span class="pl-k">=</span>nc[sa],yc[Ub]<span class="pl-k">=</span><span class="pl-smi">pc</span>.<span class="pl-smi">u</span>,yc[Ub<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-smi">pc</span>.<span class="pl-smi">v</span>,Ub<span class="pl-k">+=</span><span class="pl-c1">2</span>;<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">X</span><span class="pl-k">=</span><span class="pl-smi">pa</span>.<span class="pl-c1">length</span>;<span class="pl-c1">D</span><span class="pl-k">&lt;</span><span class="pl-c1">X</span>;<span class="pl-c1">D</span><span class="pl-k">++</span>)<span class="pl-k">if</span>(Xb<span class="pl-k">=</span>pa[<span class="pl-c1">D</span>],nc<span class="pl-k">=</span>Zc[Xb],<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>nc)<span class="pl-k">for</span>(sa<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">4</span><span class="pl-k">&gt;</span>sa;sa<span class="pl-k">++</span>)pc<span class="pl-k">=</span>nc[sa],yc[Ub]<span class="pl-k">=</span><span class="pl-smi">pc</span>.<span class="pl-smi">u</span>,yc[Ub<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-smi">pc</span>.<span class="pl-smi">v</span>,Ub<span class="pl-k">+=</span><span class="pl-c1">2</span>;<span class="pl-c1">0</span><span class="pl-k">&lt;</span>Ub<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">k</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,</td>
      </tr>
      <tr>
        <td id="L445" class="blob-num js-line-number" data-line-number="445"></td>
        <td id="LC445" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">ma</span>.<span class="pl-smi">__webglUV2Buffer</span>),<span class="pl-smi">k</span>.<span class="pl-en">bufferData</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,yc,mb))}<span class="pl-k">if</span>(Ec){<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">X</span><span class="pl-k">=</span><span class="pl-smi">oa</span>.<span class="pl-c1">length</span>;<span class="pl-c1">D</span><span class="pl-k">&lt;</span><span class="pl-c1">X</span>;<span class="pl-c1">D</span><span class="pl-k">++</span>)Ob[nb]<span class="pl-k">=</span>Ca,Ob[nb<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>Ca<span class="pl-k">+</span><span class="pl-c1">1</span>,Ob[nb<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span>Ca<span class="pl-k">+</span><span class="pl-c1">2</span>,nb<span class="pl-k">+=</span><span class="pl-c1">3</span>,hb[Ya]<span class="pl-k">=</span>Ca,hb[Ya<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>Ca<span class="pl-k">+</span><span class="pl-c1">1</span>,hb[Ya<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span>Ca,hb[Ya<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span>Ca<span class="pl-k">+</span><span class="pl-c1">2</span>,hb[Ya<span class="pl-k">+</span><span class="pl-c1">4</span>]<span class="pl-k">=</span>Ca<span class="pl-k">+</span><span class="pl-c1">1</span>,hb[Ya<span class="pl-k">+</span><span class="pl-c1">5</span>]<span class="pl-k">=</span>Ca<span class="pl-k">+</span><span class="pl-c1">2</span>,Ya<span class="pl-k">+=</span><span class="pl-c1">6</span>,Ca<span class="pl-k">+=</span><span class="pl-c1">3</span>;<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">X</span><span class="pl-k">=</span><span class="pl-smi">pa</span>.<span class="pl-c1">length</span>;<span class="pl-c1">D</span><span class="pl-k">&lt;</span><span class="pl-c1">X</span>;<span class="pl-c1">D</span><span class="pl-k">++</span>)Ob[nb]<span class="pl-k">=</span>Ca,Ob[nb<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>Ca<span class="pl-k">+</span><span class="pl-c1">1</span>,Ob[nb<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span>Ca<span class="pl-k">+</span><span class="pl-c1">3</span>,Ob[nb<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span>Ca<span class="pl-k">+</span><span class="pl-c1">1</span>,Ob[nb<span class="pl-k">+</span><span class="pl-c1">4</span>]<span class="pl-k">=</span>Ca<span class="pl-k">+</span><span class="pl-c1">2</span>,Ob[nb<span class="pl-k">+</span><span class="pl-c1">5</span>]<span class="pl-k">=</span>Ca<span class="pl-k">+</span><span class="pl-c1">3</span>,nb<span class="pl-k">+=</span><span class="pl-c1">6</span>,hb[Ya]<span class="pl-k">=</span>Ca,hb[Ya<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>Ca<span class="pl-k">+</span><span class="pl-c1">1</span>,hb[Ya<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span>Ca,hb[Ya<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span>Ca<span class="pl-k">+</span><span class="pl-c1">3</span>,hb[Ya<span class="pl-k">+</span><span class="pl-c1">4</span>]<span class="pl-k">=</span>Ca<span class="pl-k">+</span><span class="pl-c1">1</span>,hb[Ya<span class="pl-k">+</span><span class="pl-c1">5</span>]<span class="pl-k">=</span>Ca<span class="pl-k">+</span><span class="pl-c1">2</span>,hb[Ya<span class="pl-k">+</span><span class="pl-c1">6</span>]<span class="pl-k">=</span>Ca<span class="pl-k">+</span><span class="pl-c1">2</span>,hb[Ya<span class="pl-k">+</span><span class="pl-c1">7</span>]<span class="pl-k">=</span>Ca<span class="pl-k">+</span><span class="pl-c1">3</span>,Ya<span class="pl-k">+=</span><span class="pl-c1">8</span>,Ca<span class="pl-k">+=</span><span class="pl-c1">4</span>;<span class="pl-smi">k</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ELEMENT_ARRAY_BUFFER</span>,<span class="pl-smi">ma</span>.<span class="pl-smi">__webglFaceBuffer</span>);</td>
      </tr>
      <tr>
        <td id="L446" class="blob-num js-line-number" data-line-number="446"></td>
        <td id="LC446" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">k</span>.<span class="pl-en">bufferData</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ELEMENT_ARRAY_BUFFER</span>,Ob,mb);<span class="pl-smi">k</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ELEMENT_ARRAY_BUFFER</span>,<span class="pl-smi">ma</span>.<span class="pl-smi">__webglLineBuffer</span>);<span class="pl-smi">k</span>.<span class="pl-en">bufferData</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ELEMENT_ARRAY_BUFFER</span>,hb,mb)}<span class="pl-k">if</span>(Xc){sa<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(ic<span class="pl-k">=</span><span class="pl-smi">Xc</span>.<span class="pl-c1">length</span>;sa<span class="pl-k">&lt;</span>ic;sa<span class="pl-k">++</span>)<span class="pl-k">if</span>(w<span class="pl-k">=</span>Xc[sa],<span class="pl-smi">w</span>.<span class="pl-smi">__original</span>.<span class="pl-smi">needsUpdate</span>){x<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-c1">1</span><span class="pl-k">===</span><span class="pl-smi">w</span>.<span class="pl-c1">size</span>)<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">w</span>.<span class="pl-smi">boundTo</span><span class="pl-k">||</span><span class="pl-s"><span class="pl-pds">&quot;</span>vertices<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-smi">w</span>.<span class="pl-smi">boundTo</span>){<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">X</span><span class="pl-k">=</span><span class="pl-smi">oa</span>.<span class="pl-c1">length</span>;<span class="pl-c1">D</span><span class="pl-k">&lt;</span><span class="pl-c1">X</span>;<span class="pl-c1">D</span><span class="pl-k">++</span>)<span class="pl-c1">P</span><span class="pl-k">=</span>Ta[oa[<span class="pl-c1">D</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x]<span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-c1">value</span>[<span class="pl-c1">P</span>.<span class="pl-smi">a</span>],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-c1">value</span>[<span class="pl-c1">P</span>.<span class="pl-smi">b</span>],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-c1">value</span>[<span class="pl-c1">P</span>.<span class="pl-smi">c</span>],x<span class="pl-k">+=</span><span class="pl-c1">3</span>;<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">X</span><span class="pl-k">=</span><span class="pl-smi">pa</span>.<span class="pl-c1">length</span>;<span class="pl-c1">D</span><span class="pl-k">&lt;</span><span class="pl-c1">X</span>;<span class="pl-c1">D</span><span class="pl-k">++</span>)<span class="pl-c1">P</span><span class="pl-k">=</span>Ta[pa[<span class="pl-c1">D</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x]<span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-c1">value</span>[<span class="pl-c1">P</span>.<span class="pl-smi">a</span>],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-c1">value</span>[<span class="pl-c1">P</span>.<span class="pl-smi">b</span>],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L447" class="blob-num js-line-number" data-line-number="447"></td>
        <td id="LC447" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-c1">value</span>[<span class="pl-c1">P</span>.<span class="pl-smi">c</span>],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-c1">value</span>[<span class="pl-c1">P</span>.<span class="pl-smi">d</span>],x<span class="pl-k">+=</span><span class="pl-c1">4</span>}<span class="pl-k">else</span>{<span class="pl-k">if</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>faces<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-smi">w</span>.<span class="pl-smi">boundTo</span>){<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">X</span><span class="pl-k">=</span><span class="pl-smi">oa</span>.<span class="pl-c1">length</span>;<span class="pl-c1">D</span><span class="pl-k">&lt;</span><span class="pl-c1">X</span>;<span class="pl-c1">D</span><span class="pl-k">++</span>)ta<span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-c1">value</span>[oa[<span class="pl-c1">D</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x]<span class="pl-k">=</span>ta,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>ta,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span>ta,x<span class="pl-k">+=</span><span class="pl-c1">3</span>;<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">X</span><span class="pl-k">=</span><span class="pl-smi">pa</span>.<span class="pl-c1">length</span>;<span class="pl-c1">D</span><span class="pl-k">&lt;</span><span class="pl-c1">X</span>;<span class="pl-c1">D</span><span class="pl-k">++</span>)ta<span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-c1">value</span>[pa[<span class="pl-c1">D</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x]<span class="pl-k">=</span>ta,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>ta,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span>ta,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span>ta,x<span class="pl-k">+=</span><span class="pl-c1">4</span>}}<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-c1">2</span><span class="pl-k">===</span><span class="pl-smi">w</span>.<span class="pl-c1">size</span>)<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">w</span>.<span class="pl-smi">boundTo</span><span class="pl-k">||</span><span class="pl-s"><span class="pl-pds">&quot;</span>vertices<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-smi">w</span>.<span class="pl-smi">boundTo</span>){<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">X</span><span class="pl-k">=</span><span class="pl-smi">oa</span>.<span class="pl-c1">length</span>;<span class="pl-c1">D</span><span class="pl-k">&lt;</span><span class="pl-c1">X</span>;<span class="pl-c1">D</span><span class="pl-k">++</span>)<span class="pl-c1">P</span><span class="pl-k">=</span>Ta[oa[<span class="pl-c1">D</span>]],<span class="pl-c1">S</span><span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-c1">value</span>[<span class="pl-c1">P</span>.<span class="pl-smi">a</span>],<span class="pl-c1">T</span><span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-c1">value</span>[<span class="pl-c1">P</span>.<span class="pl-smi">b</span>],<span class="pl-c1">U</span><span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-c1">value</span>[<span class="pl-c1">P</span>.<span class="pl-smi">c</span>],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x]<span class="pl-k">=</span><span class="pl-c1">S</span>.<span class="pl-c1">x</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-c1">S</span>.<span class="pl-c1">y</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-c1">T</span>.<span class="pl-c1">x</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span><span class="pl-c1">T</span>.<span class="pl-c1">y</span>,</td>
      </tr>
      <tr>
        <td id="L448" class="blob-num js-line-number" data-line-number="448"></td>
        <td id="LC448" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">4</span>]<span class="pl-k">=</span><span class="pl-c1">U</span>.<span class="pl-c1">x</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">5</span>]<span class="pl-k">=</span><span class="pl-c1">U</span>.<span class="pl-c1">y</span>,x<span class="pl-k">+=</span><span class="pl-c1">6</span>;<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">X</span><span class="pl-k">=</span><span class="pl-smi">pa</span>.<span class="pl-c1">length</span>;<span class="pl-c1">D</span><span class="pl-k">&lt;</span><span class="pl-c1">X</span>;<span class="pl-c1">D</span><span class="pl-k">++</span>)<span class="pl-c1">P</span><span class="pl-k">=</span>Ta[pa[<span class="pl-c1">D</span>]],<span class="pl-c1">S</span><span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-c1">value</span>[<span class="pl-c1">P</span>.<span class="pl-smi">a</span>],<span class="pl-c1">T</span><span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-c1">value</span>[<span class="pl-c1">P</span>.<span class="pl-smi">b</span>],<span class="pl-c1">U</span><span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-c1">value</span>[<span class="pl-c1">P</span>.<span class="pl-smi">c</span>],ka<span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-c1">value</span>[<span class="pl-c1">P</span>.<span class="pl-smi">d</span>],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x]<span class="pl-k">=</span><span class="pl-c1">S</span>.<span class="pl-c1">x</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-c1">S</span>.<span class="pl-c1">y</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-c1">T</span>.<span class="pl-c1">x</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span><span class="pl-c1">T</span>.<span class="pl-c1">y</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">4</span>]<span class="pl-k">=</span><span class="pl-c1">U</span>.<span class="pl-c1">x</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">5</span>]<span class="pl-k">=</span><span class="pl-c1">U</span>.<span class="pl-c1">y</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">6</span>]<span class="pl-k">=</span><span class="pl-smi">ka</span>.<span class="pl-c1">x</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">7</span>]<span class="pl-k">=</span><span class="pl-smi">ka</span>.<span class="pl-c1">y</span>,x<span class="pl-k">+=</span><span class="pl-c1">8</span>}<span class="pl-k">else</span>{<span class="pl-k">if</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>faces<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-smi">w</span>.<span class="pl-smi">boundTo</span>){<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">X</span><span class="pl-k">=</span><span class="pl-smi">oa</span>.<span class="pl-c1">length</span>;<span class="pl-c1">D</span><span class="pl-k">&lt;</span><span class="pl-c1">X</span>;<span class="pl-c1">D</span><span class="pl-k">++</span>)<span class="pl-c1">U</span><span class="pl-k">=</span><span class="pl-c1">T</span><span class="pl-k">=</span><span class="pl-c1">S</span><span class="pl-k">=</span>ta<span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-c1">value</span>[oa[<span class="pl-c1">D</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x]<span class="pl-k">=</span><span class="pl-c1">S</span>.<span class="pl-c1">x</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-c1">S</span>.<span class="pl-c1">y</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-c1">T</span>.<span class="pl-c1">x</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span><span class="pl-c1">T</span>.<span class="pl-c1">y</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">4</span>]<span class="pl-k">=</span><span class="pl-c1">U</span>.<span class="pl-c1">x</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">5</span>]<span class="pl-k">=</span><span class="pl-c1">U</span>.<span class="pl-c1">y</span>,x<span class="pl-k">+=</span><span class="pl-c1">6</span>;<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">X</span><span class="pl-k">=</span><span class="pl-smi">pa</span>.<span class="pl-c1">length</span>;<span class="pl-c1">D</span><span class="pl-k">&lt;</span><span class="pl-c1">X</span>;<span class="pl-c1">D</span><span class="pl-k">++</span>)ka<span class="pl-k">=</span><span class="pl-c1">U</span><span class="pl-k">=</span><span class="pl-c1">T</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L449" class="blob-num js-line-number" data-line-number="449"></td>
        <td id="LC449" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">S</span><span class="pl-k">=</span>ta<span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-c1">value</span>[pa[<span class="pl-c1">D</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x]<span class="pl-k">=</span><span class="pl-c1">S</span>.<span class="pl-c1">x</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-c1">S</span>.<span class="pl-c1">y</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-c1">T</span>.<span class="pl-c1">x</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span><span class="pl-c1">T</span>.<span class="pl-c1">y</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">4</span>]<span class="pl-k">=</span><span class="pl-c1">U</span>.<span class="pl-c1">x</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">5</span>]<span class="pl-k">=</span><span class="pl-c1">U</span>.<span class="pl-c1">y</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">6</span>]<span class="pl-k">=</span><span class="pl-smi">ka</span>.<span class="pl-c1">x</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">7</span>]<span class="pl-k">=</span><span class="pl-smi">ka</span>.<span class="pl-c1">y</span>,x<span class="pl-k">+=</span><span class="pl-c1">8</span>}}<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-c1">3</span><span class="pl-k">===</span><span class="pl-smi">w</span>.<span class="pl-c1">size</span>){<span class="pl-k">var</span> ba;ba<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>c<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-smi">w</span>.<span class="pl-c1">type</span><span class="pl-k">?</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>r<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>g<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>b<span class="pl-pds">&quot;</span></span>]<span class="pl-k">:</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>x<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>y<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>z<span class="pl-pds">&quot;</span></span>];<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">w</span>.<span class="pl-smi">boundTo</span><span class="pl-k">||</span><span class="pl-s"><span class="pl-pds">&quot;</span>vertices<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-smi">w</span>.<span class="pl-smi">boundTo</span>){<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">X</span><span class="pl-k">=</span><span class="pl-smi">oa</span>.<span class="pl-c1">length</span>;<span class="pl-c1">D</span><span class="pl-k">&lt;</span><span class="pl-c1">X</span>;<span class="pl-c1">D</span><span class="pl-k">++</span>)<span class="pl-c1">P</span><span class="pl-k">=</span>Ta[oa[<span class="pl-c1">D</span>]],<span class="pl-c1">S</span><span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-c1">value</span>[<span class="pl-c1">P</span>.<span class="pl-smi">a</span>],<span class="pl-c1">T</span><span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-c1">value</span>[<span class="pl-c1">P</span>.<span class="pl-smi">b</span>],<span class="pl-c1">U</span><span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-c1">value</span>[<span class="pl-c1">P</span>.<span class="pl-smi">c</span>],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x]<span class="pl-k">=</span><span class="pl-c1">S</span>[ba[<span class="pl-c1">0</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-c1">S</span>[ba[<span class="pl-c1">1</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-c1">S</span>[ba[<span class="pl-c1">2</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span><span class="pl-c1">T</span>[ba[<span class="pl-c1">0</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">4</span>]<span class="pl-k">=</span><span class="pl-c1">T</span>[ba[<span class="pl-c1">1</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">5</span>]<span class="pl-k">=</span><span class="pl-c1">T</span>[ba[<span class="pl-c1">2</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L450" class="blob-num js-line-number" data-line-number="450"></td>
        <td id="LC450" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">6</span>]<span class="pl-k">=</span><span class="pl-c1">U</span>[ba[<span class="pl-c1">0</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">7</span>]<span class="pl-k">=</span><span class="pl-c1">U</span>[ba[<span class="pl-c1">1</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">8</span>]<span class="pl-k">=</span><span class="pl-c1">U</span>[ba[<span class="pl-c1">2</span>]],x<span class="pl-k">+=</span><span class="pl-c1">9</span>;<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">X</span><span class="pl-k">=</span><span class="pl-smi">pa</span>.<span class="pl-c1">length</span>;<span class="pl-c1">D</span><span class="pl-k">&lt;</span><span class="pl-c1">X</span>;<span class="pl-c1">D</span><span class="pl-k">++</span>)<span class="pl-c1">P</span><span class="pl-k">=</span>Ta[pa[<span class="pl-c1">D</span>]],<span class="pl-c1">S</span><span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-c1">value</span>[<span class="pl-c1">P</span>.<span class="pl-smi">a</span>],<span class="pl-c1">T</span><span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-c1">value</span>[<span class="pl-c1">P</span>.<span class="pl-smi">b</span>],<span class="pl-c1">U</span><span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-c1">value</span>[<span class="pl-c1">P</span>.<span class="pl-smi">c</span>],ka<span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-c1">value</span>[<span class="pl-c1">P</span>.<span class="pl-smi">d</span>],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x]<span class="pl-k">=</span><span class="pl-c1">S</span>[ba[<span class="pl-c1">0</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-c1">S</span>[ba[<span class="pl-c1">1</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-c1">S</span>[ba[<span class="pl-c1">2</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span><span class="pl-c1">T</span>[ba[<span class="pl-c1">0</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">4</span>]<span class="pl-k">=</span><span class="pl-c1">T</span>[ba[<span class="pl-c1">1</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">5</span>]<span class="pl-k">=</span><span class="pl-c1">T</span>[ba[<span class="pl-c1">2</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">6</span>]<span class="pl-k">=</span><span class="pl-c1">U</span>[ba[<span class="pl-c1">0</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">7</span>]<span class="pl-k">=</span><span class="pl-c1">U</span>[ba[<span class="pl-c1">1</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">8</span>]<span class="pl-k">=</span><span class="pl-c1">U</span>[ba[<span class="pl-c1">2</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">9</span>]<span class="pl-k">=</span>ka[ba[<span class="pl-c1">0</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">10</span>]<span class="pl-k">=</span>ka[ba[<span class="pl-c1">1</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">11</span>]<span class="pl-k">=</span>ka[ba[<span class="pl-c1">2</span>]],x<span class="pl-k">+=</span><span class="pl-c1">12</span>}<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>faces<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-smi">w</span>.<span class="pl-smi">boundTo</span>){<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">X</span><span class="pl-k">=</span><span class="pl-smi">oa</span>.<span class="pl-c1">length</span>;<span class="pl-c1">D</span><span class="pl-k">&lt;</span><span class="pl-c1">X</span>;<span class="pl-c1">D</span><span class="pl-k">++</span>)<span class="pl-c1">U</span><span class="pl-k">=</span><span class="pl-c1">T</span><span class="pl-k">=</span><span class="pl-c1">S</span><span class="pl-k">=</span>ta<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L451" class="blob-num js-line-number" data-line-number="451"></td>
        <td id="LC451" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">w</span>.<span class="pl-c1">value</span>[oa[<span class="pl-c1">D</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x]<span class="pl-k">=</span><span class="pl-c1">S</span>[ba[<span class="pl-c1">0</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-c1">S</span>[ba[<span class="pl-c1">1</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-c1">S</span>[ba[<span class="pl-c1">2</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span><span class="pl-c1">T</span>[ba[<span class="pl-c1">0</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">4</span>]<span class="pl-k">=</span><span class="pl-c1">T</span>[ba[<span class="pl-c1">1</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">5</span>]<span class="pl-k">=</span><span class="pl-c1">T</span>[ba[<span class="pl-c1">2</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">6</span>]<span class="pl-k">=</span><span class="pl-c1">U</span>[ba[<span class="pl-c1">0</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">7</span>]<span class="pl-k">=</span><span class="pl-c1">U</span>[ba[<span class="pl-c1">1</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">8</span>]<span class="pl-k">=</span><span class="pl-c1">U</span>[ba[<span class="pl-c1">2</span>]],x<span class="pl-k">+=</span><span class="pl-c1">9</span>;<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">X</span><span class="pl-k">=</span><span class="pl-smi">pa</span>.<span class="pl-c1">length</span>;<span class="pl-c1">D</span><span class="pl-k">&lt;</span><span class="pl-c1">X</span>;<span class="pl-c1">D</span><span class="pl-k">++</span>)ka<span class="pl-k">=</span><span class="pl-c1">U</span><span class="pl-k">=</span><span class="pl-c1">T</span><span class="pl-k">=</span><span class="pl-c1">S</span><span class="pl-k">=</span>ta<span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-c1">value</span>[pa[<span class="pl-c1">D</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x]<span class="pl-k">=</span><span class="pl-c1">S</span>[ba[<span class="pl-c1">0</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-c1">S</span>[ba[<span class="pl-c1">1</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-c1">S</span>[ba[<span class="pl-c1">2</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span><span class="pl-c1">T</span>[ba[<span class="pl-c1">0</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">4</span>]<span class="pl-k">=</span><span class="pl-c1">T</span>[ba[<span class="pl-c1">1</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">5</span>]<span class="pl-k">=</span><span class="pl-c1">T</span>[ba[<span class="pl-c1">2</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">6</span>]<span class="pl-k">=</span><span class="pl-c1">U</span>[ba[<span class="pl-c1">0</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">7</span>]<span class="pl-k">=</span><span class="pl-c1">U</span>[ba[<span class="pl-c1">1</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">8</span>]<span class="pl-k">=</span><span class="pl-c1">U</span>[ba[<span class="pl-c1">2</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">9</span>]<span class="pl-k">=</span>ka[ba[<span class="pl-c1">0</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">10</span>]<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L452" class="blob-num js-line-number" data-line-number="452"></td>
        <td id="LC452" class="blob-code blob-code-inner js-file-line">ka[ba[<span class="pl-c1">1</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">11</span>]<span class="pl-k">=</span>ka[ba[<span class="pl-c1">2</span>]],x<span class="pl-k">+=</span><span class="pl-c1">12</span>}<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>faceVertices<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-smi">w</span>.<span class="pl-smi">boundTo</span>){<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">X</span><span class="pl-k">=</span><span class="pl-smi">oa</span>.<span class="pl-c1">length</span>;<span class="pl-c1">D</span><span class="pl-k">&lt;</span><span class="pl-c1">X</span>;<span class="pl-c1">D</span><span class="pl-k">++</span>)ta<span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-c1">value</span>[oa[<span class="pl-c1">D</span>]],<span class="pl-c1">S</span><span class="pl-k">=</span>ta[<span class="pl-c1">0</span>],<span class="pl-c1">T</span><span class="pl-k">=</span>ta[<span class="pl-c1">1</span>],<span class="pl-c1">U</span><span class="pl-k">=</span>ta[<span class="pl-c1">2</span>],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x]<span class="pl-k">=</span><span class="pl-c1">S</span>[ba[<span class="pl-c1">0</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-c1">S</span>[ba[<span class="pl-c1">1</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-c1">S</span>[ba[<span class="pl-c1">2</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span><span class="pl-c1">T</span>[ba[<span class="pl-c1">0</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">4</span>]<span class="pl-k">=</span><span class="pl-c1">T</span>[ba[<span class="pl-c1">1</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">5</span>]<span class="pl-k">=</span><span class="pl-c1">T</span>[ba[<span class="pl-c1">2</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">6</span>]<span class="pl-k">=</span><span class="pl-c1">U</span>[ba[<span class="pl-c1">0</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">7</span>]<span class="pl-k">=</span><span class="pl-c1">U</span>[ba[<span class="pl-c1">1</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">8</span>]<span class="pl-k">=</span><span class="pl-c1">U</span>[ba[<span class="pl-c1">2</span>]],x<span class="pl-k">+=</span><span class="pl-c1">9</span>;<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">X</span><span class="pl-k">=</span><span class="pl-smi">pa</span>.<span class="pl-c1">length</span>;<span class="pl-c1">D</span><span class="pl-k">&lt;</span><span class="pl-c1">X</span>;<span class="pl-c1">D</span><span class="pl-k">++</span>)ta<span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-c1">value</span>[pa[<span class="pl-c1">D</span>]],<span class="pl-c1">S</span><span class="pl-k">=</span>ta[<span class="pl-c1">0</span>],<span class="pl-c1">T</span><span class="pl-k">=</span>ta[<span class="pl-c1">1</span>],<span class="pl-c1">U</span><span class="pl-k">=</span>ta[<span class="pl-c1">2</span>],ka<span class="pl-k">=</span>ta[<span class="pl-c1">3</span>],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x]<span class="pl-k">=</span><span class="pl-c1">S</span>[ba[<span class="pl-c1">0</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-c1">S</span>[ba[<span class="pl-c1">1</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-c1">S</span>[ba[<span class="pl-c1">2</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L453" class="blob-num js-line-number" data-line-number="453"></td>
        <td id="LC453" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">T</span>[ba[<span class="pl-c1">0</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">4</span>]<span class="pl-k">=</span><span class="pl-c1">T</span>[ba[<span class="pl-c1">1</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">5</span>]<span class="pl-k">=</span><span class="pl-c1">T</span>[ba[<span class="pl-c1">2</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">6</span>]<span class="pl-k">=</span><span class="pl-c1">U</span>[ba[<span class="pl-c1">0</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">7</span>]<span class="pl-k">=</span><span class="pl-c1">U</span>[ba[<span class="pl-c1">1</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">8</span>]<span class="pl-k">=</span><span class="pl-c1">U</span>[ba[<span class="pl-c1">2</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">9</span>]<span class="pl-k">=</span>ka[ba[<span class="pl-c1">0</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">10</span>]<span class="pl-k">=</span>ka[ba[<span class="pl-c1">1</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">11</span>]<span class="pl-k">=</span>ka[ba[<span class="pl-c1">2</span>]],x<span class="pl-k">+=</span><span class="pl-c1">12</span>}}<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-c1">4</span><span class="pl-k">===</span><span class="pl-smi">w</span>.<span class="pl-c1">size</span>)<span class="pl-k">if</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">w</span>.<span class="pl-smi">boundTo</span><span class="pl-k">||</span><span class="pl-s"><span class="pl-pds">&quot;</span>vertices<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-smi">w</span>.<span class="pl-smi">boundTo</span>){<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">X</span><span class="pl-k">=</span><span class="pl-smi">oa</span>.<span class="pl-c1">length</span>;<span class="pl-c1">D</span><span class="pl-k">&lt;</span><span class="pl-c1">X</span>;<span class="pl-c1">D</span><span class="pl-k">++</span>)<span class="pl-c1">P</span><span class="pl-k">=</span>Ta[oa[<span class="pl-c1">D</span>]],<span class="pl-c1">S</span><span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-c1">value</span>[<span class="pl-c1">P</span>.<span class="pl-smi">a</span>],<span class="pl-c1">T</span><span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-c1">value</span>[<span class="pl-c1">P</span>.<span class="pl-smi">b</span>],<span class="pl-c1">U</span><span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-c1">value</span>[<span class="pl-c1">P</span>.<span class="pl-smi">c</span>],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x]<span class="pl-k">=</span><span class="pl-c1">S</span>.<span class="pl-c1">x</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-c1">S</span>.<span class="pl-c1">y</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-c1">S</span>.<span class="pl-c1">z</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span><span class="pl-c1">S</span>.<span class="pl-smi">w</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">4</span>]<span class="pl-k">=</span><span class="pl-c1">T</span>.<span class="pl-c1">x</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">5</span>]<span class="pl-k">=</span><span class="pl-c1">T</span>.<span class="pl-c1">y</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">6</span>]<span class="pl-k">=</span><span class="pl-c1">T</span>.<span class="pl-c1">z</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">7</span>]<span class="pl-k">=</span><span class="pl-c1">T</span>.<span class="pl-smi">w</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">8</span>]<span class="pl-k">=</span><span class="pl-c1">U</span>.<span class="pl-c1">x</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L454" class="blob-num js-line-number" data-line-number="454"></td>
        <td id="LC454" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">9</span>]<span class="pl-k">=</span><span class="pl-c1">U</span>.<span class="pl-c1">y</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">10</span>]<span class="pl-k">=</span><span class="pl-c1">U</span>.<span class="pl-c1">z</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">11</span>]<span class="pl-k">=</span><span class="pl-c1">U</span>.<span class="pl-smi">w</span>,x<span class="pl-k">+=</span><span class="pl-c1">12</span>;<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">X</span><span class="pl-k">=</span><span class="pl-smi">pa</span>.<span class="pl-c1">length</span>;<span class="pl-c1">D</span><span class="pl-k">&lt;</span><span class="pl-c1">X</span>;<span class="pl-c1">D</span><span class="pl-k">++</span>)<span class="pl-c1">P</span><span class="pl-k">=</span>Ta[pa[<span class="pl-c1">D</span>]],<span class="pl-c1">S</span><span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-c1">value</span>[<span class="pl-c1">P</span>.<span class="pl-smi">a</span>],<span class="pl-c1">T</span><span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-c1">value</span>[<span class="pl-c1">P</span>.<span class="pl-smi">b</span>],<span class="pl-c1">U</span><span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-c1">value</span>[<span class="pl-c1">P</span>.<span class="pl-smi">c</span>],ka<span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-c1">value</span>[<span class="pl-c1">P</span>.<span class="pl-smi">d</span>],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x]<span class="pl-k">=</span><span class="pl-c1">S</span>.<span class="pl-c1">x</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-c1">S</span>.<span class="pl-c1">y</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-c1">S</span>.<span class="pl-c1">z</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span><span class="pl-c1">S</span>.<span class="pl-smi">w</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">4</span>]<span class="pl-k">=</span><span class="pl-c1">T</span>.<span class="pl-c1">x</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">5</span>]<span class="pl-k">=</span><span class="pl-c1">T</span>.<span class="pl-c1">y</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">6</span>]<span class="pl-k">=</span><span class="pl-c1">T</span>.<span class="pl-c1">z</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">7</span>]<span class="pl-k">=</span><span class="pl-c1">T</span>.<span class="pl-smi">w</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">8</span>]<span class="pl-k">=</span><span class="pl-c1">U</span>.<span class="pl-c1">x</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">9</span>]<span class="pl-k">=</span><span class="pl-c1">U</span>.<span class="pl-c1">y</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">10</span>]<span class="pl-k">=</span><span class="pl-c1">U</span>.<span class="pl-c1">z</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">11</span>]<span class="pl-k">=</span><span class="pl-c1">U</span>.<span class="pl-smi">w</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">12</span>]<span class="pl-k">=</span><span class="pl-smi">ka</span>.<span class="pl-c1">x</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">13</span>]<span class="pl-k">=</span><span class="pl-smi">ka</span>.<span class="pl-c1">y</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">14</span>]<span class="pl-k">=</span><span class="pl-smi">ka</span>.<span class="pl-c1">z</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">15</span>]<span class="pl-k">=</span><span class="pl-smi">ka</span>.<span class="pl-smi">w</span>,x<span class="pl-k">+=</span><span class="pl-c1">16</span>}<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>faces<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-smi">w</span>.<span class="pl-smi">boundTo</span>){<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">X</span><span class="pl-k">=</span><span class="pl-smi">oa</span>.<span class="pl-c1">length</span>;<span class="pl-c1">D</span><span class="pl-k">&lt;</span><span class="pl-c1">X</span>;<span class="pl-c1">D</span><span class="pl-k">++</span>)<span class="pl-c1">U</span><span class="pl-k">=</span><span class="pl-c1">T</span><span class="pl-k">=</span><span class="pl-c1">S</span><span class="pl-k">=</span>ta<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L455" class="blob-num js-line-number" data-line-number="455"></td>
        <td id="LC455" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">w</span>.<span class="pl-c1">value</span>[oa[<span class="pl-c1">D</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x]<span class="pl-k">=</span><span class="pl-c1">S</span>.<span class="pl-c1">x</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-c1">S</span>.<span class="pl-c1">y</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-c1">S</span>.<span class="pl-c1">z</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span><span class="pl-c1">S</span>.<span class="pl-smi">w</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">4</span>]<span class="pl-k">=</span><span class="pl-c1">T</span>.<span class="pl-c1">x</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">5</span>]<span class="pl-k">=</span><span class="pl-c1">T</span>.<span class="pl-c1">y</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">6</span>]<span class="pl-k">=</span><span class="pl-c1">T</span>.<span class="pl-c1">z</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">7</span>]<span class="pl-k">=</span><span class="pl-c1">T</span>.<span class="pl-smi">w</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">8</span>]<span class="pl-k">=</span><span class="pl-c1">U</span>.<span class="pl-c1">x</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">9</span>]<span class="pl-k">=</span><span class="pl-c1">U</span>.<span class="pl-c1">y</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">10</span>]<span class="pl-k">=</span><span class="pl-c1">U</span>.<span class="pl-c1">z</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">11</span>]<span class="pl-k">=</span><span class="pl-c1">U</span>.<span class="pl-smi">w</span>,x<span class="pl-k">+=</span><span class="pl-c1">12</span>;<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">X</span><span class="pl-k">=</span><span class="pl-smi">pa</span>.<span class="pl-c1">length</span>;<span class="pl-c1">D</span><span class="pl-k">&lt;</span><span class="pl-c1">X</span>;<span class="pl-c1">D</span><span class="pl-k">++</span>)ka<span class="pl-k">=</span><span class="pl-c1">U</span><span class="pl-k">=</span><span class="pl-c1">T</span><span class="pl-k">=</span><span class="pl-c1">S</span><span class="pl-k">=</span>ta<span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-c1">value</span>[pa[<span class="pl-c1">D</span>]],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x]<span class="pl-k">=</span><span class="pl-c1">S</span>.<span class="pl-c1">x</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-c1">S</span>.<span class="pl-c1">y</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-c1">S</span>.<span class="pl-c1">z</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span><span class="pl-c1">S</span>.<span class="pl-smi">w</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">4</span>]<span class="pl-k">=</span><span class="pl-c1">T</span>.<span class="pl-c1">x</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">5</span>]<span class="pl-k">=</span><span class="pl-c1">T</span>.<span class="pl-c1">y</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">6</span>]<span class="pl-k">=</span><span class="pl-c1">T</span>.<span class="pl-c1">z</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">7</span>]<span class="pl-k">=</span><span class="pl-c1">T</span>.<span class="pl-smi">w</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">8</span>]<span class="pl-k">=</span><span class="pl-c1">U</span>.<span class="pl-c1">x</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">9</span>]<span class="pl-k">=</span><span class="pl-c1">U</span>.<span class="pl-c1">y</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">10</span>]<span class="pl-k">=</span><span class="pl-c1">U</span>.<span class="pl-c1">z</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">11</span>]<span class="pl-k">=</span><span class="pl-c1">U</span>.<span class="pl-smi">w</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">12</span>]<span class="pl-k">=</span><span class="pl-smi">ka</span>.<span class="pl-c1">x</span>,</td>
      </tr>
      <tr>
        <td id="L456" class="blob-num js-line-number" data-line-number="456"></td>
        <td id="LC456" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">13</span>]<span class="pl-k">=</span><span class="pl-smi">ka</span>.<span class="pl-c1">y</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">14</span>]<span class="pl-k">=</span><span class="pl-smi">ka</span>.<span class="pl-c1">z</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">15</span>]<span class="pl-k">=</span><span class="pl-smi">ka</span>.<span class="pl-smi">w</span>,x<span class="pl-k">+=</span><span class="pl-c1">16</span>}<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>faceVertices<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-smi">w</span>.<span class="pl-smi">boundTo</span>){<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">X</span><span class="pl-k">=</span><span class="pl-smi">oa</span>.<span class="pl-c1">length</span>;<span class="pl-c1">D</span><span class="pl-k">&lt;</span><span class="pl-c1">X</span>;<span class="pl-c1">D</span><span class="pl-k">++</span>)ta<span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-c1">value</span>[oa[<span class="pl-c1">D</span>]],<span class="pl-c1">S</span><span class="pl-k">=</span>ta[<span class="pl-c1">0</span>],<span class="pl-c1">T</span><span class="pl-k">=</span>ta[<span class="pl-c1">1</span>],<span class="pl-c1">U</span><span class="pl-k">=</span>ta[<span class="pl-c1">2</span>],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x]<span class="pl-k">=</span><span class="pl-c1">S</span>.<span class="pl-c1">x</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-c1">S</span>.<span class="pl-c1">y</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-c1">S</span>.<span class="pl-c1">z</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span><span class="pl-c1">S</span>.<span class="pl-smi">w</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">4</span>]<span class="pl-k">=</span><span class="pl-c1">T</span>.<span class="pl-c1">x</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">5</span>]<span class="pl-k">=</span><span class="pl-c1">T</span>.<span class="pl-c1">y</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">6</span>]<span class="pl-k">=</span><span class="pl-c1">T</span>.<span class="pl-c1">z</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">7</span>]<span class="pl-k">=</span><span class="pl-c1">T</span>.<span class="pl-smi">w</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">8</span>]<span class="pl-k">=</span><span class="pl-c1">U</span>.<span class="pl-c1">x</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">9</span>]<span class="pl-k">=</span><span class="pl-c1">U</span>.<span class="pl-c1">y</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">10</span>]<span class="pl-k">=</span><span class="pl-c1">U</span>.<span class="pl-c1">z</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">11</span>]<span class="pl-k">=</span><span class="pl-c1">U</span>.<span class="pl-smi">w</span>,x<span class="pl-k">+=</span><span class="pl-c1">12</span>;<span class="pl-c1">D</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">X</span><span class="pl-k">=</span><span class="pl-smi">pa</span>.<span class="pl-c1">length</span>;<span class="pl-c1">D</span><span class="pl-k">&lt;</span><span class="pl-c1">X</span>;<span class="pl-c1">D</span><span class="pl-k">++</span>)ta<span class="pl-k">=</span><span class="pl-smi">w</span>.<span class="pl-c1">value</span>[pa[<span class="pl-c1">D</span>]],<span class="pl-c1">S</span><span class="pl-k">=</span>ta[<span class="pl-c1">0</span>],<span class="pl-c1">T</span><span class="pl-k">=</span>ta[<span class="pl-c1">1</span>],<span class="pl-c1">U</span><span class="pl-k">=</span>ta[<span class="pl-c1">2</span>],ka<span class="pl-k">=</span>ta[<span class="pl-c1">3</span>],<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x]<span class="pl-k">=</span><span class="pl-c1">S</span>.<span class="pl-c1">x</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-c1">S</span>.<span class="pl-c1">y</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L457" class="blob-num js-line-number" data-line-number="457"></td>
        <td id="LC457" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">S</span>.<span class="pl-c1">z</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span><span class="pl-c1">S</span>.<span class="pl-smi">w</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">4</span>]<span class="pl-k">=</span><span class="pl-c1">T</span>.<span class="pl-c1">x</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">5</span>]<span class="pl-k">=</span><span class="pl-c1">T</span>.<span class="pl-c1">y</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">6</span>]<span class="pl-k">=</span><span class="pl-c1">T</span>.<span class="pl-c1">z</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">7</span>]<span class="pl-k">=</span><span class="pl-c1">T</span>.<span class="pl-smi">w</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">8</span>]<span class="pl-k">=</span><span class="pl-c1">U</span>.<span class="pl-c1">x</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">9</span>]<span class="pl-k">=</span><span class="pl-c1">U</span>.<span class="pl-c1">y</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">10</span>]<span class="pl-k">=</span><span class="pl-c1">U</span>.<span class="pl-c1">z</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">11</span>]<span class="pl-k">=</span><span class="pl-c1">U</span>.<span class="pl-smi">w</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">12</span>]<span class="pl-k">=</span><span class="pl-smi">ka</span>.<span class="pl-c1">x</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">13</span>]<span class="pl-k">=</span><span class="pl-smi">ka</span>.<span class="pl-c1">y</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">14</span>]<span class="pl-k">=</span><span class="pl-smi">ka</span>.<span class="pl-c1">z</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>[x<span class="pl-k">+</span><span class="pl-c1">15</span>]<span class="pl-k">=</span><span class="pl-smi">ka</span>.<span class="pl-smi">w</span>,x<span class="pl-k">+=</span><span class="pl-c1">16</span>}<span class="pl-smi">k</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">w</span>.<span class="pl-smi">buffer</span>);<span class="pl-smi">k</span>.<span class="pl-en">bufferData</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">w</span>.<span class="pl-smi">array</span>,mb)}}yb<span class="pl-k">&amp;&amp;</span>(<span class="pl-k">delete</span> <span class="pl-smi">ma</span>.<span class="pl-smi">__inittedArrays</span>,<span class="pl-k">delete</span> <span class="pl-smi">ma</span>.<span class="pl-smi">__colorArray</span>,<span class="pl-k">delete</span> <span class="pl-smi">ma</span>.<span class="pl-smi">__normalArray</span>,<span class="pl-k">delete</span> <span class="pl-smi">ma</span>.<span class="pl-smi">__tangentArray</span>,<span class="pl-k">delete</span> <span class="pl-smi">ma</span>.<span class="pl-smi">__uvArray</span>,<span class="pl-k">delete</span> <span class="pl-smi">ma</span>.<span class="pl-smi">__uv2Array</span>,<span class="pl-k">delete</span> <span class="pl-smi">ma</span>.<span class="pl-smi">__faceArray</span>,<span class="pl-k">delete</span> <span class="pl-smi">ma</span>.<span class="pl-smi">__vertexArray</span>,</td>
      </tr>
      <tr>
        <td id="L458" class="blob-num js-line-number" data-line-number="458"></td>
        <td id="LC458" class="blob-code blob-code-inner js-file-line"><span class="pl-k">delete</span> <span class="pl-smi">ma</span>.<span class="pl-smi">__lineArray</span>,<span class="pl-k">delete</span> <span class="pl-smi">ma</span>.<span class="pl-smi">__skinIndexArray</span>,<span class="pl-k">delete</span> <span class="pl-smi">ma</span>.<span class="pl-smi">__skinWeightArray</span>)}}<span class="pl-smi">ga</span>.<span class="pl-smi">verticesNeedUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-smi">ga</span>.<span class="pl-smi">morphTargetsNeedUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-smi">ga</span>.<span class="pl-smi">elementsNeedUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-smi">ga</span>.<span class="pl-smi">uvsNeedUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-smi">ga</span>.<span class="pl-smi">normalsNeedUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-smi">ga</span>.<span class="pl-smi">colorsNeedUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-smi">ga</span>.<span class="pl-smi">tangentsNeedUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-smi">ab</span>.<span class="pl-c1">attributes</span><span class="pl-k">&amp;&amp;</span><span class="pl-en">q</span>(ab)}<span class="pl-k">else</span> <span class="pl-k">if</span>(ub <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Ribbon</span>){<span class="pl-k">if</span>(<span class="pl-smi">ga</span>.<span class="pl-smi">verticesNeedUpdate</span><span class="pl-k">||</span><span class="pl-smi">ga</span>.<span class="pl-smi">colorsNeedUpdate</span>){<span class="pl-k">var</span> cc<span class="pl-k">=</span>ga,cd<span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-c1">DYNAMIC_DRAW</span>,zc<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,Ac<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,Jc<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,dc<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,Kc<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,dd<span class="pl-k">=</span><span class="pl-smi">cc</span>.<span class="pl-smi">vertices</span>,ed<span class="pl-k">=</span><span class="pl-smi">cc</span>.<span class="pl-smi">colors</span>,kd<span class="pl-k">=</span><span class="pl-smi">dd</span>.<span class="pl-c1">length</span>,ld<span class="pl-k">=</span><span class="pl-smi">ed</span>.<span class="pl-c1">length</span>,Lc<span class="pl-k">=</span><span class="pl-smi">cc</span>.<span class="pl-smi">__vertexArray</span>,</td>
      </tr>
      <tr>
        <td id="L459" class="blob-num js-line-number" data-line-number="459"></td>
        <td id="LC459" class="blob-code blob-code-inner js-file-line">Mc<span class="pl-k">=</span><span class="pl-smi">cc</span>.<span class="pl-smi">__colorArray</span>,md<span class="pl-k">=</span><span class="pl-smi">cc</span>.<span class="pl-smi">colorsNeedUpdate</span>;<span class="pl-k">if</span>(<span class="pl-smi">cc</span>.<span class="pl-smi">verticesNeedUpdate</span>){<span class="pl-k">for</span>(zc<span class="pl-k">=</span><span class="pl-c1">0</span>;zc<span class="pl-k">&lt;</span>kd;zc<span class="pl-k">++</span>)Jc<span class="pl-k">=</span>dd[zc],dc<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span>zc,Lc[dc]<span class="pl-k">=</span><span class="pl-smi">Jc</span>.<span class="pl-c1">x</span>,Lc[dc<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-smi">Jc</span>.<span class="pl-c1">y</span>,Lc[dc<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-smi">Jc</span>.<span class="pl-c1">z</span>;<span class="pl-smi">k</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">cc</span>.<span class="pl-smi">__webglVertexBuffer</span>);<span class="pl-smi">k</span>.<span class="pl-en">bufferData</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,Lc,cd)}<span class="pl-k">if</span>(md){<span class="pl-k">for</span>(Ac<span class="pl-k">=</span><span class="pl-c1">0</span>;Ac<span class="pl-k">&lt;</span>ld;Ac<span class="pl-k">++</span>)Kc<span class="pl-k">=</span>ed[Ac],dc<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span>Ac,Mc[dc]<span class="pl-k">=</span><span class="pl-smi">Kc</span>.<span class="pl-smi">r</span>,Mc[dc<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-smi">Kc</span>.<span class="pl-smi">g</span>,Mc[dc<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-smi">Kc</span>.<span class="pl-smi">b</span>;<span class="pl-smi">k</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">cc</span>.<span class="pl-smi">__webglColorBuffer</span>);<span class="pl-smi">k</span>.<span class="pl-en">bufferData</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,Mc,cd)}}<span class="pl-smi">ga</span>.<span class="pl-smi">verticesNeedUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-smi">ga</span>.<span class="pl-smi">colorsNeedUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>}<span class="pl-k">else</span> <span class="pl-k">if</span>(ub <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Line</span>){ab<span class="pl-k">=</span><span class="pl-en">c</span>(ub,gb);eb<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L460" class="blob-num js-line-number" data-line-number="460"></td>
        <td id="LC460" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">ab</span>.<span class="pl-c1">attributes</span><span class="pl-k">&amp;&amp;</span><span class="pl-en">o</span>(ab);<span class="pl-k">if</span>(<span class="pl-smi">ga</span>.<span class="pl-smi">verticesNeedUpdate</span><span class="pl-k">||</span><span class="pl-smi">ga</span>.<span class="pl-smi">colorsNeedUpdate</span><span class="pl-k">||</span>eb){<span class="pl-k">var</span> Vb<span class="pl-k">=</span>ga,$c<span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-c1">DYNAMIC_DRAW</span>,Bc<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,Cc<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,Nc<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,Aa<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,Oc<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,fd<span class="pl-k">=</span><span class="pl-smi">Vb</span>.<span class="pl-smi">vertices</span>,gd<span class="pl-k">=</span><span class="pl-smi">Vb</span>.<span class="pl-smi">colors</span>,nd<span class="pl-k">=</span><span class="pl-smi">fd</span>.<span class="pl-c1">length</span>,od<span class="pl-k">=</span><span class="pl-smi">gd</span>.<span class="pl-c1">length</span>,Pc<span class="pl-k">=</span><span class="pl-smi">Vb</span>.<span class="pl-smi">__vertexArray</span>,Qc<span class="pl-k">=</span><span class="pl-smi">Vb</span>.<span class="pl-smi">__colorArray</span>,pd<span class="pl-k">=</span><span class="pl-smi">Vb</span>.<span class="pl-smi">colorsNeedUpdate</span>,ad<span class="pl-k">=</span><span class="pl-smi">Vb</span>.<span class="pl-smi">__webglCustomAttributesList</span>,Rc<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,hd<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,Qa<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,qc<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,cb<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,va<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-smi">Vb</span>.<span class="pl-smi">verticesNeedUpdate</span>){<span class="pl-k">for</span>(Bc<span class="pl-k">=</span><span class="pl-c1">0</span>;Bc<span class="pl-k">&lt;</span>nd;Bc<span class="pl-k">++</span>)Nc<span class="pl-k">=</span>fd[Bc],Aa<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span>Bc,Pc[Aa]<span class="pl-k">=</span><span class="pl-smi">Nc</span>.<span class="pl-c1">x</span>,Pc[Aa<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-smi">Nc</span>.<span class="pl-c1">y</span>,Pc[Aa<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-smi">Nc</span>.<span class="pl-c1">z</span>;<span class="pl-smi">k</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">Vb</span>.<span class="pl-smi">__webglVertexBuffer</span>);</td>
      </tr>
      <tr>
        <td id="L461" class="blob-num js-line-number" data-line-number="461"></td>
        <td id="LC461" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">k</span>.<span class="pl-en">bufferData</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,Pc,$c)}<span class="pl-k">if</span>(pd){<span class="pl-k">for</span>(Cc<span class="pl-k">=</span><span class="pl-c1">0</span>;Cc<span class="pl-k">&lt;</span>od;Cc<span class="pl-k">++</span>)Oc<span class="pl-k">=</span>gd[Cc],Aa<span class="pl-k">=</span><span class="pl-c1">3</span><span class="pl-k">*</span>Cc,Qc[Aa]<span class="pl-k">=</span><span class="pl-smi">Oc</span>.<span class="pl-smi">r</span>,Qc[Aa<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-smi">Oc</span>.<span class="pl-smi">g</span>,Qc[Aa<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-smi">Oc</span>.<span class="pl-smi">b</span>;<span class="pl-smi">k</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">Vb</span>.<span class="pl-smi">__webglColorBuffer</span>);<span class="pl-smi">k</span>.<span class="pl-en">bufferData</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,Qc,$c)}<span class="pl-k">if</span>(ad){Rc<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(hd<span class="pl-k">=</span><span class="pl-smi">ad</span>.<span class="pl-c1">length</span>;Rc<span class="pl-k">&lt;</span>hd;Rc<span class="pl-k">++</span>)<span class="pl-k">if</span>(va<span class="pl-k">=</span>ad[Rc],<span class="pl-smi">va</span>.<span class="pl-smi">needsUpdate</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">va</span>.<span class="pl-smi">boundTo</span><span class="pl-k">||</span><span class="pl-s"><span class="pl-pds">&quot;</span>vertices<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-smi">va</span>.<span class="pl-smi">boundTo</span>)){Aa<span class="pl-k">=</span><span class="pl-c1">0</span>;qc<span class="pl-k">=</span><span class="pl-smi">va</span>.<span class="pl-c1">value</span>.<span class="pl-c1">length</span>;<span class="pl-k">if</span>(<span class="pl-c1">1</span><span class="pl-k">===</span><span class="pl-smi">va</span>.<span class="pl-c1">size</span>)<span class="pl-k">for</span>(Qa<span class="pl-k">=</span><span class="pl-c1">0</span>;Qa<span class="pl-k">&lt;</span>qc;Qa<span class="pl-k">++</span>)<span class="pl-smi">va</span>.<span class="pl-smi">array</span>[Qa]<span class="pl-k">=</span><span class="pl-smi">va</span>.<span class="pl-c1">value</span>[Qa];<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-c1">2</span><span class="pl-k">===</span><span class="pl-smi">va</span>.<span class="pl-c1">size</span>)<span class="pl-k">for</span>(Qa<span class="pl-k">=</span><span class="pl-c1">0</span>;Qa<span class="pl-k">&lt;</span>qc;Qa<span class="pl-k">++</span>)cb<span class="pl-k">=</span><span class="pl-smi">va</span>.<span class="pl-c1">value</span>[Qa],<span class="pl-smi">va</span>.<span class="pl-smi">array</span>[Aa]<span class="pl-k">=</span><span class="pl-smi">cb</span>.<span class="pl-c1">x</span>,<span class="pl-smi">va</span>.<span class="pl-smi">array</span>[Aa<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-smi">cb</span>.<span class="pl-c1">y</span>,</td>
      </tr>
      <tr>
        <td id="L462" class="blob-num js-line-number" data-line-number="462"></td>
        <td id="LC462" class="blob-code blob-code-inner js-file-line">Aa<span class="pl-k">+=</span><span class="pl-c1">2</span>;<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-c1">3</span><span class="pl-k">===</span><span class="pl-smi">va</span>.<span class="pl-c1">size</span>)<span class="pl-k">if</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>c<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span><span class="pl-smi">va</span>.<span class="pl-c1">type</span>)<span class="pl-k">for</span>(Qa<span class="pl-k">=</span><span class="pl-c1">0</span>;Qa<span class="pl-k">&lt;</span>qc;Qa<span class="pl-k">++</span>)cb<span class="pl-k">=</span><span class="pl-smi">va</span>.<span class="pl-c1">value</span>[Qa],<span class="pl-smi">va</span>.<span class="pl-smi">array</span>[Aa]<span class="pl-k">=</span><span class="pl-smi">cb</span>.<span class="pl-smi">r</span>,<span class="pl-smi">va</span>.<span class="pl-smi">array</span>[Aa<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-smi">cb</span>.<span class="pl-smi">g</span>,<span class="pl-smi">va</span>.<span class="pl-smi">array</span>[Aa<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-smi">cb</span>.<span class="pl-smi">b</span>,Aa<span class="pl-k">+=</span><span class="pl-c1">3</span>;<span class="pl-k">else</span> <span class="pl-k">for</span>(Qa<span class="pl-k">=</span><span class="pl-c1">0</span>;Qa<span class="pl-k">&lt;</span>qc;Qa<span class="pl-k">++</span>)cb<span class="pl-k">=</span><span class="pl-smi">va</span>.<span class="pl-c1">value</span>[Qa],<span class="pl-smi">va</span>.<span class="pl-smi">array</span>[Aa]<span class="pl-k">=</span><span class="pl-smi">cb</span>.<span class="pl-c1">x</span>,<span class="pl-smi">va</span>.<span class="pl-smi">array</span>[Aa<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-smi">cb</span>.<span class="pl-c1">y</span>,<span class="pl-smi">va</span>.<span class="pl-smi">array</span>[Aa<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-smi">cb</span>.<span class="pl-c1">z</span>,Aa<span class="pl-k">+=</span><span class="pl-c1">3</span>;<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-c1">4</span><span class="pl-k">===</span><span class="pl-smi">va</span>.<span class="pl-c1">size</span>)<span class="pl-k">for</span>(Qa<span class="pl-k">=</span><span class="pl-c1">0</span>;Qa<span class="pl-k">&lt;</span>qc;Qa<span class="pl-k">++</span>)cb<span class="pl-k">=</span><span class="pl-smi">va</span>.<span class="pl-c1">value</span>[Qa],<span class="pl-smi">va</span>.<span class="pl-smi">array</span>[Aa]<span class="pl-k">=</span><span class="pl-smi">cb</span>.<span class="pl-c1">x</span>,<span class="pl-smi">va</span>.<span class="pl-smi">array</span>[Aa<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-smi">cb</span>.<span class="pl-c1">y</span>,<span class="pl-smi">va</span>.<span class="pl-smi">array</span>[Aa<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-smi">cb</span>.<span class="pl-c1">z</span>,<span class="pl-smi">va</span>.<span class="pl-smi">array</span>[Aa<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span><span class="pl-smi">cb</span>.<span class="pl-smi">w</span>,Aa<span class="pl-k">+=</span><span class="pl-c1">4</span>;<span class="pl-smi">k</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">va</span>.<span class="pl-smi">buffer</span>);<span class="pl-smi">k</span>.<span class="pl-en">bufferData</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ARRAY_BUFFER</span>,<span class="pl-smi">va</span>.<span class="pl-smi">array</span>,$c)}}}<span class="pl-smi">ga</span>.<span class="pl-smi">verticesNeedUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-smi">ga</span>.<span class="pl-smi">colorsNeedUpdate</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L463" class="blob-num js-line-number" data-line-number="463"></td>
        <td id="LC463" class="blob-code blob-code-inner js-file-line"><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-smi">ab</span>.<span class="pl-c1">attributes</span><span class="pl-k">&amp;&amp;</span><span class="pl-en">q</span>(ab)}<span class="pl-k">else</span> ub <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">ParticleSystem</span><span class="pl-k">&amp;&amp;</span>(ga <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">BufferGeometry</span><span class="pl-k">?</span>((<span class="pl-smi">ga</span>.<span class="pl-smi">verticesNeedUpdate</span><span class="pl-k">||</span><span class="pl-smi">ga</span>.<span class="pl-smi">colorsNeedUpdate</span>)<span class="pl-k">&amp;&amp;</span><span class="pl-en">h</span>(ga,<span class="pl-smi">k</span>.<span class="pl-c1">DYNAMIC_DRAW</span>,<span class="pl-k">!</span><span class="pl-smi">ga</span>.<span class="pl-smi">dynamic</span>),<span class="pl-smi">ga</span>.<span class="pl-smi">verticesNeedUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-smi">ga</span>.<span class="pl-smi">colorsNeedUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>)<span class="pl-k">:</span>(ab<span class="pl-k">=</span><span class="pl-en">c</span>(ub,gb),eb<span class="pl-k">=</span><span class="pl-smi">ab</span>.<span class="pl-c1">attributes</span><span class="pl-k">&amp;&amp;</span><span class="pl-en">o</span>(ab),(<span class="pl-smi">ga</span>.<span class="pl-smi">verticesNeedUpdate</span><span class="pl-k">||</span><span class="pl-smi">ga</span>.<span class="pl-smi">colorsNeedUpdate</span><span class="pl-k">||</span><span class="pl-smi">ub</span>.<span class="pl-smi">sortParticles</span><span class="pl-k">||</span>eb)<span class="pl-k">&amp;&amp;</span><span class="pl-en">g</span>(ga,<span class="pl-smi">k</span>.<span class="pl-c1">DYNAMIC_DRAW</span>,ub),<span class="pl-smi">ga</span>.<span class="pl-smi">verticesNeedUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-smi">ga</span>.<span class="pl-smi">colorsNeedUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>,<span class="pl-smi">ab</span>.<span class="pl-c1">attributes</span><span class="pl-k">&amp;&amp;</span><span class="pl-en">q</span>(ab)))}};<span class="pl-c1">this</span>.<span class="pl-en">initMaterial</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">var</span> e,f,g,h,i,j,l,m,n;a <span class="pl-k">instanceof</span></td>
      </tr>
      <tr>
        <td id="L464" class="blob-num js-line-number" data-line-number="464"></td>
        <td id="LC464" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">MeshDepthMaterial</span><span class="pl-k">?</span>n<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>depth<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">MeshNormalMaterial</span><span class="pl-k">?</span>n<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>normal<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">MeshBasicMaterial</span><span class="pl-k">?</span>n<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>basic<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">MeshLambertMaterial</span><span class="pl-k">?</span>n<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>lambert<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">MeshPhongMaterial</span><span class="pl-k">?</span>n<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>phong<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">LineBasicMaterial</span><span class="pl-k">?</span>n<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>basic<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span>a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">ParticleBasicMaterial</span><span class="pl-k">&amp;&amp;</span>(n<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>particle_basic<span class="pl-pds">&quot;</span></span>);<span class="pl-k">if</span>(n){<span class="pl-k">var</span> o<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderLib</span>[n];<span class="pl-smi">a</span>.<span class="pl-smi">uniforms</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">UniformsUtils</span>.<span class="pl-en">clone</span>(<span class="pl-smi">o</span>.<span class="pl-smi">uniforms</span>);<span class="pl-smi">a</span>.<span class="pl-smi">vertexShader</span><span class="pl-k">=</span><span class="pl-smi">o</span>.<span class="pl-smi">vertexShader</span>;<span class="pl-smi">a</span>.<span class="pl-smi">fragmentShader</span><span class="pl-k">=</span><span class="pl-smi">o</span>.<span class="pl-smi">fragmentShader</span>}<span class="pl-k">var</span> p,q,s;e<span class="pl-k">=</span>p<span class="pl-k">=</span>q<span class="pl-k">=</span>s<span class="pl-k">=</span>o<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L465" class="blob-num js-line-number" data-line-number="465"></td>
        <td id="LC465" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>;<span class="pl-k">for</span>(f<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span>;e<span class="pl-k">&lt;</span>f;e<span class="pl-k">++</span>)g<span class="pl-k">=</span>b[e],<span class="pl-smi">g</span>.<span class="pl-smi">onlyShadow</span><span class="pl-k">||</span>(g <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">DirectionalLight</span><span class="pl-k">&amp;&amp;</span>p<span class="pl-k">++</span>,g <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">PointLight</span><span class="pl-k">&amp;&amp;</span>q<span class="pl-k">++</span>,g <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">SpotLight</span><span class="pl-k">&amp;&amp;</span>s<span class="pl-k">++</span>,g <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">HemisphereLight</span><span class="pl-k">&amp;&amp;</span>o<span class="pl-k">++</span>);q<span class="pl-k">+</span>s<span class="pl-k">+</span>p<span class="pl-k">+</span>o<span class="pl-k">&lt;=</span>ea<span class="pl-k">?</span>e<span class="pl-k">=</span>p<span class="pl-k">:</span>(e<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>(ea<span class="pl-k">*</span>p<span class="pl-k">/</span>(q<span class="pl-k">+</span>p)),s<span class="pl-k">=</span>q<span class="pl-k">=</span>ea<span class="pl-k">-</span>e,o<span class="pl-k">=</span>e);f<span class="pl-k">=</span>q;g<span class="pl-k">=</span>s;h<span class="pl-k">=</span>o;o<span class="pl-k">=</span>p<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(s<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span>;o<span class="pl-k">&lt;</span>s;o<span class="pl-k">++</span>)q<span class="pl-k">=</span>b[o],<span class="pl-smi">q</span>.<span class="pl-smi">castShadow</span><span class="pl-k">&amp;&amp;</span>(q <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">SpotLight</span><span class="pl-k">&amp;&amp;</span>p<span class="pl-k">++</span>,q <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">DirectionalLight</span><span class="pl-k">&amp;&amp;!</span><span class="pl-smi">q</span>.<span class="pl-smi">shadowCascade</span><span class="pl-k">&amp;&amp;</span>p<span class="pl-k">++</span>);m<span class="pl-k">=</span>p;ic<span class="pl-k">&amp;&amp;</span>d<span class="pl-k">&amp;&amp;</span><span class="pl-smi">d</span>.<span class="pl-smi">useVertexTexture</span><span class="pl-k">?</span>l<span class="pl-k">=</span><span class="pl-c1">1024</span><span class="pl-k">:</span>(b<span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-en">getParameter</span>(<span class="pl-smi">k</span>.<span class="pl-c1">MAX_VERTEX_UNIFORM_VECTORS</span>),b<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>((b<span class="pl-k">-</span></td>
      </tr>
      <tr>
        <td id="L466" class="blob-num js-line-number" data-line-number="466"></td>
        <td id="LC466" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">20</span>)<span class="pl-k">/</span><span class="pl-c1">4</span>),<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>d<span class="pl-k">&amp;&amp;</span>d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">SkinnedMesh</span><span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-smi">d</span>.<span class="pl-smi">bones</span>.<span class="pl-c1">length</span>,b),b<span class="pl-k">&lt;</span><span class="pl-smi">d</span>.<span class="pl-smi">bones</span>.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span><span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>WebGLRenderer: too many bones - <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-smi">d</span>.<span class="pl-smi">bones</span>.<span class="pl-c1">length</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>, this GPU supports just <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>b<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span> (try OpenGL instead of ANGLE)<span class="pl-pds">&quot;</span></span>)),l<span class="pl-k">=</span>b);<span class="pl-k">var</span> r;a<span class="pl-k">:</span>{q<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">fragmentShader</span>;s<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertexShader</span>;o<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">uniforms</span>;b<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">attributes</span>;p<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">defines</span>;<span class="pl-k">var</span> c<span class="pl-k">=</span>{map<span class="pl-k">:</span><span class="pl-k">!!</span><span class="pl-smi">a</span>.<span class="pl-smi">map</span>,envMap<span class="pl-k">:</span><span class="pl-k">!!</span><span class="pl-smi">a</span>.<span class="pl-smi">envMap</span>,lightMap<span class="pl-k">:</span><span class="pl-k">!!</span><span class="pl-smi">a</span>.<span class="pl-smi">lightMap</span>,bumpMap<span class="pl-k">:</span><span class="pl-k">!!</span><span class="pl-smi">a</span>.<span class="pl-smi">bumpMap</span>,normalMap<span class="pl-k">:</span><span class="pl-k">!!</span><span class="pl-smi">a</span>.<span class="pl-smi">normalMap</span>,specularMap<span class="pl-k">:</span><span class="pl-k">!!</span><span class="pl-smi">a</span>.<span class="pl-smi">specularMap</span>,vertexColors<span class="pl-k">:</span><span class="pl-smi">a</span>.<span class="pl-smi">vertexColors</span>,fog<span class="pl-k">:</span>c,useFog<span class="pl-k">:</span><span class="pl-smi">a</span>.<span class="pl-smi">fog</span>,sizeAttenuation<span class="pl-k">:</span><span class="pl-smi">a</span>.<span class="pl-smi">sizeAttenuation</span>,</td>
      </tr>
      <tr>
        <td id="L467" class="blob-num js-line-number" data-line-number="467"></td>
        <td id="LC467" class="blob-code blob-code-inner js-file-line">skinning<span class="pl-k">:</span><span class="pl-smi">a</span>.<span class="pl-smi">skinning</span>,maxBones<span class="pl-k">:</span>l,useVertexTexture<span class="pl-k">:</span>ic<span class="pl-k">&amp;&amp;</span>d<span class="pl-k">&amp;&amp;</span><span class="pl-smi">d</span>.<span class="pl-smi">useVertexTexture</span>,boneTextureWidth<span class="pl-k">:</span>d<span class="pl-k">&amp;&amp;</span><span class="pl-smi">d</span>.<span class="pl-smi">boneTextureWidth</span>,boneTextureHeight<span class="pl-k">:</span>d<span class="pl-k">&amp;&amp;</span><span class="pl-smi">d</span>.<span class="pl-smi">boneTextureHeight</span>,morphTargets<span class="pl-k">:</span><span class="pl-smi">a</span>.<span class="pl-smi">morphTargets</span>,morphNormals<span class="pl-k">:</span><span class="pl-smi">a</span>.<span class="pl-smi">morphNormals</span>,maxMorphTargets<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-smi">maxMorphTargets</span>,maxMorphNormals<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-smi">maxMorphNormals</span>,maxDirLights<span class="pl-k">:</span>e,maxPointLights<span class="pl-k">:</span>f,maxSpotLights<span class="pl-k">:</span>g,maxHemiLights<span class="pl-k">:</span>h,maxShadows<span class="pl-k">:</span>m,shadowMapEnabled<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-smi">shadowMapEnabled</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">d</span>.<span class="pl-smi">receiveShadow</span>,shadowMapSoft<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-smi">shadowMapSoft</span>,shadowMapDebug<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-smi">shadowMapDebug</span>,shadowMapCascade<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-smi">shadowMapCascade</span>,</td>
      </tr>
      <tr>
        <td id="L468" class="blob-num js-line-number" data-line-number="468"></td>
        <td id="LC468" class="blob-code blob-code-inner js-file-line">alphaTest<span class="pl-k">:</span><span class="pl-smi">a</span>.<span class="pl-smi">alphaTest</span>,metal<span class="pl-k">:</span><span class="pl-smi">a</span>.<span class="pl-smi">metal</span>,perPixel<span class="pl-k">:</span><span class="pl-smi">a</span>.<span class="pl-smi">perPixel</span>,wrapAround<span class="pl-k">:</span><span class="pl-smi">a</span>.<span class="pl-smi">wrapAround</span>,doubleSided<span class="pl-k">:</span><span class="pl-smi">a</span>.<span class="pl-smi">side</span><span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">DoubleSide</span>,flipSided<span class="pl-k">:</span><span class="pl-smi">a</span>.<span class="pl-smi">side</span><span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">BackSide</span>},t,u,v,d<span class="pl-k">=</span>[];n<span class="pl-k">?</span><span class="pl-smi">d</span>.<span class="pl-c1">push</span>(n)<span class="pl-k">:</span>(<span class="pl-smi">d</span>.<span class="pl-c1">push</span>(q),<span class="pl-smi">d</span>.<span class="pl-c1">push</span>(s));<span class="pl-k">for</span>(u <span class="pl-k">in</span> p)<span class="pl-smi">d</span>.<span class="pl-c1">push</span>(u),<span class="pl-smi">d</span>.<span class="pl-c1">push</span>(p[u]);<span class="pl-k">for</span>(t <span class="pl-k">in</span> c)<span class="pl-smi">d</span>.<span class="pl-c1">push</span>(t),<span class="pl-smi">d</span>.<span class="pl-c1">push</span>(c[t]);n<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-c1">join</span>();t<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(u<span class="pl-k">=</span><span class="pl-smi">qa</span>.<span class="pl-c1">length</span>;t<span class="pl-k">&lt;</span>u;t<span class="pl-k">++</span>)<span class="pl-k">if</span>(d<span class="pl-k">=</span>qa[t],<span class="pl-smi">d</span>.<span class="pl-c1">code</span><span class="pl-k">===</span>n){<span class="pl-smi">d</span>.<span class="pl-smi">usedTimes</span><span class="pl-k">++</span>;r<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">program</span>;<span class="pl-k">break</span> a}t<span class="pl-k">=</span>[];<span class="pl-k">for</span>(v <span class="pl-k">in</span> p)u<span class="pl-k">=</span>p[v],<span class="pl-k">!</span><span class="pl-c1">1</span><span class="pl-k">!==</span>u<span class="pl-k">&amp;&amp;</span>(u<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>v<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span> <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>u,<span class="pl-smi">t</span>.<span class="pl-c1">push</span>(u));u<span class="pl-k">=</span><span class="pl-smi">t</span>.<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>);v<span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-en">createProgram</span>();t<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>precision <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-c1">K</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span> float;<span class="pl-pds">&quot;</span></span>,u,hc<span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define VERTEX_TEXTURES<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span></td>
      </tr>
      <tr>
        <td id="L469" class="blob-num js-line-number" data-line-number="469"></td>
        <td id="LC469" class="blob-code blob-code-inner js-file-line"><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-c1">Q</span>.<span class="pl-smi">gammaInput</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define GAMMA_INPUT<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-c1">Q</span>.<span class="pl-smi">gammaOutput</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define GAMMA_OUTPUT<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-c1">Q</span>.<span class="pl-smi">physicallyBasedShading</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define PHYSICALLY_BASED_SHADING<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>#define MAX_DIR_LIGHTS <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-smi">c</span>.<span class="pl-smi">maxDirLights</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>#define MAX_POINT_LIGHTS <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-smi">c</span>.<span class="pl-smi">maxPointLights</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>#define MAX_SPOT_LIGHTS <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-smi">c</span>.<span class="pl-smi">maxSpotLights</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>#define MAX_HEMI_LIGHTS <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-smi">c</span>.<span class="pl-smi">maxHemiLights</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>#define MAX_SHADOWS <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-smi">c</span>.<span class="pl-smi">maxShadows</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>#define MAX_BONES <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-smi">c</span>.<span class="pl-smi">maxBones</span>,<span class="pl-smi">c</span>.<span class="pl-smi">map</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_MAP<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">c</span>.<span class="pl-smi">envMap</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_ENVMAP<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">c</span>.<span class="pl-smi">lightMap</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_LIGHTMAP<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">c</span>.<span class="pl-smi">bumpMap</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_BUMPMAP<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span></td>
      </tr>
      <tr>
        <td id="L470" class="blob-num js-line-number" data-line-number="470"></td>
        <td id="LC470" class="blob-code blob-code-inner js-file-line"><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">c</span>.<span class="pl-smi">normalMap</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_NORMALMAP<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">c</span>.<span class="pl-smi">specularMap</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_SPECULARMAP<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">c</span>.<span class="pl-smi">vertexColors</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_COLOR<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">c</span>.<span class="pl-smi">skinning</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_SKINNING<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">c</span>.<span class="pl-smi">useVertexTexture</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define BONE_TEXTURE<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">c</span>.<span class="pl-smi">boneTextureWidth</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define N_BONE_PIXEL_X <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-smi">c</span>.<span class="pl-smi">boneTextureWidth</span>.<span class="pl-en">toFixed</span>(<span class="pl-c1">1</span>)<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">c</span>.<span class="pl-smi">boneTextureHeight</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define N_BONE_PIXEL_Y <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-smi">c</span>.<span class="pl-smi">boneTextureHeight</span>.<span class="pl-en">toFixed</span>(<span class="pl-c1">1</span>)<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">c</span>.<span class="pl-smi">morphTargets</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_MORPHTARGETS<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">c</span>.<span class="pl-smi">morphNormals</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_MORPHNORMALS<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">c</span>.<span class="pl-smi">perPixel</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define PHONG_PER_PIXEL<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">c</span>.<span class="pl-smi">wrapAround</span><span class="pl-k">?</span></td>
      </tr>
      <tr>
        <td id="L471" class="blob-num js-line-number" data-line-number="471"></td>
        <td id="LC471" class="blob-code blob-code-inner js-file-line">&quot;#define WRAP_AROUND&quot;:&quot;&quot;,c.doubleSided?&quot;#define DOUBLE_SIDED&quot;:&quot;&quot;,c.flipSided?&quot;#define FLIP_SIDED&quot;:&quot;&quot;,c.shadowMapEnabled?&quot;#define USE_SHADOWMAP&quot;:&quot;&quot;,c.shadowMapSoft?&quot;#define SHADOWMAP_SOFT&quot;:&quot;&quot;,c.shadowMapDebug?&quot;#define SHADOWMAP_DEBUG&quot;:&quot;&quot;,c.shadowMapCascade?&quot;#define SHADOWMAP_CASCADE&quot;:&quot;&quot;,c.sizeAttenuation?&quot;#define USE_SIZEATTENUATION&quot;:&quot;&quot;,&quot;uniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\n#ifdef USE_COLOR\nattribute vec3 color;\n#endif\n#ifdef USE_MORPHTARGETS\nattribute vec3 morphTarget0;\nattribute vec3 morphTarget1;\nattribute vec3 morphTarget2;\nattribute vec3 morphTarget3;\n#ifdef USE_MORPHNORMALS\nattribute vec3 morphNormal0;\nattribute vec3 morphNormal1;\nattribute vec3 morphNormal2;\nattribute vec3 morphNormal3;\n#else\nattribute vec3 morphTarget4;\nattribute vec3 morphTarget5;\nattribute vec3 morphTarget6;\nattribute vec3 morphTarget7;\n#endif\n#endif\n#ifdef USE_SKINNING\nattribute vec4 skinIndex;\nattribute vec4 skinWeight;\n#endif\n&quot;].join(&quot;\n&quot;);</td>
      </tr>
      <tr>
        <td id="L472" class="blob-num js-line-number" data-line-number="472"></td>
        <td id="LC472" class="blob-code blob-code-inner js-file-line">u<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>precision <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-c1">K</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span> float;<span class="pl-pds">&quot;</span></span>,<span class="pl-smi">c</span>.<span class="pl-smi">bumpMap</span><span class="pl-k">||</span><span class="pl-smi">c</span>.<span class="pl-smi">normalMap</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#extension GL_OES_standard_derivatives : enable<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,u,<span class="pl-s"><span class="pl-pds">&quot;</span>#define MAX_DIR_LIGHTS <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-smi">c</span>.<span class="pl-smi">maxDirLights</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>#define MAX_POINT_LIGHTS <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-smi">c</span>.<span class="pl-smi">maxPointLights</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>#define MAX_SPOT_LIGHTS <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-smi">c</span>.<span class="pl-smi">maxSpotLights</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>#define MAX_HEMI_LIGHTS <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-smi">c</span>.<span class="pl-smi">maxHemiLights</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>#define MAX_SHADOWS <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-smi">c</span>.<span class="pl-smi">maxShadows</span>,<span class="pl-smi">c</span>.<span class="pl-smi">alphaTest</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define ALPHATEST <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-smi">c</span>.<span class="pl-smi">alphaTest</span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-c1">Q</span>.<span class="pl-smi">gammaInput</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define GAMMA_INPUT<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-c1">Q</span>.<span class="pl-smi">gammaOutput</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define GAMMA_OUTPUT<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-c1">Q</span>.<span class="pl-smi">physicallyBasedShading</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define PHYSICALLY_BASED_SHADING<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L473" class="blob-num js-line-number" data-line-number="473"></td>
        <td id="LC473" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">c</span>.<span class="pl-smi">useFog</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">c</span>.<span class="pl-smi">fog</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_FOG<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">c</span>.<span class="pl-smi">useFog</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">c</span>.<span class="pl-smi">fog</span> <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">FogExp2</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define FOG_EXP2<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">c</span>.<span class="pl-smi">map</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_MAP<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">c</span>.<span class="pl-smi">envMap</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_ENVMAP<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">c</span>.<span class="pl-smi">lightMap</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_LIGHTMAP<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">c</span>.<span class="pl-smi">bumpMap</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_BUMPMAP<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">c</span>.<span class="pl-smi">normalMap</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_NORMALMAP<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">c</span>.<span class="pl-smi">specularMap</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_SPECULARMAP<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">c</span>.<span class="pl-smi">vertexColors</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_COLOR<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">c</span>.<span class="pl-smi">metal</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define METAL<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">c</span>.<span class="pl-smi">perPixel</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define PHONG_PER_PIXEL<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">c</span>.<span class="pl-smi">wrapAround</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define WRAP_AROUND<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">c</span>.<span class="pl-smi">doubleSided</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define DOUBLE_SIDED<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">c</span>.<span class="pl-smi">flipSided</span><span class="pl-k">?</span></td>
      </tr>
      <tr>
        <td id="L474" class="blob-num js-line-number" data-line-number="474"></td>
        <td id="LC474" class="blob-code blob-code-inner js-file-line"><span class="pl-s"><span class="pl-pds">&quot;</span>#define FLIP_SIDED<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">c</span>.<span class="pl-smi">shadowMapEnabled</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define USE_SHADOWMAP<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">c</span>.<span class="pl-smi">shadowMapSoft</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define SHADOWMAP_SOFT<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">c</span>.<span class="pl-smi">shadowMapDebug</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define SHADOWMAP_DEBUG<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-smi">c</span>.<span class="pl-smi">shadowMapCascade</span><span class="pl-k">?</span><span class="pl-s"><span class="pl-pds">&quot;</span>#define SHADOWMAP_CASCADE<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>uniform mat4 viewMatrix;<span class="pl-cce">\n</span>uniform vec3 cameraPosition;<span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>].<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>);u<span class="pl-k">=</span><span class="pl-en">C</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>fragment<span class="pl-pds">&quot;</span></span>,u<span class="pl-k">+</span>q);t<span class="pl-k">=</span><span class="pl-en">C</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>vertex<span class="pl-pds">&quot;</span></span>,t<span class="pl-k">+</span>s);<span class="pl-smi">k</span>.<span class="pl-en">attachShader</span>(v,t);<span class="pl-smi">k</span>.<span class="pl-en">attachShader</span>(v,u);<span class="pl-smi">k</span>.<span class="pl-en">linkProgram</span>(v);<span class="pl-smi">k</span>.<span class="pl-en">getProgramParameter</span>(v,<span class="pl-smi">k</span>.<span class="pl-c1">LINK_STATUS</span>)<span class="pl-k">||</span><span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>Could not initialise shader<span class="pl-cce">\n</span>VALIDATE_STATUS: <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-smi">k</span>.<span class="pl-en">getProgramParameter</span>(v,</td>
      </tr>
      <tr>
        <td id="L475" class="blob-num js-line-number" data-line-number="475"></td>
        <td id="LC475" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">k</span>.<span class="pl-c1">VALIDATE_STATUS</span>)<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>, gl error [<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-smi">k</span>.<span class="pl-en">getError</span>()<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>]<span class="pl-pds">&quot;</span></span>);<span class="pl-smi">k</span>.<span class="pl-en">deleteShader</span>(u);<span class="pl-smi">k</span>.<span class="pl-en">deleteShader</span>(t);<span class="pl-smi">v</span>.<span class="pl-smi">uniforms</span><span class="pl-k">=</span>{};<span class="pl-smi">v</span>.<span class="pl-c1">attributes</span><span class="pl-k">=</span>{};<span class="pl-k">var</span> y;t<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>viewMatrix modelViewMatrix projectionMatrix normalMatrix modelMatrix cameraPosition morphTargetInfluences<span class="pl-pds">&quot;</span></span>.<span class="pl-c1">split</span>(<span class="pl-s"><span class="pl-pds">&quot;</span> <span class="pl-pds">&quot;</span></span>);<span class="pl-smi">c</span>.<span class="pl-smi">useVertexTexture</span><span class="pl-k">?</span><span class="pl-smi">t</span>.<span class="pl-c1">push</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>boneTexture<span class="pl-pds">&quot;</span></span>)<span class="pl-k">:</span><span class="pl-smi">t</span>.<span class="pl-c1">push</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>boneGlobalMatrices<span class="pl-pds">&quot;</span></span>);<span class="pl-k">for</span>(y <span class="pl-k">in</span> o)<span class="pl-smi">t</span>.<span class="pl-c1">push</span>(y);y<span class="pl-k">=</span>t;t<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(u<span class="pl-k">=</span><span class="pl-smi">y</span>.<span class="pl-c1">length</span>;t<span class="pl-k">&lt;</span>u;t<span class="pl-k">++</span>)d<span class="pl-k">=</span>y[t],<span class="pl-smi">v</span>.<span class="pl-smi">uniforms</span>[d]<span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-en">getUniformLocation</span>(v,d);t<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>position normal uv uv2 tangent color skinIndex skinWeight<span class="pl-pds">&quot;</span></span>.<span class="pl-c1">split</span>(<span class="pl-s"><span class="pl-pds">&quot;</span> <span class="pl-pds">&quot;</span></span>);<span class="pl-k">for</span>(y<span class="pl-k">=</span><span class="pl-c1">0</span>;y<span class="pl-k">&lt;</span><span class="pl-smi">c</span>.<span class="pl-smi">maxMorphTargets</span>;y<span class="pl-k">++</span>)<span class="pl-smi">t</span>.<span class="pl-c1">push</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>morphTarget<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L476" class="blob-num js-line-number" data-line-number="476"></td>
        <td id="LC476" class="blob-code blob-code-inner js-file-line">y);<span class="pl-k">for</span>(y<span class="pl-k">=</span><span class="pl-c1">0</span>;y<span class="pl-k">&lt;</span><span class="pl-smi">c</span>.<span class="pl-smi">maxMorphNormals</span>;y<span class="pl-k">++</span>)<span class="pl-smi">t</span>.<span class="pl-c1">push</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>morphNormal<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>y);<span class="pl-k">for</span>(r <span class="pl-k">in</span> b)<span class="pl-smi">t</span>.<span class="pl-c1">push</span>(r);r<span class="pl-k">=</span>t;y<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(t<span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-c1">length</span>;y<span class="pl-k">&lt;</span>t;y<span class="pl-k">++</span>)u<span class="pl-k">=</span>r[y],<span class="pl-smi">v</span>.<span class="pl-c1">attributes</span>[u]<span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-en">getAttribLocation</span>(v,u);<span class="pl-smi">v</span>.<span class="pl-c1">id</span><span class="pl-k">=</span>la<span class="pl-k">++</span>;<span class="pl-smi">qa</span>.<span class="pl-c1">push</span>({program<span class="pl-k">:</span>v,code<span class="pl-k">:</span>n,usedTimes<span class="pl-k">:</span><span class="pl-c1">1</span>});<span class="pl-c1">Q</span>.<span class="pl-smi">info</span>.<span class="pl-smi">memory</span>.<span class="pl-smi">programs</span><span class="pl-k">=</span><span class="pl-smi">qa</span>.<span class="pl-c1">length</span>;r<span class="pl-k">=</span>v}<span class="pl-smi">a</span>.<span class="pl-smi">program</span><span class="pl-k">=</span>r;r<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">program</span>.<span class="pl-c1">attributes</span>;<span class="pl-c1">0</span><span class="pl-k">&lt;=</span><span class="pl-smi">r</span>.<span class="pl-smi">position</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">k</span>.<span class="pl-en">enableVertexAttribArray</span>(<span class="pl-smi">r</span>.<span class="pl-smi">position</span>);<span class="pl-c1">0</span><span class="pl-k">&lt;=</span><span class="pl-smi">r</span>.<span class="pl-c1">color</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">k</span>.<span class="pl-en">enableVertexAttribArray</span>(<span class="pl-smi">r</span>.<span class="pl-c1">color</span>);<span class="pl-c1">0</span><span class="pl-k">&lt;=</span><span class="pl-smi">r</span>.<span class="pl-smi">normal</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">k</span>.<span class="pl-en">enableVertexAttribArray</span>(<span class="pl-smi">r</span>.<span class="pl-smi">normal</span>);<span class="pl-c1">0</span><span class="pl-k">&lt;=</span><span class="pl-smi">r</span>.<span class="pl-smi">tangent</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">k</span>.<span class="pl-en">enableVertexAttribArray</span>(<span class="pl-smi">r</span>.<span class="pl-smi">tangent</span>);<span class="pl-smi">a</span>.<span class="pl-smi">skinning</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">0</span><span class="pl-k">&lt;=</span><span class="pl-smi">r</span>.<span class="pl-smi">skinIndex</span><span class="pl-k">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L477" class="blob-num js-line-number" data-line-number="477"></td>
        <td id="LC477" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span><span class="pl-k">&lt;=</span><span class="pl-smi">r</span>.<span class="pl-smi">skinWeight</span>)<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">k</span>.<span class="pl-en">enableVertexAttribArray</span>(<span class="pl-smi">r</span>.<span class="pl-smi">skinIndex</span>),<span class="pl-smi">k</span>.<span class="pl-en">enableVertexAttribArray</span>(<span class="pl-smi">r</span>.<span class="pl-smi">skinWeight</span>));<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-c1">attributes</span>)<span class="pl-k">for</span>(j <span class="pl-k">in</span> <span class="pl-smi">a</span>.<span class="pl-c1">attributes</span>)<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>r[j]<span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">&lt;=</span>r[j]<span class="pl-k">&amp;&amp;</span><span class="pl-smi">k</span>.<span class="pl-en">enableVertexAttribArray</span>(r[j]);<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">morphTargets</span>){<span class="pl-smi">a</span>.<span class="pl-smi">numSupportedMorphTargets</span><span class="pl-k">=</span><span class="pl-c1">0</span>;v<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>morphTarget<span class="pl-pds">&quot;</span></span>;<span class="pl-k">for</span>(j<span class="pl-k">=</span><span class="pl-c1">0</span>;j<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">maxMorphTargets</span>;j<span class="pl-k">++</span>)y<span class="pl-k">=</span>v<span class="pl-k">+</span>j,<span class="pl-c1">0</span><span class="pl-k">&lt;=</span>r[y]<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">k</span>.<span class="pl-en">enableVertexAttribArray</span>(r[y]),<span class="pl-smi">a</span>.<span class="pl-smi">numSupportedMorphTargets</span><span class="pl-k">++</span>)}<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">morphNormals</span>){<span class="pl-smi">a</span>.<span class="pl-smi">numSupportedMorphNormals</span><span class="pl-k">=</span><span class="pl-c1">0</span>;v<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>morphNormal<span class="pl-pds">&quot;</span></span>;<span class="pl-k">for</span>(j<span class="pl-k">=</span><span class="pl-c1">0</span>;j<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">maxMorphNormals</span>;j<span class="pl-k">++</span>)y<span class="pl-k">=</span>v<span class="pl-k">+</span>j,<span class="pl-c1">0</span><span class="pl-k">&lt;=</span>r[y]<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">k</span>.<span class="pl-en">enableVertexAttribArray</span>(r[y]),</td>
      </tr>
      <tr>
        <td id="L478" class="blob-num js-line-number" data-line-number="478"></td>
        <td id="LC478" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">a</span>.<span class="pl-smi">numSupportedMorphNormals</span><span class="pl-k">++</span>)}<span class="pl-smi">a</span>.<span class="pl-smi">uniformsList</span><span class="pl-k">=</span>[];<span class="pl-k">for</span>(i <span class="pl-k">in</span> <span class="pl-smi">a</span>.<span class="pl-smi">uniforms</span>)<span class="pl-smi">a</span>.<span class="pl-smi">uniformsList</span>.<span class="pl-c1">push</span>([<span class="pl-smi">a</span>.<span class="pl-smi">uniforms</span>[i],i])};<span class="pl-c1">this</span>.<span class="pl-en">setFaceCulling</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){a<span class="pl-k">?</span>(<span class="pl-k">!</span>b<span class="pl-k">||</span><span class="pl-s"><span class="pl-pds">&quot;</span>ccw<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>b<span class="pl-k">?</span><span class="pl-smi">k</span>.<span class="pl-en">frontFace</span>(<span class="pl-smi">k</span>.<span class="pl-c1">CCW</span>)<span class="pl-k">:</span><span class="pl-smi">k</span>.<span class="pl-en">frontFace</span>(<span class="pl-smi">k</span>.<span class="pl-c1">CW</span>),<span class="pl-s"><span class="pl-pds">&quot;</span>back<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>a<span class="pl-k">?</span><span class="pl-smi">k</span>.<span class="pl-en">cullFace</span>(<span class="pl-smi">k</span>.<span class="pl-c1">BACK</span>)<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>front<span class="pl-pds">&quot;</span></span><span class="pl-k">===</span>a<span class="pl-k">?</span><span class="pl-smi">k</span>.<span class="pl-en">cullFace</span>(<span class="pl-smi">k</span>.<span class="pl-c1">FRONT</span>)<span class="pl-k">:</span><span class="pl-smi">k</span>.<span class="pl-en">cullFace</span>(<span class="pl-smi">k</span>.<span class="pl-c1">FRONT_AND_BACK</span>),<span class="pl-smi">k</span>.<span class="pl-en">enable</span>(<span class="pl-smi">k</span>.<span class="pl-c1">CULL_FACE</span>))<span class="pl-k">:</span><span class="pl-smi">k</span>.<span class="pl-en">disable</span>(<span class="pl-smi">k</span>.<span class="pl-c1">CULL_FACE</span>)};<span class="pl-c1">this</span>.<span class="pl-en">setMaterialFaces</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">side</span><span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">DoubleSide</span>,a<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">side</span><span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">BackSide</span>;Ga<span class="pl-k">!==</span>b<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">?</span><span class="pl-smi">k</span>.<span class="pl-en">disable</span>(<span class="pl-smi">k</span>.<span class="pl-c1">CULL_FACE</span>)<span class="pl-k">:</span><span class="pl-smi">k</span>.<span class="pl-en">enable</span>(<span class="pl-smi">k</span>.<span class="pl-c1">CULL_FACE</span>),Ga<span class="pl-k">=</span>b);Pa<span class="pl-k">!==</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">?</span><span class="pl-smi">k</span>.<span class="pl-en">frontFace</span>(<span class="pl-smi">k</span>.<span class="pl-c1">CW</span>)<span class="pl-k">:</span></td>
      </tr>
      <tr>
        <td id="L479" class="blob-num js-line-number" data-line-number="479"></td>
        <td id="LC479" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">k</span>.<span class="pl-en">frontFace</span>(<span class="pl-smi">k</span>.<span class="pl-c1">CCW</span>),Pa<span class="pl-k">=</span>a)};<span class="pl-c1">this</span>.<span class="pl-en">setDepthTest</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){ib<span class="pl-k">!==</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">?</span><span class="pl-smi">k</span>.<span class="pl-en">enable</span>(<span class="pl-smi">k</span>.<span class="pl-c1">DEPTH_TEST</span>)<span class="pl-k">:</span><span class="pl-smi">k</span>.<span class="pl-en">disable</span>(<span class="pl-smi">k</span>.<span class="pl-c1">DEPTH_TEST</span>),ib<span class="pl-k">=</span>a)};<span class="pl-c1">this</span>.<span class="pl-en">setDepthWrite</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){Ra<span class="pl-k">!==</span>a<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">k</span>.<span class="pl-en">depthMask</span>(a),Ra<span class="pl-k">=</span>a)};<span class="pl-c1">this</span>.<span class="pl-en">setBlending</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){a<span class="pl-k">!==</span>Ia<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">NoBlending</span><span class="pl-k">?</span><span class="pl-smi">k</span>.<span class="pl-en">disable</span>(<span class="pl-smi">k</span>.<span class="pl-c1">BLEND</span>)<span class="pl-k">:</span>a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">AdditiveBlending</span><span class="pl-k">?</span>(<span class="pl-smi">k</span>.<span class="pl-en">enable</span>(<span class="pl-smi">k</span>.<span class="pl-c1">BLEND</span>),<span class="pl-smi">k</span>.<span class="pl-en">blendEquation</span>(<span class="pl-smi">k</span>.<span class="pl-c1">FUNC_ADD</span>),<span class="pl-smi">k</span>.<span class="pl-en">blendFunc</span>(<span class="pl-smi">k</span>.<span class="pl-c1">SRC_ALPHA</span>,<span class="pl-smi">k</span>.<span class="pl-c1">ONE</span>))<span class="pl-k">:</span>a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">SubtractiveBlending</span><span class="pl-k">?</span>(<span class="pl-smi">k</span>.<span class="pl-en">enable</span>(<span class="pl-smi">k</span>.<span class="pl-c1">BLEND</span>),<span class="pl-smi">k</span>.<span class="pl-en">blendEquation</span>(<span class="pl-smi">k</span>.<span class="pl-c1">FUNC_ADD</span>),<span class="pl-smi">k</span>.<span class="pl-en">blendFunc</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ZERO</span>,<span class="pl-smi">k</span>.<span class="pl-c1">ONE_MINUS_SRC_COLOR</span>))<span class="pl-k">:</span>a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">MultiplyBlending</span><span class="pl-k">?</span></td>
      </tr>
      <tr>
        <td id="L480" class="blob-num js-line-number" data-line-number="480"></td>
        <td id="LC480" class="blob-code blob-code-inner js-file-line">(<span class="pl-smi">k</span>.<span class="pl-en">enable</span>(<span class="pl-smi">k</span>.<span class="pl-c1">BLEND</span>),<span class="pl-smi">k</span>.<span class="pl-en">blendEquation</span>(<span class="pl-smi">k</span>.<span class="pl-c1">FUNC_ADD</span>),<span class="pl-smi">k</span>.<span class="pl-en">blendFunc</span>(<span class="pl-smi">k</span>.<span class="pl-c1">ZERO</span>,<span class="pl-smi">k</span>.<span class="pl-c1">SRC_COLOR</span>))<span class="pl-k">:</span>a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">CustomBlending</span><span class="pl-k">?</span><span class="pl-smi">k</span>.<span class="pl-en">enable</span>(<span class="pl-smi">k</span>.<span class="pl-c1">BLEND</span>)<span class="pl-k">:</span>(<span class="pl-smi">k</span>.<span class="pl-en">enable</span>(<span class="pl-smi">k</span>.<span class="pl-c1">BLEND</span>),<span class="pl-smi">k</span>.<span class="pl-en">blendEquationSeparate</span>(<span class="pl-smi">k</span>.<span class="pl-c1">FUNC_ADD</span>,<span class="pl-smi">k</span>.<span class="pl-c1">FUNC_ADD</span>),<span class="pl-smi">k</span>.<span class="pl-en">blendFuncSeparate</span>(<span class="pl-smi">k</span>.<span class="pl-c1">SRC_ALPHA</span>,<span class="pl-smi">k</span>.<span class="pl-c1">ONE_MINUS_SRC_ALPHA</span>,<span class="pl-smi">k</span>.<span class="pl-c1">ONE</span>,<span class="pl-smi">k</span>.<span class="pl-c1">ONE_MINUS_SRC_ALPHA</span>)),Ia<span class="pl-k">=</span>a);<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">CustomBlending</span>){<span class="pl-k">if</span>(b<span class="pl-k">!==</span>Ua<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">k</span>.<span class="pl-en">blendEquation</span>(<span class="pl-en">E</span>(b)),Ua<span class="pl-k">=</span>b),c<span class="pl-k">!==</span>na<span class="pl-k">||</span>d<span class="pl-k">!==</span>Va)<span class="pl-smi">k</span>.<span class="pl-en">blendFunc</span>(<span class="pl-en">E</span>(c),<span class="pl-en">E</span>(d)),na<span class="pl-k">=</span>c,Va<span class="pl-k">=</span>d}<span class="pl-k">else</span> Va<span class="pl-k">=</span>na<span class="pl-k">=</span>Ua<span class="pl-k">=</span><span class="pl-c1">null</span>};<span class="pl-c1">this</span>.<span class="pl-en">setTexture</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">needsUpdate</span>){<span class="pl-smi">a</span>.<span class="pl-smi">__webglInit</span><span class="pl-k">||</span>(<span class="pl-smi">a</span>.<span class="pl-smi">__webglInit</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>,<span class="pl-smi">a</span>.<span class="pl-smi">__webglTexture</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L481" class="blob-num js-line-number" data-line-number="481"></td>
        <td id="LC481" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">k</span>.<span class="pl-en">createTexture</span>(),<span class="pl-c1">Q</span>.<span class="pl-smi">info</span>.<span class="pl-smi">memory</span>.<span class="pl-smi">textures</span><span class="pl-k">++</span>);<span class="pl-smi">k</span>.<span class="pl-en">activeTexture</span>(<span class="pl-smi">k</span>.<span class="pl-c1">TEXTURE0</span><span class="pl-k">+</span>b);<span class="pl-smi">k</span>.<span class="pl-en">bindTexture</span>(<span class="pl-smi">k</span>.<span class="pl-c1">TEXTURE_2D</span>,<span class="pl-smi">a</span>.<span class="pl-smi">__webglTexture</span>);<span class="pl-smi">k</span>.<span class="pl-en">pixelStorei</span>(<span class="pl-smi">k</span>.<span class="pl-c1">UNPACK_FLIP_Y_WEBGL</span>,<span class="pl-smi">a</span>.<span class="pl-smi">flipY</span>);<span class="pl-smi">k</span>.<span class="pl-en">pixelStorei</span>(<span class="pl-smi">k</span>.<span class="pl-c1">UNPACK_PREMULTIPLY_ALPHA_WEBGL</span>,<span class="pl-smi">a</span>.<span class="pl-smi">premultiplyAlpha</span>);<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">image</span>,d<span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">===</span>(<span class="pl-smi">c</span>.<span class="pl-c1">width</span><span class="pl-k">&amp;</span><span class="pl-smi">c</span>.<span class="pl-c1">width</span><span class="pl-k">-</span><span class="pl-c1">1</span>)<span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">===</span>(<span class="pl-smi">c</span>.<span class="pl-c1">height</span><span class="pl-k">&amp;</span><span class="pl-smi">c</span>.<span class="pl-c1">height</span><span class="pl-k">-</span><span class="pl-c1">1</span>),e<span class="pl-k">=</span><span class="pl-en">E</span>(<span class="pl-smi">a</span>.<span class="pl-smi">format</span>),f<span class="pl-k">=</span><span class="pl-en">E</span>(<span class="pl-smi">a</span>.<span class="pl-c1">type</span>);<span class="pl-en">G</span>(<span class="pl-smi">k</span>.<span class="pl-c1">TEXTURE_2D</span>,a,d);<span class="pl-k">if</span>(a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">CompressedTexture</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">mipmaps</span>,g<span class="pl-k">=</span><span class="pl-c1">0</span>,h<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">length</span>;g<span class="pl-k">&lt;</span>h;g<span class="pl-k">++</span>)c<span class="pl-k">=</span>f[g],<span class="pl-smi">k</span>.<span class="pl-en">compressedTexImage2D</span>(<span class="pl-smi">k</span>.<span class="pl-c1">TEXTURE_2D</span>,g,e,<span class="pl-smi">c</span>.<span class="pl-c1">width</span>,<span class="pl-smi">c</span>.<span class="pl-c1">height</span>,<span class="pl-c1">0</span>,<span class="pl-smi">c</span>.<span class="pl-c1">data</span>);</td>
      </tr>
      <tr>
        <td id="L482" class="blob-num js-line-number" data-line-number="482"></td>
        <td id="LC482" class="blob-code blob-code-inner js-file-line"><span class="pl-k">else</span> a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">DataTexture</span><span class="pl-k">?</span><span class="pl-smi">k</span>.<span class="pl-en">texImage2D</span>(<span class="pl-smi">k</span>.<span class="pl-c1">TEXTURE_2D</span>,<span class="pl-c1">0</span>,e,<span class="pl-smi">c</span>.<span class="pl-c1">width</span>,<span class="pl-smi">c</span>.<span class="pl-c1">height</span>,<span class="pl-c1">0</span>,e,f,<span class="pl-smi">c</span>.<span class="pl-c1">data</span>)<span class="pl-k">:</span><span class="pl-smi">k</span>.<span class="pl-en">texImage2D</span>(<span class="pl-smi">k</span>.<span class="pl-c1">TEXTURE_2D</span>,<span class="pl-c1">0</span>,e,e,f,<span class="pl-smi">a</span>.<span class="pl-smi">image</span>);<span class="pl-smi">a</span>.<span class="pl-smi">generateMipmaps</span><span class="pl-k">&amp;&amp;</span>d<span class="pl-k">&amp;&amp;</span><span class="pl-smi">k</span>.<span class="pl-en">generateMipmap</span>(<span class="pl-smi">k</span>.<span class="pl-c1">TEXTURE_2D</span>);<span class="pl-smi">a</span>.<span class="pl-smi">needsUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">onUpdate</span>)<span class="pl-smi">a</span>.<span class="pl-en">onUpdate</span>()}<span class="pl-k">else</span> <span class="pl-smi">k</span>.<span class="pl-en">activeTexture</span>(<span class="pl-smi">k</span>.<span class="pl-c1">TEXTURE0</span><span class="pl-k">+</span>b),<span class="pl-smi">k</span>.<span class="pl-en">bindTexture</span>(<span class="pl-smi">k</span>.<span class="pl-c1">TEXTURE_2D</span>,<span class="pl-smi">a</span>.<span class="pl-smi">__webglTexture</span>)};<span class="pl-c1">this</span>.<span class="pl-en">setRenderTarget</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span>a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">WebGLRenderTargetCube</span>;<span class="pl-k">if</span>(a<span class="pl-k">&amp;&amp;!</span><span class="pl-smi">a</span>.<span class="pl-smi">__webglFramebuffer</span>){<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">a</span>.<span class="pl-smi">depthBuffer</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">a</span>.<span class="pl-smi">depthBuffer</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>);<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span><span class="pl-smi">a</span>.<span class="pl-smi">stencilBuffer</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">a</span>.<span class="pl-smi">stencilBuffer</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L483" class="blob-num js-line-number" data-line-number="483"></td>
        <td id="LC483" class="blob-code blob-code-inner js-file-line"><span class="pl-k">!</span><span class="pl-c1">0</span>);<span class="pl-smi">a</span>.<span class="pl-smi">__webglTexture</span><span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-en">createTexture</span>();<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">===</span>(<span class="pl-smi">a</span>.<span class="pl-c1">width</span><span class="pl-k">&amp;</span><span class="pl-smi">a</span>.<span class="pl-c1">width</span><span class="pl-k">-</span><span class="pl-c1">1</span>)<span class="pl-k">&amp;&amp;</span><span class="pl-c1">0</span><span class="pl-k">===</span>(<span class="pl-smi">a</span>.<span class="pl-c1">height</span><span class="pl-k">&amp;</span><span class="pl-smi">a</span>.<span class="pl-c1">height</span><span class="pl-k">-</span><span class="pl-c1">1</span>),d<span class="pl-k">=</span><span class="pl-en">E</span>(<span class="pl-smi">a</span>.<span class="pl-smi">format</span>),e<span class="pl-k">=</span><span class="pl-en">E</span>(<span class="pl-smi">a</span>.<span class="pl-c1">type</span>);<span class="pl-k">if</span>(b){<span class="pl-smi">a</span>.<span class="pl-smi">__webglFramebuffer</span><span class="pl-k">=</span>[];<span class="pl-smi">a</span>.<span class="pl-smi">__webglRenderbuffer</span><span class="pl-k">=</span>[];<span class="pl-smi">k</span>.<span class="pl-en">bindTexture</span>(<span class="pl-smi">k</span>.<span class="pl-c1">TEXTURE_CUBE_MAP</span>,<span class="pl-smi">a</span>.<span class="pl-smi">__webglTexture</span>);<span class="pl-en">G</span>(<span class="pl-smi">k</span>.<span class="pl-c1">TEXTURE_CUBE_MAP</span>,a,c);<span class="pl-k">for</span>(<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">6</span><span class="pl-k">&gt;</span>f;f<span class="pl-k">++</span>){<span class="pl-smi">a</span>.<span class="pl-smi">__webglFramebuffer</span>[f]<span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-en">createFramebuffer</span>();<span class="pl-smi">a</span>.<span class="pl-smi">__webglRenderbuffer</span>[f]<span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-en">createRenderbuffer</span>();<span class="pl-smi">k</span>.<span class="pl-en">texImage2D</span>(<span class="pl-smi">k</span>.<span class="pl-c1">TEXTURE_CUBE_MAP_POSITIVE_X</span><span class="pl-k">+</span>f,<span class="pl-c1">0</span>,d,<span class="pl-smi">a</span>.<span class="pl-c1">width</span>,<span class="pl-smi">a</span>.<span class="pl-c1">height</span>,<span class="pl-c1">0</span>,d,e,<span class="pl-c1">null</span>);<span class="pl-k">var</span> g<span class="pl-k">=</span>a,h<span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-c1">TEXTURE_CUBE_MAP_POSITIVE_X</span><span class="pl-k">+</span>f;<span class="pl-smi">k</span>.<span class="pl-en">bindFramebuffer</span>(<span class="pl-smi">k</span>.<span class="pl-c1">FRAMEBUFFER</span>,</td>
      </tr>
      <tr>
        <td id="L484" class="blob-num js-line-number" data-line-number="484"></td>
        <td id="LC484" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">a</span>.<span class="pl-smi">__webglFramebuffer</span>[f]);<span class="pl-smi">k</span>.<span class="pl-en">framebufferTexture2D</span>(<span class="pl-smi">k</span>.<span class="pl-c1">FRAMEBUFFER</span>,<span class="pl-smi">k</span>.<span class="pl-c1">COLOR_ATTACHMENT0</span>,h,<span class="pl-smi">g</span>.<span class="pl-smi">__webglTexture</span>,<span class="pl-c1">0</span>);<span class="pl-en">H</span>(<span class="pl-smi">a</span>.<span class="pl-smi">__webglRenderbuffer</span>[f],a)}c<span class="pl-k">&amp;&amp;</span><span class="pl-smi">k</span>.<span class="pl-en">generateMipmap</span>(<span class="pl-smi">k</span>.<span class="pl-c1">TEXTURE_CUBE_MAP</span>)}<span class="pl-k">else</span> <span class="pl-smi">a</span>.<span class="pl-smi">__webglFramebuffer</span><span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-en">createFramebuffer</span>(),<span class="pl-smi">a</span>.<span class="pl-smi">__webglRenderbuffer</span><span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-en">createRenderbuffer</span>(),<span class="pl-smi">k</span>.<span class="pl-en">bindTexture</span>(<span class="pl-smi">k</span>.<span class="pl-c1">TEXTURE_2D</span>,<span class="pl-smi">a</span>.<span class="pl-smi">__webglTexture</span>),<span class="pl-en">G</span>(<span class="pl-smi">k</span>.<span class="pl-c1">TEXTURE_2D</span>,a,c),<span class="pl-smi">k</span>.<span class="pl-en">texImage2D</span>(<span class="pl-smi">k</span>.<span class="pl-c1">TEXTURE_2D</span>,<span class="pl-c1">0</span>,d,<span class="pl-smi">a</span>.<span class="pl-c1">width</span>,<span class="pl-smi">a</span>.<span class="pl-c1">height</span>,<span class="pl-c1">0</span>,d,e,<span class="pl-c1">null</span>),d<span class="pl-k">=</span><span class="pl-smi">k</span>.<span class="pl-c1">TEXTURE_2D</span>,<span class="pl-smi">k</span>.<span class="pl-en">bindFramebuffer</span>(<span class="pl-smi">k</span>.<span class="pl-c1">FRAMEBUFFER</span>,<span class="pl-smi">a</span>.<span class="pl-smi">__webglFramebuffer</span>),<span class="pl-smi">k</span>.<span class="pl-en">framebufferTexture2D</span>(<span class="pl-smi">k</span>.<span class="pl-c1">FRAMEBUFFER</span>,<span class="pl-smi">k</span>.<span class="pl-c1">COLOR_ATTACHMENT0</span>,</td>
      </tr>
      <tr>
        <td id="L485" class="blob-num js-line-number" data-line-number="485"></td>
        <td id="LC485" class="blob-code blob-code-inner js-file-line">d,<span class="pl-smi">a</span>.<span class="pl-smi">__webglTexture</span>,<span class="pl-c1">0</span>),<span class="pl-en">H</span>(<span class="pl-smi">a</span>.<span class="pl-smi">__webglRenderbuffer</span>,a),c<span class="pl-k">&amp;&amp;</span><span class="pl-smi">k</span>.<span class="pl-en">generateMipmap</span>(<span class="pl-smi">k</span>.<span class="pl-c1">TEXTURE_2D</span>);b<span class="pl-k">?</span><span class="pl-smi">k</span>.<span class="pl-en">bindTexture</span>(<span class="pl-smi">k</span>.<span class="pl-c1">TEXTURE_CUBE_MAP</span>,<span class="pl-c1">null</span>)<span class="pl-k">:</span><span class="pl-smi">k</span>.<span class="pl-en">bindTexture</span>(<span class="pl-smi">k</span>.<span class="pl-c1">TEXTURE_2D</span>,<span class="pl-c1">null</span>);<span class="pl-smi">k</span>.<span class="pl-en">bindRenderbuffer</span>(<span class="pl-smi">k</span>.<span class="pl-c1">RENDERBUFFER</span>,<span class="pl-c1">null</span>);<span class="pl-smi">k</span>.<span class="pl-en">bindFramebuffer</span>(<span class="pl-smi">k</span>.<span class="pl-c1">FRAMEBUFFER</span>,<span class="pl-c1">null</span>)}a<span class="pl-k">?</span>(b<span class="pl-k">=</span>b<span class="pl-k">?</span><span class="pl-smi">a</span>.<span class="pl-smi">__webglFramebuffer</span>[<span class="pl-smi">a</span>.<span class="pl-smi">activeCubeFace</span>]<span class="pl-k">:</span><span class="pl-smi">a</span>.<span class="pl-smi">__webglFramebuffer</span>,c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">width</span>,a<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">height</span>,e<span class="pl-k">=</span>d<span class="pl-k">=</span><span class="pl-c1">0</span>)<span class="pl-k">:</span>(b<span class="pl-k">=</span><span class="pl-c1">null</span>,c<span class="pl-k">=</span>wa,a<span class="pl-k">=</span>wb,d<span class="pl-k">=</span>$a,e<span class="pl-k">=</span>Ja);b<span class="pl-k">!==</span>fa<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">k</span>.<span class="pl-en">bindFramebuffer</span>(<span class="pl-smi">k</span>.<span class="pl-c1">FRAMEBUFFER</span>,b),<span class="pl-smi">k</span>.<span class="pl-en">viewport</span>(d,e,c,a),fa<span class="pl-k">=</span>b);Da<span class="pl-k">=</span>c;qb<span class="pl-k">=</span>a};<span class="pl-c1">this</span>.<span class="pl-smi">shadowMapPlugin</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.ShadowMapPlugin</span>;<span class="pl-c1">this</span>.<span class="pl-en">addPrePlugin</span>(<span class="pl-c1">this</span>.<span class="pl-smi">shadowMapPlugin</span>);</td>
      </tr>
      <tr>
        <td id="L486" class="blob-num js-line-number" data-line-number="486"></td>
        <td id="LC486" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-en">addPostPlugin</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.SpritePlugin</span>);<span class="pl-c1">this</span>.<span class="pl-en">addPostPlugin</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.LensFlarePlugin</span>)};</td>
      </tr>
      <tr>
        <td id="L487" class="blob-num js-line-number" data-line-number="487"></td>
        <td id="LC487" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">WebGLRenderTarget</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">this</span>.<span class="pl-c1">width</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-c1">height</span><span class="pl-k">=</span>b;c<span class="pl-k">=</span>c<span class="pl-k">||</span>{};<span class="pl-c1">this</span>.<span class="pl-smi">wrapS</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">c</span>.<span class="pl-smi">wrapS</span><span class="pl-k">?</span><span class="pl-smi">c</span>.<span class="pl-smi">wrapS</span><span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">ClampToEdgeWrapping</span>;<span class="pl-c1">this</span>.<span class="pl-smi">wrapT</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">c</span>.<span class="pl-smi">wrapT</span><span class="pl-k">?</span><span class="pl-smi">c</span>.<span class="pl-smi">wrapT</span><span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">ClampToEdgeWrapping</span>;<span class="pl-c1">this</span>.<span class="pl-smi">magFilter</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">c</span>.<span class="pl-smi">magFilter</span><span class="pl-k">?</span><span class="pl-smi">c</span>.<span class="pl-smi">magFilter</span><span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">LinearFilter</span>;<span class="pl-c1">this</span>.<span class="pl-smi">minFilter</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">c</span>.<span class="pl-smi">minFilter</span><span class="pl-k">?</span><span class="pl-smi">c</span>.<span class="pl-smi">minFilter</span><span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">LinearMipMapLinearFilter</span>;<span class="pl-c1">this</span>.<span class="pl-smi">anisotropy</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">c</span>.<span class="pl-smi">anisotropy</span><span class="pl-k">?</span><span class="pl-smi">c</span>.<span class="pl-smi">anisotropy</span><span class="pl-k">:</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">offset</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>);<span class="pl-c1">this</span>.<span class="pl-smi">repeat</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(<span class="pl-c1">1</span>,<span class="pl-c1">1</span>);<span class="pl-c1">this</span>.<span class="pl-smi">format</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">c</span>.<span class="pl-smi">format</span><span class="pl-k">?</span><span class="pl-smi">c</span>.<span class="pl-smi">format</span><span class="pl-k">:</span></td>
      </tr>
      <tr>
        <td id="L488" class="blob-num js-line-number" data-line-number="488"></td>
        <td id="LC488" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">RGBAFormat</span>;<span class="pl-c1">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">c</span>.<span class="pl-c1">type</span><span class="pl-k">?</span><span class="pl-smi">c</span>.<span class="pl-c1">type</span><span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">UnsignedByteType</span>;<span class="pl-c1">this</span>.<span class="pl-smi">depthBuffer</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">c</span>.<span class="pl-smi">depthBuffer</span><span class="pl-k">?</span><span class="pl-smi">c</span>.<span class="pl-smi">depthBuffer</span><span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">stencilBuffer</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">c</span>.<span class="pl-smi">stencilBuffer</span><span class="pl-k">?</span><span class="pl-smi">c</span>.<span class="pl-smi">stencilBuffer</span><span class="pl-k">:</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">generateMipmaps</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L489" class="blob-num js-line-number" data-line-number="489"></td>
        <td id="LC489" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">WebGLRenderTarget</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.WebGLRenderTarget</span>(<span class="pl-c1">this</span>.<span class="pl-c1">width</span>,<span class="pl-c1">this</span>.<span class="pl-c1">height</span>);<span class="pl-smi">a</span>.<span class="pl-smi">wrapS</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">wrapS</span>;<span class="pl-smi">a</span>.<span class="pl-smi">wrapT</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">wrapT</span>;<span class="pl-smi">a</span>.<span class="pl-smi">magFilter</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">magFilter</span>;<span class="pl-smi">a</span>.<span class="pl-smi">anisotropy</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">anisotropy</span>;<span class="pl-smi">a</span>.<span class="pl-smi">minFilter</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">minFilter</span>;<span class="pl-smi">a</span>.<span class="pl-smi">offset</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">offset</span>);<span class="pl-smi">a</span>.<span class="pl-smi">repeat</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">repeat</span>);<span class="pl-smi">a</span>.<span class="pl-smi">format</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">format</span>;<span class="pl-smi">a</span>.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">type</span>;<span class="pl-smi">a</span>.<span class="pl-smi">depthBuffer</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">depthBuffer</span>;<span class="pl-smi">a</span>.<span class="pl-smi">stencilBuffer</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">stencilBuffer</span>;<span class="pl-smi">a</span>.<span class="pl-smi">generateMipmaps</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">generateMipmaps</span>;<span class="pl-k">return</span> a};</td>
      </tr>
      <tr>
        <td id="L490" class="blob-num js-line-number" data-line-number="490"></td>
        <td id="LC490" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">WebGLRenderTargetCube</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">WebGLRenderTarget</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a,b,c);<span class="pl-c1">this</span>.<span class="pl-smi">activeCubeFace</span><span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">WebGLRenderTargetCube</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">WebGLRenderTarget</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-en">RenderableVertex</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">positionWorld</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-c1">this</span>.<span class="pl-smi">positionScreen</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector4</span>;<span class="pl-c1">this</span>.<span class="pl-smi">visible</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">RenderableVertex</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">positionWorld</span>.<span class="pl-en">copy</span>(<span class="pl-smi">a</span>.<span class="pl-smi">positionWorld</span>);<span class="pl-c1">this</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-en">copy</span>(<span class="pl-smi">a</span>.<span class="pl-smi">positionScreen</span>)};</td>
      </tr>
      <tr>
        <td id="L491" class="blob-num js-line-number" data-line-number="491"></td>
        <td id="LC491" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">RenderableFace3</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">v1</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.RenderableVertex</span>;<span class="pl-c1">this</span>.<span class="pl-smi">v2</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.RenderableVertex</span>;<span class="pl-c1">this</span>.<span class="pl-smi">v3</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.RenderableVertex</span>;<span class="pl-c1">this</span>.<span class="pl-smi">centroidWorld</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-c1">this</span>.<span class="pl-smi">centroidScreen</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-c1">this</span>.<span class="pl-smi">normalWorld</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-c1">this</span>.<span class="pl-smi">vertexNormalsWorld</span><span class="pl-k">=</span>[<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>];<span class="pl-c1">this</span>.<span class="pl-smi">vertexNormalsLength</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">material</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">color</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">uvs</span><span class="pl-k">=</span>[[]];<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">null</span>};</td>
      </tr>
      <tr>
        <td id="L492" class="blob-num js-line-number" data-line-number="492"></td>
        <td id="LC492" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">RenderableFace4</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">v1</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.RenderableVertex</span>;<span class="pl-c1">this</span>.<span class="pl-smi">v2</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.RenderableVertex</span>;<span class="pl-c1">this</span>.<span class="pl-smi">v3</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.RenderableVertex</span>;<span class="pl-c1">this</span>.<span class="pl-smi">v4</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.RenderableVertex</span>;<span class="pl-c1">this</span>.<span class="pl-smi">centroidWorld</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-c1">this</span>.<span class="pl-smi">centroidScreen</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-c1">this</span>.<span class="pl-smi">normalWorld</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-c1">this</span>.<span class="pl-smi">vertexNormalsWorld</span><span class="pl-k">=</span>[<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>];<span class="pl-c1">this</span>.<span class="pl-smi">vertexNormalsLength</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">material</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">color</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">uvs</span><span class="pl-k">=</span>[[]];<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">null</span>};</td>
      </tr>
      <tr>
        <td id="L493" class="blob-num js-line-number" data-line-number="493"></td>
        <td id="LC493" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">RenderableObject</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">object</span><span class="pl-k">=</span><span class="pl-c1">null</span>};<span class="pl-c1">THREE</span>.<span class="pl-en">RenderableParticle</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">rotation</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">object</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">scale</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>;<span class="pl-c1">this</span>.<span class="pl-smi">material</span><span class="pl-k">=</span><span class="pl-c1">null</span>};<span class="pl-c1">THREE</span>.<span class="pl-en">RenderableLine</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-c1">this</span>.<span class="pl-smi">v1</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.RenderableVertex</span>;<span class="pl-c1">this</span>.<span class="pl-smi">v2</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.RenderableVertex</span>;<span class="pl-c1">this</span>.<span class="pl-smi">material</span><span class="pl-k">=</span><span class="pl-c1">null</span>};</td>
      </tr>
      <tr>
        <td id="L494" class="blob-num js-line-number" data-line-number="494"></td>
        <td id="LC494" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ColorUtils</span><span class="pl-k">=</span>{<span class="pl-en">adjustHSV</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">ColorUtils</span>.<span class="pl-smi">__hsv</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">ColorUtils</span>.<span class="pl-en">rgbToHsv</span>(a,e);<span class="pl-smi">e</span>.<span class="pl-smi">h</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Math</span>.<span class="pl-en">clamp</span>(<span class="pl-smi">e</span>.<span class="pl-smi">h</span><span class="pl-k">+</span>b,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);<span class="pl-smi">e</span>.<span class="pl-smi">s</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Math</span>.<span class="pl-en">clamp</span>(<span class="pl-smi">e</span>.<span class="pl-smi">s</span><span class="pl-k">+</span>c,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);<span class="pl-smi">e</span>.<span class="pl-smi">v</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Math</span>.<span class="pl-en">clamp</span>(<span class="pl-smi">e</span>.<span class="pl-smi">v</span><span class="pl-k">+</span>d,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);<span class="pl-smi">a</span>.<span class="pl-en">setHSV</span>(<span class="pl-smi">e</span>.<span class="pl-smi">h</span>,<span class="pl-smi">e</span>.<span class="pl-smi">s</span>,<span class="pl-smi">e</span>.<span class="pl-smi">v</span>)},<span class="pl-en">rgbToHsv</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">r</span>,d<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">g</span>,e<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">b</span>,f<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(c,d),e),g<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(c,d),e);<span class="pl-k">if</span>(g<span class="pl-k">===</span>f)g<span class="pl-k">=</span>c<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">else</span>{<span class="pl-k">var</span> h<span class="pl-k">=</span>f<span class="pl-k">-</span>g,g<span class="pl-k">=</span>h<span class="pl-k">/</span>f,c<span class="pl-k">=</span>(c<span class="pl-k">===</span>f<span class="pl-k">?</span>(d<span class="pl-k">-</span>e)<span class="pl-k">/</span>h<span class="pl-k">:</span>d<span class="pl-k">===</span>f<span class="pl-k">?</span><span class="pl-c1">2</span><span class="pl-k">+</span>(e<span class="pl-k">-</span>c)<span class="pl-k">/</span>h<span class="pl-k">:</span><span class="pl-c1">4</span><span class="pl-k">+</span>(c<span class="pl-k">-</span>d)<span class="pl-k">/</span>h)<span class="pl-k">/</span><span class="pl-c1">6</span>;<span class="pl-c1">0</span><span class="pl-k">&gt;</span>c<span class="pl-k">&amp;&amp;</span>(c<span class="pl-k">+=</span><span class="pl-c1">1</span>);<span class="pl-c1">1</span><span class="pl-k">&lt;</span>c<span class="pl-k">&amp;&amp;</span>(c<span class="pl-k">-=</span><span class="pl-c1">1</span>)}<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span>{h<span class="pl-k">:</span><span class="pl-c1">0</span>,s<span class="pl-k">:</span><span class="pl-c1">0</span>,v<span class="pl-k">:</span><span class="pl-c1">0</span>});<span class="pl-smi">b</span>.<span class="pl-smi">h</span><span class="pl-k">=</span>c;<span class="pl-smi">b</span>.<span class="pl-smi">s</span><span class="pl-k">=</span>g;<span class="pl-smi">b</span>.<span class="pl-smi">v</span><span class="pl-k">=</span>f;<span class="pl-k">return</span> b}};</td>
      </tr>
      <tr>
        <td id="L495" class="blob-num js-line-number" data-line-number="495"></td>
        <td id="LC495" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ColorUtils</span>.<span class="pl-smi">__hsv</span><span class="pl-k">=</span>{h<span class="pl-k">:</span><span class="pl-c1">0</span>,s<span class="pl-k">:</span><span class="pl-c1">0</span>,v<span class="pl-k">:</span><span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L496" class="blob-num js-line-number" data-line-number="496"></td>
        <td id="LC496" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">GeometryUtils</span><span class="pl-k">=</span>{<span class="pl-en">merge</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> c,d,e<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">length</span>,f<span class="pl-k">=</span>b <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Mesh</span><span class="pl-k">?</span><span class="pl-smi">b</span>.<span class="pl-smi">geometry</span><span class="pl-k">:</span>b,g<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertices</span>,h<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">vertices</span>,i<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">faces</span>,j<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">faces</span>,l<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">faceVertexUvs</span>[<span class="pl-c1">0</span>],m<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">faceVertexUvs</span>[<span class="pl-c1">0</span>],n<span class="pl-k">=</span>{},p<span class="pl-k">=</span><span class="pl-c1">0</span>;p<span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-smi">materials</span>.<span class="pl-c1">length</span>;p<span class="pl-k">++</span>)n[<span class="pl-smi">a</span>.<span class="pl-smi">materials</span>[p].<span class="pl-c1">id</span>]<span class="pl-k">=</span>p;b <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Mesh</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-smi">matrixAutoUpdate</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">b</span>.<span class="pl-en">updateMatrix</span>(),c<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">matrix</span>,d<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>,<span class="pl-smi">d</span>.<span class="pl-en">extractRotation</span>(c,<span class="pl-smi">b</span>.<span class="pl-smi">scale</span>));<span class="pl-k">for</span>(<span class="pl-k">var</span> p<span class="pl-k">=</span><span class="pl-c1">0</span>,o<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-c1">length</span>;p<span class="pl-k">&lt;</span>o;p<span class="pl-k">++</span>){<span class="pl-k">var</span> q<span class="pl-k">=</span>h[p].<span class="pl-en">clone</span>();c<span class="pl-k">&amp;&amp;</span><span class="pl-smi">c</span>.<span class="pl-en">multiplyVector3</span>(q);<span class="pl-smi">g</span>.<span class="pl-c1">push</span>(q)}p<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(o<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-c1">length</span>;p<span class="pl-k">&lt;</span>o;p<span class="pl-k">++</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span>j[p],</td>
      </tr>
      <tr>
        <td id="L497" class="blob-num js-line-number" data-line-number="497"></td>
        <td id="LC497" class="blob-code blob-code-inner js-file-line">r,t,<span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">vertexNormals</span>,u<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">vertexColors</span>;g <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Face3</span><span class="pl-k">?</span>r<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(<span class="pl-smi">g</span>.<span class="pl-smi">a</span><span class="pl-k">+</span>e,<span class="pl-smi">g</span>.<span class="pl-smi">b</span><span class="pl-k">+</span>e,<span class="pl-smi">g</span>.<span class="pl-smi">c</span><span class="pl-k">+</span>e)<span class="pl-k">:</span>g <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Face4</span><span class="pl-k">&amp;&amp;</span>(r<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Face4</span>(<span class="pl-smi">g</span>.<span class="pl-smi">a</span><span class="pl-k">+</span>e,<span class="pl-smi">g</span>.<span class="pl-smi">b</span><span class="pl-k">+</span>e,<span class="pl-smi">g</span>.<span class="pl-smi">c</span><span class="pl-k">+</span>e,<span class="pl-smi">g</span>.<span class="pl-smi">d</span><span class="pl-k">+</span>e));<span class="pl-smi">r</span>.<span class="pl-smi">normal</span>.<span class="pl-en">copy</span>(<span class="pl-smi">g</span>.<span class="pl-smi">normal</span>);d<span class="pl-k">&amp;&amp;</span><span class="pl-smi">d</span>.<span class="pl-en">multiplyVector3</span>(<span class="pl-smi">r</span>.<span class="pl-smi">normal</span>);h<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(q<span class="pl-k">=</span><span class="pl-c1">B</span>.<span class="pl-c1">length</span>;h<span class="pl-k">&lt;</span>q;h<span class="pl-k">++</span>)t<span class="pl-k">=</span><span class="pl-c1">B</span>[h].<span class="pl-en">clone</span>(),d<span class="pl-k">&amp;&amp;</span><span class="pl-smi">d</span>.<span class="pl-en">multiplyVector3</span>(t),<span class="pl-smi">r</span>.<span class="pl-smi">vertexNormals</span>.<span class="pl-c1">push</span>(t);<span class="pl-smi">r</span>.<span class="pl-c1">color</span>.<span class="pl-en">copy</span>(<span class="pl-smi">g</span>.<span class="pl-c1">color</span>);h<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(q<span class="pl-k">=</span><span class="pl-smi">u</span>.<span class="pl-c1">length</span>;h<span class="pl-k">&lt;</span>q;h<span class="pl-k">++</span>)t<span class="pl-k">=</span>u[h],<span class="pl-smi">r</span>.<span class="pl-smi">vertexColors</span>.<span class="pl-c1">push</span>(<span class="pl-smi">t</span>.<span class="pl-en">clone</span>());<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span><span class="pl-smi">g</span>.<span class="pl-smi">materialIndex</span><span class="pl-k">&amp;&amp;</span>(h<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">materials</span>[<span class="pl-smi">g</span>.<span class="pl-smi">materialIndex</span>],q<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-c1">id</span>,u<span class="pl-k">=</span>n[q],<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">===</span>u<span class="pl-k">&amp;&amp;</span>(u<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">materials</span>.<span class="pl-c1">length</span>,</td>
      </tr>
      <tr>
        <td id="L498" class="blob-num js-line-number" data-line-number="498"></td>
        <td id="LC498" class="blob-code blob-code-inner js-file-line">n[q]<span class="pl-k">=</span>u,<span class="pl-smi">a</span>.<span class="pl-smi">materials</span>.<span class="pl-c1">push</span>(h)),<span class="pl-smi">r</span>.<span class="pl-smi">materialIndex</span><span class="pl-k">=</span>u);<span class="pl-smi">r</span>.<span class="pl-smi">centroid</span>.<span class="pl-en">copy</span>(<span class="pl-smi">g</span>.<span class="pl-smi">centroid</span>);c<span class="pl-k">&amp;&amp;</span><span class="pl-smi">c</span>.<span class="pl-en">multiplyVector3</span>(<span class="pl-smi">r</span>.<span class="pl-smi">centroid</span>);<span class="pl-smi">i</span>.<span class="pl-c1">push</span>(r)}p<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(o<span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-c1">length</span>;p<span class="pl-k">&lt;</span>o;p<span class="pl-k">++</span>){c<span class="pl-k">=</span>m[p];d<span class="pl-k">=</span>[];h<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(q<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">length</span>;h<span class="pl-k">&lt;</span>q;h<span class="pl-k">++</span>)<span class="pl-smi">d</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.UV</span>(c[h].<span class="pl-smi">u</span>,c[h].<span class="pl-smi">v</span>));<span class="pl-smi">l</span>.<span class="pl-c1">push</span>(d)}},<span class="pl-en">clone</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Geometry</span>,c,d<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertices</span>,e<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">faces</span>,f<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">faceVertexUvs</span>[<span class="pl-c1">0</span>];<span class="pl-smi">a</span>.<span class="pl-smi">materials</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">b</span>.<span class="pl-smi">materials</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">materials</span>.<span class="pl-c1">slice</span>());a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-c1">length</span>;a<span class="pl-k">&lt;</span>c;a<span class="pl-k">++</span>)<span class="pl-smi">b</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">push</span>(d[a].<span class="pl-en">clone</span>());a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-c1">length</span>;a<span class="pl-k">&lt;</span>c;a<span class="pl-k">++</span>)<span class="pl-smi">b</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">push</span>(e[a].<span class="pl-en">clone</span>());a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">length</span>;a<span class="pl-k">&lt;</span></td>
      </tr>
      <tr>
        <td id="L499" class="blob-num js-line-number" data-line-number="499"></td>
        <td id="LC499" class="blob-code blob-code-inner js-file-line">c;a<span class="pl-k">++</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> d<span class="pl-k">=</span>f[a],e<span class="pl-k">=</span>[],g<span class="pl-k">=</span><span class="pl-c1">0</span>,h<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-c1">length</span>;g<span class="pl-k">&lt;</span>h;g<span class="pl-k">++</span>)<span class="pl-smi">e</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.UV</span>(d[g].<span class="pl-smi">u</span>,d[g].<span class="pl-smi">v</span>));<span class="pl-smi">b</span>.<span class="pl-smi">faceVertexUvs</span>[<span class="pl-c1">0</span>].<span class="pl-c1">push</span>(e)}<span class="pl-k">return</span> b},<span class="pl-en">randomPointInTriangle</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">var</span> d,e,f,g<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,h<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">GeometryUtils</span>.<span class="pl-smi">__v1</span>;d<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">GeometryUtils</span>.<span class="pl-en">random</span>();e<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">GeometryUtils</span>.<span class="pl-en">random</span>();<span class="pl-c1">1</span><span class="pl-k">&lt;</span>d<span class="pl-k">+</span>e<span class="pl-k">&amp;&amp;</span>(d<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">-</span>d,e<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">-</span>e);f<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">-</span>d<span class="pl-k">-</span>e;<span class="pl-smi">g</span>.<span class="pl-en">copy</span>(a);<span class="pl-smi">g</span>.<span class="pl-en">multiplyScalar</span>(d);<span class="pl-smi">h</span>.<span class="pl-en">copy</span>(b);<span class="pl-smi">h</span>.<span class="pl-en">multiplyScalar</span>(e);<span class="pl-smi">g</span>.<span class="pl-en">addSelf</span>(h);<span class="pl-smi">h</span>.<span class="pl-en">copy</span>(c);<span class="pl-smi">h</span>.<span class="pl-en">multiplyScalar</span>(f);<span class="pl-smi">g</span>.<span class="pl-en">addSelf</span>(h);<span class="pl-k">return</span> g},<span class="pl-en">randomPointInFace</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">var</span> d,e,f;<span class="pl-k">if</span>(a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Face3</span>)<span class="pl-k">return</span> d<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L500" class="blob-num js-line-number" data-line-number="500"></td>
        <td id="LC500" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">b</span>.<span class="pl-smi">vertices</span>[<span class="pl-smi">a</span>.<span class="pl-smi">a</span>],e<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">vertices</span>[<span class="pl-smi">a</span>.<span class="pl-smi">b</span>],f<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">vertices</span>[<span class="pl-smi">a</span>.<span class="pl-smi">c</span>],<span class="pl-c1">THREE</span>.<span class="pl-smi">GeometryUtils</span>.<span class="pl-en">randomPointInTriangle</span>(d,e,f);<span class="pl-k">if</span>(a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Face4</span>){d<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">vertices</span>[<span class="pl-smi">a</span>.<span class="pl-smi">a</span>];e<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">vertices</span>[<span class="pl-smi">a</span>.<span class="pl-smi">b</span>];f<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">vertices</span>[<span class="pl-smi">a</span>.<span class="pl-smi">c</span>];<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">vertices</span>[<span class="pl-smi">a</span>.<span class="pl-smi">d</span>],g;c<span class="pl-k">?</span><span class="pl-smi">a</span>.<span class="pl-smi">_area1</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">a</span>.<span class="pl-smi">_area2</span><span class="pl-k">?</span>(c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">_area1</span>,g<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">_area2</span>)<span class="pl-k">:</span>(c<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">GeometryUtils</span>.<span class="pl-en">triangleArea</span>(d,e,b),g<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">GeometryUtils</span>.<span class="pl-en">triangleArea</span>(e,f,b),<span class="pl-smi">a</span>.<span class="pl-smi">_area1</span><span class="pl-k">=</span>c,<span class="pl-smi">a</span>.<span class="pl-smi">_area2</span><span class="pl-k">=</span>g)<span class="pl-k">:</span>(c<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">GeometryUtils</span>.<span class="pl-en">triangleArea</span>(d,e,b),g<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">GeometryUtils</span>.<span class="pl-en">triangleArea</span>(e,f,b));<span class="pl-k">return</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">GeometryUtils</span>.<span class="pl-en">random</span>()<span class="pl-k">*</span>(c<span class="pl-k">+</span>g)<span class="pl-k">&lt;</span>c<span class="pl-k">?</span><span class="pl-c1">THREE</span>.<span class="pl-smi">GeometryUtils</span>.<span class="pl-en">randomPointInTriangle</span>(d,</td>
      </tr>
      <tr>
        <td id="L501" class="blob-num js-line-number" data-line-number="501"></td>
        <td id="LC501" class="blob-code blob-code-inner js-file-line">e,b)<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">GeometryUtils</span>.<span class="pl-en">randomPointInTriangle</span>(e,f,b)}},<span class="pl-en">randomPointsInGeometry</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">function</span> <span class="pl-en">c</span>(<span class="pl-smi">a</span>){<span class="pl-k">function</span> <span class="pl-en">b</span>(<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">if</span>(d<span class="pl-k">&lt;</span>c)<span class="pl-k">return</span> c;<span class="pl-k">var</span> e<span class="pl-k">=</span>c<span class="pl-k">+</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>((d<span class="pl-k">-</span>c)<span class="pl-k">/</span><span class="pl-c1">2</span>);<span class="pl-k">return</span> j[e]<span class="pl-k">&gt;</span>a<span class="pl-k">?</span><span class="pl-en">b</span>(c,e<span class="pl-k">-</span><span class="pl-c1">1</span>)<span class="pl-k">:</span>j[e]<span class="pl-k">&lt;</span>a<span class="pl-k">?</span><span class="pl-en">b</span>(e<span class="pl-k">+</span><span class="pl-c1">1</span>,d)<span class="pl-k">:</span>e}<span class="pl-k">return</span> <span class="pl-en">b</span>(<span class="pl-c1">0</span>,<span class="pl-smi">j</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>)}<span class="pl-k">var</span> d,e,f<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">faces</span>,g<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertices</span>,h<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">length</span>,i<span class="pl-k">=</span><span class="pl-c1">0</span>,j<span class="pl-k">=</span>[],l,m,n,p;<span class="pl-k">for</span>(e<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span>h;e<span class="pl-k">++</span>)d<span class="pl-k">=</span>f[e],d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Face3</span><span class="pl-k">?</span>(l<span class="pl-k">=</span>g[<span class="pl-smi">d</span>.<span class="pl-smi">a</span>],m<span class="pl-k">=</span>g[<span class="pl-smi">d</span>.<span class="pl-smi">b</span>],n<span class="pl-k">=</span>g[<span class="pl-smi">d</span>.<span class="pl-smi">c</span>],<span class="pl-smi">d</span>.<span class="pl-smi">_area</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">GeometryUtils</span>.<span class="pl-en">triangleArea</span>(l,m,n))<span class="pl-k">:</span>d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Face4</span><span class="pl-k">&amp;&amp;</span>(l<span class="pl-k">=</span>g[<span class="pl-smi">d</span>.<span class="pl-smi">a</span>],m<span class="pl-k">=</span>g[<span class="pl-smi">d</span>.<span class="pl-smi">b</span>],n<span class="pl-k">=</span>g[<span class="pl-smi">d</span>.<span class="pl-smi">c</span>],p<span class="pl-k">=</span>g[<span class="pl-smi">d</span>.<span class="pl-smi">d</span>],<span class="pl-smi">d</span>.<span class="pl-smi">_area1</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">GeometryUtils</span>.<span class="pl-en">triangleArea</span>(l,</td>
      </tr>
      <tr>
        <td id="L502" class="blob-num js-line-number" data-line-number="502"></td>
        <td id="LC502" class="blob-code blob-code-inner js-file-line">m,p),<span class="pl-smi">d</span>.<span class="pl-smi">_area2</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">GeometryUtils</span>.<span class="pl-en">triangleArea</span>(m,n,p),<span class="pl-smi">d</span>.<span class="pl-smi">_area</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">_area1</span><span class="pl-k">+</span><span class="pl-smi">d</span>.<span class="pl-smi">_area2</span>),i<span class="pl-k">+=</span><span class="pl-smi">d</span>.<span class="pl-smi">_area</span>,j[e]<span class="pl-k">=</span>i;d<span class="pl-k">=</span>[];<span class="pl-k">for</span>(e<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span>b;e<span class="pl-k">++</span>)g<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">GeometryUtils</span>.<span class="pl-en">random</span>()<span class="pl-k">*</span>i,g<span class="pl-k">=</span><span class="pl-en">c</span>(g),d[e]<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">GeometryUtils</span>.<span class="pl-en">randomPointInFace</span>(f[g],a,<span class="pl-k">!</span><span class="pl-c1">0</span>);<span class="pl-k">return</span> d},<span class="pl-en">triangleArea</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">var</span> d,e<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">GeometryUtils</span>.<span class="pl-smi">__v1</span>;<span class="pl-smi">e</span>.<span class="pl-c1">sub</span>(a,b);d<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-c1">length</span>();<span class="pl-smi">e</span>.<span class="pl-c1">sub</span>(a,c);a<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-c1">length</span>();<span class="pl-smi">e</span>.<span class="pl-c1">sub</span>(b,c);c<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-c1">length</span>();b<span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(d<span class="pl-k">+</span>a<span class="pl-k">+</span>c);<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(b<span class="pl-k">*</span>(b<span class="pl-k">-</span>d)<span class="pl-k">*</span>(b<span class="pl-k">-</span>a)<span class="pl-k">*</span>(b<span class="pl-k">-</span>c))},<span class="pl-en">center</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-smi">a</span>.<span class="pl-en">computeBoundingBox</span>();<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">boundingBox</span>,c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-smi">c</span>.<span class="pl-c1">add</span>(<span class="pl-smi">b</span>.<span class="pl-smi">min</span>,</td>
      </tr>
      <tr>
        <td id="L503" class="blob-num js-line-number" data-line-number="503"></td>
        <td id="LC503" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">b</span>.<span class="pl-smi">max</span>);<span class="pl-smi">c</span>.<span class="pl-en">multiplyScalar</span>(<span class="pl-k">-</span><span class="pl-c1">0.5</span>);<span class="pl-smi">a</span>.<span class="pl-en">applyMatrix</span>((<span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>).<span class="pl-en">makeTranslation</span>(<span class="pl-smi">c</span>.<span class="pl-c1">x</span>,<span class="pl-smi">c</span>.<span class="pl-c1">y</span>,<span class="pl-smi">c</span>.<span class="pl-c1">z</span>));<span class="pl-smi">a</span>.<span class="pl-en">computeBoundingBox</span>();<span class="pl-k">return</span> c},<span class="pl-en">normalizeUVs</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">faceVertexUvs</span>[<span class="pl-c1">0</span>],b<span class="pl-k">=</span><span class="pl-c1">0</span>,c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>;b<span class="pl-k">&lt;</span>c;b<span class="pl-k">++</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> d<span class="pl-k">=</span>a[b],e<span class="pl-k">=</span><span class="pl-c1">0</span>,f<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-c1">length</span>;e<span class="pl-k">&lt;</span>f;e<span class="pl-k">++</span>)<span class="pl-k">if</span>(<span class="pl-c1">1</span><span class="pl-k">!==</span>d[e].<span class="pl-smi">u</span><span class="pl-k">&amp;&amp;</span>(d[e].<span class="pl-smi">u</span><span class="pl-k">-=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(d[e].<span class="pl-smi">u</span>)),<span class="pl-c1">1</span><span class="pl-k">!==</span>d[e].<span class="pl-smi">v</span>)d[e].<span class="pl-smi">v</span><span class="pl-k">-=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(d[e].<span class="pl-smi">v</span>)},<span class="pl-en">triangulateQuads</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b,c,d,e,f<span class="pl-k">=</span>[],g<span class="pl-k">=</span>[],h<span class="pl-k">=</span>[];b<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">faceUvs</span>.<span class="pl-c1">length</span>;b<span class="pl-k">&lt;</span>c;b<span class="pl-k">++</span>)g[b]<span class="pl-k">=</span>[];b<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">faceVertexUvs</span>.<span class="pl-c1">length</span>;b<span class="pl-k">&lt;</span>c;b<span class="pl-k">++</span>)h[b]<span class="pl-k">=</span>[];b<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">length</span>;b<span class="pl-k">&lt;</span>c;b<span class="pl-k">++</span>)<span class="pl-k">if</span>(d<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L504" class="blob-num js-line-number" data-line-number="504"></td>
        <td id="LC504" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">a</span>.<span class="pl-smi">faces</span>[b],d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Face4</span>){e<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">a</span>;<span class="pl-k">var</span> i<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">b</span>,j<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">c</span>,l<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">d</span>,m<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>,n<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>;<span class="pl-smi">m</span>.<span class="pl-c1">color</span>.<span class="pl-en">copy</span>(<span class="pl-smi">d</span>.<span class="pl-c1">color</span>);<span class="pl-smi">n</span>.<span class="pl-c1">color</span>.<span class="pl-en">copy</span>(<span class="pl-smi">d</span>.<span class="pl-c1">color</span>);<span class="pl-smi">m</span>.<span class="pl-smi">materialIndex</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">materialIndex</span>;<span class="pl-smi">n</span>.<span class="pl-smi">materialIndex</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">materialIndex</span>;<span class="pl-smi">m</span>.<span class="pl-smi">a</span><span class="pl-k">=</span>e;<span class="pl-smi">m</span>.<span class="pl-smi">b</span><span class="pl-k">=</span>i;<span class="pl-smi">m</span>.<span class="pl-smi">c</span><span class="pl-k">=</span>l;<span class="pl-smi">n</span>.<span class="pl-smi">a</span><span class="pl-k">=</span>i;<span class="pl-smi">n</span>.<span class="pl-smi">b</span><span class="pl-k">=</span>j;<span class="pl-smi">n</span>.<span class="pl-smi">c</span><span class="pl-k">=</span>l;<span class="pl-c1">4</span><span class="pl-k">===</span><span class="pl-smi">d</span>.<span class="pl-smi">vertexColors</span>.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">m</span>.<span class="pl-smi">vertexColors</span>[<span class="pl-c1">0</span>]<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">vertexColors</span>[<span class="pl-c1">0</span>].<span class="pl-en">clone</span>(),<span class="pl-smi">m</span>.<span class="pl-smi">vertexColors</span>[<span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">vertexColors</span>[<span class="pl-c1">1</span>].<span class="pl-en">clone</span>(),<span class="pl-smi">m</span>.<span class="pl-smi">vertexColors</span>[<span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">vertexColors</span>[<span class="pl-c1">3</span>].<span class="pl-en">clone</span>(),<span class="pl-smi">n</span>.<span class="pl-smi">vertexColors</span>[<span class="pl-c1">0</span>]<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">vertexColors</span>[<span class="pl-c1">1</span>].<span class="pl-en">clone</span>(),<span class="pl-smi">n</span>.<span class="pl-smi">vertexColors</span>[<span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">vertexColors</span>[<span class="pl-c1">2</span>].<span class="pl-en">clone</span>(),<span class="pl-smi">n</span>.<span class="pl-smi">vertexColors</span>[<span class="pl-c1">2</span>]<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L505" class="blob-num js-line-number" data-line-number="505"></td>
        <td id="LC505" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">d</span>.<span class="pl-smi">vertexColors</span>[<span class="pl-c1">3</span>].<span class="pl-en">clone</span>());<span class="pl-smi">f</span>.<span class="pl-c1">push</span>(m,n);d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(e<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">faceVertexUvs</span>.<span class="pl-c1">length</span>;d<span class="pl-k">&lt;</span>e;d<span class="pl-k">++</span>)<span class="pl-smi">a</span>.<span class="pl-smi">faceVertexUvs</span>[d].<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>(m<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">faceVertexUvs</span>[d][b],i<span class="pl-k">=</span>m[<span class="pl-c1">1</span>],j<span class="pl-k">=</span>m[<span class="pl-c1">2</span>],l<span class="pl-k">=</span>m[<span class="pl-c1">3</span>],m<span class="pl-k">=</span>[m[<span class="pl-c1">0</span>].<span class="pl-en">clone</span>(),<span class="pl-smi">i</span>.<span class="pl-en">clone</span>(),<span class="pl-smi">l</span>.<span class="pl-en">clone</span>()],i<span class="pl-k">=</span>[<span class="pl-smi">i</span>.<span class="pl-en">clone</span>(),<span class="pl-smi">j</span>.<span class="pl-en">clone</span>(),<span class="pl-smi">l</span>.<span class="pl-en">clone</span>()],h[d].<span class="pl-c1">push</span>(m,i));d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(e<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">faceUvs</span>.<span class="pl-c1">length</span>;d<span class="pl-k">&lt;</span>e;d<span class="pl-k">++</span>)<span class="pl-smi">a</span>.<span class="pl-smi">faceUvs</span>[d].<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>(i<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">faceUvs</span>[d][b],g[d].<span class="pl-c1">push</span>(i,i))}<span class="pl-k">else</span>{<span class="pl-smi">f</span>.<span class="pl-c1">push</span>(d);d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(e<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">faceUvs</span>.<span class="pl-c1">length</span>;d<span class="pl-k">&lt;</span>e;d<span class="pl-k">++</span>)g[d].<span class="pl-c1">push</span>(<span class="pl-smi">a</span>.<span class="pl-smi">faceUvs</span>[d][b]);d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(e<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">faceVertexUvs</span>.<span class="pl-c1">length</span>;d<span class="pl-k">&lt;</span>e;d<span class="pl-k">++</span>)h[d].<span class="pl-c1">push</span>(<span class="pl-smi">a</span>.<span class="pl-smi">faceVertexUvs</span>[d][b])}<span class="pl-smi">a</span>.<span class="pl-smi">faces</span><span class="pl-k">=</span>f;<span class="pl-smi">a</span>.<span class="pl-smi">faceUvs</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L506" class="blob-num js-line-number" data-line-number="506"></td>
        <td id="LC506" class="blob-code blob-code-inner js-file-line">g;<span class="pl-smi">a</span>.<span class="pl-smi">faceVertexUvs</span><span class="pl-k">=</span>h;<span class="pl-smi">a</span>.<span class="pl-en">computeCentroids</span>();<span class="pl-smi">a</span>.<span class="pl-en">computeFaceNormals</span>();<span class="pl-smi">a</span>.<span class="pl-en">computeVertexNormals</span>();<span class="pl-smi">a</span>.<span class="pl-smi">hasTangents</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">a</span>.<span class="pl-en">computeTangents</span>()},<span class="pl-en">explode</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span>[],c<span class="pl-k">=</span><span class="pl-c1">0</span>,d<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>d;c<span class="pl-k">++</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span>,f<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">faces</span>[c];<span class="pl-k">if</span>(f <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Face4</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">a</span>,h<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">b</span>,i<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">c</span>,g<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertices</span>[g],h<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertices</span>[h],i<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertices</span>[i],j<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertices</span>[<span class="pl-smi">f</span>.<span class="pl-smi">d</span>];<span class="pl-smi">b</span>.<span class="pl-c1">push</span>(<span class="pl-smi">g</span>.<span class="pl-en">clone</span>());<span class="pl-smi">b</span>.<span class="pl-c1">push</span>(<span class="pl-smi">h</span>.<span class="pl-en">clone</span>());<span class="pl-smi">b</span>.<span class="pl-c1">push</span>(<span class="pl-smi">i</span>.<span class="pl-en">clone</span>());<span class="pl-smi">b</span>.<span class="pl-c1">push</span>(<span class="pl-smi">j</span>.<span class="pl-en">clone</span>());<span class="pl-smi">f</span>.<span class="pl-smi">a</span><span class="pl-k">=</span>e;<span class="pl-smi">f</span>.<span class="pl-smi">b</span><span class="pl-k">=</span>e<span class="pl-k">+</span><span class="pl-c1">1</span>;<span class="pl-smi">f</span>.<span class="pl-smi">c</span><span class="pl-k">=</span>e<span class="pl-k">+</span><span class="pl-c1">2</span>;<span class="pl-smi">f</span>.<span class="pl-smi">d</span><span class="pl-k">=</span>e<span class="pl-k">+</span><span class="pl-c1">3</span>}<span class="pl-k">else</span> g<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">a</span>,h<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">b</span>,i<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">c</span>,g<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertices</span>[g],h<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertices</span>[h],i<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertices</span>[i],</td>
      </tr>
      <tr>
        <td id="L507" class="blob-num js-line-number" data-line-number="507"></td>
        <td id="LC507" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">b</span>.<span class="pl-c1">push</span>(<span class="pl-smi">g</span>.<span class="pl-en">clone</span>()),<span class="pl-smi">b</span>.<span class="pl-c1">push</span>(<span class="pl-smi">h</span>.<span class="pl-en">clone</span>()),<span class="pl-smi">b</span>.<span class="pl-c1">push</span>(<span class="pl-smi">i</span>.<span class="pl-en">clone</span>()),<span class="pl-smi">f</span>.<span class="pl-smi">a</span><span class="pl-k">=</span>e,<span class="pl-smi">f</span>.<span class="pl-smi">b</span><span class="pl-k">=</span>e<span class="pl-k">+</span><span class="pl-c1">1</span>,<span class="pl-smi">f</span>.<span class="pl-smi">c</span><span class="pl-k">=</span>e<span class="pl-k">+</span><span class="pl-c1">2</span>}<span class="pl-smi">a</span>.<span class="pl-smi">vertices</span><span class="pl-k">=</span>b;<span class="pl-k">delete</span> <span class="pl-smi">a</span>.<span class="pl-smi">__tmpVertices</span>},<span class="pl-en">tessellate</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c,d,e,f,g,h,i,j,l,m,n,p,o,q,r,t,<span class="pl-c1">B</span>,u,s,z<span class="pl-k">=</span>[],<span class="pl-c1">A</span><span class="pl-k">=</span>[];c<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">faceVertexUvs</span>.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>d;c<span class="pl-k">++</span>)<span class="pl-c1">A</span>[c]<span class="pl-k">=</span>[];c<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>d;c<span class="pl-k">++</span>)<span class="pl-k">if</span>(e<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">faces</span>[c],e <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Face3</span>)<span class="pl-k">if</span>(f<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">a</span>,g<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">b</span>,h<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">c</span>,j<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertices</span>[f],l<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertices</span>[g],m<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertices</span>[h],p<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-en">distanceTo</span>(l),o<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-en">distanceTo</span>(m),n<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-en">distanceTo</span>(m),p<span class="pl-k">&gt;</span>b<span class="pl-k">||</span>o<span class="pl-k">&gt;</span>b<span class="pl-k">||</span>n<span class="pl-k">&gt;</span>b){i<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">length</span>;u<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-en">clone</span>();s<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-en">clone</span>();p<span class="pl-k">&gt;=</span>o<span class="pl-k">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L508" class="blob-num js-line-number" data-line-number="508"></td>
        <td id="LC508" class="blob-code blob-code-inner js-file-line">p<span class="pl-k">&gt;=</span>n<span class="pl-k">?</span>(j<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-en">clone</span>(),<span class="pl-smi">j</span>.<span class="pl-en">lerpSelf</span>(l,<span class="pl-c1">0.5</span>),<span class="pl-smi">u</span>.<span class="pl-smi">a</span><span class="pl-k">=</span>f,<span class="pl-smi">u</span>.<span class="pl-smi">b</span><span class="pl-k">=</span>i,<span class="pl-smi">u</span>.<span class="pl-smi">c</span><span class="pl-k">=</span>h,<span class="pl-smi">s</span>.<span class="pl-smi">a</span><span class="pl-k">=</span>i,<span class="pl-smi">s</span>.<span class="pl-smi">b</span><span class="pl-k">=</span>g,<span class="pl-smi">s</span>.<span class="pl-smi">c</span><span class="pl-k">=</span>h,<span class="pl-c1">3</span><span class="pl-k">===</span><span class="pl-smi">e</span>.<span class="pl-smi">vertexNormals</span>.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>(f<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">vertexNormals</span>[<span class="pl-c1">0</span>].<span class="pl-en">clone</span>(),<span class="pl-smi">f</span>.<span class="pl-en">lerpSelf</span>(<span class="pl-smi">e</span>.<span class="pl-smi">vertexNormals</span>[<span class="pl-c1">1</span>],<span class="pl-c1">0.5</span>),<span class="pl-smi">u</span>.<span class="pl-smi">vertexNormals</span>[<span class="pl-c1">1</span>].<span class="pl-en">copy</span>(f),<span class="pl-smi">s</span>.<span class="pl-smi">vertexNormals</span>[<span class="pl-c1">0</span>].<span class="pl-en">copy</span>(f)),<span class="pl-c1">3</span><span class="pl-k">===</span><span class="pl-smi">e</span>.<span class="pl-smi">vertexColors</span>.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>(f<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">vertexColors</span>[<span class="pl-c1">0</span>].<span class="pl-en">clone</span>(),<span class="pl-smi">f</span>.<span class="pl-en">lerpSelf</span>(<span class="pl-smi">e</span>.<span class="pl-smi">vertexColors</span>[<span class="pl-c1">1</span>],<span class="pl-c1">0.5</span>),<span class="pl-smi">u</span>.<span class="pl-smi">vertexColors</span>[<span class="pl-c1">1</span>].<span class="pl-en">copy</span>(f),<span class="pl-smi">s</span>.<span class="pl-smi">vertexColors</span>[<span class="pl-c1">0</span>].<span class="pl-en">copy</span>(f)),e<span class="pl-k">=</span><span class="pl-c1">0</span>)<span class="pl-k">:</span>o<span class="pl-k">&gt;=</span>p<span class="pl-k">&amp;&amp;</span>o<span class="pl-k">&gt;=</span>n<span class="pl-k">?</span>(j<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-en">clone</span>(),<span class="pl-smi">j</span>.<span class="pl-en">lerpSelf</span>(m,<span class="pl-c1">0.5</span>),<span class="pl-smi">u</span>.<span class="pl-smi">a</span><span class="pl-k">=</span>f,<span class="pl-smi">u</span>.<span class="pl-smi">b</span><span class="pl-k">=</span>g,<span class="pl-smi">u</span>.<span class="pl-smi">c</span><span class="pl-k">=</span>i,<span class="pl-smi">s</span>.<span class="pl-smi">a</span><span class="pl-k">=</span>i,<span class="pl-smi">s</span>.<span class="pl-smi">b</span><span class="pl-k">=</span>h,<span class="pl-smi">s</span>.<span class="pl-smi">c</span><span class="pl-k">=</span>f,<span class="pl-c1">3</span><span class="pl-k">===</span><span class="pl-smi">e</span>.<span class="pl-smi">vertexNormals</span>.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>(f<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">vertexNormals</span>[<span class="pl-c1">1</span>].<span class="pl-en">clone</span>(),</td>
      </tr>
      <tr>
        <td id="L509" class="blob-num js-line-number" data-line-number="509"></td>
        <td id="LC509" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">f</span>.<span class="pl-en">lerpSelf</span>(<span class="pl-smi">e</span>.<span class="pl-smi">vertexNormals</span>[<span class="pl-c1">2</span>],<span class="pl-c1">0.5</span>),<span class="pl-smi">u</span>.<span class="pl-smi">vertexNormals</span>[<span class="pl-c1">2</span>].<span class="pl-en">copy</span>(f),<span class="pl-smi">s</span>.<span class="pl-smi">vertexNormals</span>[<span class="pl-c1">0</span>].<span class="pl-en">copy</span>(f),<span class="pl-smi">s</span>.<span class="pl-smi">vertexNormals</span>[<span class="pl-c1">1</span>].<span class="pl-en">copy</span>(<span class="pl-smi">e</span>.<span class="pl-smi">vertexNormals</span>[<span class="pl-c1">2</span>]),<span class="pl-smi">s</span>.<span class="pl-smi">vertexNormals</span>[<span class="pl-c1">2</span>].<span class="pl-en">copy</span>(<span class="pl-smi">e</span>.<span class="pl-smi">vertexNormals</span>[<span class="pl-c1">0</span>])),<span class="pl-c1">3</span><span class="pl-k">===</span><span class="pl-smi">e</span>.<span class="pl-smi">vertexColors</span>.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>(f<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">vertexColors</span>[<span class="pl-c1">1</span>].<span class="pl-en">clone</span>(),<span class="pl-smi">f</span>.<span class="pl-en">lerpSelf</span>(<span class="pl-smi">e</span>.<span class="pl-smi">vertexColors</span>[<span class="pl-c1">2</span>],<span class="pl-c1">0.5</span>),<span class="pl-smi">u</span>.<span class="pl-smi">vertexColors</span>[<span class="pl-c1">2</span>].<span class="pl-en">copy</span>(f),<span class="pl-smi">s</span>.<span class="pl-smi">vertexColors</span>[<span class="pl-c1">0</span>].<span class="pl-en">copy</span>(f),<span class="pl-smi">s</span>.<span class="pl-smi">vertexColors</span>[<span class="pl-c1">1</span>].<span class="pl-en">copy</span>(<span class="pl-smi">e</span>.<span class="pl-smi">vertexColors</span>[<span class="pl-c1">2</span>]),<span class="pl-smi">s</span>.<span class="pl-smi">vertexColors</span>[<span class="pl-c1">2</span>].<span class="pl-en">copy</span>(<span class="pl-smi">e</span>.<span class="pl-smi">vertexColors</span>[<span class="pl-c1">0</span>])),e<span class="pl-k">=</span><span class="pl-c1">1</span>)<span class="pl-k">:</span>(j<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-en">clone</span>(),<span class="pl-smi">j</span>.<span class="pl-en">lerpSelf</span>(m,<span class="pl-c1">0.5</span>),<span class="pl-smi">u</span>.<span class="pl-smi">a</span><span class="pl-k">=</span>f,<span class="pl-smi">u</span>.<span class="pl-smi">b</span><span class="pl-k">=</span>g,<span class="pl-smi">u</span>.<span class="pl-smi">c</span><span class="pl-k">=</span>i,<span class="pl-smi">s</span>.<span class="pl-smi">a</span><span class="pl-k">=</span>i,<span class="pl-smi">s</span>.<span class="pl-smi">b</span><span class="pl-k">=</span>g,<span class="pl-smi">s</span>.<span class="pl-smi">c</span><span class="pl-k">=</span>h,<span class="pl-c1">3</span><span class="pl-k">===</span><span class="pl-smi">e</span>.<span class="pl-smi">vertexNormals</span>.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L510" class="blob-num js-line-number" data-line-number="510"></td>
        <td id="LC510" class="blob-code blob-code-inner js-file-line">(f<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">vertexNormals</span>[<span class="pl-c1">0</span>].<span class="pl-en">clone</span>(),<span class="pl-smi">f</span>.<span class="pl-en">lerpSelf</span>(<span class="pl-smi">e</span>.<span class="pl-smi">vertexNormals</span>[<span class="pl-c1">2</span>],<span class="pl-c1">0.5</span>),<span class="pl-smi">u</span>.<span class="pl-smi">vertexNormals</span>[<span class="pl-c1">2</span>].<span class="pl-en">copy</span>(f),<span class="pl-smi">s</span>.<span class="pl-smi">vertexNormals</span>[<span class="pl-c1">0</span>].<span class="pl-en">copy</span>(f)),<span class="pl-c1">3</span><span class="pl-k">===</span><span class="pl-smi">e</span>.<span class="pl-smi">vertexColors</span>.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>(f<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">vertexColors</span>[<span class="pl-c1">0</span>].<span class="pl-en">clone</span>(),<span class="pl-smi">f</span>.<span class="pl-en">lerpSelf</span>(<span class="pl-smi">e</span>.<span class="pl-smi">vertexColors</span>[<span class="pl-c1">2</span>],<span class="pl-c1">0.5</span>),<span class="pl-smi">u</span>.<span class="pl-smi">vertexColors</span>[<span class="pl-c1">2</span>].<span class="pl-en">copy</span>(f),<span class="pl-smi">s</span>.<span class="pl-smi">vertexColors</span>[<span class="pl-c1">0</span>].<span class="pl-en">copy</span>(f)),e<span class="pl-k">=</span><span class="pl-c1">2</span>);<span class="pl-smi">z</span>.<span class="pl-c1">push</span>(u,s);<span class="pl-smi">a</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">push</span>(j);f<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(g<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">faceVertexUvs</span>.<span class="pl-c1">length</span>;f<span class="pl-k">&lt;</span>g;f<span class="pl-k">++</span>)<span class="pl-smi">a</span>.<span class="pl-smi">faceVertexUvs</span>[f].<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>(j<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">faceVertexUvs</span>[f][c],s<span class="pl-k">=</span>j[<span class="pl-c1">0</span>],h<span class="pl-k">=</span>j[<span class="pl-c1">1</span>],u<span class="pl-k">=</span>j[<span class="pl-c1">2</span>],<span class="pl-c1">0</span><span class="pl-k">===</span>e<span class="pl-k">?</span>(l<span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-en">clone</span>(),<span class="pl-smi">l</span>.<span class="pl-en">lerpSelf</span>(h,<span class="pl-c1">0.5</span>),j<span class="pl-k">=</span>[<span class="pl-smi">s</span>.<span class="pl-en">clone</span>(),<span class="pl-smi">l</span>.<span class="pl-en">clone</span>(),<span class="pl-smi">u</span>.<span class="pl-en">clone</span>()],h<span class="pl-k">=</span>[<span class="pl-smi">l</span>.<span class="pl-en">clone</span>(),<span class="pl-smi">h</span>.<span class="pl-en">clone</span>(),</td>
      </tr>
      <tr>
        <td id="L511" class="blob-num js-line-number" data-line-number="511"></td>
        <td id="LC511" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">u</span>.<span class="pl-en">clone</span>()])<span class="pl-k">:</span><span class="pl-c1">1</span><span class="pl-k">===</span>e<span class="pl-k">?</span>(l<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-en">clone</span>(),<span class="pl-smi">l</span>.<span class="pl-en">lerpSelf</span>(u,<span class="pl-c1">0.5</span>),j<span class="pl-k">=</span>[<span class="pl-smi">s</span>.<span class="pl-en">clone</span>(),<span class="pl-smi">h</span>.<span class="pl-en">clone</span>(),<span class="pl-smi">l</span>.<span class="pl-en">clone</span>()],h<span class="pl-k">=</span>[<span class="pl-smi">l</span>.<span class="pl-en">clone</span>(),<span class="pl-smi">u</span>.<span class="pl-en">clone</span>(),<span class="pl-smi">s</span>.<span class="pl-en">clone</span>()])<span class="pl-k">:</span>(l<span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-en">clone</span>(),<span class="pl-smi">l</span>.<span class="pl-en">lerpSelf</span>(u,<span class="pl-c1">0.5</span>),j<span class="pl-k">=</span>[<span class="pl-smi">s</span>.<span class="pl-en">clone</span>(),<span class="pl-smi">h</span>.<span class="pl-en">clone</span>(),<span class="pl-smi">l</span>.<span class="pl-en">clone</span>()],h<span class="pl-k">=</span>[<span class="pl-smi">l</span>.<span class="pl-en">clone</span>(),<span class="pl-smi">h</span>.<span class="pl-en">clone</span>(),<span class="pl-smi">u</span>.<span class="pl-en">clone</span>()]),<span class="pl-c1">A</span>[f].<span class="pl-c1">push</span>(j,h))}<span class="pl-k">else</span>{<span class="pl-smi">z</span>.<span class="pl-c1">push</span>(e);f<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(g<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">faceVertexUvs</span>.<span class="pl-c1">length</span>;f<span class="pl-k">&lt;</span>g;f<span class="pl-k">++</span>)<span class="pl-c1">A</span>[f].<span class="pl-c1">push</span>(<span class="pl-smi">a</span>.<span class="pl-smi">faceVertexUvs</span>[f][c])}<span class="pl-k">else</span> <span class="pl-k">if</span>(f<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">a</span>,g<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">b</span>,h<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">c</span>,i<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">d</span>,j<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertices</span>[f],l<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertices</span>[g],m<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertices</span>[h],n<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertices</span>[i],p<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-en">distanceTo</span>(l),o<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-en">distanceTo</span>(m),q<span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-en">distanceTo</span>(n),r<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-en">distanceTo</span>(n),p<span class="pl-k">&gt;</span>b<span class="pl-k">||</span>o<span class="pl-k">&gt;</span>b<span class="pl-k">||</span></td>
      </tr>
      <tr>
        <td id="L512" class="blob-num js-line-number" data-line-number="512"></td>
        <td id="LC512" class="blob-code blob-code-inner js-file-line">q<span class="pl-k">&gt;</span>b<span class="pl-k">||</span>r<span class="pl-k">&gt;</span>b){t<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">length</span>;<span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">length</span><span class="pl-k">+</span><span class="pl-c1">1</span>;u<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-en">clone</span>();s<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-en">clone</span>();p<span class="pl-k">&gt;=</span>o<span class="pl-k">&amp;&amp;</span>p<span class="pl-k">&gt;=</span>q<span class="pl-k">&amp;&amp;</span>p<span class="pl-k">&gt;=</span>r<span class="pl-k">||</span>q<span class="pl-k">&gt;=</span>o<span class="pl-k">&amp;&amp;</span>q<span class="pl-k">&gt;=</span>p<span class="pl-k">&amp;&amp;</span>q<span class="pl-k">&gt;=</span>r<span class="pl-k">?</span>(p<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-en">clone</span>(),<span class="pl-smi">p</span>.<span class="pl-en">lerpSelf</span>(l,<span class="pl-c1">0.5</span>),l<span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-en">clone</span>(),<span class="pl-smi">l</span>.<span class="pl-en">lerpSelf</span>(n,<span class="pl-c1">0.5</span>),<span class="pl-smi">u</span>.<span class="pl-smi">a</span><span class="pl-k">=</span>f,<span class="pl-smi">u</span>.<span class="pl-smi">b</span><span class="pl-k">=</span>t,<span class="pl-smi">u</span>.<span class="pl-smi">c</span><span class="pl-k">=</span><span class="pl-c1">B</span>,<span class="pl-smi">u</span>.<span class="pl-smi">d</span><span class="pl-k">=</span>i,<span class="pl-smi">s</span>.<span class="pl-smi">a</span><span class="pl-k">=</span>t,<span class="pl-smi">s</span>.<span class="pl-smi">b</span><span class="pl-k">=</span>g,<span class="pl-smi">s</span>.<span class="pl-smi">c</span><span class="pl-k">=</span>h,<span class="pl-smi">s</span>.<span class="pl-smi">d</span><span class="pl-k">=</span><span class="pl-c1">B</span>,<span class="pl-c1">4</span><span class="pl-k">===</span><span class="pl-smi">e</span>.<span class="pl-smi">vertexNormals</span>.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>(f<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">vertexNormals</span>[<span class="pl-c1">0</span>].<span class="pl-en">clone</span>(),<span class="pl-smi">f</span>.<span class="pl-en">lerpSelf</span>(<span class="pl-smi">e</span>.<span class="pl-smi">vertexNormals</span>[<span class="pl-c1">1</span>],<span class="pl-c1">0.5</span>),g<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">vertexNormals</span>[<span class="pl-c1">2</span>].<span class="pl-en">clone</span>(),<span class="pl-smi">g</span>.<span class="pl-en">lerpSelf</span>(<span class="pl-smi">e</span>.<span class="pl-smi">vertexNormals</span>[<span class="pl-c1">3</span>],<span class="pl-c1">0.5</span>),<span class="pl-smi">u</span>.<span class="pl-smi">vertexNormals</span>[<span class="pl-c1">1</span>].<span class="pl-en">copy</span>(f),<span class="pl-smi">u</span>.<span class="pl-smi">vertexNormals</span>[<span class="pl-c1">2</span>].<span class="pl-en">copy</span>(g),<span class="pl-smi">s</span>.<span class="pl-smi">vertexNormals</span>[<span class="pl-c1">0</span>].<span class="pl-en">copy</span>(f),<span class="pl-smi">s</span>.<span class="pl-smi">vertexNormals</span>[<span class="pl-c1">3</span>].<span class="pl-en">copy</span>(g)),<span class="pl-c1">4</span><span class="pl-k">===</span><span class="pl-smi">e</span>.<span class="pl-smi">vertexColors</span>.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L513" class="blob-num js-line-number" data-line-number="513"></td>
        <td id="LC513" class="blob-code blob-code-inner js-file-line">(f<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">vertexColors</span>[<span class="pl-c1">0</span>].<span class="pl-en">clone</span>(),<span class="pl-smi">f</span>.<span class="pl-en">lerpSelf</span>(<span class="pl-smi">e</span>.<span class="pl-smi">vertexColors</span>[<span class="pl-c1">1</span>],<span class="pl-c1">0.5</span>),g<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">vertexColors</span>[<span class="pl-c1">2</span>].<span class="pl-en">clone</span>(),<span class="pl-smi">g</span>.<span class="pl-en">lerpSelf</span>(<span class="pl-smi">e</span>.<span class="pl-smi">vertexColors</span>[<span class="pl-c1">3</span>],<span class="pl-c1">0.5</span>),<span class="pl-smi">u</span>.<span class="pl-smi">vertexColors</span>[<span class="pl-c1">1</span>].<span class="pl-en">copy</span>(f),<span class="pl-smi">u</span>.<span class="pl-smi">vertexColors</span>[<span class="pl-c1">2</span>].<span class="pl-en">copy</span>(g),<span class="pl-smi">s</span>.<span class="pl-smi">vertexColors</span>[<span class="pl-c1">0</span>].<span class="pl-en">copy</span>(f),<span class="pl-smi">s</span>.<span class="pl-smi">vertexColors</span>[<span class="pl-c1">3</span>].<span class="pl-en">copy</span>(g)),e<span class="pl-k">=</span><span class="pl-c1">0</span>)<span class="pl-k">:</span>(p<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-en">clone</span>(),<span class="pl-smi">p</span>.<span class="pl-en">lerpSelf</span>(m,<span class="pl-c1">0.5</span>),l<span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-en">clone</span>(),<span class="pl-smi">l</span>.<span class="pl-en">lerpSelf</span>(j,<span class="pl-c1">0.5</span>),<span class="pl-smi">u</span>.<span class="pl-smi">a</span><span class="pl-k">=</span>f,<span class="pl-smi">u</span>.<span class="pl-smi">b</span><span class="pl-k">=</span>g,<span class="pl-smi">u</span>.<span class="pl-smi">c</span><span class="pl-k">=</span>t,<span class="pl-smi">u</span>.<span class="pl-smi">d</span><span class="pl-k">=</span><span class="pl-c1">B</span>,<span class="pl-smi">s</span>.<span class="pl-smi">a</span><span class="pl-k">=</span><span class="pl-c1">B</span>,<span class="pl-smi">s</span>.<span class="pl-smi">b</span><span class="pl-k">=</span>t,<span class="pl-smi">s</span>.<span class="pl-smi">c</span><span class="pl-k">=</span>h,<span class="pl-smi">s</span>.<span class="pl-smi">d</span><span class="pl-k">=</span>i,<span class="pl-c1">4</span><span class="pl-k">===</span><span class="pl-smi">e</span>.<span class="pl-smi">vertexNormals</span>.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>(f<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">vertexNormals</span>[<span class="pl-c1">1</span>].<span class="pl-en">clone</span>(),<span class="pl-smi">f</span>.<span class="pl-en">lerpSelf</span>(<span class="pl-smi">e</span>.<span class="pl-smi">vertexNormals</span>[<span class="pl-c1">2</span>],<span class="pl-c1">0.5</span>),g<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">vertexNormals</span>[<span class="pl-c1">3</span>].<span class="pl-en">clone</span>(),<span class="pl-smi">g</span>.<span class="pl-en">lerpSelf</span>(<span class="pl-smi">e</span>.<span class="pl-smi">vertexNormals</span>[<span class="pl-c1">0</span>],<span class="pl-c1">0.5</span>),</td>
      </tr>
      <tr>
        <td id="L514" class="blob-num js-line-number" data-line-number="514"></td>
        <td id="LC514" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">u</span>.<span class="pl-smi">vertexNormals</span>[<span class="pl-c1">2</span>].<span class="pl-en">copy</span>(f),<span class="pl-smi">u</span>.<span class="pl-smi">vertexNormals</span>[<span class="pl-c1">3</span>].<span class="pl-en">copy</span>(g),<span class="pl-smi">s</span>.<span class="pl-smi">vertexNormals</span>[<span class="pl-c1">0</span>].<span class="pl-en">copy</span>(g),<span class="pl-smi">s</span>.<span class="pl-smi">vertexNormals</span>[<span class="pl-c1">1</span>].<span class="pl-en">copy</span>(f)),<span class="pl-c1">4</span><span class="pl-k">===</span><span class="pl-smi">e</span>.<span class="pl-smi">vertexColors</span>.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>(f<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">vertexColors</span>[<span class="pl-c1">1</span>].<span class="pl-en">clone</span>(),<span class="pl-smi">f</span>.<span class="pl-en">lerpSelf</span>(<span class="pl-smi">e</span>.<span class="pl-smi">vertexColors</span>[<span class="pl-c1">2</span>],<span class="pl-c1">0.5</span>),g<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">vertexColors</span>[<span class="pl-c1">3</span>].<span class="pl-en">clone</span>(),<span class="pl-smi">g</span>.<span class="pl-en">lerpSelf</span>(<span class="pl-smi">e</span>.<span class="pl-smi">vertexColors</span>[<span class="pl-c1">0</span>],<span class="pl-c1">0.5</span>),<span class="pl-smi">u</span>.<span class="pl-smi">vertexColors</span>[<span class="pl-c1">2</span>].<span class="pl-en">copy</span>(f),<span class="pl-smi">u</span>.<span class="pl-smi">vertexColors</span>[<span class="pl-c1">3</span>].<span class="pl-en">copy</span>(g),<span class="pl-smi">s</span>.<span class="pl-smi">vertexColors</span>[<span class="pl-c1">0</span>].<span class="pl-en">copy</span>(g),<span class="pl-smi">s</span>.<span class="pl-smi">vertexColors</span>[<span class="pl-c1">1</span>].<span class="pl-en">copy</span>(f)),e<span class="pl-k">=</span><span class="pl-c1">1</span>);<span class="pl-smi">z</span>.<span class="pl-c1">push</span>(u,s);<span class="pl-smi">a</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">push</span>(p,l);f<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(g<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">faceVertexUvs</span>.<span class="pl-c1">length</span>;f<span class="pl-k">&lt;</span>g;f<span class="pl-k">++</span>)<span class="pl-smi">a</span>.<span class="pl-smi">faceVertexUvs</span>[f].<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>(j<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">faceVertexUvs</span>[f][c],s<span class="pl-k">=</span>j[<span class="pl-c1">0</span>],</td>
      </tr>
      <tr>
        <td id="L515" class="blob-num js-line-number" data-line-number="515"></td>
        <td id="LC515" class="blob-code blob-code-inner js-file-line">h<span class="pl-k">=</span>j[<span class="pl-c1">1</span>],u<span class="pl-k">=</span>j[<span class="pl-c1">2</span>],j<span class="pl-k">=</span>j[<span class="pl-c1">3</span>],<span class="pl-c1">0</span><span class="pl-k">===</span>e<span class="pl-k">?</span>(l<span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-en">clone</span>(),<span class="pl-smi">l</span>.<span class="pl-en">lerpSelf</span>(h,<span class="pl-c1">0.5</span>),m<span class="pl-k">=</span><span class="pl-smi">u</span>.<span class="pl-en">clone</span>(),<span class="pl-smi">m</span>.<span class="pl-en">lerpSelf</span>(j,<span class="pl-c1">0.5</span>),s<span class="pl-k">=</span>[<span class="pl-smi">s</span>.<span class="pl-en">clone</span>(),<span class="pl-smi">l</span>.<span class="pl-en">clone</span>(),<span class="pl-smi">m</span>.<span class="pl-en">clone</span>(),<span class="pl-smi">j</span>.<span class="pl-en">clone</span>()],h<span class="pl-k">=</span>[<span class="pl-smi">l</span>.<span class="pl-en">clone</span>(),<span class="pl-smi">h</span>.<span class="pl-en">clone</span>(),<span class="pl-smi">u</span>.<span class="pl-en">clone</span>(),<span class="pl-smi">m</span>.<span class="pl-en">clone</span>()])<span class="pl-k">:</span>(l<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-en">clone</span>(),<span class="pl-smi">l</span>.<span class="pl-en">lerpSelf</span>(u,<span class="pl-c1">0.5</span>),m<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-en">clone</span>(),<span class="pl-smi">m</span>.<span class="pl-en">lerpSelf</span>(s,<span class="pl-c1">0.5</span>),s<span class="pl-k">=</span>[<span class="pl-smi">s</span>.<span class="pl-en">clone</span>(),<span class="pl-smi">h</span>.<span class="pl-en">clone</span>(),<span class="pl-smi">l</span>.<span class="pl-en">clone</span>(),<span class="pl-smi">m</span>.<span class="pl-en">clone</span>()],h<span class="pl-k">=</span>[<span class="pl-smi">m</span>.<span class="pl-en">clone</span>(),<span class="pl-smi">l</span>.<span class="pl-en">clone</span>(),<span class="pl-smi">u</span>.<span class="pl-en">clone</span>(),<span class="pl-smi">j</span>.<span class="pl-en">clone</span>()]),<span class="pl-c1">A</span>[f].<span class="pl-c1">push</span>(s,h))}<span class="pl-k">else</span>{<span class="pl-smi">z</span>.<span class="pl-c1">push</span>(e);f<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(g<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">faceVertexUvs</span>.<span class="pl-c1">length</span>;f<span class="pl-k">&lt;</span>g;f<span class="pl-k">++</span>)<span class="pl-c1">A</span>[f].<span class="pl-c1">push</span>(<span class="pl-smi">a</span>.<span class="pl-smi">faceVertexUvs</span>[f][c])}<span class="pl-smi">a</span>.<span class="pl-smi">faces</span><span class="pl-k">=</span>z;<span class="pl-smi">a</span>.<span class="pl-smi">faceVertexUvs</span><span class="pl-k">=</span><span class="pl-c1">A</span>}};<span class="pl-c1">THREE</span>.<span class="pl-smi">GeometryUtils</span>.<span class="pl-smi">random</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Math</span>.<span class="pl-smi">random16</span>;</td>
      </tr>
      <tr>
        <td id="L516" class="blob-num js-line-number" data-line-number="516"></td>
        <td id="LC516" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">GeometryUtils</span>.<span class="pl-smi">__v1</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;</td>
      </tr>
      <tr>
        <td id="L517" class="blob-num js-line-number" data-line-number="517"></td>
        <td id="LC517" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ImageUtils</span><span class="pl-k">=</span>{crossOrigin<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>anonymous<span class="pl-pds">&quot;</span></span>,<span class="pl-en">loadTexture</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Image</span>,f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Texture</span>(e,b),b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.ImageLoader</span>;<span class="pl-smi">b</span>.<span class="pl-c1">addEventListener</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>load<span class="pl-pds">&quot;</span></span>,<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-smi">f</span>.<span class="pl-smi">image</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">content</span>;<span class="pl-smi">f</span>.<span class="pl-smi">needsUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;c<span class="pl-k">&amp;&amp;</span><span class="pl-en">c</span>(f)});<span class="pl-smi">b</span>.<span class="pl-c1">addEventListener</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>error<span class="pl-pds">&quot;</span></span>,<span class="pl-k">function</span>(<span class="pl-smi">a</span>){d<span class="pl-k">&amp;&amp;</span><span class="pl-en">d</span>(<span class="pl-smi">a</span>.<span class="pl-smi">message</span>)});<span class="pl-smi">b</span>.<span class="pl-smi">crossOrigin</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">crossOrigin</span>;<span class="pl-smi">b</span>.<span class="pl-c1">load</span>(a,e);<span class="pl-k">return</span> f},<span class="pl-en">loadCompressedTexture</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.CompressedTexture</span>;<span class="pl-smi">e</span>.<span class="pl-smi">mapping</span><span class="pl-k">=</span>b;<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">XMLHttpRequest</span>;<span class="pl-smi">f</span>.<span class="pl-en">onload</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">ImageUtils</span>.<span class="pl-en">parseDDS</span>(<span class="pl-smi">f</span>.<span class="pl-smi">response</span>,</td>
      </tr>
      <tr>
        <td id="L518" class="blob-num js-line-number" data-line-number="518"></td>
        <td id="LC518" class="blob-code blob-code-inner js-file-line"><span class="pl-k">!</span><span class="pl-c1">0</span>);<span class="pl-smi">e</span>.<span class="pl-smi">format</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">format</span>;<span class="pl-smi">e</span>.<span class="pl-smi">mipmaps</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">mipmaps</span>;<span class="pl-smi">e</span>.<span class="pl-smi">image</span>.<span class="pl-c1">width</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">width</span>;<span class="pl-smi">e</span>.<span class="pl-smi">image</span>.<span class="pl-c1">height</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">height</span>;<span class="pl-smi">e</span>.<span class="pl-smi">generateMipmaps</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-smi">e</span>.<span class="pl-smi">needsUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;c<span class="pl-k">&amp;&amp;</span><span class="pl-en">c</span>(e)};<span class="pl-smi">f</span>.<span class="pl-smi">onerror</span><span class="pl-k">=</span>d;<span class="pl-smi">f</span>.<span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>GET<span class="pl-pds">&quot;</span></span>,a,<span class="pl-k">!</span><span class="pl-c1">0</span>);<span class="pl-smi">f</span>.<span class="pl-smi">responseType</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>arraybuffer<span class="pl-pds">&quot;</span></span>;<span class="pl-smi">f</span>.<span class="pl-c1">send</span>(<span class="pl-c1">null</span>);<span class="pl-k">return</span> e},<span class="pl-en">loadTextureCube</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span>[];<span class="pl-smi">e</span>.<span class="pl-smi">loadCount</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Texture</span>;<span class="pl-smi">f</span>.<span class="pl-smi">image</span><span class="pl-k">=</span>e;<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">f</span>.<span class="pl-smi">mapping</span><span class="pl-k">=</span>b);<span class="pl-smi">f</span>.<span class="pl-smi">flipY</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>,g<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>;b<span class="pl-k">&lt;</span>g;<span class="pl-k">++</span>b){<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Image</span>;e[b]<span class="pl-k">=</span>h;<span class="pl-smi">h</span>.<span class="pl-en">onload</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-smi">e</span>.<span class="pl-smi">loadCount</span><span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">loadCount</span><span class="pl-k">+</span><span class="pl-c1">1</span>;<span class="pl-k">if</span>(<span class="pl-smi">e</span>.<span class="pl-smi">loadCount</span><span class="pl-k">===</span><span class="pl-c1">6</span>){<span class="pl-smi">f</span>.<span class="pl-smi">needsUpdate</span><span class="pl-k">=</span><span class="pl-c1">true</span>;c<span class="pl-k">&amp;&amp;</span><span class="pl-en">c</span>()}};<span class="pl-smi">h</span>.<span class="pl-smi">onerror</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L519" class="blob-num js-line-number" data-line-number="519"></td>
        <td id="LC519" class="blob-code blob-code-inner js-file-line">d;<span class="pl-smi">h</span>.<span class="pl-smi">crossOrigin</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">crossOrigin</span>;<span class="pl-smi">h</span>.<span class="pl-smi">src</span><span class="pl-k">=</span>a[b]}<span class="pl-k">return</span> f},<span class="pl-en">loadCompressedTextureCube</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span>[];<span class="pl-smi">e</span>.<span class="pl-smi">loadCount</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.CompressedTexture</span>;<span class="pl-smi">f</span>.<span class="pl-smi">image</span><span class="pl-k">=</span>e;<span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">!==</span>b<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">f</span>.<span class="pl-smi">mapping</span><span class="pl-k">=</span>b);<span class="pl-smi">f</span>.<span class="pl-smi">flipY</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-smi">f</span>.<span class="pl-smi">generateMipmaps</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">1</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> <span class="pl-en">b</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-k">function</span>(){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">ImageUtils</span>.<span class="pl-en">parseDDS</span>(<span class="pl-smi">a</span>.<span class="pl-smi">response</span>,<span class="pl-c1">true</span>);<span class="pl-smi">b</span>.<span class="pl-smi">format</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">format</span>;<span class="pl-smi">b</span>.<span class="pl-smi">mipmaps</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">mipmaps</span>;<span class="pl-smi">b</span>.<span class="pl-c1">width</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-c1">width</span>;<span class="pl-smi">b</span>.<span class="pl-c1">height</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-c1">height</span>;<span class="pl-smi">e</span>.<span class="pl-smi">loadCount</span><span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">loadCount</span><span class="pl-k">+</span><span class="pl-c1">1</span>;<span class="pl-k">if</span>(<span class="pl-smi">e</span>.<span class="pl-smi">loadCount</span><span class="pl-k">===</span><span class="pl-c1">6</span>){<span class="pl-smi">f</span>.<span class="pl-smi">format</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">format</span>;<span class="pl-smi">f</span>.<span class="pl-smi">needsUpdate</span><span class="pl-k">=</span><span class="pl-c1">true</span>;c<span class="pl-k">&amp;&amp;</span><span class="pl-en">c</span>()}}},g<span class="pl-k">=</span><span class="pl-c1">0</span>,h<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>;g<span class="pl-k">&lt;</span>h;<span class="pl-k">++</span>g){<span class="pl-k">var</span> i<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L520" class="blob-num js-line-number" data-line-number="520"></td>
        <td id="LC520" class="blob-code blob-code-inner js-file-line">{};e[g]<span class="pl-k">=</span>i;<span class="pl-k">var</span> j<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">XMLHttpRequest</span>;<span class="pl-smi">j</span>.<span class="pl-smi">onload</span><span class="pl-k">=</span><span class="pl-en">b</span>(j,i);<span class="pl-smi">j</span>.<span class="pl-smi">onerror</span><span class="pl-k">=</span>d;<span class="pl-smi">j</span>.<span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>GET<span class="pl-pds">&quot;</span></span>,a[g],<span class="pl-k">!</span><span class="pl-c1">0</span>);<span class="pl-smi">j</span>.<span class="pl-smi">responseType</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>arraybuffer<span class="pl-pds">&quot;</span></span>;<span class="pl-smi">j</span>.<span class="pl-c1">send</span>(<span class="pl-c1">null</span>)}<span class="pl-k">return</span> f},<span class="pl-en">parseDDS</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">function</span> <span class="pl-en">c</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-smi">a</span>.<span class="pl-c1">charCodeAt</span>(<span class="pl-c1">0</span>)<span class="pl-k">+</span>(<span class="pl-smi">a</span>.<span class="pl-c1">charCodeAt</span>(<span class="pl-c1">1</span>)<span class="pl-k">&lt;&lt;</span><span class="pl-c1">8</span>)<span class="pl-k">+</span>(<span class="pl-smi">a</span>.<span class="pl-c1">charCodeAt</span>(<span class="pl-c1">2</span>)<span class="pl-k">&lt;&lt;</span><span class="pl-c1">16</span>)<span class="pl-k">+</span>(<span class="pl-smi">a</span>.<span class="pl-c1">charCodeAt</span>(<span class="pl-c1">3</span>)<span class="pl-k">&lt;&lt;</span><span class="pl-c1">24</span>)}<span class="pl-k">var</span> d<span class="pl-k">=</span>{mipmaps<span class="pl-k">:</span>[],width<span class="pl-k">:</span><span class="pl-c1">0</span>,height<span class="pl-k">:</span><span class="pl-c1">0</span>,format<span class="pl-k">:</span><span class="pl-c1">null</span>,mipmapCount<span class="pl-k">:</span><span class="pl-c1">1</span>},e<span class="pl-k">=</span><span class="pl-en">c</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>DXT1<span class="pl-pds">&quot;</span></span>),f<span class="pl-k">=</span><span class="pl-en">c</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>DXT3<span class="pl-pds">&quot;</span></span>),g<span class="pl-k">=</span><span class="pl-en">c</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>DXT5<span class="pl-pds">&quot;</span></span>),h<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Int32Array</span>(a,<span class="pl-c1">0</span>,<span class="pl-c1">31</span>);<span class="pl-k">if</span>(<span class="pl-c1">542327876</span><span class="pl-k">!==</span>h[<span class="pl-c1">0</span>])<span class="pl-k">return</span> <span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>ImageUtils.parseDDS(): Invalid magic number in DDS header<span class="pl-pds">&quot;</span></span>),d;<span class="pl-k">if</span>(<span class="pl-k">!</span>h[<span class="pl-c1">20</span>]<span class="pl-k">&amp;</span><span class="pl-c1">4</span>)<span class="pl-k">return</span> <span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>ImageUtils.parseDDS(): Unsupported format, must contain a FourCC code<span class="pl-pds">&quot;</span></span>),</td>
      </tr>
      <tr>
        <td id="L521" class="blob-num js-line-number" data-line-number="521"></td>
        <td id="LC521" class="blob-code blob-code-inner js-file-line">d;<span class="pl-k">var</span> i<span class="pl-k">=</span>h[<span class="pl-c1">21</span>];<span class="pl-k">switch</span>(i){<span class="pl-k">case</span> e:e<span class="pl-k">=</span><span class="pl-c1">8</span>;<span class="pl-smi">d</span>.<span class="pl-smi">format</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">RGB_S3TC_DXT1_Format</span>;<span class="pl-k">break</span>;<span class="pl-k">case</span> f:e<span class="pl-k">=</span><span class="pl-c1">16</span>;<span class="pl-smi">d</span>.<span class="pl-smi">format</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">RGBA_S3TC_DXT3_Format</span>;<span class="pl-k">break</span>;<span class="pl-k">case</span> g:e<span class="pl-k">=</span><span class="pl-c1">16</span>;<span class="pl-smi">d</span>.<span class="pl-smi">format</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">RGBA_S3TC_DXT5_Format</span>;<span class="pl-k">break</span>;<span class="pl-k">default</span>:<span class="pl-k">return</span> <span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>ImageUtils.parseDDS(): Unsupported FourCC code: <span class="pl-pds">&quot;</span></span>,<span class="pl-c1">String</span>.<span class="pl-c1">fromCharCode</span>(i<span class="pl-k">&amp;</span><span class="pl-c1">255</span>,i<span class="pl-k">&gt;&gt;</span><span class="pl-c1">8</span><span class="pl-k">&amp;</span><span class="pl-c1">255</span>,i<span class="pl-k">&gt;&gt;</span><span class="pl-c1">16</span><span class="pl-k">&amp;</span><span class="pl-c1">255</span>,i<span class="pl-k">&gt;&gt;</span><span class="pl-c1">24</span><span class="pl-k">&amp;</span><span class="pl-c1">255</span>)),d}<span class="pl-smi">d</span>.<span class="pl-smi">mipmapCount</span><span class="pl-k">=</span><span class="pl-c1">1</span>;h[<span class="pl-c1">2</span>]<span class="pl-k">&amp;</span><span class="pl-c1">131072</span><span class="pl-k">&amp;&amp;!</span><span class="pl-c1">1</span><span class="pl-k">!==</span>b<span class="pl-k">&amp;&amp;</span>(<span class="pl-smi">d</span>.<span class="pl-smi">mipmapCount</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-c1">1</span>,h[<span class="pl-c1">7</span>]));<span class="pl-smi">d</span>.<span class="pl-c1">width</span><span class="pl-k">=</span>h[<span class="pl-c1">4</span>];<span class="pl-smi">d</span>.<span class="pl-c1">height</span><span class="pl-k">=</span>h[<span class="pl-c1">3</span>];h<span class="pl-k">=</span>h[<span class="pl-c1">1</span>]<span class="pl-k">+</span><span class="pl-c1">4</span>;f<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-c1">width</span>;g<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-c1">height</span>;<span class="pl-k">for</span>(i<span class="pl-k">=</span><span class="pl-c1">0</span>;i<span class="pl-k">&lt;</span><span class="pl-smi">d</span>.<span class="pl-smi">mipmapCount</span>;i<span class="pl-k">++</span>){<span class="pl-k">var</span> j<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-c1">4</span>,f)<span class="pl-k">/</span></td>
      </tr>
      <tr>
        <td id="L522" class="blob-num js-line-number" data-line-number="522"></td>
        <td id="LC522" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">4</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-c1">4</span>,g)<span class="pl-k">/</span><span class="pl-c1">4</span><span class="pl-k">*</span>e,l<span class="pl-k">=</span>{data<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">Uint8Array</span>(a,h,j),width<span class="pl-k">:</span>f,height<span class="pl-k">:</span>g};<span class="pl-smi">d</span>.<span class="pl-smi">mipmaps</span>.<span class="pl-c1">push</span>(l);h<span class="pl-k">+=</span>j;f<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-c1">0.5</span><span class="pl-k">*</span>f,<span class="pl-c1">1</span>);g<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-c1">0.5</span><span class="pl-k">*</span>g,<span class="pl-c1">1</span>)}<span class="pl-k">return</span> d},<span class="pl-en">getNormalMap</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> <span class="pl-en">c</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(a[<span class="pl-c1">0</span>]<span class="pl-k">*</span>a[<span class="pl-c1">0</span>]<span class="pl-k">+</span>a[<span class="pl-c1">1</span>]<span class="pl-k">*</span>a[<span class="pl-c1">1</span>]<span class="pl-k">+</span>a[<span class="pl-c1">2</span>]<span class="pl-k">*</span>a[<span class="pl-c1">2</span>]);<span class="pl-k">return</span>[a[<span class="pl-c1">0</span>]<span class="pl-k">/</span>b,a[<span class="pl-c1">1</span>]<span class="pl-k">/</span>b,a[<span class="pl-c1">2</span>]<span class="pl-k">/</span>b]},b<span class="pl-k">=</span>b<span class="pl-k">|</span><span class="pl-c1">1</span>,d<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">width</span>,e<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">height</span>,f<span class="pl-k">=</span><span class="pl-c1">document</span>.<span class="pl-c1">createElement</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>canvas<span class="pl-pds">&quot;</span></span>);<span class="pl-smi">f</span>.<span class="pl-c1">width</span><span class="pl-k">=</span>d;<span class="pl-smi">f</span>.<span class="pl-c1">height</span><span class="pl-k">=</span>e;<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">getContext</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>2d<span class="pl-pds">&quot;</span></span>);<span class="pl-smi">g</span>.<span class="pl-en">drawImage</span>(a,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-en">getImageData</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,d,e).<span class="pl-c1">data</span>,i<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-en">createImageData</span>(d,e),j<span class="pl-k">=</span><span class="pl-smi">i</span>.<span class="pl-c1">data</span>,l<span class="pl-k">=</span><span class="pl-c1">0</span>;l<span class="pl-k">&lt;</span>d;l<span class="pl-k">++</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> m<span class="pl-k">=</span><span class="pl-c1">0</span>;m<span class="pl-k">&lt;</span>e;m<span class="pl-k">++</span>){<span class="pl-k">var</span> n<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L523" class="blob-num js-line-number" data-line-number="523"></td>
        <td id="LC523" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span><span class="pl-k">&gt;</span>m<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">?</span><span class="pl-c1">0</span><span class="pl-k">:</span>m<span class="pl-k">-</span><span class="pl-c1">1</span>,p<span class="pl-k">=</span>m<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">&gt;</span>e<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">?</span>e<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span>m<span class="pl-k">+</span><span class="pl-c1">1</span>,o<span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">&gt;</span>l<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">?</span><span class="pl-c1">0</span><span class="pl-k">:</span>l<span class="pl-k">-</span><span class="pl-c1">1</span>,q<span class="pl-k">=</span>l<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">&gt;</span>d<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">?</span>d<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span>l<span class="pl-k">+</span><span class="pl-c1">1</span>,r<span class="pl-k">=</span>[],t<span class="pl-k">=</span>[<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,h[<span class="pl-c1">4</span><span class="pl-k">*</span>(m<span class="pl-k">*</span>d<span class="pl-k">+</span>l)]<span class="pl-k">/</span><span class="pl-c1">255</span><span class="pl-k">*</span>b];<span class="pl-smi">r</span>.<span class="pl-c1">push</span>([<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,h[<span class="pl-c1">4</span><span class="pl-k">*</span>(m<span class="pl-k">*</span>d<span class="pl-k">+</span>o)]<span class="pl-k">/</span><span class="pl-c1">255</span><span class="pl-k">*</span>b]);<span class="pl-smi">r</span>.<span class="pl-c1">push</span>([<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,h[<span class="pl-c1">4</span><span class="pl-k">*</span>(n<span class="pl-k">*</span>d<span class="pl-k">+</span>o)]<span class="pl-k">/</span><span class="pl-c1">255</span><span class="pl-k">*</span>b]);<span class="pl-smi">r</span>.<span class="pl-c1">push</span>([<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,h[<span class="pl-c1">4</span><span class="pl-k">*</span>(n<span class="pl-k">*</span>d<span class="pl-k">+</span>l)]<span class="pl-k">/</span><span class="pl-c1">255</span><span class="pl-k">*</span>b]);<span class="pl-smi">r</span>.<span class="pl-c1">push</span>([<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,h[<span class="pl-c1">4</span><span class="pl-k">*</span>(n<span class="pl-k">*</span>d<span class="pl-k">+</span>q)]<span class="pl-k">/</span><span class="pl-c1">255</span><span class="pl-k">*</span>b]);<span class="pl-smi">r</span>.<span class="pl-c1">push</span>([<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,h[<span class="pl-c1">4</span><span class="pl-k">*</span>(m<span class="pl-k">*</span>d<span class="pl-k">+</span>q)]<span class="pl-k">/</span><span class="pl-c1">255</span><span class="pl-k">*</span>b]);<span class="pl-smi">r</span>.<span class="pl-c1">push</span>([<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,h[<span class="pl-c1">4</span><span class="pl-k">*</span>(p<span class="pl-k">*</span>d<span class="pl-k">+</span>q)]<span class="pl-k">/</span><span class="pl-c1">255</span><span class="pl-k">*</span>b]);<span class="pl-smi">r</span>.<span class="pl-c1">push</span>([<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,h[<span class="pl-c1">4</span><span class="pl-k">*</span>(p<span class="pl-k">*</span>d<span class="pl-k">+</span>l)]<span class="pl-k">/</span><span class="pl-c1">255</span><span class="pl-k">*</span>b]);<span class="pl-smi">r</span>.<span class="pl-c1">push</span>([<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>,h[<span class="pl-c1">4</span><span class="pl-k">*</span>(p<span class="pl-k">*</span>d<span class="pl-k">+</span>o)]<span class="pl-k">/</span><span class="pl-c1">255</span><span class="pl-k">*</span>b]);n<span class="pl-k">=</span>[];o<span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-c1">length</span>;<span class="pl-k">for</span>(p<span class="pl-k">=</span><span class="pl-c1">0</span>;p<span class="pl-k">&lt;</span>o;p<span class="pl-k">++</span>){<span class="pl-k">var</span> q<span class="pl-k">=</span>r[p],<span class="pl-c1">B</span><span class="pl-k">=</span>r[(p<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">%</span>o],q<span class="pl-k">=</span>[q[<span class="pl-c1">0</span>]<span class="pl-k">-</span>t[<span class="pl-c1">0</span>],q[<span class="pl-c1">1</span>]<span class="pl-k">-</span>t[<span class="pl-c1">1</span>],q[<span class="pl-c1">2</span>]<span class="pl-k">-</span>t[<span class="pl-c1">2</span>]],<span class="pl-c1">B</span><span class="pl-k">=</span>[<span class="pl-c1">B</span>[<span class="pl-c1">0</span>]<span class="pl-k">-</span>t[<span class="pl-c1">0</span>],<span class="pl-c1">B</span>[<span class="pl-c1">1</span>]<span class="pl-k">-</span>t[<span class="pl-c1">1</span>],<span class="pl-c1">B</span>[<span class="pl-c1">2</span>]<span class="pl-k">-</span>t[<span class="pl-c1">2</span>]];<span class="pl-smi">n</span>.<span class="pl-c1">push</span>(<span class="pl-en">c</span>([q[<span class="pl-c1">1</span>]<span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L524" class="blob-num js-line-number" data-line-number="524"></td>
        <td id="LC524" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">B</span>[<span class="pl-c1">2</span>]<span class="pl-k">-</span>q[<span class="pl-c1">2</span>]<span class="pl-k">*</span><span class="pl-c1">B</span>[<span class="pl-c1">1</span>],q[<span class="pl-c1">2</span>]<span class="pl-k">*</span><span class="pl-c1">B</span>[<span class="pl-c1">0</span>]<span class="pl-k">-</span>q[<span class="pl-c1">0</span>]<span class="pl-k">*</span><span class="pl-c1">B</span>[<span class="pl-c1">2</span>],q[<span class="pl-c1">0</span>]<span class="pl-k">*</span><span class="pl-c1">B</span>[<span class="pl-c1">1</span>]<span class="pl-k">-</span>q[<span class="pl-c1">1</span>]<span class="pl-k">*</span><span class="pl-c1">B</span>[<span class="pl-c1">0</span>]]))}r<span class="pl-k">=</span>[<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>];<span class="pl-k">for</span>(p<span class="pl-k">=</span><span class="pl-c1">0</span>;p<span class="pl-k">&lt;</span><span class="pl-smi">n</span>.<span class="pl-c1">length</span>;p<span class="pl-k">++</span>)r[<span class="pl-c1">0</span>]<span class="pl-k">+=</span>n[p][<span class="pl-c1">0</span>],r[<span class="pl-c1">1</span>]<span class="pl-k">+=</span>n[p][<span class="pl-c1">1</span>],r[<span class="pl-c1">2</span>]<span class="pl-k">+=</span>n[p][<span class="pl-c1">2</span>];r[<span class="pl-c1">0</span>]<span class="pl-k">/=</span><span class="pl-smi">n</span>.<span class="pl-c1">length</span>;r[<span class="pl-c1">1</span>]<span class="pl-k">/=</span><span class="pl-smi">n</span>.<span class="pl-c1">length</span>;r[<span class="pl-c1">2</span>]<span class="pl-k">/=</span><span class="pl-smi">n</span>.<span class="pl-c1">length</span>;t<span class="pl-k">=</span><span class="pl-c1">4</span><span class="pl-k">*</span>(m<span class="pl-k">*</span>d<span class="pl-k">+</span>l);j[t]<span class="pl-k">=</span><span class="pl-c1">255</span><span class="pl-k">*</span>((r[<span class="pl-c1">0</span>]<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span><span class="pl-c1">2</span>)<span class="pl-k">|</span><span class="pl-c1">0</span>;j[t<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-c1">255</span><span class="pl-k">*</span>((r[<span class="pl-c1">1</span>]<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span><span class="pl-c1">2</span>)<span class="pl-k">|</span><span class="pl-c1">0</span>;j[t<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-c1">255</span><span class="pl-k">*</span>r[<span class="pl-c1">2</span>]<span class="pl-k">|</span><span class="pl-c1">0</span>;j[t<span class="pl-k">+</span><span class="pl-c1">3</span>]<span class="pl-k">=</span><span class="pl-c1">255</span>}<span class="pl-smi">g</span>.<span class="pl-en">putImageData</span>(i,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>);<span class="pl-k">return</span> f},<span class="pl-en">generateDataTexture</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> d<span class="pl-k">=</span>a<span class="pl-k">*</span>b,e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Uint8Array</span>(<span class="pl-c1">3</span><span class="pl-k">*</span>d),f<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-c1">255</span><span class="pl-k">*</span><span class="pl-smi">c</span>.<span class="pl-smi">r</span>),g<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-c1">255</span><span class="pl-k">*</span><span class="pl-smi">c</span>.<span class="pl-smi">g</span>),c<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-c1">255</span><span class="pl-k">*</span><span class="pl-smi">c</span>.<span class="pl-smi">b</span>),h<span class="pl-k">=</span><span class="pl-c1">0</span>;h<span class="pl-k">&lt;</span>d;h<span class="pl-k">++</span>)e[<span class="pl-c1">3</span><span class="pl-k">*</span>h]<span class="pl-k">=</span>f,e[<span class="pl-c1">3</span><span class="pl-k">*</span>h<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">=</span>g,e[<span class="pl-c1">3</span><span class="pl-k">*</span>h<span class="pl-k">+</span><span class="pl-c1">2</span>]<span class="pl-k">=</span>c;a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.DataTexture</span>(e,</td>
      </tr>
      <tr>
        <td id="L525" class="blob-num js-line-number" data-line-number="525"></td>
        <td id="LC525" class="blob-code blob-code-inner js-file-line">a,b,<span class="pl-c1">THREE</span>.<span class="pl-smi">RGBFormat</span>);<span class="pl-smi">a</span>.<span class="pl-smi">needsUpdate</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> a}};<span class="pl-c1">THREE</span>.<span class="pl-smi">SceneUtils</span><span class="pl-k">=</span>{<span class="pl-en">createMultiMaterialObject</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Object3D</span>,d<span class="pl-k">=</span><span class="pl-c1">0</span>,e<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span>;d<span class="pl-k">&lt;</span>e;d<span class="pl-k">++</span>)<span class="pl-smi">c</span>.<span class="pl-c1">add</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Mesh</span>(a,b[d]));<span class="pl-k">return</span> c},<span class="pl-en">detach</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-smi">a</span>.<span class="pl-en">applyMatrix</span>(<span class="pl-smi">b</span>.<span class="pl-smi">matrixWorld</span>);<span class="pl-smi">b</span>.<span class="pl-c1">remove</span>(a);<span class="pl-smi">c</span>.<span class="pl-c1">add</span>(a)},<span class="pl-en">attach</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>;<span class="pl-smi">d</span>.<span class="pl-en">getInverse</span>(<span class="pl-smi">c</span>.<span class="pl-smi">matrixWorld</span>);<span class="pl-smi">a</span>.<span class="pl-en">applyMatrix</span>(d);<span class="pl-smi">b</span>.<span class="pl-c1">remove</span>(a);<span class="pl-smi">c</span>.<span class="pl-c1">add</span>(a)}};</td>
      </tr>
      <tr>
        <td id="L526" class="blob-num js-line-number" data-line-number="526"></td>
        <td id="LC526" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">WebGLRenderer</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderUtils</span><span class="pl-k">=</span>{lib<span class="pl-k">:</span>{fresnel<span class="pl-k">:</span>{uniforms<span class="pl-k">:</span>{mRefractionRatio<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">1.02</span>},mFresnelBias<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">0.1</span>},mFresnelPower<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">2</span>},mFresnelScale<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">1</span>},tCube<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>t<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">null</span>}},fragmentShader<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>uniform samplerCube tCube;<span class="pl-cce">\n</span>varying vec3 vReflect;<span class="pl-cce">\n</span>varying vec3 vRefract[3];<span class="pl-cce">\n</span>varying float vReflectionFactor;<span class="pl-cce">\n</span>void main() {<span class="pl-cce">\n</span>vec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );<span class="pl-cce">\n</span>vec4 refractedColor = vec4( 1.0, 1.0, 1.0, 1.0 );<span class="pl-cce">\n</span>refractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;<span class="pl-cce">\n</span>refractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;<span class="pl-cce">\n</span>refractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;<span class="pl-cce">\n</span>refractedColor.a = 1.0;<span class="pl-cce">\n</span>gl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );<span class="pl-cce">\n</span>}<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L527" class="blob-num js-line-number" data-line-number="527"></td>
        <td id="LC527" class="blob-code blob-code-inner js-file-line">vertexShader<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>uniform float mRefractionRatio;<span class="pl-cce">\n</span>uniform float mFresnelBias;<span class="pl-cce">\n</span>uniform float mFresnelScale;<span class="pl-cce">\n</span>uniform float mFresnelPower;<span class="pl-cce">\n</span>varying vec3 vReflect;<span class="pl-cce">\n</span>varying vec3 vRefract[3];<span class="pl-cce">\n</span>varying float vReflectionFactor;<span class="pl-cce">\n</span>void main() {<span class="pl-cce">\n</span>vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );<span class="pl-cce">\n</span>vec4 mPosition = modelMatrix * vec4( position, 1.0 );<span class="pl-cce">\n</span>vec3 nWorld = normalize( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );<span class="pl-cce">\n</span>vec3 I = mPosition.xyz - cameraPosition;<span class="pl-cce">\n</span>vReflect = reflect( I, nWorld );<span class="pl-cce">\n</span>vRefract[0] = refract( normalize( I ), nWorld, mRefractionRatio );<span class="pl-cce">\n</span>vRefract[1] = refract( normalize( I ), nWorld, mRefractionRatio * 0.99 );<span class="pl-cce">\n</span>vRefract[2] = refract( normalize( I ), nWorld, mRefractionRatio * 0.98 );<span class="pl-cce">\n</span>vReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), nWorld ), mFresnelPower );<span class="pl-cce">\n</span>gl_Position = projectionMatrix * mvPosition;<span class="pl-cce">\n</span>}<span class="pl-pds">&quot;</span></span>},</td>
      </tr>
      <tr>
        <td id="L528" class="blob-num js-line-number" data-line-number="528"></td>
        <td id="LC528" class="blob-code blob-code-inner js-file-line">normal<span class="pl-k">:</span>{uniforms<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">UniformsUtils</span>.<span class="pl-en">merge</span>([<span class="pl-c1">THREE</span>.<span class="pl-smi">UniformsLib</span>.<span class="pl-smi">fog</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">UniformsLib</span>.<span class="pl-smi">lights</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">UniformsLib</span>.<span class="pl-smi">shadowmap</span>,{enableAO<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>i<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">0</span>},enableDiffuse<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>i<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">0</span>},enableSpecular<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>i<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">0</span>},enableReflection<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>i<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">0</span>},enableDisplacement<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>i<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">0</span>},tDisplacement<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>t<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">null</span>},tDiffuse<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>t<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">null</span>},tCube<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>t<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">null</span>},tNormal<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>t<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">null</span>},tSpecular<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>t<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">null</span>},tAO<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>t<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">null</span>},uNormalScale<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>v2<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(<span class="pl-c1">1</span>,</td>
      </tr>
      <tr>
        <td id="L529" class="blob-num js-line-number" data-line-number="529"></td>
        <td id="LC529" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">1</span>)},uDisplacementBias<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">0</span>},uDisplacementScale<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">1</span>},uDiffuseColor<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>c<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">16777215</span>)},uSpecularColor<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>c<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">1118481</span>)},uAmbientColor<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>c<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">16777215</span>)},uShininess<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">30</span>},uOpacity<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">1</span>},useRefract<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>i<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">0</span>},uRefractionRatio<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">0.98</span>},uReflectivity<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">0.5</span>},uOffset<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>v2<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>)},uRepeat<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>v2<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(<span class="pl-c1">1</span>,</td>
      </tr>
      <tr>
        <td id="L530" class="blob-num js-line-number" data-line-number="530"></td>
        <td id="LC530" class="blob-code blob-code-inner js-file-line">1)},wrapRGB:{type:&quot;v3&quot;,value:new THREE.Vector3(1,1,1)}}]),fragmentShader:[&quot;uniform vec3 uAmbientColor;\nuniform vec3 uDiffuseColor;\nuniform vec3 uSpecularColor;\nuniform float uShininess;\nuniform float uOpacity;\nuniform bool enableDiffuse;\nuniform bool enableSpecular;\nuniform bool enableAO;\nuniform bool enableReflection;\nuniform sampler2D tDiffuse;\nuniform sampler2D tNormal;\nuniform sampler2D tSpecular;\nuniform sampler2D tAO;\nuniform samplerCube tCube;\nuniform vec2 uNormalScale;\nuniform bool useRefract;\nuniform float uRefractionRatio;\nuniform float uReflectivity;\nvarying vec3 vTangent;\nvarying vec3 vBinormal;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nuniform vec3 ambientLightColor;\n#if MAX_DIR_LIGHTS &gt; 0\nuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\nuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n#endif\n#if MAX_HEMI_LIGHTS &gt; 0\nuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\nuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\nuniform vec3 hemisphereLightPosition[ MAX_HEMI_LIGHTS ];\n#endif\n#if MAX_POINT_LIGHTS &gt; 0\nuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\nuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\nuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n#endif\n#if MAX_SPOT_LIGHTS &gt; 0\nuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\nuniform float spotLightAngle[ MAX_SPOT_LIGHTS ];\nuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\nuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\n#endif\n#ifdef WRAP_AROUND\nuniform vec3 wrapRGB;\n#endif\nvarying vec3 vWorldPosition;\nvarying vec3 vViewPosition;&quot;,</td>
      </tr>
      <tr>
        <td id="L531" class="blob-num js-line-number" data-line-number="531"></td>
        <td id="LC531" class="blob-code blob-code-inner js-file-line">THREE.ShaderChunk.shadowmap_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,&quot;void main() {\ngl_FragColor = vec4( vec3( 1.0 ), uOpacity );\nvec3 specularTex = vec3( 1.0 );\nvec3 normalTex = texture2D( tNormal, vUv ).xyz * 2.0 - 1.0;\nnormalTex.xy *= uNormalScale;\nnormalTex = normalize( normalTex );\nif( enableDiffuse ) {\n#ifdef GAMMA_INPUT\nvec4 texelColor = texture2D( tDiffuse, vUv );\ntexelColor.xyz *= texelColor.xyz;\ngl_FragColor = gl_FragColor * texelColor;\n#else\ngl_FragColor = gl_FragColor * texture2D( tDiffuse, vUv );\n#endif\n}\nif( enableAO ) {\n#ifdef GAMMA_INPUT\nvec4 aoColor = texture2D( tAO, vUv );\naoColor.xyz *= aoColor.xyz;\ngl_FragColor.xyz = gl_FragColor.xyz * aoColor.xyz;\n#else\ngl_FragColor.xyz = gl_FragColor.xyz * texture2D( tAO, vUv ).xyz;\n#endif\n}\nif( enableSpecular )\nspecularTex = texture2D( tSpecular, vUv ).xyz;\nmat3 tsb = mat3( normalize( vTangent ), normalize( vBinormal ), normalize( vNormal ) );\nvec3 finalNormal = tsb * normalTex;\n#ifdef FLIP_SIDED\nfinalNormal = -finalNormal;\n#endif\nvec3 normal = normalize( finalNormal );\nvec3 viewPosition = normalize( vViewPosition );\n#if MAX_POINT_LIGHTS &gt; 0\nvec3 pointDiffuse = vec3( 0.0 );\nvec3 pointSpecular = vec3( 0.0 );\nfor ( int i = 0; i &lt; MAX_POINT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\nvec3 pointVector = lPosition.xyz + vViewPosition.xyz;\nfloat pointDistance = 1.0;\nif ( pointLightDistance[ i ] &gt; 0.0 )\npointDistance = 1.0 - min( ( length( pointVector ) / pointLightDistance[ i ] ), 1.0 );\npointVector = normalize( pointVector );\n#ifdef WRAP_AROUND\nfloat pointDiffuseWeightFull = max( dot( normal, pointVector ), 0.0 );\nfloat pointDiffuseWeightHalf = max( 0.5 * dot( normal, pointVector ) + 0.5, 0.0 );\nvec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );\n#else\nfloat pointDiffuseWeight = max( dot( normal, pointVector ), 0.0 );\n#endif\npointDiffuse += pointDistance * pointLightColor[ i ] * uDiffuseColor * pointDiffuseWeight;\nvec3 pointHalfVector = normalize( pointVector + viewPosition );\nfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\nfloat pointSpecularWeight = specularTex.r * max( pow( pointDotNormalHalf, uShininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( uShininess + 2.0001 ) / 8.0;\nvec3 schlick = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( pointVector, pointHalfVector ), 5.0 );\npointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * pointDistance * specularNormalization;\n#else\npointSpecular += pointDistance * pointLightColor[ i ] * uSpecularColor * pointSpecularWeight * pointDiffuseWeight;\n#endif\n}\n#endif\n#if MAX_SPOT_LIGHTS &gt; 0\nvec3 spotDiffuse = vec3( 0.0 );\nvec3 spotSpecular = vec3( 0.0 );\nfor ( int i = 0; i &lt; MAX_SPOT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\nvec3 spotVector = lPosition.xyz + vViewPosition.xyz;\nfloat spotDistance = 1.0;\nif ( spotLightDistance[ i ] &gt; 0.0 )\nspotDistance = 1.0 - min( ( length( spotVector ) / spotLightDistance[ i ] ), 1.0 );\nspotVector = normalize( spotVector );\nfloat spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - vWorldPosition ) );\nif ( spotEffect &gt; spotLightAngle[ i ] ) {\nspotEffect = pow( spotEffect, spotLightExponent[ i ] );\n#ifdef WRAP_AROUND\nfloat spotDiffuseWeightFull = max( dot( normal, spotVector ), 0.0 );\nfloat spotDiffuseWeightHalf = max( 0.5 * dot( normal, spotVector ) + 0.5, 0.0 );\nvec3 spotDiffuseWeight = mix( vec3 ( spotDiffuseWeightFull ), vec3( spotDiffuseWeightHalf ), wrapRGB );\n#else\nfloat spotDiffuseWeight = max( dot( normal, spotVector ), 0.0 );\n#endif\nspotDiffuse += spotDistance * spotLightColor[ i ] * uDiffuseColor * spotDiffuseWeight * spotEffect;\nvec3 spotHalfVector = normalize( spotVector + viewPosition );\nfloat spotDotNormalHalf = max( dot( normal, spotHalfVector ), 0.0 );\nfloat spotSpecularWeight = specularTex.r * max( pow( spotDotNormalHalf, uShininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( uShininess + 2.0001 ) / 8.0;\nvec3 schlick = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( spotVector, spotHalfVector ), 5.0 );\nspotSpecular += schlick * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * spotDistance * specularNormalization * spotEffect;\n#else\nspotSpecular += spotDistance * spotLightColor[ i ] * uSpecularColor * spotSpecularWeight * spotDiffuseWeight * spotEffect;\n#endif\n}\n}\n#endif\n#if MAX_DIR_LIGHTS &gt; 0\nvec3 dirDiffuse = vec3( 0.0 );\nvec3 dirSpecular = vec3( 0.0 );\nfor( int i = 0; i &lt; MAX_DIR_LIGHTS; i++ ) {\nvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\nvec3 dirVector = normalize( lDirection.xyz );\n#ifdef WRAP_AROUND\nfloat directionalLightWeightingFull = max( dot( normal, dirVector ), 0.0 );\nfloat directionalLightWeightingHalf = max( 0.5 * dot( normal, dirVector ) + 0.5, 0.0 );\nvec3 dirDiffuseWeight = mix( vec3( directionalLightWeightingFull ), vec3( directionalLightWeightingHalf ), wrapRGB );\n#else\nfloat dirDiffuseWeight = max( dot( normal, dirVector ), 0.0 );\n#endif\ndirDiffuse += directionalLightColor[ i ] * uDiffuseColor * dirDiffuseWeight;\nvec3 dirHalfVector = normalize( dirVector + viewPosition );\nfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\nfloat dirSpecularWeight = specularTex.r * max( pow( dirDotNormalHalf, uShininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( uShininess + 2.0001 ) / 8.0;\nvec3 schlick = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( dirVector, dirHalfVector ), 5.0 );\ndirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;\n#else\ndirSpecular += directionalLightColor[ i ] * uSpecularColor * dirSpecularWeight * dirDiffuseWeight;\n#endif\n}\n#endif\n#if MAX_HEMI_LIGHTS &gt; 0\nvec3 hemiDiffuse  = vec3( 0.0 );\nvec3 hemiSpecular = vec3( 0.0 );\nfor( int i = 0; i &lt; MAX_HEMI_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( hemisphereLightPosition[ i ], 1.0 );\nvec3 lVector = normalize( lPosition.xyz + vViewPosition.xyz );\nfloat dotProduct = dot( normal, lVector );\nfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\nvec3 hemiColor = mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\nhemiDiffuse += uDiffuseColor * hemiColor;\nvec3 hemiHalfVectorSky = normalize( lVector + viewPosition );\nfloat hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\nfloat hemiSpecularWeightSky = specularTex.r * max( pow( hemiDotNormalHalfSky, uShininess ), 0.0 );\nvec3 lVectorGround = normalize( -lPosition.xyz + vViewPosition.xyz );\nvec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );\nfloat hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\nfloat hemiSpecularWeightGround = specularTex.r * max( pow( hemiDotNormalHalfGround, uShininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat dotProductGround = dot( normal, lVectorGround );\nfloat specularNormalization = ( uShininess + 2.0001 ) / 8.0;\nvec3 schlickSky = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( lVector, hemiHalfVectorSky ), 5.0 );\nvec3 schlickGround = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( lVectorGround, hemiHalfVectorGround ), 5.0 );\nhemiSpecular += hemiColor * specularNormalization * ( schlickSky * hemiSpecularWeightSky * max( dotProduct, 0.0 ) + schlickGround * hemiSpecularWeightGround * max( dotProductGround, 0.0 ) );\n#else\nhemiSpecular += uSpecularColor * hemiColor * ( hemiSpecularWeightSky + hemiSpecularWeightGround ) * hemiDiffuseWeight;\n#endif\n}\n#endif\nvec3 totalDiffuse = vec3( 0.0 );\nvec3 totalSpecular = vec3( 0.0 );\n#if MAX_DIR_LIGHTS &gt; 0\ntotalDiffuse += dirDiffuse;\ntotalSpecular += dirSpecular;\n#endif\n#if MAX_HEMI_LIGHTS &gt; 0\ntotalDiffuse += hemiDiffuse;\ntotalSpecular += hemiSpecular;\n#endif\n#if MAX_POINT_LIGHTS &gt; 0\ntotalDiffuse += pointDiffuse;\ntotalSpecular += pointSpecular;\n#endif\n#if MAX_SPOT_LIGHTS &gt; 0\ntotalDiffuse += spotDiffuse;\ntotalSpecular += spotSpecular;\n#endif\n#ifdef METAL\ngl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * uAmbientColor + totalSpecular );\n#else\ngl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * uAmbientColor ) + totalSpecular;\n#endif\nif ( enableReflection ) {\nvec3 vReflect;\nvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\nif ( useRefract ) {\nvReflect = refract( cameraToVertex, normal, uRefractionRatio );\n} else {\nvReflect = reflect( cameraToVertex, normal );\n}\nvec4 cubeColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\n#ifdef GAMMA_INPUT\ncubeColor.xyz *= cubeColor.xyz;\n#endif\ngl_FragColor.xyz = mix( gl_FragColor.xyz, cubeColor.xyz, specularTex.r * uReflectivity );\n}&quot;,</td>
      </tr>
      <tr>
        <td id="L532" class="blob-num js-line-number" data-line-number="532"></td>
        <td id="LC532" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">shadowmap_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">linear_to_gamma_fragment</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderChunk</span>.<span class="pl-smi">fog_fragment</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>}<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>),vertexShader<span class="pl-k">:</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>attribute vec4 tangent;<span class="pl-cce">\n</span>uniform vec2 uOffset;<span class="pl-cce">\n</span>uniform vec2 uRepeat;<span class="pl-cce">\n</span>uniform bool enableDisplacement;<span class="pl-cce">\n</span>#ifdef VERTEX_TEXTURES<span class="pl-cce">\n</span>uniform sampler2D tDisplacement;<span class="pl-cce">\n</span>uniform float uDisplacementScale;<span class="pl-cce">\n</span>uniform float uDisplacementBias;<span class="pl-cce">\n</span>#endif<span class="pl-cce">\n</span>varying vec3 vTangent;<span class="pl-cce">\n</span>varying vec3 vBinormal;<span class="pl-cce">\n</span>varying vec3 vNormal;<span class="pl-cce">\n</span>varying vec2 vUv;<span class="pl-cce">\n</span>varying vec3 vWorldPosition;<span class="pl-cce">\n</span>varying vec3 vViewPosition;<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L533" class="blob-num js-line-number" data-line-number="533"></td>
        <td id="LC533" class="blob-code blob-code-inner js-file-line">THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,&quot;void main() {&quot;,THREE.ShaderChunk.skinbase_vertex,THREE.ShaderChunk.skinnormal_vertex,&quot;#ifdef USE_SKINNING\nvNormal = normalMatrix * skinnedNormal.xyz;\nvec4 skinnedTangent = skinMatrix * vec4( tangent.xyz, 0.0 );\nvTangent = normalMatrix * skinnedTangent.xyz;\n#else\nvNormal = normalMatrix * normal;\nvTangent = normalMatrix * tangent.xyz;\n#endif\nvBinormal = cross( vNormal, vTangent ) * tangent.w;\nvUv = uv * uRepeat + uOffset;\nvec3 displacedPosition;\n#ifdef VERTEX_TEXTURES\nif ( enableDisplacement ) {\nvec3 dv = texture2D( tDisplacement, uv ).xyz;\nfloat df = uDisplacementScale * dv.x + uDisplacementBias;\ndisplacedPosition = position + normalize( normal ) * df;\n} else {\n#ifdef USE_SKINNING\nvec4 skinVertex = vec4( position, 1.0 );\nvec4 skinned  = boneMatX * skinVertex * skinWeight.x;\nskinned \t  += boneMatY * skinVertex * skinWeight.y;\ndisplacedPosition  = skinned.xyz;\n#else\ndisplacedPosition = position;\n#endif\n}\n#else\n#ifdef USE_SKINNING\nvec4 skinVertex = vec4( position, 1.0 );\nvec4 skinned  = boneMatX * skinVertex * skinWeight.x;\nskinned \t  += boneMatY * skinVertex * skinWeight.y;\ndisplacedPosition  = skinned.xyz;\n#else\ndisplacedPosition = position;\n#endif\n#endif\nvec4 mvPosition = modelViewMatrix * vec4( displacedPosition, 1.0 );\nvec4 mPosition = modelMatrix * vec4( displacedPosition, 1.0 );\ngl_Position = projectionMatrix * mvPosition;\nvWorldPosition = mPosition.xyz;\nvViewPosition = -mvPosition.xyz;\n#ifdef USE_SHADOWMAP\nfor( int i = 0; i &lt; MAX_SHADOWS; i ++ ) {\nvShadowCoord[ i ] = shadowMatrix[ i ] * mPosition;\n}\n#endif\n}&quot;].join(&quot;\n&quot;)},</td>
      </tr>
      <tr>
        <td id="L534" class="blob-num js-line-number" data-line-number="534"></td>
        <td id="LC534" class="blob-code blob-code-inner js-file-line">cube<span class="pl-k">:</span>{uniforms<span class="pl-k">:</span>{tCube<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>t<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-c1">null</span>},tFlip<span class="pl-k">:</span>{type<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>,value<span class="pl-k">:</span><span class="pl-k">-</span><span class="pl-c1">1</span>}},vertexShader<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>varying vec3 vViewPosition;<span class="pl-cce">\n</span>void main() {<span class="pl-cce">\n</span>vec4 mPosition = modelMatrix * vec4( position, 1.0 );<span class="pl-cce">\n</span>vViewPosition = cameraPosition - mPosition.xyz;<span class="pl-cce">\n</span>gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );<span class="pl-cce">\n</span>}<span class="pl-pds">&quot;</span></span>,fragmentShader<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>uniform samplerCube tCube;<span class="pl-cce">\n</span>uniform float tFlip;<span class="pl-cce">\n</span>varying vec3 vViewPosition;<span class="pl-cce">\n</span>void main() {<span class="pl-cce">\n</span>vec3 wPos = cameraPosition - vViewPosition;<span class="pl-cce">\n</span>gl_FragColor = textureCube( tCube, vec3( tFlip * wPos.x, wPos.yz ) );<span class="pl-cce">\n</span>}<span class="pl-pds">&quot;</span></span>}}});</td>
      </tr>
      <tr>
        <td id="L535" class="blob-num js-line-number" data-line-number="535"></td>
        <td id="LC535" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">FontUtils</span><span class="pl-k">=</span>{faces<span class="pl-k">:</span>{},face<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>helvetiker<span class="pl-pds">&quot;</span></span>,weight<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>normal<span class="pl-pds">&quot;</span></span>,style<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>normal<span class="pl-pds">&quot;</span></span>,size<span class="pl-k">:</span><span class="pl-c1">150</span>,divisions<span class="pl-k">:</span><span class="pl-c1">10</span>,<span class="pl-en">getFace</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">faces</span>[<span class="pl-c1">this</span>.<span class="pl-c1">face</span>][<span class="pl-c1">this</span>.<span class="pl-smi">weight</span>][<span class="pl-c1">this</span>.<span class="pl-c1">style</span>]},<span class="pl-en">loadFace</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">familyName</span>.<span class="pl-c1">toLowerCase</span>();<span class="pl-c1">this</span>.<span class="pl-smi">faces</span>[b]<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faces</span>[b]<span class="pl-k">||</span>{};<span class="pl-c1">this</span>.<span class="pl-smi">faces</span>[b][<span class="pl-smi">a</span>.<span class="pl-smi">cssFontWeight</span>]<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faces</span>[b][<span class="pl-smi">a</span>.<span class="pl-smi">cssFontWeight</span>]<span class="pl-k">||</span>{};<span class="pl-c1">this</span>.<span class="pl-smi">faces</span>[b][<span class="pl-smi">a</span>.<span class="pl-smi">cssFontWeight</span>][<span class="pl-smi">a</span>.<span class="pl-smi">cssFontStyle</span>]<span class="pl-k">=</span>a;<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">faces</span>[b][<span class="pl-smi">a</span>.<span class="pl-smi">cssFontWeight</span>][<span class="pl-smi">a</span>.<span class="pl-smi">cssFontStyle</span>]<span class="pl-k">=</span>a},<span class="pl-en">drawText</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">getFace</span>(),c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">size</span><span class="pl-k">/</span><span class="pl-smi">b</span>.<span class="pl-smi">resolution</span>,d<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L536" class="blob-num js-line-number" data-line-number="536"></td>
        <td id="LC536" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>,e<span class="pl-k">=</span><span class="pl-c1">String</span>(a).<span class="pl-c1">split</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>),f<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-c1">length</span>,g<span class="pl-k">=</span>[],a<span class="pl-k">=</span><span class="pl-c1">0</span>;a<span class="pl-k">&lt;</span>f;a<span class="pl-k">++</span>){<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Path</span>,h<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">extractGlyphPoints</span>(e[a],b,c,d,h),d<span class="pl-k">=</span>d<span class="pl-k">+</span><span class="pl-smi">h</span>.<span class="pl-smi">offset</span>;<span class="pl-smi">g</span>.<span class="pl-c1">push</span>(<span class="pl-smi">h</span>.<span class="pl-smi">path</span>)}<span class="pl-k">return</span>{paths<span class="pl-k">:</span>g,offset<span class="pl-k">:</span>d<span class="pl-k">/</span><span class="pl-c1">2</span>}},<span class="pl-en">extractGlyphPoints</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){<span class="pl-k">var</span> f<span class="pl-k">=</span>[],g,h,i,j,l,m,n,p,o,q,r,t<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">glyphs</span>[a]<span class="pl-k">||</span><span class="pl-smi">b</span>.<span class="pl-smi">glyphs</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>?<span class="pl-pds">&quot;</span></span>];<span class="pl-k">if</span>(t){<span class="pl-k">if</span>(<span class="pl-smi">t</span>.<span class="pl-smi">o</span>){b<span class="pl-k">=</span><span class="pl-smi">t</span>.<span class="pl-smi">_cachedOutline</span><span class="pl-k">||</span>(<span class="pl-smi">t</span>.<span class="pl-smi">_cachedOutline</span><span class="pl-k">=</span><span class="pl-smi">t</span>.<span class="pl-smi">o</span>.<span class="pl-c1">split</span>(<span class="pl-s"><span class="pl-pds">&quot;</span> <span class="pl-pds">&quot;</span></span>));j<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span>;<span class="pl-k">for</span>(a<span class="pl-k">=</span><span class="pl-c1">0</span>;a<span class="pl-k">&lt;</span>j;){i<span class="pl-k">=</span>b[a<span class="pl-k">++</span>];<span class="pl-k">switch</span>(i){<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>m<span class="pl-pds">&quot;</span></span>:i<span class="pl-k">=</span>b[a<span class="pl-k">++</span>]<span class="pl-k">*</span>c<span class="pl-k">+</span>d;l<span class="pl-k">=</span>b[a<span class="pl-k">++</span>]<span class="pl-k">*</span>c;<span class="pl-smi">e</span>.<span class="pl-c1">moveTo</span>(i,l);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>l<span class="pl-pds">&quot;</span></span>:i<span class="pl-k">=</span>b[a<span class="pl-k">++</span>]<span class="pl-k">*</span>c<span class="pl-k">+</span>d;l<span class="pl-k">=</span>b[a<span class="pl-k">++</span>]<span class="pl-k">*</span>c;<span class="pl-smi">e</span>.<span class="pl-en">lineTo</span>(i,l);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>q<span class="pl-pds">&quot;</span></span>:i<span class="pl-k">=</span>b[a<span class="pl-k">++</span>]<span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L537" class="blob-num js-line-number" data-line-number="537"></td>
        <td id="LC537" class="blob-code blob-code-inner js-file-line">c<span class="pl-k">+</span>d;l<span class="pl-k">=</span>b[a<span class="pl-k">++</span>]<span class="pl-k">*</span>c;p<span class="pl-k">=</span>b[a<span class="pl-k">++</span>]<span class="pl-k">*</span>c<span class="pl-k">+</span>d;o<span class="pl-k">=</span>b[a<span class="pl-k">++</span>]<span class="pl-k">*</span>c;<span class="pl-smi">e</span>.<span class="pl-en">quadraticCurveTo</span>(p,o,i,l);<span class="pl-k">if</span>(g<span class="pl-k">=</span>f[<span class="pl-smi">f</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>]){m<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-c1">x</span>;n<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-c1">y</span>;g<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-k">for</span>(h<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">divisions</span>;g<span class="pl-k">&lt;=</span>h;g<span class="pl-k">++</span>){<span class="pl-k">var</span> <span class="pl-c1">B</span><span class="pl-k">=</span>g<span class="pl-k">/</span>h;<span class="pl-c1">THREE</span>.<span class="pl-smi">Shape</span>.<span class="pl-smi">Utils</span>.<span class="pl-en">b2</span>(<span class="pl-c1">B</span>,m,p,i);<span class="pl-c1">THREE</span>.<span class="pl-smi">Shape</span>.<span class="pl-smi">Utils</span>.<span class="pl-en">b2</span>(<span class="pl-c1">B</span>,n,o,l)}}<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>b<span class="pl-pds">&quot;</span></span>:i<span class="pl-k">=</span>b[a<span class="pl-k">++</span>]<span class="pl-k">*</span>c<span class="pl-k">+</span>d;l<span class="pl-k">=</span>b[a<span class="pl-k">++</span>]<span class="pl-k">*</span>c;p<span class="pl-k">=</span>b[a<span class="pl-k">++</span>]<span class="pl-k">*</span>c<span class="pl-k">+</span>d;o<span class="pl-k">=</span>b[a<span class="pl-k">++</span>]<span class="pl-k">*-</span>c;q<span class="pl-k">=</span>b[a<span class="pl-k">++</span>]<span class="pl-k">*</span>c<span class="pl-k">+</span>d;r<span class="pl-k">=</span>b[a<span class="pl-k">++</span>]<span class="pl-k">*-</span>c;<span class="pl-smi">e</span>.<span class="pl-en">bezierCurveTo</span>(i,l,p,o,q,r);<span class="pl-k">if</span>(g<span class="pl-k">=</span>f[<span class="pl-smi">f</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>]){m<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-c1">x</span>;n<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-c1">y</span>;g<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-k">for</span>(h<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">divisions</span>;g<span class="pl-k">&lt;=</span>h;g<span class="pl-k">++</span>){<span class="pl-c1">B</span><span class="pl-k">=</span>g<span class="pl-k">/</span>h;<span class="pl-c1">THREE</span>.<span class="pl-smi">Shape</span>.<span class="pl-smi">Utils</span>.<span class="pl-en">b3</span>(<span class="pl-c1">B</span>,m,p,q,i);<span class="pl-c1">THREE</span>.<span class="pl-smi">Shape</span>.<span class="pl-smi">Utils</span>.<span class="pl-en">b3</span>(<span class="pl-c1">B</span>,n,o,r,l)}}}}}<span class="pl-k">return</span>{offset<span class="pl-k">:</span><span class="pl-smi">t</span>.<span class="pl-smi">ha</span><span class="pl-k">*</span>c,path<span class="pl-k">:</span>e}}}};</td>
      </tr>
      <tr>
        <td id="L538" class="blob-num js-line-number" data-line-number="538"></td>
        <td id="LC538" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">FontUtils</span>.<span class="pl-en">generateShapes</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span>b<span class="pl-k">||</span>{},c<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">curveSegments</span><span class="pl-k">!==</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">?</span><span class="pl-smi">b</span>.<span class="pl-smi">curveSegments</span><span class="pl-k">:</span><span class="pl-c1">4</span>,d<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">font</span><span class="pl-k">!==</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">?</span><span class="pl-smi">b</span>.<span class="pl-smi">font</span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>helvetiker<span class="pl-pds">&quot;</span></span>,e<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">weight</span><span class="pl-k">!==</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">?</span><span class="pl-smi">b</span>.<span class="pl-smi">weight</span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>normal<span class="pl-pds">&quot;</span></span>,f<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">style</span><span class="pl-k">!==</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">?</span><span class="pl-smi">b</span>.<span class="pl-c1">style</span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>normal<span class="pl-pds">&quot;</span></span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">FontUtils</span>.<span class="pl-c1">size</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">size</span><span class="pl-k">!==</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">?</span><span class="pl-smi">b</span>.<span class="pl-c1">size</span><span class="pl-k">:</span><span class="pl-c1">100</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">FontUtils</span>.<span class="pl-smi">divisions</span><span class="pl-k">=</span>c;<span class="pl-c1">THREE</span>.<span class="pl-smi">FontUtils</span>.<span class="pl-c1">face</span><span class="pl-k">=</span>d;<span class="pl-c1">THREE</span>.<span class="pl-smi">FontUtils</span>.<span class="pl-smi">weight</span><span class="pl-k">=</span>e;<span class="pl-c1">THREE</span>.<span class="pl-smi">FontUtils</span>.<span class="pl-c1">style</span><span class="pl-k">=</span>f;c<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">FontUtils</span>.<span class="pl-en">drawText</span>(a).<span class="pl-smi">paths</span>;d<span class="pl-k">=</span>[];e<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(f<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">length</span>;e<span class="pl-k">&lt;</span>f;e<span class="pl-k">++</span>)<span class="pl-c1">Array</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">push</span>.<span class="pl-c1">apply</span>(d,c[e].<span class="pl-en">toShapes</span>());<span class="pl-k">return</span> d};</td>
      </tr>
      <tr>
        <td id="L539" class="blob-num js-line-number" data-line-number="539"></td>
        <td id="LC539" class="blob-code blob-code-inner js-file-line">(<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> <span class="pl-en">b</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>,e<span class="pl-k">=</span><span class="pl-c1">0</span>,f<span class="pl-k">=</span>b<span class="pl-k">-</span><span class="pl-c1">1</span>,g<span class="pl-k">=</span><span class="pl-c1">0</span>;g<span class="pl-k">&lt;</span>b;f<span class="pl-k">=</span>g<span class="pl-k">++</span>)e<span class="pl-k">=</span>e<span class="pl-k">+</span>(a[f].<span class="pl-c1">x</span><span class="pl-k">*</span>a[g].<span class="pl-c1">y</span><span class="pl-k">-</span>a[g].<span class="pl-c1">x</span><span class="pl-k">*</span>a[f].<span class="pl-c1">y</span>);<span class="pl-k">return</span> e<span class="pl-k">*</span><span class="pl-c1">0.5</span>};<span class="pl-smi">a</span>.<span class="pl-en">Triangulate</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">d</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>;<span class="pl-k">if</span>(e<span class="pl-k">&lt;</span><span class="pl-c1">3</span>)<span class="pl-k">return</span> <span class="pl-c1">null</span>;<span class="pl-k">var</span> f<span class="pl-k">=</span>[],g<span class="pl-k">=</span>[],h<span class="pl-k">=</span>[],i,j,l;<span class="pl-k">if</span>(<span class="pl-en">b</span>(a)<span class="pl-k">&gt;</span><span class="pl-c1">0</span>)<span class="pl-k">for</span>(j<span class="pl-k">=</span><span class="pl-c1">0</span>;j<span class="pl-k">&lt;</span>e;j<span class="pl-k">++</span>)g[j]<span class="pl-k">=</span>j;<span class="pl-k">else</span> <span class="pl-k">for</span>(j<span class="pl-k">=</span><span class="pl-c1">0</span>;j<span class="pl-k">&lt;</span>e;j<span class="pl-k">++</span>)g[j]<span class="pl-k">=</span>e<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">-</span>j;<span class="pl-k">var</span> m<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">*</span>e;<span class="pl-k">for</span>(j<span class="pl-k">=</span>e<span class="pl-k">-</span><span class="pl-c1">1</span>;e<span class="pl-k">&gt;</span><span class="pl-c1">2</span>;){<span class="pl-k">if</span>(m<span class="pl-k">--</span><span class="pl-k">&lt;=</span><span class="pl-c1">0</span>){<span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>Warning, unable to triangulate polygon!<span class="pl-pds">&quot;</span></span>);<span class="pl-k">break</span>}i<span class="pl-k">=</span>j;e<span class="pl-k">&lt;=</span>i<span class="pl-k">&amp;&amp;</span>(i<span class="pl-k">=</span><span class="pl-c1">0</span>);j<span class="pl-k">=</span>i<span class="pl-k">+</span><span class="pl-c1">1</span>;e<span class="pl-k">&lt;=</span>j<span class="pl-k">&amp;&amp;</span>(j<span class="pl-k">=</span><span class="pl-c1">0</span>);l<span class="pl-k">=</span>j<span class="pl-k">+</span><span class="pl-c1">1</span>;e<span class="pl-k">&lt;=</span>l<span class="pl-k">&amp;&amp;</span>(l<span class="pl-k">=</span><span class="pl-c1">0</span>);<span class="pl-k">var</span> n;a<span class="pl-k">:</span>{n<span class="pl-k">=</span>a;<span class="pl-k">var</span> p<span class="pl-k">=</span>i,o<span class="pl-k">=</span>j,q<span class="pl-k">=</span>l,r<span class="pl-k">=</span>e,t<span class="pl-k">=</span>g,<span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,u<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,s<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,z<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,<span class="pl-c1">A</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,</td>
      </tr>
      <tr>
        <td id="L540" class="blob-num js-line-number" data-line-number="540"></td>
        <td id="LC540" class="blob-code blob-code-inner js-file-line">v<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,y<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,<span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,<span class="pl-c1">G</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,u<span class="pl-k">=</span>n[t[p]].<span class="pl-c1">x</span>,s<span class="pl-k">=</span>n[t[p]].<span class="pl-c1">y</span>,z<span class="pl-k">=</span>n[t[o]].<span class="pl-c1">x</span>,<span class="pl-c1">A</span><span class="pl-k">=</span>n[t[o]].<span class="pl-c1">y</span>,v<span class="pl-k">=</span>n[t[q]].<span class="pl-c1">x</span>,y<span class="pl-k">=</span>n[t[q]].<span class="pl-c1">y</span>;<span class="pl-k">if</span>(<span class="pl-c1">1E-10</span><span class="pl-k">&gt;</span>(z<span class="pl-k">-</span>u)<span class="pl-k">*</span>(y<span class="pl-k">-</span>s)<span class="pl-k">-</span>(<span class="pl-c1">A</span><span class="pl-k">-</span>s)<span class="pl-k">*</span>(v<span class="pl-k">-</span>u))n<span class="pl-k">=</span><span class="pl-c1">false</span>;<span class="pl-k">else</span>{<span class="pl-k">for</span>(<span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">B</span><span class="pl-k">&lt;</span>r;<span class="pl-c1">B</span><span class="pl-k">++</span>)<span class="pl-k">if</span>(<span class="pl-k">!</span>(<span class="pl-c1">B</span><span class="pl-k">==</span>p<span class="pl-k">||</span><span class="pl-c1">B</span><span class="pl-k">==</span>o<span class="pl-k">||</span><span class="pl-c1">B</span><span class="pl-k">==</span>q)){<span class="pl-k">var</span> <span class="pl-c1">C</span><span class="pl-k">=</span>n[t[<span class="pl-c1">B</span>]].<span class="pl-c1">x</span>,<span class="pl-c1">G</span><span class="pl-k">=</span>n[t[<span class="pl-c1">B</span>]].<span class="pl-c1">y</span>,<span class="pl-c1">H</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,<span class="pl-c1">E</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,<span class="pl-c1">M</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,<span class="pl-c1">K</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,<span class="pl-c1">F</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,<span class="pl-c1">I</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,<span class="pl-c1">L</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,<span class="pl-c1">R</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,$<span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,<span class="pl-c1">Y</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,<span class="pl-c1">N</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,<span class="pl-c1">H</span><span class="pl-k">=</span><span class="pl-c1">E</span><span class="pl-k">=</span><span class="pl-c1">K</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>,<span class="pl-c1">H</span><span class="pl-k">=</span>v<span class="pl-k">-</span>z,<span class="pl-c1">J</span><span class="pl-k">=</span>y<span class="pl-k">-</span><span class="pl-c1">A</span>,<span class="pl-c1">E</span><span class="pl-k">=</span>u<span class="pl-k">-</span>v,<span class="pl-c1">M</span><span class="pl-k">=</span>s<span class="pl-k">-</span>y,<span class="pl-c1">K</span><span class="pl-k">=</span>z<span class="pl-k">-</span>u,<span class="pl-c1">F</span><span class="pl-k">=</span><span class="pl-c1">A</span><span class="pl-k">-</span>s,<span class="pl-c1">I</span><span class="pl-k">=</span><span class="pl-c1">C</span><span class="pl-k">-</span>u,<span class="pl-c1">L</span><span class="pl-k">=</span><span class="pl-c1">G</span><span class="pl-k">-</span>s,<span class="pl-c1">R</span><span class="pl-k">=</span><span class="pl-c1">C</span><span class="pl-k">-</span>z,$<span class="pl-k">=</span><span class="pl-c1">G</span><span class="pl-k">-</span><span class="pl-c1">A</span>,<span class="pl-c1">Y</span><span class="pl-k">=</span><span class="pl-c1">C</span><span class="pl-k">-</span>v,<span class="pl-c1">N</span><span class="pl-k">=</span><span class="pl-c1">G</span><span class="pl-k">-</span>y,<span class="pl-c1">H</span><span class="pl-k">=</span><span class="pl-c1">H</span><span class="pl-k">*</span>$<span class="pl-k">-</span><span class="pl-c1">J</span><span class="pl-k">*</span><span class="pl-c1">R</span>,<span class="pl-c1">K</span><span class="pl-k">=</span><span class="pl-c1">K</span><span class="pl-k">*</span><span class="pl-c1">L</span><span class="pl-k">-</span><span class="pl-c1">F</span><span class="pl-k">*</span><span class="pl-c1">I</span>,<span class="pl-c1">E</span><span class="pl-k">=</span><span class="pl-c1">E</span><span class="pl-k">*</span><span class="pl-c1">N</span><span class="pl-k">-</span><span class="pl-c1">M</span><span class="pl-k">*</span><span class="pl-c1">Y</span>;<span class="pl-k">if</span>(<span class="pl-c1">H</span><span class="pl-k">&gt;=</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">E</span><span class="pl-k">&gt;=</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">K</span><span class="pl-k">&gt;=</span><span class="pl-c1">0</span>){n<span class="pl-k">=</span><span class="pl-c1">false</span>;<span class="pl-k">break</span> a}}n<span class="pl-k">=</span><span class="pl-c1">true</span>}}<span class="pl-k">if</span>(n){<span class="pl-smi">f</span>.<span class="pl-c1">push</span>([a[g[i]],</td>
      </tr>
      <tr>
        <td id="L541" class="blob-num js-line-number" data-line-number="541"></td>
        <td id="LC541" class="blob-code blob-code-inner js-file-line">a[g[j]],a[g[l]]]);<span class="pl-smi">h</span>.<span class="pl-c1">push</span>([g[i],g[j],g[l]]);i<span class="pl-k">=</span>j;<span class="pl-k">for</span>(l<span class="pl-k">=</span>j<span class="pl-k">+</span><span class="pl-c1">1</span>;l<span class="pl-k">&lt;</span>e;i<span class="pl-k">++</span>,l<span class="pl-k">++</span>)g[i]<span class="pl-k">=</span>g[l];e<span class="pl-k">--</span>;m<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">*</span>e}}<span class="pl-k">return</span> d<span class="pl-k">?</span>h<span class="pl-k">:</span>f};<span class="pl-smi">a</span>.<span class="pl-smi">Triangulate</span>.<span class="pl-smi">area</span><span class="pl-k">=</span>b;<span class="pl-k">return</span> a})(<span class="pl-c1">THREE</span>.<span class="pl-smi">FontUtils</span>);<span class="pl-smi">self</span>.<span class="pl-smi">_typeface_js</span><span class="pl-k">=</span>{faces<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">FontUtils</span>.<span class="pl-smi">faces</span>,loadFace<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">FontUtils</span>.<span class="pl-smi">loadFace</span>};<span class="pl-c1">THREE</span>.<span class="pl-en">Curve</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">THREE</span>.<span class="pl-smi">Curve</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getPoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>Warning, getPoint() not implemented!<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-c1">null</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">Curve</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getPointAt</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">getUtoTmapping</span>(a);<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">getPoint</span>(a)};</td>
      </tr>
      <tr>
        <td id="L542" class="blob-num js-line-number" data-line-number="542"></td>
        <td id="LC542" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Curve</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getPoints</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">||</span>(a<span class="pl-k">=</span><span class="pl-c1">5</span>);<span class="pl-k">var</span> b,c<span class="pl-k">=</span>[];<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;=</span>a;b<span class="pl-k">++</span>)<span class="pl-smi">c</span>.<span class="pl-c1">push</span>(<span class="pl-c1">this</span>.<span class="pl-en">getPoint</span>(b<span class="pl-k">/</span>a));<span class="pl-k">return</span> c};<span class="pl-c1">THREE</span>.<span class="pl-smi">Curve</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getSpacedPoints</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">||</span>(a<span class="pl-k">=</span><span class="pl-c1">5</span>);<span class="pl-k">var</span> b,c<span class="pl-k">=</span>[];<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;=</span>a;b<span class="pl-k">++</span>)<span class="pl-smi">c</span>.<span class="pl-c1">push</span>(<span class="pl-c1">this</span>.<span class="pl-en">getPointAt</span>(b<span class="pl-k">/</span>a));<span class="pl-k">return</span> c};<span class="pl-c1">THREE</span>.<span class="pl-smi">Curve</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getLength</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">getLengths</span>();<span class="pl-k">return</span> a[<span class="pl-smi">a</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>]};</td>
      </tr>
      <tr>
        <td id="L543" class="blob-num js-line-number" data-line-number="543"></td>
        <td id="LC543" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Curve</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getLengths</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">||</span>(a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">__arcLengthDivisions</span><span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-smi">__arcLengthDivisions</span><span class="pl-k">:</span><span class="pl-c1">200</span>);<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">cacheArcLengths</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">cacheArcLengths</span>.<span class="pl-c1">length</span><span class="pl-k">==</span>a<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">&amp;&amp;!</span><span class="pl-c1">this</span>.<span class="pl-smi">needsUpdate</span>)<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">cacheArcLengths</span>;<span class="pl-c1">this</span>.<span class="pl-smi">needsUpdate</span><span class="pl-k">=</span><span class="pl-c1">false</span>;<span class="pl-k">var</span> b<span class="pl-k">=</span>[],c,d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">getPoint</span>(<span class="pl-c1">0</span>),e,f<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-smi">b</span>.<span class="pl-c1">push</span>(<span class="pl-c1">0</span>);<span class="pl-k">for</span>(e<span class="pl-k">=</span><span class="pl-c1">1</span>;e<span class="pl-k">&lt;=</span>a;e<span class="pl-k">++</span>){c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">getPoint</span>(e<span class="pl-k">/</span>a);f<span class="pl-k">=</span>f<span class="pl-k">+</span><span class="pl-smi">c</span>.<span class="pl-en">distanceTo</span>(d);<span class="pl-smi">b</span>.<span class="pl-c1">push</span>(f);d<span class="pl-k">=</span>c}<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">cacheArcLengths</span><span class="pl-k">=</span>b};<span class="pl-c1">THREE</span>.<span class="pl-smi">Curve</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">updateArcLengths</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">needsUpdate</span><span class="pl-k">=</span><span class="pl-c1">true</span>;<span class="pl-c1">this</span>.<span class="pl-en">getLengths</span>()};</td>
      </tr>
      <tr>
        <td id="L544" class="blob-num js-line-number" data-line-number="544"></td>
        <td id="LC544" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Curve</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getUtoTmapping</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">getLengths</span>(),d<span class="pl-k">=</span><span class="pl-c1">0</span>,e<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">length</span>,f;f<span class="pl-k">=</span>b<span class="pl-k">?</span>b<span class="pl-k">:</span>a<span class="pl-k">*</span>c[e<span class="pl-k">-</span><span class="pl-c1">1</span>];<span class="pl-k">for</span>(<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-c1">0</span>,h<span class="pl-k">=</span>e<span class="pl-k">-</span><span class="pl-c1">1</span>,i;g<span class="pl-k">&lt;=</span>h;){d<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(g<span class="pl-k">+</span>(h<span class="pl-k">-</span>g)<span class="pl-k">/</span><span class="pl-c1">2</span>);i<span class="pl-k">=</span>c[d]<span class="pl-k">-</span>f;<span class="pl-k">if</span>(i<span class="pl-k">&lt;</span><span class="pl-c1">0</span>)g<span class="pl-k">=</span>d<span class="pl-k">+</span><span class="pl-c1">1</span>;<span class="pl-k">else</span> <span class="pl-k">if</span>(i<span class="pl-k">&gt;</span><span class="pl-c1">0</span>)h<span class="pl-k">=</span>d<span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-k">else</span>{h<span class="pl-k">=</span>d;<span class="pl-k">break</span>}}d<span class="pl-k">=</span>h;<span class="pl-k">if</span>(c[d]<span class="pl-k">==</span>f)<span class="pl-k">return</span> d<span class="pl-k">/</span>(e<span class="pl-k">-</span><span class="pl-c1">1</span>);g<span class="pl-k">=</span>c[d];<span class="pl-k">return</span> c<span class="pl-k">=</span>(d<span class="pl-k">+</span>(f<span class="pl-k">-</span>g)<span class="pl-k">/</span>(c[d<span class="pl-k">+</span><span class="pl-c1">1</span>]<span class="pl-k">-</span>g))<span class="pl-k">/</span>(e<span class="pl-k">-</span><span class="pl-c1">1</span>)};<span class="pl-c1">THREE</span>.<span class="pl-smi">Curve</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getNormalVector</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">getTangent</span>(a);<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(<span class="pl-k">-</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>,<span class="pl-smi">a</span>.<span class="pl-c1">x</span>)};</td>
      </tr>
      <tr>
        <td id="L545" class="blob-num js-line-number" data-line-number="545"></td>
        <td id="LC545" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Curve</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getTangent</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span>a<span class="pl-k">-</span><span class="pl-c1">1E-4</span>,a<span class="pl-k">=</span>a<span class="pl-k">+</span><span class="pl-c1">1E-4</span>;b<span class="pl-k">&lt;</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>);a<span class="pl-k">&gt;</span><span class="pl-c1">1</span><span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span><span class="pl-c1">1</span>);b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">getPoint</span>(b);<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">getPoint</span>(a).<span class="pl-en">clone</span>().<span class="pl-en">subSelf</span>(b).<span class="pl-c1">normalize</span>()};<span class="pl-c1">THREE</span>.<span class="pl-smi">Curve</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getTangentAt</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">getUtoTmapping</span>(a);<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">getTangent</span>(a)};<span class="pl-c1">THREE</span>.<span class="pl-en">LineCurve</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-smi">v1</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">v2</span><span class="pl-k">=</span>b};<span class="pl-c1">THREE</span>.<span class="pl-smi">LineCurve</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Curve</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">LineCurve</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getPoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">v2</span>.<span class="pl-en">clone</span>().<span class="pl-en">subSelf</span>(<span class="pl-c1">this</span>.<span class="pl-smi">v1</span>);<span class="pl-smi">b</span>.<span class="pl-en">multiplyScalar</span>(a).<span class="pl-en">addSelf</span>(<span class="pl-c1">this</span>.<span class="pl-smi">v1</span>);<span class="pl-k">return</span> b};</td>
      </tr>
      <tr>
        <td id="L546" class="blob-num js-line-number" data-line-number="546"></td>
        <td id="LC546" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">LineCurve</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getPointAt</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">getPoint</span>(a)};<span class="pl-c1">THREE</span>.<span class="pl-smi">LineCurve</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getTangent</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">v2</span>.<span class="pl-en">clone</span>().<span class="pl-en">subSelf</span>(<span class="pl-c1">this</span>.<span class="pl-smi">v1</span>).<span class="pl-c1">normalize</span>()};<span class="pl-c1">THREE</span>.<span class="pl-en">QuadraticBezierCurve</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">this</span>.<span class="pl-smi">v0</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">v1</span><span class="pl-k">=</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">v2</span><span class="pl-k">=</span>c};<span class="pl-c1">THREE</span>.<span class="pl-smi">QuadraticBezierCurve</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Curve</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L547" class="blob-num js-line-number" data-line-number="547"></td>
        <td id="LC547" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">QuadraticBezierCurve</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getPoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b;b<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Shape</span>.<span class="pl-smi">Utils</span>.<span class="pl-en">b2</span>(a,<span class="pl-c1">this</span>.<span class="pl-smi">v0</span>.<span class="pl-c1">x</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v1</span>.<span class="pl-c1">x</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v2</span>.<span class="pl-c1">x</span>);a<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Shape</span>.<span class="pl-smi">Utils</span>.<span class="pl-en">b2</span>(a,<span class="pl-c1">this</span>.<span class="pl-smi">v0</span>.<span class="pl-c1">y</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v1</span>.<span class="pl-c1">y</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v2</span>.<span class="pl-c1">y</span>);<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(b,a)};<span class="pl-c1">THREE</span>.<span class="pl-smi">QuadraticBezierCurve</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getTangent</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b;b<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Curve</span>.<span class="pl-smi">Utils</span>.<span class="pl-en">tangentQuadraticBezier</span>(a,<span class="pl-c1">this</span>.<span class="pl-smi">v0</span>.<span class="pl-c1">x</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v1</span>.<span class="pl-c1">x</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v2</span>.<span class="pl-c1">x</span>);a<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Curve</span>.<span class="pl-smi">Utils</span>.<span class="pl-en">tangentQuadraticBezier</span>(a,<span class="pl-c1">this</span>.<span class="pl-smi">v0</span>.<span class="pl-c1">y</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v1</span>.<span class="pl-c1">y</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v2</span>.<span class="pl-c1">y</span>);b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(b,a);<span class="pl-smi">b</span>.<span class="pl-c1">normalize</span>();<span class="pl-k">return</span> b};</td>
      </tr>
      <tr>
        <td id="L548" class="blob-num js-line-number" data-line-number="548"></td>
        <td id="LC548" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">CubicBezierCurve</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-c1">this</span>.<span class="pl-smi">v0</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">v1</span><span class="pl-k">=</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">v2</span><span class="pl-k">=</span>c;<span class="pl-c1">this</span>.<span class="pl-smi">v3</span><span class="pl-k">=</span>d};<span class="pl-c1">THREE</span>.<span class="pl-smi">CubicBezierCurve</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Curve</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">CubicBezierCurve</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getPoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b;b<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Shape</span>.<span class="pl-smi">Utils</span>.<span class="pl-en">b3</span>(a,<span class="pl-c1">this</span>.<span class="pl-smi">v0</span>.<span class="pl-c1">x</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v1</span>.<span class="pl-c1">x</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v2</span>.<span class="pl-c1">x</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v3</span>.<span class="pl-c1">x</span>);a<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Shape</span>.<span class="pl-smi">Utils</span>.<span class="pl-en">b3</span>(a,<span class="pl-c1">this</span>.<span class="pl-smi">v0</span>.<span class="pl-c1">y</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v1</span>.<span class="pl-c1">y</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v2</span>.<span class="pl-c1">y</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v3</span>.<span class="pl-c1">y</span>);<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(b,a)};</td>
      </tr>
      <tr>
        <td id="L549" class="blob-num js-line-number" data-line-number="549"></td>
        <td id="LC549" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">CubicBezierCurve</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getTangent</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b;b<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Curve</span>.<span class="pl-smi">Utils</span>.<span class="pl-en">tangentCubicBezier</span>(a,<span class="pl-c1">this</span>.<span class="pl-smi">v0</span>.<span class="pl-c1">x</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v1</span>.<span class="pl-c1">x</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v2</span>.<span class="pl-c1">x</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v3</span>.<span class="pl-c1">x</span>);a<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Curve</span>.<span class="pl-smi">Utils</span>.<span class="pl-en">tangentCubicBezier</span>(a,<span class="pl-c1">this</span>.<span class="pl-smi">v0</span>.<span class="pl-c1">y</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v1</span>.<span class="pl-c1">y</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v2</span>.<span class="pl-c1">y</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v3</span>.<span class="pl-c1">y</span>);b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(b,a);<span class="pl-smi">b</span>.<span class="pl-c1">normalize</span>();<span class="pl-k">return</span> b};<span class="pl-c1">THREE</span>.<span class="pl-en">SplineCurve</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">points</span><span class="pl-k">=</span>a<span class="pl-k">==</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">?</span>[]<span class="pl-k">:</span>a};<span class="pl-c1">THREE</span>.<span class="pl-smi">SplineCurve</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Curve</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L550" class="blob-num js-line-number" data-line-number="550"></td>
        <td id="LC550" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">SplineCurve</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getPoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>,c<span class="pl-k">=</span>[],d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">points</span>,e;e<span class="pl-k">=</span>(<span class="pl-smi">d</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>)<span class="pl-k">*</span>a;a<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(e);e<span class="pl-k">=</span>e<span class="pl-k">-</span>a;c[<span class="pl-c1">0</span>]<span class="pl-k">=</span>a<span class="pl-k">==</span><span class="pl-c1">0</span><span class="pl-k">?</span>a<span class="pl-k">:</span>a<span class="pl-k">-</span><span class="pl-c1">1</span>;c[<span class="pl-c1">1</span>]<span class="pl-k">=</span>a;c[<span class="pl-c1">2</span>]<span class="pl-k">=</span>a<span class="pl-k">&gt;</span><span class="pl-smi">d</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">?</span><span class="pl-smi">d</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span>a<span class="pl-k">+</span><span class="pl-c1">1</span>;c[<span class="pl-c1">3</span>]<span class="pl-k">=</span>a<span class="pl-k">&gt;</span><span class="pl-smi">d</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">3</span><span class="pl-k">?</span><span class="pl-smi">d</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span>a<span class="pl-k">+</span><span class="pl-c1">2</span>;<span class="pl-smi">b</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Curve</span>.<span class="pl-smi">Utils</span>.<span class="pl-en">interpolate</span>(d[c[<span class="pl-c1">0</span>]].<span class="pl-c1">x</span>,d[c[<span class="pl-c1">1</span>]].<span class="pl-c1">x</span>,d[c[<span class="pl-c1">2</span>]].<span class="pl-c1">x</span>,d[c[<span class="pl-c1">3</span>]].<span class="pl-c1">x</span>,e);<span class="pl-smi">b</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Curve</span>.<span class="pl-smi">Utils</span>.<span class="pl-en">interpolate</span>(d[c[<span class="pl-c1">0</span>]].<span class="pl-c1">y</span>,d[c[<span class="pl-c1">1</span>]].<span class="pl-c1">y</span>,d[c[<span class="pl-c1">2</span>]].<span class="pl-c1">y</span>,d[c[<span class="pl-c1">3</span>]].<span class="pl-c1">y</span>,e);<span class="pl-k">return</span> b};</td>
      </tr>
      <tr>
        <td id="L551" class="blob-num js-line-number" data-line-number="551"></td>
        <td id="LC551" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">EllipseCurve</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>,<span class="pl-smi">g</span>){<span class="pl-c1">this</span>.<span class="pl-smi">aX</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">aY</span><span class="pl-k">=</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">xRadius</span><span class="pl-k">=</span>c;<span class="pl-c1">this</span>.<span class="pl-smi">yRadius</span><span class="pl-k">=</span>d;<span class="pl-c1">this</span>.<span class="pl-smi">aStartAngle</span><span class="pl-k">=</span>e;<span class="pl-c1">this</span>.<span class="pl-smi">aEndAngle</span><span class="pl-k">=</span>f;<span class="pl-c1">this</span>.<span class="pl-smi">aClockwise</span><span class="pl-k">=</span>g};<span class="pl-c1">THREE</span>.<span class="pl-smi">EllipseCurve</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Curve</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">EllipseCurve</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getPoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">aEndAngle</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">aStartAngle</span>;<span class="pl-c1">this</span>.<span class="pl-smi">aClockwise</span><span class="pl-k">||</span>(a<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">-</span>a);b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">aStartAngle</span><span class="pl-k">+</span>a<span class="pl-k">*</span>b;a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">aX</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">xRadius</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(b);b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">aY</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">yRadius</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(b);<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(a,b)};</td>
      </tr>
      <tr>
        <td id="L552" class="blob-num js-line-number" data-line-number="552"></td>
        <td id="LC552" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">ArcCurve</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">EllipseCurve</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a,b,c,c,d,e,f)};<span class="pl-c1">THREE</span>.<span class="pl-smi">ArcCurve</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">EllipseCurve</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L553" class="blob-num js-line-number" data-line-number="553"></td>
        <td id="LC553" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Curve</span>.<span class="pl-smi">Utils</span><span class="pl-k">=</span>{<span class="pl-en">tangentQuadraticBezier</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">return</span> <span class="pl-c1">2</span><span class="pl-k">*</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>a)<span class="pl-k">*</span>(c<span class="pl-k">-</span>b)<span class="pl-k">+</span><span class="pl-c1">2</span><span class="pl-k">*</span>a<span class="pl-k">*</span>(d<span class="pl-k">-</span>c)},<span class="pl-en">tangentCubicBezier</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){<span class="pl-k">return</span><span class="pl-k">-</span><span class="pl-c1">3</span><span class="pl-k">*</span>b<span class="pl-k">*</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>a)<span class="pl-k">*</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>a)<span class="pl-k">+</span><span class="pl-c1">3</span><span class="pl-k">*</span>c<span class="pl-k">*</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>a)<span class="pl-k">*</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>a)<span class="pl-k">-</span><span class="pl-c1">6</span><span class="pl-k">*</span>a<span class="pl-k">*</span>c<span class="pl-k">*</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>a)<span class="pl-k">+</span><span class="pl-c1">6</span><span class="pl-k">*</span>a<span class="pl-k">*</span>d<span class="pl-k">*</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>a)<span class="pl-k">-</span><span class="pl-c1">3</span><span class="pl-k">*</span>a<span class="pl-k">*</span>a<span class="pl-k">*</span>d<span class="pl-k">+</span><span class="pl-c1">3</span><span class="pl-k">*</span>a<span class="pl-k">*</span>a<span class="pl-k">*</span>e},<span class="pl-en">tangentSpline</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">6</span><span class="pl-k">*</span>a<span class="pl-k">*</span>a<span class="pl-k">-</span><span class="pl-c1">6</span><span class="pl-k">*</span>a<span class="pl-k">+</span>(<span class="pl-c1">3</span><span class="pl-k">*</span>a<span class="pl-k">*</span>a<span class="pl-k">-</span><span class="pl-c1">4</span><span class="pl-k">*</span>a<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">+</span>(<span class="pl-k">-</span><span class="pl-c1">6</span><span class="pl-k">*</span>a<span class="pl-k">*</span>a<span class="pl-k">+</span><span class="pl-c1">6</span><span class="pl-k">*</span>a)<span class="pl-k">+</span>(<span class="pl-c1">3</span><span class="pl-k">*</span>a<span class="pl-k">*</span>a<span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">*</span>a)},<span class="pl-en">interpolate</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){<span class="pl-k">var</span> a<span class="pl-k">=</span>(c<span class="pl-k">-</span>a)<span class="pl-k">*</span><span class="pl-c1">0.5</span>,d<span class="pl-k">=</span>(d<span class="pl-k">-</span>b)<span class="pl-k">*</span><span class="pl-c1">0.5</span>,f<span class="pl-k">=</span>e<span class="pl-k">*</span>e;<span class="pl-k">return</span>(<span class="pl-c1">2</span><span class="pl-k">*</span>b<span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">*</span>c<span class="pl-k">+</span>a<span class="pl-k">+</span>d)<span class="pl-k">*</span>e<span class="pl-k">*</span>f<span class="pl-k">+</span>(<span class="pl-k">-</span><span class="pl-c1">3</span><span class="pl-k">*</span>b<span class="pl-k">+</span><span class="pl-c1">3</span><span class="pl-k">*</span>c<span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">*</span>a<span class="pl-k">-</span>d)<span class="pl-k">*</span>f<span class="pl-k">+</span>a<span class="pl-k">*</span>e<span class="pl-k">+</span>b}};</td>
      </tr>
      <tr>
        <td id="L554" class="blob-num js-line-number" data-line-number="554"></td>
        <td id="LC554" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Curve</span>.<span class="pl-en">create</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-smi">a</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Curve</span>.<span class="pl-c1">prototype</span>);<span class="pl-smi">a</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">getPoint</span><span class="pl-k">=</span>b;<span class="pl-k">return</span> a};<span class="pl-c1">THREE</span>.<span class="pl-smi">LineCurve3</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Curve</span>.<span class="pl-en">create</span>(<span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-smi">v1</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">v2</span><span class="pl-k">=</span>b},<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-smi">b</span>.<span class="pl-c1">sub</span>(<span class="pl-c1">this</span>.<span class="pl-smi">v2</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v1</span>);<span class="pl-smi">b</span>.<span class="pl-en">multiplyScalar</span>(a);<span class="pl-smi">b</span>.<span class="pl-en">addSelf</span>(<span class="pl-c1">this</span>.<span class="pl-smi">v1</span>);<span class="pl-k">return</span> b});</td>
      </tr>
      <tr>
        <td id="L555" class="blob-num js-line-number" data-line-number="555"></td>
        <td id="LC555" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">QuadraticBezierCurve3</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Curve</span>.<span class="pl-en">create</span>(<span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">this</span>.<span class="pl-smi">v0</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">v1</span><span class="pl-k">=</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">v2</span><span class="pl-k">=</span>c},<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b,c;b<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Shape</span>.<span class="pl-smi">Utils</span>.<span class="pl-en">b2</span>(a,<span class="pl-c1">this</span>.<span class="pl-smi">v0</span>.<span class="pl-c1">x</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v1</span>.<span class="pl-c1">x</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v2</span>.<span class="pl-c1">x</span>);c<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Shape</span>.<span class="pl-smi">Utils</span>.<span class="pl-en">b2</span>(a,<span class="pl-c1">this</span>.<span class="pl-smi">v0</span>.<span class="pl-c1">y</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v1</span>.<span class="pl-c1">y</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v2</span>.<span class="pl-c1">y</span>);a<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Shape</span>.<span class="pl-smi">Utils</span>.<span class="pl-en">b2</span>(a,<span class="pl-c1">this</span>.<span class="pl-smi">v0</span>.<span class="pl-c1">z</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v1</span>.<span class="pl-c1">z</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v2</span>.<span class="pl-c1">z</span>);<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(b,c,a)});</td>
      </tr>
      <tr>
        <td id="L556" class="blob-num js-line-number" data-line-number="556"></td>
        <td id="LC556" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">CubicBezierCurve3</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Curve</span>.<span class="pl-en">create</span>(<span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-c1">this</span>.<span class="pl-smi">v0</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">v1</span><span class="pl-k">=</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">v2</span><span class="pl-k">=</span>c;<span class="pl-c1">this</span>.<span class="pl-smi">v3</span><span class="pl-k">=</span>d},<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b,c;b<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Shape</span>.<span class="pl-smi">Utils</span>.<span class="pl-en">b3</span>(a,<span class="pl-c1">this</span>.<span class="pl-smi">v0</span>.<span class="pl-c1">x</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v1</span>.<span class="pl-c1">x</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v2</span>.<span class="pl-c1">x</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v3</span>.<span class="pl-c1">x</span>);c<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Shape</span>.<span class="pl-smi">Utils</span>.<span class="pl-en">b3</span>(a,<span class="pl-c1">this</span>.<span class="pl-smi">v0</span>.<span class="pl-c1">y</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v1</span>.<span class="pl-c1">y</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v2</span>.<span class="pl-c1">y</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v3</span>.<span class="pl-c1">y</span>);a<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Shape</span>.<span class="pl-smi">Utils</span>.<span class="pl-en">b3</span>(a,<span class="pl-c1">this</span>.<span class="pl-smi">v0</span>.<span class="pl-c1">z</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v1</span>.<span class="pl-c1">z</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v2</span>.<span class="pl-c1">z</span>,<span class="pl-c1">this</span>.<span class="pl-smi">v3</span>.<span class="pl-c1">z</span>);<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(b,c,a)});</td>
      </tr>
      <tr>
        <td id="L557" class="blob-num js-line-number" data-line-number="557"></td>
        <td id="LC557" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">SplineCurve3</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Curve</span>.<span class="pl-en">create</span>(<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">points</span><span class="pl-k">=</span>a<span class="pl-k">==</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">?</span>[]<span class="pl-k">:</span>a},<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,c<span class="pl-k">=</span>[],d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">points</span>,e,a<span class="pl-k">=</span>(<span class="pl-smi">d</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>)<span class="pl-k">*</span>a;e<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(a);a<span class="pl-k">=</span>a<span class="pl-k">-</span>e;c[<span class="pl-c1">0</span>]<span class="pl-k">=</span>e<span class="pl-k">==</span><span class="pl-c1">0</span><span class="pl-k">?</span>e<span class="pl-k">:</span>e<span class="pl-k">-</span><span class="pl-c1">1</span>;c[<span class="pl-c1">1</span>]<span class="pl-k">=</span>e;c[<span class="pl-c1">2</span>]<span class="pl-k">=</span>e<span class="pl-k">&gt;</span><span class="pl-smi">d</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">?</span><span class="pl-smi">d</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span>e<span class="pl-k">+</span><span class="pl-c1">1</span>;c[<span class="pl-c1">3</span>]<span class="pl-k">=</span>e<span class="pl-k">&gt;</span><span class="pl-smi">d</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">3</span><span class="pl-k">?</span><span class="pl-smi">d</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span>e<span class="pl-k">+</span><span class="pl-c1">2</span>;e<span class="pl-k">=</span>d[c[<span class="pl-c1">0</span>]];<span class="pl-k">var</span> f<span class="pl-k">=</span>d[c[<span class="pl-c1">1</span>]],g<span class="pl-k">=</span>d[c[<span class="pl-c1">2</span>]],c<span class="pl-k">=</span>d[c[<span class="pl-c1">3</span>]];<span class="pl-smi">b</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Curve</span>.<span class="pl-smi">Utils</span>.<span class="pl-en">interpolate</span>(<span class="pl-smi">e</span>.<span class="pl-c1">x</span>,<span class="pl-smi">f</span>.<span class="pl-c1">x</span>,<span class="pl-smi">g</span>.<span class="pl-c1">x</span>,<span class="pl-smi">c</span>.<span class="pl-c1">x</span>,a);<span class="pl-smi">b</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Curve</span>.<span class="pl-smi">Utils</span>.<span class="pl-en">interpolate</span>(<span class="pl-smi">e</span>.<span class="pl-c1">y</span>,<span class="pl-smi">f</span>.<span class="pl-c1">y</span>,<span class="pl-smi">g</span>.<span class="pl-c1">y</span>,<span class="pl-smi">c</span>.<span class="pl-c1">y</span>,a);<span class="pl-smi">b</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Curve</span>.<span class="pl-smi">Utils</span>.<span class="pl-en">interpolate</span>(<span class="pl-smi">e</span>.<span class="pl-c1">z</span>,<span class="pl-smi">f</span>.<span class="pl-c1">z</span>,<span class="pl-smi">g</span>.<span class="pl-c1">z</span>,<span class="pl-smi">c</span>.<span class="pl-c1">z</span>,a);<span class="pl-k">return</span> b});</td>
      </tr>
      <tr>
        <td id="L558" class="blob-num js-line-number" data-line-number="558"></td>
        <td id="LC558" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ClosedSplineCurve3</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Curve</span>.<span class="pl-en">create</span>(<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">points</span><span class="pl-k">=</span>a<span class="pl-k">==</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">?</span>[]<span class="pl-k">:</span>a},<span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,c<span class="pl-k">=</span>[],d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">points</span>,e;e<span class="pl-k">=</span>(<span class="pl-smi">d</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">0</span>)<span class="pl-k">*</span>a;a<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(e);e<span class="pl-k">=</span>e<span class="pl-k">-</span>a;a<span class="pl-k">=</span>a<span class="pl-k">+</span>(a<span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">?</span><span class="pl-c1">0</span><span class="pl-k">:</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(a)<span class="pl-k">/</span><span class="pl-smi">d</span>.<span class="pl-c1">length</span>)<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">*</span><span class="pl-smi">d</span>.<span class="pl-c1">length</span>);c[<span class="pl-c1">0</span>]<span class="pl-k">=</span>(a<span class="pl-k">-</span><span class="pl-c1">1</span>)<span class="pl-k">%</span><span class="pl-smi">d</span>.<span class="pl-c1">length</span>;c[<span class="pl-c1">1</span>]<span class="pl-k">=</span>a<span class="pl-k">%</span><span class="pl-smi">d</span>.<span class="pl-c1">length</span>;c[<span class="pl-c1">2</span>]<span class="pl-k">=</span>(a<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">%</span><span class="pl-smi">d</span>.<span class="pl-c1">length</span>;c[<span class="pl-c1">3</span>]<span class="pl-k">=</span>(a<span class="pl-k">+</span><span class="pl-c1">2</span>)<span class="pl-k">%</span><span class="pl-smi">d</span>.<span class="pl-c1">length</span>;<span class="pl-smi">b</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Curve</span>.<span class="pl-smi">Utils</span>.<span class="pl-en">interpolate</span>(d[c[<span class="pl-c1">0</span>]].<span class="pl-c1">x</span>,d[c[<span class="pl-c1">1</span>]].<span class="pl-c1">x</span>,d[c[<span class="pl-c1">2</span>]].<span class="pl-c1">x</span>,d[c[<span class="pl-c1">3</span>]].<span class="pl-c1">x</span>,e);<span class="pl-smi">b</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Curve</span>.<span class="pl-smi">Utils</span>.<span class="pl-en">interpolate</span>(d[c[<span class="pl-c1">0</span>]].<span class="pl-c1">y</span>,d[c[<span class="pl-c1">1</span>]].<span class="pl-c1">y</span>,d[c[<span class="pl-c1">2</span>]].<span class="pl-c1">y</span>,d[c[<span class="pl-c1">3</span>]].<span class="pl-c1">y</span>,e);<span class="pl-smi">b</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Curve</span>.<span class="pl-smi">Utils</span>.<span class="pl-en">interpolate</span>(d[c[<span class="pl-c1">0</span>]].<span class="pl-c1">z</span>,</td>
      </tr>
      <tr>
        <td id="L559" class="blob-num js-line-number" data-line-number="559"></td>
        <td id="LC559" class="blob-code blob-code-inner js-file-line">d[c[<span class="pl-c1">1</span>]].<span class="pl-c1">z</span>,d[c[<span class="pl-c1">2</span>]].<span class="pl-c1">z</span>,d[c[<span class="pl-c1">3</span>]].<span class="pl-c1">z</span>,e);<span class="pl-k">return</span> b});<span class="pl-c1">THREE</span>.<span class="pl-en">CurvePath</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">curves</span><span class="pl-k">=</span>[];<span class="pl-c1">this</span>.<span class="pl-smi">bends</span><span class="pl-k">=</span>[];<span class="pl-c1">this</span>.<span class="pl-smi">autoClose</span><span class="pl-k">=</span><span class="pl-c1">false</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">CurvePath</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Curve</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">CurvePath</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">add</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">curves</span>.<span class="pl-c1">push</span>(a)};<span class="pl-c1">THREE</span>.<span class="pl-smi">CurvePath</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">checkConnection</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">THREE</span>.<span class="pl-smi">CurvePath</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">closePath</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">curves</span>[<span class="pl-c1">0</span>].<span class="pl-en">getPoint</span>(<span class="pl-c1">0</span>),b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">curves</span>[<span class="pl-c1">this</span>.<span class="pl-smi">curves</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>].<span class="pl-en">getPoint</span>(<span class="pl-c1">1</span>);<span class="pl-smi">a</span>.<span class="pl-en">equals</span>(b)<span class="pl-k">||</span><span class="pl-c1">this</span>.<span class="pl-smi">curves</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.LineCurve</span>(b,a))};</td>
      </tr>
      <tr>
        <td id="L560" class="blob-num js-line-number" data-line-number="560"></td>
        <td id="LC560" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">CurvePath</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getPoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span>a<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-en">getLength</span>(),c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">getCurveLengths</span>(),a<span class="pl-k">=</span><span class="pl-c1">0</span>;a<span class="pl-k">&lt;</span><span class="pl-smi">c</span>.<span class="pl-c1">length</span>;){<span class="pl-k">if</span>(c[a]<span class="pl-k">&gt;=</span>b){b<span class="pl-k">=</span>c[a]<span class="pl-k">-</span>b;a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">curves</span>[a];b<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">-</span>b<span class="pl-k">/</span><span class="pl-smi">a</span>.<span class="pl-en">getLength</span>();<span class="pl-k">return</span> <span class="pl-smi">a</span>.<span class="pl-en">getPointAt</span>(b)}a<span class="pl-k">++</span>}<span class="pl-k">return</span> <span class="pl-c1">null</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">CurvePath</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getLength</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">getCurveLengths</span>();<span class="pl-k">return</span> a[<span class="pl-smi">a</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>]};</td>
      </tr>
      <tr>
        <td id="L561" class="blob-num js-line-number" data-line-number="561"></td>
        <td id="LC561" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">CurvePath</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getCurveLengths</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">cacheLengths</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">cacheLengths</span>.<span class="pl-c1">length</span><span class="pl-k">==</span><span class="pl-c1">this</span>.<span class="pl-smi">curves</span>.<span class="pl-c1">length</span>)<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">cacheLengths</span>;<span class="pl-k">var</span> a<span class="pl-k">=</span>[],b<span class="pl-k">=</span><span class="pl-c1">0</span>,c,d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">curves</span>.<span class="pl-c1">length</span>;<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span>d;c<span class="pl-k">++</span>){b<span class="pl-k">=</span>b<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">curves</span>[c].<span class="pl-en">getLength</span>();<span class="pl-smi">a</span>.<span class="pl-c1">push</span>(b)}<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">cacheLengths</span><span class="pl-k">=</span>a};</td>
      </tr>
      <tr>
        <td id="L562" class="blob-num js-line-number" data-line-number="562"></td>
        <td id="LC562" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">CurvePath</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getBoundingBox</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">getPoints</span>(),b,c,d,e,f,g;b<span class="pl-k">=</span>c<span class="pl-k">=</span><span class="pl-c1">Number</span>.<span class="pl-c1">NEGATIVE_INFINITY</span>;e<span class="pl-k">=</span>f<span class="pl-k">=</span><span class="pl-c1">Number</span>.<span class="pl-c1">POSITIVE_INFINITY</span>;<span class="pl-k">var</span> h,i,j,l,m<span class="pl-k">=</span>a[<span class="pl-c1">0</span>]<span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Vector3</span>;l<span class="pl-k">=</span>m<span class="pl-k">?</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span><span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>;i<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(j<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>;i<span class="pl-k">&lt;</span>j;i<span class="pl-k">++</span>){h<span class="pl-k">=</span>a[i];<span class="pl-k">if</span>(<span class="pl-smi">h</span>.<span class="pl-c1">x</span><span class="pl-k">&gt;</span>b)b<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-c1">x</span>;<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-smi">h</span>.<span class="pl-c1">x</span><span class="pl-k">&lt;</span>e)e<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-c1">x</span>;<span class="pl-k">if</span>(<span class="pl-smi">h</span>.<span class="pl-c1">y</span><span class="pl-k">&gt;</span>c)c<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-c1">y</span>;<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-smi">h</span>.<span class="pl-c1">y</span><span class="pl-k">&lt;</span>f)f<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-c1">y</span>;<span class="pl-k">if</span>(m)<span class="pl-k">if</span>(<span class="pl-smi">h</span>.<span class="pl-c1">z</span><span class="pl-k">&gt;</span>d)d<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-c1">z</span>;<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-smi">h</span>.<span class="pl-c1">z</span><span class="pl-k">&lt;</span>g)g<span class="pl-k">=</span><span class="pl-smi">h</span>.<span class="pl-c1">z</span>;<span class="pl-smi">l</span>.<span class="pl-en">addSelf</span>(h)}a<span class="pl-k">=</span>{minX<span class="pl-k">:</span>e,minY<span class="pl-k">:</span>f,maxX<span class="pl-k">:</span>b,maxY<span class="pl-k">:</span>c,centroid<span class="pl-k">:</span><span class="pl-smi">l</span>.<span class="pl-en">divideScalar</span>(j)};<span class="pl-k">if</span>(m){<span class="pl-smi">a</span>.<span class="pl-smi">maxZ</span><span class="pl-k">=</span>d;<span class="pl-smi">a</span>.<span class="pl-smi">minZ</span><span class="pl-k">=</span>g}<span class="pl-k">return</span> a};</td>
      </tr>
      <tr>
        <td id="L563" class="blob-num js-line-number" data-line-number="563"></td>
        <td id="LC563" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">CurvePath</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">createPointsGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">getPoints</span>(a,<span class="pl-c1">true</span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">createGeometry</span>(a)};<span class="pl-c1">THREE</span>.<span class="pl-smi">CurvePath</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">createSpacedPointsGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">getSpacedPoints</span>(a,<span class="pl-c1">true</span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">createGeometry</span>(a)};<span class="pl-c1">THREE</span>.<span class="pl-smi">CurvePath</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">createGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Geometry</span>,c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>;c<span class="pl-k">++</span>)<span class="pl-smi">b</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(a[c].<span class="pl-c1">x</span>,a[c].<span class="pl-c1">y</span>,a[c].<span class="pl-c1">z</span><span class="pl-k">||</span><span class="pl-c1">0</span>));<span class="pl-k">return</span> b};<span class="pl-c1">THREE</span>.<span class="pl-smi">CurvePath</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">addWrapPath</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">bends</span>.<span class="pl-c1">push</span>(a)};</td>
      </tr>
      <tr>
        <td id="L564" class="blob-num js-line-number" data-line-number="564"></td>
        <td id="LC564" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">CurvePath</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getTransformedPoints</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">getPoints</span>(a),d,e;<span class="pl-k">if</span>(<span class="pl-k">!</span>b)b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">bends</span>;d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(e<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span>;d<span class="pl-k">&lt;</span>e;d<span class="pl-k">++</span>)c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">getWrapPoints</span>(c,b[d]);<span class="pl-k">return</span> c};<span class="pl-c1">THREE</span>.<span class="pl-smi">CurvePath</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getTransformedSpacedPoints</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">getSpacedPoints</span>(a),d,e;<span class="pl-k">if</span>(<span class="pl-k">!</span>b)b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">bends</span>;d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(e<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span>;d<span class="pl-k">&lt;</span>e;d<span class="pl-k">++</span>)c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">getWrapPoints</span>(c,b[d]);<span class="pl-k">return</span> c};</td>
      </tr>
      <tr>
        <td id="L565" class="blob-num js-line-number" data-line-number="565"></td>
        <td id="LC565" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">CurvePath</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getWrapPoints</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">getBoundingBox</span>(),d,e,f,g,h,i;d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(e<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>;d<span class="pl-k">&lt;</span>e;d<span class="pl-k">++</span>){f<span class="pl-k">=</span>a[d];g<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">x</span>;h<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">y</span>;i<span class="pl-k">=</span>g<span class="pl-k">/</span><span class="pl-smi">c</span>.<span class="pl-smi">maxX</span>;i<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">getUtoTmapping</span>(i,g);g<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">getPoint</span>(i);h<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">getNormalVector</span>(i).<span class="pl-en">multiplyScalar</span>(h);<span class="pl-smi">f</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">h</span>.<span class="pl-c1">x</span>;<span class="pl-smi">f</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-smi">h</span>.<span class="pl-c1">y</span>}<span class="pl-k">return</span> a};<span class="pl-c1">THREE</span>.<span class="pl-en">Gyroscope</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>)};<span class="pl-c1">THREE</span>.<span class="pl-smi">Gyroscope</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L566" class="blob-num js-line-number" data-line-number="566"></td>
        <td id="LC566" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Gyroscope</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">updateMatrixWorld</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">matrixAutoUpdate</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-en">updateMatrix</span>();<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">matrixWorldNeedsUpdate</span><span class="pl-k">||</span>a){<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-c1">parent</span>){<span class="pl-c1">this</span>.<span class="pl-smi">matrixWorld</span>.<span class="pl-en">multiply</span>(<span class="pl-c1">this</span>.<span class="pl-c1">parent</span>.<span class="pl-smi">matrixWorld</span>,<span class="pl-c1">this</span>.<span class="pl-smi">matrix</span>);<span class="pl-c1">this</span>.<span class="pl-smi">matrixWorld</span>.<span class="pl-en">decompose</span>(<span class="pl-c1">this</span>.<span class="pl-smi">translationWorld</span>,<span class="pl-c1">this</span>.<span class="pl-smi">rotationWorld</span>,<span class="pl-c1">this</span>.<span class="pl-smi">scaleWorld</span>);<span class="pl-c1">this</span>.<span class="pl-smi">matrix</span>.<span class="pl-en">decompose</span>(<span class="pl-c1">this</span>.<span class="pl-smi">translationObject</span>,<span class="pl-c1">this</span>.<span class="pl-smi">rotationObject</span>,<span class="pl-c1">this</span>.<span class="pl-smi">scaleObject</span>);<span class="pl-c1">this</span>.<span class="pl-smi">matrixWorld</span>.<span class="pl-en">compose</span>(<span class="pl-c1">this</span>.<span class="pl-smi">translationWorld</span>,<span class="pl-c1">this</span>.<span class="pl-smi">rotationObject</span>,<span class="pl-c1">this</span>.<span class="pl-smi">scaleWorld</span>)}<span class="pl-k">else</span> <span class="pl-c1">this</span>.<span class="pl-smi">matrixWorld</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">matrix</span>);</td>
      </tr>
      <tr>
        <td id="L567" class="blob-num js-line-number" data-line-number="567"></td>
        <td id="LC567" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">matrixWorldNeedsUpdate</span><span class="pl-k">=</span><span class="pl-c1">false</span>;a<span class="pl-k">=</span><span class="pl-c1">true</span>}<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>,c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">children</span>.<span class="pl-c1">length</span>;b<span class="pl-k">&lt;</span>c;b<span class="pl-k">++</span>)<span class="pl-c1">this</span>.<span class="pl-smi">children</span>[b].<span class="pl-en">updateMatrixWorld</span>(a)};<span class="pl-c1">THREE</span>.<span class="pl-smi">Gyroscope</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">translationWorld</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">Gyroscope</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">translationObject</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">Gyroscope</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">rotationWorld</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Quaternion</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">Gyroscope</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">rotationObject</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Quaternion</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">Gyroscope</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">scaleWorld</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">Gyroscope</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">scaleObject</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;</td>
      </tr>
      <tr>
        <td id="L568" class="blob-num js-line-number" data-line-number="568"></td>
        <td id="LC568" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">Path</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">CurvePath</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-smi">actions</span><span class="pl-k">=</span>[];a<span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-en">fromPoints</span>(a)};<span class="pl-c1">THREE</span>.<span class="pl-smi">Path</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">CurvePath</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">PathActions</span><span class="pl-k">=</span>{<span class="pl-c1">MOVE_TO</span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>moveTo<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">LINE_TO</span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>lineTo<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">QUADRATIC_CURVE_TO</span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>quadraticCurveTo<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">BEZIER_CURVE_TO</span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>bezierCurveTo<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">CSPLINE_THRU</span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>splineThru<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">ARC</span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>arc<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">ELLIPSE</span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>ellipse<span class="pl-pds">&quot;</span></span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">Path</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">fromPoints</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-c1">moveTo</span>(a[<span class="pl-c1">0</span>].<span class="pl-c1">x</span>,a[<span class="pl-c1">0</span>].<span class="pl-c1">y</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">1</span>,c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>;b<span class="pl-k">&lt;</span>c;b<span class="pl-k">++</span>)<span class="pl-c1">this</span>.<span class="pl-en">lineTo</span>(a[b].<span class="pl-c1">x</span>,a[b].<span class="pl-c1">y</span>)};</td>
      </tr>
      <tr>
        <td id="L569" class="blob-num js-line-number" data-line-number="569"></td>
        <td id="LC569" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Path</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">moveTo</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">Array</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">slice</span>.<span class="pl-c1">call</span>(<span class="pl-c1">arguments</span>);<span class="pl-c1">this</span>.<span class="pl-smi">actions</span>.<span class="pl-c1">push</span>({action<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">PathActions</span>.<span class="pl-c1">MOVE_TO</span>,args<span class="pl-k">:</span>c})};<span class="pl-c1">THREE</span>.<span class="pl-smi">Path</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">lineTo</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">Array</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">slice</span>.<span class="pl-c1">call</span>(<span class="pl-c1">arguments</span>),d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">actions</span>[<span class="pl-c1">this</span>.<span class="pl-smi">actions</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>].<span class="pl-smi">args</span>,d<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.LineCurve</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(d[<span class="pl-smi">d</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">2</span>],d[<span class="pl-smi">d</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>]),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(a,b));<span class="pl-c1">this</span>.<span class="pl-smi">curves</span>.<span class="pl-c1">push</span>(d);<span class="pl-c1">this</span>.<span class="pl-smi">actions</span>.<span class="pl-c1">push</span>({action<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">PathActions</span>.<span class="pl-c1">LINE_TO</span>,args<span class="pl-k">:</span>c})};</td>
      </tr>
      <tr>
        <td id="L570" class="blob-num js-line-number" data-line-number="570"></td>
        <td id="LC570" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Path</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">quadraticCurveTo</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">Array</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">slice</span>.<span class="pl-c1">call</span>(<span class="pl-c1">arguments</span>),f<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">actions</span>[<span class="pl-c1">this</span>.<span class="pl-smi">actions</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>].<span class="pl-smi">args</span>,f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.QuadraticBezierCurve</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(f[<span class="pl-smi">f</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">2</span>],f[<span class="pl-smi">f</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>]),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(a,b),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(c,d));<span class="pl-c1">this</span>.<span class="pl-smi">curves</span>.<span class="pl-c1">push</span>(f);<span class="pl-c1">this</span>.<span class="pl-smi">actions</span>.<span class="pl-c1">push</span>({action<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">PathActions</span>.<span class="pl-c1">QUADRATIC_CURVE_TO</span>,args<span class="pl-k">:</span>e})};</td>
      </tr>
      <tr>
        <td id="L571" class="blob-num js-line-number" data-line-number="571"></td>
        <td id="LC571" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Path</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">bezierCurveTo</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-c1">Array</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">slice</span>.<span class="pl-c1">call</span>(<span class="pl-c1">arguments</span>),h<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">actions</span>[<span class="pl-c1">this</span>.<span class="pl-smi">actions</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>].<span class="pl-smi">args</span>,h<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.CubicBezierCurve</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(h[<span class="pl-smi">h</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">2</span>],h[<span class="pl-smi">h</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>]),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(a,b),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(c,d),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(e,f));<span class="pl-c1">this</span>.<span class="pl-smi">curves</span>.<span class="pl-c1">push</span>(h);<span class="pl-c1">this</span>.<span class="pl-smi">actions</span>.<span class="pl-c1">push</span>({action<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">PathActions</span>.<span class="pl-c1">BEZIER_CURVE_TO</span>,args<span class="pl-k">:</span>g})};</td>
      </tr>
      <tr>
        <td id="L572" class="blob-num js-line-number" data-line-number="572"></td>
        <td id="LC572" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Path</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">splineThru</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">Array</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">slice</span>.<span class="pl-c1">call</span>(<span class="pl-c1">arguments</span>),c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">actions</span>[<span class="pl-c1">this</span>.<span class="pl-smi">actions</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>].<span class="pl-smi">args</span>,c<span class="pl-k">=</span>[<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(c[<span class="pl-smi">c</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">2</span>],c[<span class="pl-smi">c</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>])];<span class="pl-c1">Array</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">push</span>.<span class="pl-c1">apply</span>(c,a);c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.SplineCurve</span>(c);<span class="pl-c1">this</span>.<span class="pl-smi">curves</span>.<span class="pl-c1">push</span>(c);<span class="pl-c1">this</span>.<span class="pl-smi">actions</span>.<span class="pl-c1">push</span>({action<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">PathActions</span>.<span class="pl-c1">CSPLINE_THRU</span>,args<span class="pl-k">:</span>b})};<span class="pl-c1">THREE</span>.<span class="pl-smi">Path</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">arc</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">actions</span>[<span class="pl-c1">this</span>.<span class="pl-smi">actions</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>].<span class="pl-smi">args</span>;<span class="pl-c1">this</span>.<span class="pl-en">absarc</span>(a<span class="pl-k">+</span>g[<span class="pl-smi">g</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">2</span>],b<span class="pl-k">+</span>g[<span class="pl-smi">g</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>],c,d,e,f)};</td>
      </tr>
      <tr>
        <td id="L573" class="blob-num js-line-number" data-line-number="573"></td>
        <td id="LC573" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Path</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">absarc</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>){<span class="pl-c1">this</span>.<span class="pl-en">absellipse</span>(a,b,c,c,d,e,f)};<span class="pl-c1">THREE</span>.<span class="pl-smi">Path</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">ellipse</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>,<span class="pl-smi">g</span>){<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">actions</span>[<span class="pl-c1">this</span>.<span class="pl-smi">actions</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>].<span class="pl-smi">args</span>;<span class="pl-c1">this</span>.<span class="pl-en">absellipse</span>(a<span class="pl-k">+</span>h[<span class="pl-smi">h</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">2</span>],b<span class="pl-k">+</span>h[<span class="pl-smi">h</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>],c,d,e,f,g)};<span class="pl-c1">THREE</span>.<span class="pl-smi">Path</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">absellipse</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>,<span class="pl-smi">g</span>){<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-c1">Array</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">slice</span>.<span class="pl-c1">call</span>(<span class="pl-c1">arguments</span>),i<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.EllipseCurve</span>(a,b,c,d,e,f,g);<span class="pl-c1">this</span>.<span class="pl-smi">curves</span>.<span class="pl-c1">push</span>(i);i<span class="pl-k">=</span><span class="pl-smi">i</span>.<span class="pl-en">getPoint</span>(g<span class="pl-k">?</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">0</span>);<span class="pl-smi">h</span>.<span class="pl-c1">push</span>(<span class="pl-smi">i</span>.<span class="pl-c1">x</span>);<span class="pl-smi">h</span>.<span class="pl-c1">push</span>(<span class="pl-smi">i</span>.<span class="pl-c1">y</span>);<span class="pl-c1">this</span>.<span class="pl-smi">actions</span>.<span class="pl-c1">push</span>({action<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">PathActions</span>.<span class="pl-c1">ELLIPSE</span>,args<span class="pl-k">:</span>h})};</td>
      </tr>
      <tr>
        <td id="L574" class="blob-num js-line-number" data-line-number="574"></td>
        <td id="LC574" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Path</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getSpacedPoints</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a<span class="pl-k">||</span>(a<span class="pl-k">=</span><span class="pl-c1">40</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span>[],c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span>a;c<span class="pl-k">++</span>)<span class="pl-smi">b</span>.<span class="pl-c1">push</span>(<span class="pl-c1">this</span>.<span class="pl-en">getPoint</span>(c<span class="pl-k">/</span>a));<span class="pl-k">return</span> b};</td>
      </tr>
      <tr>
        <td id="L575" class="blob-num js-line-number" data-line-number="575"></td>
        <td id="LC575" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Path</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getPoints</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">useSpacedPoints</span>){<span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>tata<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">getSpacedPoints</span>(a,b)}<span class="pl-k">var</span> a<span class="pl-k">=</span>a<span class="pl-k">||</span><span class="pl-c1">12</span>,c<span class="pl-k">=</span>[],d,e,f,g,h,i,j,l,m,n,p,o,q;d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">actions</span>.<span class="pl-c1">length</span>;d<span class="pl-k">&lt;</span>e;d<span class="pl-k">++</span>){f<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">actions</span>[d];g<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">action</span>;f<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">args</span>;<span class="pl-k">switch</span>(g){<span class="pl-k">case</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">PathActions</span>.<span class="pl-c1">MOVE_TO</span>:<span class="pl-smi">c</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(f[<span class="pl-c1">0</span>],f[<span class="pl-c1">1</span>]));<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">PathActions</span>.<span class="pl-c1">LINE_TO</span>:<span class="pl-smi">c</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(f[<span class="pl-c1">0</span>],f[<span class="pl-c1">1</span>]));<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">PathActions</span>.<span class="pl-c1">QUADRATIC_CURVE_TO</span>:h<span class="pl-k">=</span>f[<span class="pl-c1">2</span>];i<span class="pl-k">=</span>f[<span class="pl-c1">3</span>];m<span class="pl-k">=</span>f[<span class="pl-c1">0</span>];n<span class="pl-k">=</span>f[<span class="pl-c1">1</span>];<span class="pl-k">if</span>(<span class="pl-smi">c</span>.<span class="pl-c1">length</span><span class="pl-k">&gt;</span><span class="pl-c1">0</span>){g<span class="pl-k">=</span>c[<span class="pl-smi">c</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>];</td>
      </tr>
      <tr>
        <td id="L576" class="blob-num js-line-number" data-line-number="576"></td>
        <td id="LC576" class="blob-code blob-code-inner js-file-line">p<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-c1">x</span>;o<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-c1">y</span>}<span class="pl-k">else</span>{g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">actions</span>[d<span class="pl-k">-</span><span class="pl-c1">1</span>].<span class="pl-smi">args</span>;p<span class="pl-k">=</span>g[<span class="pl-smi">g</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">2</span>];o<span class="pl-k">=</span>g[<span class="pl-smi">g</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>]}<span class="pl-k">for</span>(f<span class="pl-k">=</span><span class="pl-c1">1</span>;f<span class="pl-k">&lt;=</span>a;f<span class="pl-k">++</span>){q<span class="pl-k">=</span>f<span class="pl-k">/</span>a;g<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Shape</span>.<span class="pl-smi">Utils</span>.<span class="pl-en">b2</span>(q,p,m,h);q<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Shape</span>.<span class="pl-smi">Utils</span>.<span class="pl-en">b2</span>(q,o,n,i);<span class="pl-smi">c</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(g,q))}<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">PathActions</span>.<span class="pl-c1">BEZIER_CURVE_TO</span>:h<span class="pl-k">=</span>f[<span class="pl-c1">4</span>];i<span class="pl-k">=</span>f[<span class="pl-c1">5</span>];m<span class="pl-k">=</span>f[<span class="pl-c1">0</span>];n<span class="pl-k">=</span>f[<span class="pl-c1">1</span>];j<span class="pl-k">=</span>f[<span class="pl-c1">2</span>];l<span class="pl-k">=</span>f[<span class="pl-c1">3</span>];<span class="pl-k">if</span>(<span class="pl-smi">c</span>.<span class="pl-c1">length</span><span class="pl-k">&gt;</span><span class="pl-c1">0</span>){g<span class="pl-k">=</span>c[<span class="pl-smi">c</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>];p<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-c1">x</span>;o<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-c1">y</span>}<span class="pl-k">else</span>{g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">actions</span>[d<span class="pl-k">-</span><span class="pl-c1">1</span>].<span class="pl-smi">args</span>;p<span class="pl-k">=</span>g[<span class="pl-smi">g</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">2</span>];o<span class="pl-k">=</span>g[<span class="pl-smi">g</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>]}<span class="pl-k">for</span>(f<span class="pl-k">=</span><span class="pl-c1">1</span>;f<span class="pl-k">&lt;=</span>a;f<span class="pl-k">++</span>){q<span class="pl-k">=</span>f<span class="pl-k">/</span>a;g<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Shape</span>.<span class="pl-smi">Utils</span>.<span class="pl-en">b3</span>(q,p,m,j,h);q<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Shape</span>.<span class="pl-smi">Utils</span>.<span class="pl-en">b3</span>(q,o,n,l,i);<span class="pl-smi">c</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(g,</td>
      </tr>
      <tr>
        <td id="L577" class="blob-num js-line-number" data-line-number="577"></td>
        <td id="LC577" class="blob-code blob-code-inner js-file-line">q))}<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">PathActions</span>.<span class="pl-c1">CSPLINE_THRU</span>:g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">actions</span>[d<span class="pl-k">-</span><span class="pl-c1">1</span>].<span class="pl-smi">args</span>;q<span class="pl-k">=</span>[<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(g[<span class="pl-smi">g</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">2</span>],g[<span class="pl-smi">g</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>])];g<span class="pl-k">=</span>a<span class="pl-k">*</span>f[<span class="pl-c1">0</span>].<span class="pl-c1">length</span>;q<span class="pl-k">=</span><span class="pl-smi">q</span>.<span class="pl-c1">concat</span>(f[<span class="pl-c1">0</span>]);q<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.SplineCurve</span>(q);<span class="pl-k">for</span>(f<span class="pl-k">=</span><span class="pl-c1">1</span>;f<span class="pl-k">&lt;=</span>g;f<span class="pl-k">++</span>)<span class="pl-smi">c</span>.<span class="pl-c1">push</span>(<span class="pl-smi">q</span>.<span class="pl-en">getPointAt</span>(f<span class="pl-k">/</span>g));<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">PathActions</span>.<span class="pl-c1">ARC</span>:h<span class="pl-k">=</span>f[<span class="pl-c1">0</span>];i<span class="pl-k">=</span>f[<span class="pl-c1">1</span>];n<span class="pl-k">=</span>f[<span class="pl-c1">2</span>];j<span class="pl-k">=</span>f[<span class="pl-c1">3</span>];g<span class="pl-k">=</span>f[<span class="pl-c1">4</span>];m<span class="pl-k">=</span><span class="pl-k">!!</span>f[<span class="pl-c1">5</span>];p<span class="pl-k">=</span>g<span class="pl-k">-</span>j;o<span class="pl-k">=</span>a<span class="pl-k">*</span><span class="pl-c1">2</span>;<span class="pl-k">for</span>(f<span class="pl-k">=</span><span class="pl-c1">1</span>;f<span class="pl-k">&lt;=</span>o;f<span class="pl-k">++</span>){q<span class="pl-k">=</span>f<span class="pl-k">/</span>o;m<span class="pl-k">||</span>(q<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">-</span>q);q<span class="pl-k">=</span>j<span class="pl-k">+</span>q<span class="pl-k">*</span>p;g<span class="pl-k">=</span>h<span class="pl-k">+</span>n<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(q);q<span class="pl-k">=</span>i<span class="pl-k">+</span>n<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(q);<span class="pl-smi">c</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(g,q))}<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">PathActions</span>.<span class="pl-c1">ELLIPSE</span>:h<span class="pl-k">=</span>f[<span class="pl-c1">0</span>];i<span class="pl-k">=</span>f[<span class="pl-c1">1</span>];n<span class="pl-k">=</span>f[<span class="pl-c1">2</span>];l<span class="pl-k">=</span>f[<span class="pl-c1">3</span>];j<span class="pl-k">=</span>f[<span class="pl-c1">4</span>];g<span class="pl-k">=</span>f[<span class="pl-c1">5</span>];</td>
      </tr>
      <tr>
        <td id="L578" class="blob-num js-line-number" data-line-number="578"></td>
        <td id="LC578" class="blob-code blob-code-inner js-file-line">m<span class="pl-k">=</span><span class="pl-k">!!</span>f[<span class="pl-c1">6</span>];p<span class="pl-k">=</span>g<span class="pl-k">-</span>j;o<span class="pl-k">=</span>a<span class="pl-k">*</span><span class="pl-c1">2</span>;<span class="pl-k">for</span>(f<span class="pl-k">=</span><span class="pl-c1">1</span>;f<span class="pl-k">&lt;=</span>o;f<span class="pl-k">++</span>){q<span class="pl-k">=</span>f<span class="pl-k">/</span>o;m<span class="pl-k">||</span>(q<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">-</span>q);q<span class="pl-k">=</span>j<span class="pl-k">+</span>q<span class="pl-k">*</span>p;g<span class="pl-k">=</span>h<span class="pl-k">+</span>n<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(q);q<span class="pl-k">=</span>i<span class="pl-k">+</span>l<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(q);<span class="pl-smi">c</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(g,q))}}}d<span class="pl-k">=</span>c[<span class="pl-smi">c</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>];<span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(<span class="pl-smi">d</span>.<span class="pl-c1">x</span><span class="pl-k">-</span>c[<span class="pl-c1">0</span>].<span class="pl-c1">x</span>)<span class="pl-k">&lt;</span><span class="pl-c1">1E-10</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(<span class="pl-smi">d</span>.<span class="pl-c1">y</span><span class="pl-k">-</span>c[<span class="pl-c1">0</span>].<span class="pl-c1">y</span>)<span class="pl-k">&lt;</span><span class="pl-c1">1E-10</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">c</span>.<span class="pl-c1">splice</span>(<span class="pl-smi">c</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>);b<span class="pl-k">&amp;&amp;</span><span class="pl-smi">c</span>.<span class="pl-c1">push</span>(c[<span class="pl-c1">0</span>]);<span class="pl-k">return</span> c};</td>
      </tr>
      <tr>
        <td id="L579" class="blob-num js-line-number" data-line-number="579"></td>
        <td id="LC579" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Path</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">toShapes</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a,b,c,d,e<span class="pl-k">=</span>[],f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Path</span>;a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">actions</span>.<span class="pl-c1">length</span>;a<span class="pl-k">&lt;</span>b;a<span class="pl-k">++</span>){c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">actions</span>[a];d<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">args</span>;c<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">action</span>;<span class="pl-k">if</span>(c<span class="pl-k">==</span><span class="pl-c1">THREE</span>.<span class="pl-smi">PathActions</span>.<span class="pl-c1">MOVE_TO</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">f</span>.<span class="pl-smi">actions</span>.<span class="pl-c1">length</span><span class="pl-k">!=</span><span class="pl-c1">0</span>){<span class="pl-smi">e</span>.<span class="pl-c1">push</span>(f);f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Path</span>}f[c].<span class="pl-c1">apply</span>(f,d)}<span class="pl-smi">f</span>.<span class="pl-smi">actions</span>.<span class="pl-c1">length</span><span class="pl-k">!=</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">e</span>.<span class="pl-c1">push</span>(f);<span class="pl-k">if</span>(<span class="pl-smi">e</span>.<span class="pl-c1">length</span><span class="pl-k">==</span><span class="pl-c1">0</span>)<span class="pl-k">return</span>[];<span class="pl-k">var</span> g;d<span class="pl-k">=</span>[];a<span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Shape</span>.<span class="pl-smi">Utils</span>.<span class="pl-en">isClockWise</span>(e[<span class="pl-c1">0</span>].<span class="pl-en">getPoints</span>());<span class="pl-k">if</span>(<span class="pl-smi">e</span>.<span class="pl-c1">length</span><span class="pl-k">==</span><span class="pl-c1">1</span>){f<span class="pl-k">=</span>e[<span class="pl-c1">0</span>];g<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Shape</span>;<span class="pl-smi">g</span>.<span class="pl-smi">actions</span><span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">actions</span>;<span class="pl-smi">g</span>.<span class="pl-smi">curves</span><span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">curves</span>;<span class="pl-smi">d</span>.<span class="pl-c1">push</span>(g);<span class="pl-k">return</span> d}<span class="pl-k">if</span>(a){g<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Shape</span>;a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-c1">length</span>;a<span class="pl-k">&lt;</span></td>
      </tr>
      <tr>
        <td id="L580" class="blob-num js-line-number" data-line-number="580"></td>
        <td id="LC580" class="blob-code blob-code-inner js-file-line">b;a<span class="pl-k">++</span>){f<span class="pl-k">=</span>e[a];<span class="pl-k">if</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Shape</span>.<span class="pl-smi">Utils</span>.<span class="pl-en">isClockWise</span>(<span class="pl-smi">f</span>.<span class="pl-en">getPoints</span>())){<span class="pl-smi">g</span>.<span class="pl-smi">actions</span><span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">actions</span>;<span class="pl-smi">g</span>.<span class="pl-smi">curves</span><span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">curves</span>;<span class="pl-smi">d</span>.<span class="pl-c1">push</span>(g);g<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Shape</span>}<span class="pl-k">else</span> <span class="pl-smi">g</span>.<span class="pl-smi">holes</span>.<span class="pl-c1">push</span>(f)}}<span class="pl-k">else</span>{a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-c1">length</span>;a<span class="pl-k">&lt;</span>b;a<span class="pl-k">++</span>){f<span class="pl-k">=</span>e[a];<span class="pl-k">if</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Shape</span>.<span class="pl-smi">Utils</span>.<span class="pl-en">isClockWise</span>(<span class="pl-smi">f</span>.<span class="pl-en">getPoints</span>())){g<span class="pl-k">&amp;&amp;</span><span class="pl-smi">d</span>.<span class="pl-c1">push</span>(g);g<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Shape</span>;<span class="pl-smi">g</span>.<span class="pl-smi">actions</span><span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">actions</span>;<span class="pl-smi">g</span>.<span class="pl-smi">curves</span><span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-smi">curves</span>}<span class="pl-k">else</span> <span class="pl-smi">g</span>.<span class="pl-smi">holes</span>.<span class="pl-c1">push</span>(f)}<span class="pl-smi">d</span>.<span class="pl-c1">push</span>(g)}<span class="pl-k">return</span> d};<span class="pl-c1">THREE</span>.<span class="pl-en">Shape</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">THREE</span>.<span class="pl-smi">Path</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">this</span>,<span class="pl-c1">arguments</span>);<span class="pl-c1">this</span>.<span class="pl-smi">holes</span><span class="pl-k">=</span>[]};<span class="pl-c1">THREE</span>.<span class="pl-smi">Shape</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Path</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L581" class="blob-num js-line-number" data-line-number="581"></td>
        <td id="LC581" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Shape</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">extrude</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.ExtrudeGeometry</span>(<span class="pl-c1">this</span>,a)};<span class="pl-c1">THREE</span>.<span class="pl-smi">Shape</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">makeGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.ShapeGeometry</span>(<span class="pl-c1">this</span>,a)};<span class="pl-c1">THREE</span>.<span class="pl-smi">Shape</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getPointsHoles</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b,c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">holes</span>.<span class="pl-c1">length</span>,d<span class="pl-k">=</span>[];<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span>c;b<span class="pl-k">++</span>)d[b]<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">holes</span>[b].<span class="pl-en">getTransformedPoints</span>(a,<span class="pl-c1">this</span>.<span class="pl-smi">bends</span>);<span class="pl-k">return</span> d};<span class="pl-c1">THREE</span>.<span class="pl-smi">Shape</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getSpacedPointsHoles</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b,c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">holes</span>.<span class="pl-c1">length</span>,d<span class="pl-k">=</span>[];<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span>c;b<span class="pl-k">++</span>)d[b]<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">holes</span>[b].<span class="pl-en">getTransformedSpacedPoints</span>(a,<span class="pl-c1">this</span>.<span class="pl-smi">bends</span>);<span class="pl-k">return</span> d};</td>
      </tr>
      <tr>
        <td id="L582" class="blob-num js-line-number" data-line-number="582"></td>
        <td id="LC582" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Shape</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">extractAllPoints</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span>{shape<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-en">getTransformedPoints</span>(a),holes<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-en">getPointsHoles</span>(a)}};<span class="pl-c1">THREE</span>.<span class="pl-smi">Shape</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">extractPoints</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">useSpacedPoints</span><span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-en">extractAllSpacedPoints</span>(a)<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-en">extractAllPoints</span>(a)};<span class="pl-c1">THREE</span>.<span class="pl-smi">Shape</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">extractAllSpacedPoints</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span>{shape<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-en">getTransformedSpacedPoints</span>(a),holes<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-en">getSpacedPointsHoles</span>(a)}};</td>
      </tr>
      <tr>
        <td id="L583" class="blob-num js-line-number" data-line-number="583"></td>
        <td id="LC583" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Shape</span>.<span class="pl-smi">Utils</span><span class="pl-k">=</span>{<span class="pl-en">removeHoles</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">concat</span>(),d<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">concat</span>(),e,f,g,h,i,j,l,m,n,p,o<span class="pl-k">=</span>[];<span class="pl-k">for</span>(i<span class="pl-k">=</span><span class="pl-c1">0</span>;i<span class="pl-k">&lt;</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span>;i<span class="pl-k">++</span>){j<span class="pl-k">=</span>b[i];<span class="pl-c1">Array</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">push</span>.<span class="pl-c1">apply</span>(d,j);f<span class="pl-k">=</span><span class="pl-c1">Number</span>.<span class="pl-c1">POSITIVE_INFINITY</span>;<span class="pl-k">for</span>(e<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span><span class="pl-smi">j</span>.<span class="pl-c1">length</span>;e<span class="pl-k">++</span>){n<span class="pl-k">=</span>j[e];p<span class="pl-k">=</span>[];<span class="pl-k">for</span>(m<span class="pl-k">=</span><span class="pl-c1">0</span>;m<span class="pl-k">&lt;</span><span class="pl-smi">c</span>.<span class="pl-c1">length</span>;m<span class="pl-k">++</span>){l<span class="pl-k">=</span>c[m];l<span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-en">distanceToSquared</span>(l);<span class="pl-smi">p</span>.<span class="pl-c1">push</span>(l);<span class="pl-k">if</span>(l<span class="pl-k">&lt;</span>f){f<span class="pl-k">=</span>l;g<span class="pl-k">=</span>e;h<span class="pl-k">=</span>m}}}e<span class="pl-k">=</span>h<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">&gt;=</span><span class="pl-c1">0</span><span class="pl-k">?</span>h<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-smi">c</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>;f<span class="pl-k">=</span>g<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">&gt;=</span><span class="pl-c1">0</span><span class="pl-k">?</span>g<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-smi">j</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-k">var</span> q<span class="pl-k">=</span>[j[g],c[h],c[e]];m<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">FontUtils</span>.<span class="pl-smi">Triangulate</span>.<span class="pl-en">area</span>(q);<span class="pl-k">var</span> r<span class="pl-k">=</span>[j[g],j[f],c[h]];n<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">FontUtils</span>.<span class="pl-smi">Triangulate</span>.<span class="pl-en">area</span>(r);p<span class="pl-k">=</span>h;l<span class="pl-k">=</span>g;h<span class="pl-k">=</span>h<span class="pl-k">+</span><span class="pl-c1">1</span>;g<span class="pl-k">=</span>g<span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L584" class="blob-num js-line-number" data-line-number="584"></td>
        <td id="LC584" class="blob-code blob-code-inner js-file-line"><span class="pl-k">-</span><span class="pl-c1">1</span>;h<span class="pl-k">&lt;</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span>(h<span class="pl-k">=</span>h<span class="pl-k">+</span><span class="pl-smi">c</span>.<span class="pl-c1">length</span>);h<span class="pl-k">=</span>h<span class="pl-k">%</span><span class="pl-smi">c</span>.<span class="pl-c1">length</span>;g<span class="pl-k">&lt;</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span>(g<span class="pl-k">=</span>g<span class="pl-k">+</span><span class="pl-smi">j</span>.<span class="pl-c1">length</span>);g<span class="pl-k">=</span>g<span class="pl-k">%</span><span class="pl-smi">j</span>.<span class="pl-c1">length</span>;e<span class="pl-k">=</span>h<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">&gt;=</span><span class="pl-c1">0</span><span class="pl-k">?</span>h<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-smi">c</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>;f<span class="pl-k">=</span>g<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">&gt;=</span><span class="pl-c1">0</span><span class="pl-k">?</span>g<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-smi">j</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>;q<span class="pl-k">=</span>[j[g],c[h],c[e]];q<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">FontUtils</span>.<span class="pl-smi">Triangulate</span>.<span class="pl-en">area</span>(q);r<span class="pl-k">=</span>[j[g],j[f],c[h]];r<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">FontUtils</span>.<span class="pl-smi">Triangulate</span>.<span class="pl-en">area</span>(r);<span class="pl-k">if</span>(m<span class="pl-k">+</span>n<span class="pl-k">&gt;</span>q<span class="pl-k">+</span>r){h<span class="pl-k">=</span>p;g<span class="pl-k">=</span>l;h<span class="pl-k">&lt;</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span>(h<span class="pl-k">=</span>h<span class="pl-k">+</span><span class="pl-smi">c</span>.<span class="pl-c1">length</span>);h<span class="pl-k">=</span>h<span class="pl-k">%</span><span class="pl-smi">c</span>.<span class="pl-c1">length</span>;g<span class="pl-k">&lt;</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span>(g<span class="pl-k">=</span>g<span class="pl-k">+</span><span class="pl-smi">j</span>.<span class="pl-c1">length</span>);g<span class="pl-k">=</span>g<span class="pl-k">%</span><span class="pl-smi">j</span>.<span class="pl-c1">length</span>;e<span class="pl-k">=</span>h<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">&gt;=</span><span class="pl-c1">0</span><span class="pl-k">?</span>h<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-smi">c</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>;f<span class="pl-k">=</span>g<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">&gt;=</span><span class="pl-c1">0</span><span class="pl-k">?</span>g<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-smi">j</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>}m<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">slice</span>(<span class="pl-c1">0</span>,h);n<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">slice</span>(h);p<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-c1">slice</span>(g);l<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-c1">slice</span>(<span class="pl-c1">0</span>,g);f<span class="pl-k">=</span>[j[g],j[f],c[h]];<span class="pl-smi">o</span>.<span class="pl-c1">push</span>([j[g],c[h],c[e]]);<span class="pl-smi">o</span>.<span class="pl-c1">push</span>(f);c<span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-c1">concat</span>(p).<span class="pl-c1">concat</span>(l).<span class="pl-c1">concat</span>(n)}<span class="pl-k">return</span>{shape<span class="pl-k">:</span>c,</td>
      </tr>
      <tr>
        <td id="L585" class="blob-num js-line-number" data-line-number="585"></td>
        <td id="LC585" class="blob-code blob-code-inner js-file-line">isolatedPts<span class="pl-k">:</span>o,allpoints<span class="pl-k">:</span>d}},<span class="pl-en">triangulateShape</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Shape</span>.<span class="pl-smi">Utils</span>.<span class="pl-en">removeHoles</span>(a,b),d<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">allpoints</span>,e<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">isolatedPts</span>,c<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">FontUtils</span>.<span class="pl-en">Triangulate</span>(<span class="pl-smi">c</span>.<span class="pl-c1">shape</span>,<span class="pl-c1">false</span>),f,g,h,i,j<span class="pl-k">=</span>{};f<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(g<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-c1">length</span>;f<span class="pl-k">&lt;</span>g;f<span class="pl-k">++</span>){i<span class="pl-k">=</span>d[f].<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>:<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>d[f].<span class="pl-c1">y</span>;j[i]<span class="pl-k">!==</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span><span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>Duplicate point<span class="pl-pds">&quot;</span></span>,i);j[i]<span class="pl-k">=</span>f}f<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(g<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">length</span>;f<span class="pl-k">&lt;</span>g;f<span class="pl-k">++</span>){h<span class="pl-k">=</span>c[f];<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span><span class="pl-c1">3</span>;d<span class="pl-k">++</span>){i<span class="pl-k">=</span>h[d].<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>:<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>h[d].<span class="pl-c1">y</span>;i<span class="pl-k">=</span>j[i];i<span class="pl-k">!==</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span>(h[d]<span class="pl-k">=</span>i)}}f<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(g<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-c1">length</span>;f<span class="pl-k">&lt;</span>g;f<span class="pl-k">++</span>){h<span class="pl-k">=</span>e[f];<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span><span class="pl-c1">3</span>;d<span class="pl-k">++</span>){i<span class="pl-k">=</span>h[d].<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>:<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>h[d].<span class="pl-c1">y</span>;i<span class="pl-k">=</span>j[i];i<span class="pl-k">!==</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span>(h[d]<span class="pl-k">=</span>i)}}<span class="pl-k">return</span> <span class="pl-smi">c</span>.<span class="pl-c1">concat</span>(e)},</td>
      </tr>
      <tr>
        <td id="L586" class="blob-num js-line-number" data-line-number="586"></td>
        <td id="LC586" class="blob-code blob-code-inner js-file-line"><span class="pl-en">isClockWise</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">FontUtils</span>.<span class="pl-smi">Triangulate</span>.<span class="pl-en">area</span>(a)<span class="pl-k">&lt;</span><span class="pl-c1">0</span>},<span class="pl-en">b2p0</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">-</span>a;<span class="pl-k">return</span> c<span class="pl-k">*</span>c<span class="pl-k">*</span>b},<span class="pl-en">b2p1</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-c1">2</span><span class="pl-k">*</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>a)<span class="pl-k">*</span>a<span class="pl-k">*</span>b},<span class="pl-en">b2p2</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> a<span class="pl-k">*</span>a<span class="pl-k">*</span>b},<span class="pl-en">b2</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">b2p0</span>(a,b)<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-en">b2p1</span>(a,c)<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-en">b2p2</span>(a,d)},<span class="pl-en">b3p0</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">-</span>a;<span class="pl-k">return</span> c<span class="pl-k">*</span>c<span class="pl-k">*</span>c<span class="pl-k">*</span>b},<span class="pl-en">b3p1</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">-</span>a;<span class="pl-k">return</span> <span class="pl-c1">3</span><span class="pl-k">*</span>c<span class="pl-k">*</span>c<span class="pl-k">*</span>a<span class="pl-k">*</span>b},<span class="pl-en">b3p2</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-c1">3</span><span class="pl-k">*</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>a)<span class="pl-k">*</span>a<span class="pl-k">*</span>a<span class="pl-k">*</span>b},<span class="pl-en">b3p3</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> a<span class="pl-k">*</span>a<span class="pl-k">*</span>a<span class="pl-k">*</span>b},<span class="pl-en">b3</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">b3p0</span>(a,b)<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-en">b3p1</span>(a,c)<span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-en">b3p2</span>(a,d)<span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L587" class="blob-num js-line-number" data-line-number="587"></td>
        <td id="LC587" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-en">b3p3</span>(a,e)}};</td>
      </tr>
      <tr>
        <td id="L588" class="blob-num js-line-number" data-line-number="588"></td>
        <td id="LC588" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">AnimationHandler</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span>[],b<span class="pl-k">=</span>{},c<span class="pl-k">=</span>{<span class="pl-en">update</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>;c<span class="pl-k">++</span>)a[c].<span class="pl-en">update</span>(b)},<span class="pl-en">addToUpdate</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-smi">a</span>.<span class="pl-c1">indexOf</span>(b)<span class="pl-k">===</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">a</span>.<span class="pl-c1">push</span>(b)},<span class="pl-en">removeFromUpdate</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){b<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">indexOf</span>(b);b<span class="pl-k">!==</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">a</span>.<span class="pl-c1">splice</span>(b,<span class="pl-c1">1</span>)},<span class="pl-en">add</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){b[<span class="pl-smi">a</span>.<span class="pl-c1">name</span>]<span class="pl-k">!==</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span><span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.AnimationHandler.add: Warning! <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-smi">a</span>.<span class="pl-c1">name</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span> already exists in library. Overwriting.<span class="pl-pds">&quot;</span></span>);b[<span class="pl-smi">a</span>.<span class="pl-c1">name</span>]<span class="pl-k">=</span>a;<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">initialized</span><span class="pl-k">!==</span><span class="pl-c1">true</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-smi">hierarchy</span>.<span class="pl-c1">length</span>;c<span class="pl-k">++</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-smi">hierarchy</span>[c].<span class="pl-smi">keys</span>.<span class="pl-c1">length</span>;d<span class="pl-k">++</span>){<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">hierarchy</span>[c].<span class="pl-smi">keys</span>[d].<span class="pl-smi">time</span><span class="pl-k">&lt;</span><span class="pl-c1">0</span>)<span class="pl-smi">a</span>.<span class="pl-smi">hierarchy</span>[c].<span class="pl-smi">keys</span>[d].<span class="pl-smi">time</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L589" class="blob-num js-line-number" data-line-number="589"></td>
        <td id="LC589" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">hierarchy</span>[c].<span class="pl-smi">keys</span>[d].<span class="pl-smi">rot</span><span class="pl-k">!==</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">&amp;&amp;!</span>(<span class="pl-smi">a</span>.<span class="pl-smi">hierarchy</span>[c].<span class="pl-smi">keys</span>[d].<span class="pl-smi">rot</span> <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Quaternion</span>)){<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">hierarchy</span>[c].<span class="pl-smi">keys</span>[d].<span class="pl-smi">rot</span>;<span class="pl-smi">a</span>.<span class="pl-smi">hierarchy</span>[c].<span class="pl-smi">keys</span>[d].<span class="pl-smi">rot</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Quaternion</span>(h[<span class="pl-c1">0</span>],h[<span class="pl-c1">1</span>],h[<span class="pl-c1">2</span>],h[<span class="pl-c1">3</span>])}}<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">hierarchy</span>[c].<span class="pl-smi">keys</span>.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">a</span>.<span class="pl-smi">hierarchy</span>[c].<span class="pl-smi">keys</span>[<span class="pl-c1">0</span>].<span class="pl-smi">morphTargets</span><span class="pl-k">!==</span><span class="pl-k">void</span> <span class="pl-c1">0</span>){h<span class="pl-k">=</span>{};<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-smi">hierarchy</span>[c].<span class="pl-smi">keys</span>.<span class="pl-c1">length</span>;d<span class="pl-k">++</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> i<span class="pl-k">=</span><span class="pl-c1">0</span>;i<span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-smi">hierarchy</span>[c].<span class="pl-smi">keys</span>[d].<span class="pl-smi">morphTargets</span>.<span class="pl-c1">length</span>;i<span class="pl-k">++</span>){<span class="pl-k">var</span> j<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">hierarchy</span>[c].<span class="pl-smi">keys</span>[d].<span class="pl-smi">morphTargets</span>[i];h[j]<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">1</span>}<span class="pl-smi">a</span>.<span class="pl-smi">hierarchy</span>[c].<span class="pl-smi">usedMorphTargets</span><span class="pl-k">=</span>h;<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-smi">hierarchy</span>[c].<span class="pl-smi">keys</span>.<span class="pl-c1">length</span>;d<span class="pl-k">++</span>){<span class="pl-k">var</span> l<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L590" class="blob-num js-line-number" data-line-number="590"></td>
        <td id="LC590" class="blob-code blob-code-inner js-file-line">{};<span class="pl-k">for</span>(j <span class="pl-k">in</span> h){<span class="pl-k">for</span>(i<span class="pl-k">=</span><span class="pl-c1">0</span>;i<span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-smi">hierarchy</span>[c].<span class="pl-smi">keys</span>[d].<span class="pl-smi">morphTargets</span>.<span class="pl-c1">length</span>;i<span class="pl-k">++</span>)<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">hierarchy</span>[c].<span class="pl-smi">keys</span>[d].<span class="pl-smi">morphTargets</span>[i]<span class="pl-k">===</span>j){l[j]<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">hierarchy</span>[c].<span class="pl-smi">keys</span>[d].<span class="pl-smi">morphTargetsInfluences</span>[i];<span class="pl-k">break</span>}i<span class="pl-k">===</span><span class="pl-smi">a</span>.<span class="pl-smi">hierarchy</span>[c].<span class="pl-smi">keys</span>[d].<span class="pl-smi">morphTargets</span>.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>(l[j]<span class="pl-k">=</span><span class="pl-c1">0</span>)}<span class="pl-smi">a</span>.<span class="pl-smi">hierarchy</span>[c].<span class="pl-smi">keys</span>[d].<span class="pl-smi">morphTargetsInfluences</span><span class="pl-k">=</span>l}}<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">1</span>;d<span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-smi">hierarchy</span>[c].<span class="pl-smi">keys</span>.<span class="pl-c1">length</span>;d<span class="pl-k">++</span>)<span class="pl-k">if</span>(<span class="pl-smi">a</span>.<span class="pl-smi">hierarchy</span>[c].<span class="pl-smi">keys</span>[d].<span class="pl-smi">time</span><span class="pl-k">===</span><span class="pl-smi">a</span>.<span class="pl-smi">hierarchy</span>[c].<span class="pl-smi">keys</span>[d<span class="pl-k">-</span><span class="pl-c1">1</span>].<span class="pl-smi">time</span>){<span class="pl-smi">a</span>.<span class="pl-smi">hierarchy</span>[c].<span class="pl-smi">keys</span>.<span class="pl-c1">splice</span>(d,<span class="pl-c1">1</span>);d<span class="pl-k">--</span>}<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-smi">hierarchy</span>[c].<span class="pl-smi">keys</span>.<span class="pl-c1">length</span>;d<span class="pl-k">++</span>)<span class="pl-smi">a</span>.<span class="pl-smi">hierarchy</span>[c].<span class="pl-smi">keys</span>[d].<span class="pl-c1">index</span><span class="pl-k">=</span>d}d<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(<span class="pl-smi">a</span>.<span class="pl-c1">length</span><span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L591" class="blob-num js-line-number" data-line-number="591"></td>
        <td id="LC591" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">a</span>.<span class="pl-smi">fps</span>,<span class="pl-c1">10</span>);<span class="pl-smi">a</span>.<span class="pl-c1">JIT</span><span class="pl-k">=</span>{};<span class="pl-smi">a</span>.<span class="pl-c1">JIT</span>.<span class="pl-smi">hierarchy</span><span class="pl-k">=</span>[];<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-smi">hierarchy</span>.<span class="pl-c1">length</span>;c<span class="pl-k">++</span>)<span class="pl-smi">a</span>.<span class="pl-c1">JIT</span>.<span class="pl-smi">hierarchy</span>.<span class="pl-c1">push</span>(<span class="pl-c1">Array</span>(d));<span class="pl-smi">a</span>.<span class="pl-smi">initialized</span><span class="pl-k">=</span><span class="pl-c1">true</span>}},<span class="pl-en">get</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(<span class="pl-k">typeof</span> a<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>string<span class="pl-pds">&quot;</span></span>){<span class="pl-k">if</span>(b[a])<span class="pl-k">return</span> b[a];<span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.AnimationHandler.get: Couldn&#39;t find animation <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a);<span class="pl-k">return</span> <span class="pl-c1">null</span>}},<span class="pl-en">parse</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span>[];<span class="pl-k">if</span>(a <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">SkinnedMesh</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-smi">bones</span>.<span class="pl-c1">length</span>;c<span class="pl-k">++</span>)<span class="pl-smi">b</span>.<span class="pl-c1">push</span>(<span class="pl-smi">a</span>.<span class="pl-smi">bones</span>[c]);<span class="pl-k">else</span> <span class="pl-en">d</span>(a,b);<span class="pl-k">return</span> b}},<span class="pl-en">d</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-smi">b</span>.<span class="pl-c1">push</span>(a);<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-smi">children</span>.<span class="pl-c1">length</span>;c<span class="pl-k">++</span>)<span class="pl-en">d</span>(<span class="pl-smi">a</span>.<span class="pl-smi">children</span>[c],b)};<span class="pl-smi">c</span>.<span class="pl-c1">LINEAR</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-smi">c</span>.<span class="pl-c1">CATMULLROM</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L592" class="blob-num js-line-number" data-line-number="592"></td>
        <td id="LC592" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">1</span>;<span class="pl-smi">c</span>.<span class="pl-c1">CATMULLROM_FORWARD</span><span class="pl-k">=</span><span class="pl-c1">2</span>;<span class="pl-k">return</span> c}();<span class="pl-c1">THREE</span>.<span class="pl-en">Animation</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">this</span>.<span class="pl-smi">root</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-c1">data</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">AnimationHandler</span>.<span class="pl-c1">get</span>(b);<span class="pl-c1">this</span>.<span class="pl-smi">hierarchy</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">AnimationHandler</span>.<span class="pl-c1">parse</span>(a);<span class="pl-c1">this</span>.<span class="pl-smi">currentTime</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">timeScale</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">isPlaying</span><span class="pl-k">=</span><span class="pl-c1">false</span>;<span class="pl-c1">this</span>.<span class="pl-smi">loop</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">isPaused</span><span class="pl-k">=</span><span class="pl-c1">true</span>;<span class="pl-c1">this</span>.<span class="pl-smi">interpolationType</span><span class="pl-k">=</span>c<span class="pl-k">!==</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">?</span>c<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">AnimationHandler</span>.<span class="pl-c1">LINEAR</span>;<span class="pl-c1">this</span>.<span class="pl-smi">points</span><span class="pl-k">=</span>[];<span class="pl-c1">this</span>.<span class="pl-c1">target</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>};</td>
      </tr>
      <tr>
        <td id="L593" class="blob-num js-line-number" data-line-number="593"></td>
        <td id="LC593" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Animation</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">play</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">isPlaying</span><span class="pl-k">===</span><span class="pl-c1">false</span>){<span class="pl-c1">this</span>.<span class="pl-smi">isPlaying</span><span class="pl-k">=</span><span class="pl-c1">true</span>;<span class="pl-c1">this</span>.<span class="pl-smi">loop</span><span class="pl-k">=</span>a<span class="pl-k">!==</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-c1">true</span>;<span class="pl-c1">this</span>.<span class="pl-smi">currentTime</span><span class="pl-k">=</span>b<span class="pl-k">!==</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> c,d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">hierarchy</span>.<span class="pl-c1">length</span>,e;<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span>d;c<span class="pl-k">++</span>){e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">hierarchy</span>[c];<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">interpolationType</span><span class="pl-k">!==</span><span class="pl-c1">THREE</span>.<span class="pl-smi">AnimationHandler</span>.<span class="pl-c1">CATMULLROM_FORWARD</span>)<span class="pl-smi">e</span>.<span class="pl-smi">useQuaternion</span><span class="pl-k">=</span><span class="pl-c1">true</span>;<span class="pl-smi">e</span>.<span class="pl-smi">matrixAutoUpdate</span><span class="pl-k">=</span><span class="pl-c1">true</span>;<span class="pl-k">if</span>(<span class="pl-smi">e</span>.<span class="pl-smi">animationCache</span><span class="pl-k">===</span><span class="pl-k">void</span> <span class="pl-c1">0</span>){<span class="pl-smi">e</span>.<span class="pl-smi">animationCache</span><span class="pl-k">=</span>{};<span class="pl-smi">e</span>.<span class="pl-smi">animationCache</span>.<span class="pl-smi">prevKey</span><span class="pl-k">=</span>{pos<span class="pl-k">:</span><span class="pl-c1">0</span>,rot<span class="pl-k">:</span><span class="pl-c1">0</span>,scl<span class="pl-k">:</span><span class="pl-c1">0</span>};<span class="pl-smi">e</span>.<span class="pl-smi">animationCache</span>.<span class="pl-smi">nextKey</span><span class="pl-k">=</span>{pos<span class="pl-k">:</span><span class="pl-c1">0</span>,rot<span class="pl-k">:</span><span class="pl-c1">0</span>,scl<span class="pl-k">:</span><span class="pl-c1">0</span>};<span class="pl-smi">e</span>.<span class="pl-smi">animationCache</span>.<span class="pl-smi">originalMatrix</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L594" class="blob-num js-line-number" data-line-number="594"></td>
        <td id="LC594" class="blob-code blob-code-inner js-file-line">e <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Bone</span><span class="pl-k">?</span><span class="pl-smi">e</span>.<span class="pl-smi">skinMatrix</span><span class="pl-k">:</span><span class="pl-smi">e</span>.<span class="pl-smi">matrix</span>}<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">animationCache</span>.<span class="pl-smi">prevKey</span>;e<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">animationCache</span>.<span class="pl-smi">nextKey</span>;<span class="pl-smi">f</span>.<span class="pl-smi">pos</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">data</span>.<span class="pl-smi">hierarchy</span>[c].<span class="pl-smi">keys</span>[<span class="pl-c1">0</span>];<span class="pl-smi">f</span>.<span class="pl-smi">rot</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">data</span>.<span class="pl-smi">hierarchy</span>[c].<span class="pl-smi">keys</span>[<span class="pl-c1">0</span>];<span class="pl-smi">f</span>.<span class="pl-smi">scl</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">data</span>.<span class="pl-smi">hierarchy</span>[c].<span class="pl-smi">keys</span>[<span class="pl-c1">0</span>];<span class="pl-smi">e</span>.<span class="pl-smi">pos</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">getNextKeyWith</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>pos<span class="pl-pds">&quot;</span></span>,c,<span class="pl-c1">1</span>);<span class="pl-smi">e</span>.<span class="pl-smi">rot</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">getNextKeyWith</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>rot<span class="pl-pds">&quot;</span></span>,c,<span class="pl-c1">1</span>);<span class="pl-smi">e</span>.<span class="pl-smi">scl</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">getNextKeyWith</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>scl<span class="pl-pds">&quot;</span></span>,c,<span class="pl-c1">1</span>)}<span class="pl-c1">this</span>.<span class="pl-en">update</span>(<span class="pl-c1">0</span>)}<span class="pl-c1">this</span>.<span class="pl-smi">isPaused</span><span class="pl-k">=</span><span class="pl-c1">false</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">AnimationHandler</span>.<span class="pl-en">addToUpdate</span>(<span class="pl-c1">this</span>)};</td>
      </tr>
      <tr>
        <td id="L595" class="blob-num js-line-number" data-line-number="595"></td>
        <td id="LC595" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Animation</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">pause</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">isPaused</span><span class="pl-k">===</span><span class="pl-c1">true</span><span class="pl-k">?</span><span class="pl-c1">THREE</span>.<span class="pl-smi">AnimationHandler</span>.<span class="pl-en">addToUpdate</span>(<span class="pl-c1">this</span>)<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">AnimationHandler</span>.<span class="pl-en">removeFromUpdate</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-smi">isPaused</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">this</span>.<span class="pl-smi">isPaused</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">Animation</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">stop</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">isPaused</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">isPlaying</span><span class="pl-k">=</span><span class="pl-c1">false</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">AnimationHandler</span>.<span class="pl-en">removeFromUpdate</span>(<span class="pl-c1">this</span>)};</td>
      </tr>
      <tr>
        <td id="L596" class="blob-num js-line-number" data-line-number="596"></td>
        <td id="LC596" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Animation</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">update</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">isPlaying</span><span class="pl-k">!==</span><span class="pl-c1">false</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>pos<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>rot<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>scl<span class="pl-pds">&quot;</span></span>],c,d,e,f,g,h,i,j,l;l<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">currentTime</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">currentTime</span><span class="pl-k">+</span>a<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">timeScale</span>;j<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">currentTime</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">currentTime</span><span class="pl-k">%</span><span class="pl-c1">this</span>.<span class="pl-c1">data</span>.<span class="pl-c1">length</span>;<span class="pl-c1">parseInt</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(j<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-c1">data</span>.<span class="pl-smi">fps</span>,<span class="pl-c1">this</span>.<span class="pl-c1">data</span>.<span class="pl-c1">length</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-c1">data</span>.<span class="pl-smi">fps</span>),<span class="pl-c1">10</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> m<span class="pl-k">=</span><span class="pl-c1">0</span>,n<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">hierarchy</span>.<span class="pl-c1">length</span>;m<span class="pl-k">&lt;</span>n;m<span class="pl-k">++</span>){a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">hierarchy</span>[m];i<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">animationCache</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> p<span class="pl-k">=</span><span class="pl-c1">0</span>;p<span class="pl-k">&lt;</span><span class="pl-c1">3</span>;p<span class="pl-k">++</span>){c<span class="pl-k">=</span>b[p];g<span class="pl-k">=</span><span class="pl-smi">i</span>.<span class="pl-smi">prevKey</span>[c];h<span class="pl-k">=</span><span class="pl-smi">i</span>.<span class="pl-smi">nextKey</span>[c];<span class="pl-k">if</span>(<span class="pl-smi">h</span>.<span class="pl-smi">time</span><span class="pl-k">&lt;=</span>l){<span class="pl-k">if</span>(j<span class="pl-k">&lt;</span>l)<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">loop</span>){g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">data</span>.<span class="pl-smi">hierarchy</span>[m].<span class="pl-smi">keys</span>[<span class="pl-c1">0</span>];</td>
      </tr>
      <tr>
        <td id="L597" class="blob-num js-line-number" data-line-number="597"></td>
        <td id="LC597" class="blob-code blob-code-inner js-file-line"><span class="pl-k">for</span>(h<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">getNextKeyWith</span>(c,m,<span class="pl-c1">1</span>);<span class="pl-smi">h</span>.<span class="pl-smi">time</span><span class="pl-k">&lt;</span>j;){g<span class="pl-k">=</span>h;h<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">getNextKeyWith</span>(c,m,<span class="pl-smi">h</span>.<span class="pl-c1">index</span><span class="pl-k">+</span><span class="pl-c1">1</span>)}}<span class="pl-k">else</span>{<span class="pl-c1">this</span>.<span class="pl-c1">stop</span>();<span class="pl-k">return</span>}<span class="pl-k">else</span>{<span class="pl-k">do</span>{g<span class="pl-k">=</span>h;h<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">getNextKeyWith</span>(c,m,<span class="pl-smi">h</span>.<span class="pl-c1">index</span><span class="pl-k">+</span><span class="pl-c1">1</span>)}<span class="pl-k">while</span>(<span class="pl-smi">h</span>.<span class="pl-smi">time</span><span class="pl-k">&lt;</span>j)}<span class="pl-smi">i</span>.<span class="pl-smi">prevKey</span>[c]<span class="pl-k">=</span>g;<span class="pl-smi">i</span>.<span class="pl-smi">nextKey</span>[c]<span class="pl-k">=</span>h}<span class="pl-smi">a</span>.<span class="pl-smi">matrixAutoUpdate</span><span class="pl-k">=</span><span class="pl-c1">true</span>;<span class="pl-smi">a</span>.<span class="pl-smi">matrixWorldNeedsUpdate</span><span class="pl-k">=</span><span class="pl-c1">true</span>;d<span class="pl-k">=</span>(j<span class="pl-k">-</span><span class="pl-smi">g</span>.<span class="pl-smi">time</span>)<span class="pl-k">/</span>(<span class="pl-smi">h</span>.<span class="pl-smi">time</span><span class="pl-k">-</span><span class="pl-smi">g</span>.<span class="pl-smi">time</span>);e<span class="pl-k">=</span>g[c];f<span class="pl-k">=</span>h[c];<span class="pl-k">if</span>(d<span class="pl-k">&lt;</span><span class="pl-c1">0</span><span class="pl-k">||</span>d<span class="pl-k">&gt;</span><span class="pl-c1">1</span>){<span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>THREE.Animation.update: Warning! Scale out of bounds:<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>d<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span> on bone <span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>m);d<span class="pl-k">=</span>d<span class="pl-k">&lt;</span><span class="pl-c1">0</span><span class="pl-k">?</span><span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">1</span>}<span class="pl-k">if</span>(c<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>pos<span class="pl-pds">&quot;</span></span>){c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">position</span>;<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">interpolationType</span><span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">AnimationHandler</span>.<span class="pl-c1">LINEAR</span>){<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>e[<span class="pl-c1">0</span>]<span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L598" class="blob-num js-line-number" data-line-number="598"></td>
        <td id="LC598" class="blob-code blob-code-inner js-file-line">(f[<span class="pl-c1">0</span>]<span class="pl-k">-</span>e[<span class="pl-c1">0</span>])<span class="pl-k">*</span>d;<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>e[<span class="pl-c1">1</span>]<span class="pl-k">+</span>(f[<span class="pl-c1">1</span>]<span class="pl-k">-</span>e[<span class="pl-c1">1</span>])<span class="pl-k">*</span>d;<span class="pl-smi">c</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>e[<span class="pl-c1">2</span>]<span class="pl-k">+</span>(f[<span class="pl-c1">2</span>]<span class="pl-k">-</span>e[<span class="pl-c1">2</span>])<span class="pl-k">*</span>d}<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">interpolationType</span><span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">AnimationHandler</span>.<span class="pl-c1">CATMULLROM</span><span class="pl-k">||</span><span class="pl-c1">this</span>.<span class="pl-smi">interpolationType</span><span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">AnimationHandler</span>.<span class="pl-c1">CATMULLROM_FORWARD</span>){<span class="pl-c1">this</span>.<span class="pl-smi">points</span>[<span class="pl-c1">0</span>]<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">getPrevKeyWith</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>pos<span class="pl-pds">&quot;</span></span>,m,<span class="pl-smi">g</span>.<span class="pl-c1">index</span><span class="pl-k">-</span><span class="pl-c1">1</span>).<span class="pl-smi">pos</span>;<span class="pl-c1">this</span>.<span class="pl-smi">points</span>[<span class="pl-c1">1</span>]<span class="pl-k">=</span>e;<span class="pl-c1">this</span>.<span class="pl-smi">points</span>[<span class="pl-c1">2</span>]<span class="pl-k">=</span>f;<span class="pl-c1">this</span>.<span class="pl-smi">points</span>[<span class="pl-c1">3</span>]<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">getNextKeyWith</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>pos<span class="pl-pds">&quot;</span></span>,m,<span class="pl-smi">h</span>.<span class="pl-c1">index</span><span class="pl-k">+</span><span class="pl-c1">1</span>).<span class="pl-smi">pos</span>;d<span class="pl-k">=</span>d<span class="pl-k">*</span><span class="pl-c1">0.33</span><span class="pl-k">+</span><span class="pl-c1">0.33</span>;e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">interpolateCatmullRom</span>(<span class="pl-c1">this</span>.<span class="pl-smi">points</span>,d);<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>e[<span class="pl-c1">0</span>];<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>e[<span class="pl-c1">1</span>];<span class="pl-smi">c</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>e[<span class="pl-c1">2</span>];<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">interpolationType</span><span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">AnimationHandler</span>.<span class="pl-c1">CATMULLROM_FORWARD</span>){d<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L599" class="blob-num js-line-number" data-line-number="599"></td>
        <td id="LC599" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-en">interpolateCatmullRom</span>(<span class="pl-c1">this</span>.<span class="pl-smi">points</span>,d<span class="pl-k">*</span><span class="pl-c1">1.01</span>);<span class="pl-c1">this</span>.<span class="pl-c1">target</span>.<span class="pl-c1">set</span>(d[<span class="pl-c1">0</span>],d[<span class="pl-c1">1</span>],d[<span class="pl-c1">2</span>]);<span class="pl-c1">this</span>.<span class="pl-c1">target</span>.<span class="pl-en">subSelf</span>(c);<span class="pl-c1">this</span>.<span class="pl-c1">target</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-c1">target</span>.<span class="pl-c1">normalize</span>();d<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(<span class="pl-c1">this</span>.<span class="pl-c1">target</span>.<span class="pl-c1">x</span>,<span class="pl-c1">this</span>.<span class="pl-c1">target</span>.<span class="pl-c1">z</span>);<span class="pl-smi">a</span>.<span class="pl-smi">rotation</span>.<span class="pl-c1">set</span>(<span class="pl-c1">0</span>,d,<span class="pl-c1">0</span>)}}}<span class="pl-k">else</span> <span class="pl-k">if</span>(c<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>rot<span class="pl-pds">&quot;</span></span>)<span class="pl-c1">THREE</span>.<span class="pl-smi">Quaternion</span>.<span class="pl-en">slerp</span>(e,f,<span class="pl-smi">a</span>.<span class="pl-smi">quaternion</span>,d);<span class="pl-k">else</span> <span class="pl-k">if</span>(c<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>scl<span class="pl-pds">&quot;</span></span>){c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">scale</span>;<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>e[<span class="pl-c1">0</span>]<span class="pl-k">+</span>(f[<span class="pl-c1">0</span>]<span class="pl-k">-</span>e[<span class="pl-c1">0</span>])<span class="pl-k">*</span>d;<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>e[<span class="pl-c1">1</span>]<span class="pl-k">+</span>(f[<span class="pl-c1">1</span>]<span class="pl-k">-</span>e[<span class="pl-c1">1</span>])<span class="pl-k">*</span>d;<span class="pl-smi">c</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>e[<span class="pl-c1">2</span>]<span class="pl-k">+</span>(f[<span class="pl-c1">2</span>]<span class="pl-k">-</span>e[<span class="pl-c1">2</span>])<span class="pl-k">*</span>d}}}}};</td>
      </tr>
      <tr>
        <td id="L600" class="blob-num js-line-number" data-line-number="600"></td>
        <td id="LC600" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Animation</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">interpolateCatmullRom</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span>[],d<span class="pl-k">=</span>[],e,f,g,h,i,j;e<span class="pl-k">=</span>(<span class="pl-smi">a</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>)<span class="pl-k">*</span>b;f<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(e);e<span class="pl-k">=</span>e<span class="pl-k">-</span>f;c[<span class="pl-c1">0</span>]<span class="pl-k">=</span>f<span class="pl-k">===</span><span class="pl-c1">0</span><span class="pl-k">?</span>f<span class="pl-k">:</span>f<span class="pl-k">-</span><span class="pl-c1">1</span>;c[<span class="pl-c1">1</span>]<span class="pl-k">=</span>f;c[<span class="pl-c1">2</span>]<span class="pl-k">=</span>f<span class="pl-k">&gt;</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">?</span>f<span class="pl-k">:</span>f<span class="pl-k">+</span><span class="pl-c1">1</span>;c[<span class="pl-c1">3</span>]<span class="pl-k">=</span>f<span class="pl-k">&gt;</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">3</span><span class="pl-k">?</span>f<span class="pl-k">:</span>f<span class="pl-k">+</span><span class="pl-c1">2</span>;f<span class="pl-k">=</span>a[c[<span class="pl-c1">0</span>]];h<span class="pl-k">=</span>a[c[<span class="pl-c1">1</span>]];i<span class="pl-k">=</span>a[c[<span class="pl-c1">2</span>]];j<span class="pl-k">=</span>a[c[<span class="pl-c1">3</span>]];c<span class="pl-k">=</span>e<span class="pl-k">*</span>e;g<span class="pl-k">=</span>e<span class="pl-k">*</span>c;d[<span class="pl-c1">0</span>]<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">interpolate</span>(f[<span class="pl-c1">0</span>],h[<span class="pl-c1">0</span>],i[<span class="pl-c1">0</span>],j[<span class="pl-c1">0</span>],e,c,g);d[<span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">interpolate</span>(f[<span class="pl-c1">1</span>],h[<span class="pl-c1">1</span>],i[<span class="pl-c1">1</span>],j[<span class="pl-c1">1</span>],e,c,g);d[<span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">interpolate</span>(f[<span class="pl-c1">2</span>],h[<span class="pl-c1">2</span>],i[<span class="pl-c1">2</span>],j[<span class="pl-c1">2</span>],e,c,g);<span class="pl-k">return</span> d};</td>
      </tr>
      <tr>
        <td id="L601" class="blob-num js-line-number" data-line-number="601"></td>
        <td id="LC601" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Animation</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">interpolate</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>,<span class="pl-smi">g</span>){a<span class="pl-k">=</span>(c<span class="pl-k">-</span>a)<span class="pl-k">*</span><span class="pl-c1">0.5</span>;d<span class="pl-k">=</span>(d<span class="pl-k">-</span>b)<span class="pl-k">*</span><span class="pl-c1">0.5</span>;<span class="pl-k">return</span>(<span class="pl-c1">2</span><span class="pl-k">*</span>(b<span class="pl-k">-</span>c)<span class="pl-k">+</span>a<span class="pl-k">+</span>d)<span class="pl-k">*</span>g<span class="pl-k">+</span>(<span class="pl-k">-</span><span class="pl-c1">3</span><span class="pl-k">*</span>(b<span class="pl-k">-</span>c)<span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">*</span>a<span class="pl-k">-</span>d)<span class="pl-k">*</span>f<span class="pl-k">+</span>a<span class="pl-k">*</span>e<span class="pl-k">+</span>b};<span class="pl-c1">THREE</span>.<span class="pl-smi">Animation</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getNextKeyWith</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">data</span>.<span class="pl-smi">hierarchy</span>[b].<span class="pl-smi">keys</span>,c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">interpolationType</span><span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">AnimationHandler</span>.<span class="pl-c1">CATMULLROM</span><span class="pl-k">||</span><span class="pl-c1">this</span>.<span class="pl-smi">interpolationType</span><span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">AnimationHandler</span>.<span class="pl-c1">CATMULLROM_FORWARD</span><span class="pl-k">?</span>c<span class="pl-k">&lt;</span><span class="pl-smi">d</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">?</span>c<span class="pl-k">:</span><span class="pl-smi">d</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span>c<span class="pl-k">%</span><span class="pl-smi">d</span>.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span><span class="pl-smi">d</span>.<span class="pl-c1">length</span>;c<span class="pl-k">++</span>)<span class="pl-k">if</span>(d[c][a]<span class="pl-k">!==</span><span class="pl-k">void</span> <span class="pl-c1">0</span>)<span class="pl-k">return</span> d[c];<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-c1">data</span>.<span class="pl-smi">hierarchy</span>[b].<span class="pl-smi">keys</span>[<span class="pl-c1">0</span>]};</td>
      </tr>
      <tr>
        <td id="L602" class="blob-num js-line-number" data-line-number="602"></td>
        <td id="LC602" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">Animation</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getPrevKeyWith</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">data</span>.<span class="pl-smi">hierarchy</span>[b].<span class="pl-smi">keys</span>,c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">interpolationType</span><span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">AnimationHandler</span>.<span class="pl-c1">CATMULLROM</span><span class="pl-k">||</span><span class="pl-c1">this</span>.<span class="pl-smi">interpolationType</span><span class="pl-k">===</span><span class="pl-c1">THREE</span>.<span class="pl-smi">AnimationHandler</span>.<span class="pl-c1">CATMULLROM_FORWARD</span><span class="pl-k">?</span>c<span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">?</span>c<span class="pl-k">:</span><span class="pl-c1">0</span><span class="pl-k">:</span>c<span class="pl-k">&gt;=</span><span class="pl-c1">0</span><span class="pl-k">?</span>c<span class="pl-k">:</span>c<span class="pl-k">+</span><span class="pl-smi">d</span>.<span class="pl-c1">length</span>;c<span class="pl-k">&gt;=</span><span class="pl-c1">0</span>;c<span class="pl-k">--</span>)<span class="pl-k">if</span>(d[c][a]<span class="pl-k">!==</span><span class="pl-k">void</span> <span class="pl-c1">0</span>)<span class="pl-k">return</span> d[c];<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-c1">data</span>.<span class="pl-smi">hierarchy</span>[b].<span class="pl-smi">keys</span>[<span class="pl-smi">d</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>]};</td>
      </tr>
      <tr>
        <td id="L603" class="blob-num js-line-number" data-line-number="603"></td>
        <td id="LC603" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">KeyFrameAnimation</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">this</span>.<span class="pl-smi">root</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-c1">data</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">AnimationHandler</span>.<span class="pl-c1">get</span>(b);<span class="pl-c1">this</span>.<span class="pl-smi">hierarchy</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">AnimationHandler</span>.<span class="pl-c1">parse</span>(a);<span class="pl-c1">this</span>.<span class="pl-smi">currentTime</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">timeScale</span><span class="pl-k">=</span><span class="pl-c1">0.001</span>;<span class="pl-c1">this</span>.<span class="pl-smi">isPlaying</span><span class="pl-k">=</span><span class="pl-c1">false</span>;<span class="pl-c1">this</span>.<span class="pl-smi">loop</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">isPaused</span><span class="pl-k">=</span><span class="pl-c1">true</span>;<span class="pl-c1">this</span>.<span class="pl-smi">JITCompile</span><span class="pl-k">=</span>c<span class="pl-k">!==</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">?</span>c<span class="pl-k">:</span><span class="pl-c1">true</span>;a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">hierarchy</span>.<span class="pl-c1">length</span>;a<span class="pl-k">&lt;</span>b;a<span class="pl-k">++</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">data</span>.<span class="pl-smi">hierarchy</span>[a].<span class="pl-smi">sids</span>,d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">hierarchy</span>[a];<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-c1">data</span>.<span class="pl-smi">hierarchy</span>[a].<span class="pl-smi">keys</span>.<span class="pl-c1">length</span><span class="pl-k">&amp;&amp;</span>c){<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span><span class="pl-smi">c</span>.<span class="pl-c1">length</span>;e<span class="pl-k">++</span>){<span class="pl-k">var</span> f<span class="pl-k">=</span>c[e],g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">getNextKeyWith</span>(f,a,<span class="pl-c1">0</span>);g<span class="pl-k">&amp;&amp;</span><span class="pl-smi">g</span>.<span class="pl-c1">apply</span>(f)}<span class="pl-smi">d</span>.<span class="pl-smi">matrixAutoUpdate</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L604" class="blob-num js-line-number" data-line-number="604"></td>
        <td id="LC604" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">false</span>;<span class="pl-c1">this</span>.<span class="pl-c1">data</span>.<span class="pl-smi">hierarchy</span>[a].<span class="pl-smi">node</span>.<span class="pl-en">updateMatrix</span>();<span class="pl-smi">d</span>.<span class="pl-smi">matrixWorldNeedsUpdate</span><span class="pl-k">=</span><span class="pl-c1">true</span>}}};</td>
      </tr>
      <tr>
        <td id="L605" class="blob-num js-line-number" data-line-number="605"></td>
        <td id="LC605" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">KeyFrameAnimation</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">play</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">this</span>.<span class="pl-smi">isPlaying</span>){<span class="pl-c1">this</span>.<span class="pl-smi">isPlaying</span><span class="pl-k">=</span><span class="pl-c1">true</span>;<span class="pl-c1">this</span>.<span class="pl-smi">loop</span><span class="pl-k">=</span>a<span class="pl-k">!==</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-c1">true</span>;<span class="pl-c1">this</span>.<span class="pl-smi">currentTime</span><span class="pl-k">=</span>b<span class="pl-k">!==</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">startTimeMs</span><span class="pl-k">=</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">startTime</span><span class="pl-k">=</span><span class="pl-c1">1E7</span>;<span class="pl-c1">this</span>.<span class="pl-smi">endTime</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">startTime</span>;<span class="pl-k">var</span> c,d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">hierarchy</span>.<span class="pl-c1">length</span>,e,f;<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span>d;c<span class="pl-k">++</span>){e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">hierarchy</span>[c];f<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">data</span>.<span class="pl-smi">hierarchy</span>[c];<span class="pl-smi">e</span>.<span class="pl-smi">useQuaternion</span><span class="pl-k">=</span><span class="pl-c1">true</span>;<span class="pl-k">if</span>(<span class="pl-smi">f</span>.<span class="pl-smi">animationCache</span><span class="pl-k">===</span><span class="pl-k">void</span> <span class="pl-c1">0</span>){<span class="pl-smi">f</span>.<span class="pl-smi">animationCache</span><span class="pl-k">=</span>{};<span class="pl-smi">f</span>.<span class="pl-smi">animationCache</span>.<span class="pl-smi">prevKey</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-smi">f</span>.<span class="pl-smi">animationCache</span>.<span class="pl-smi">nextKey</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-smi">f</span>.<span class="pl-smi">animationCache</span>.<span class="pl-smi">originalMatrix</span><span class="pl-k">=</span>e <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Bone</span><span class="pl-k">?</span></td>
      </tr>
      <tr>
        <td id="L606" class="blob-num js-line-number" data-line-number="606"></td>
        <td id="LC606" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">e</span>.<span class="pl-smi">skinMatrix</span><span class="pl-k">:</span><span class="pl-smi">e</span>.<span class="pl-smi">matrix</span>}e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">data</span>.<span class="pl-smi">hierarchy</span>[c].<span class="pl-smi">keys</span>;<span class="pl-k">if</span>(<span class="pl-smi">e</span>.<span class="pl-c1">length</span>){<span class="pl-smi">f</span>.<span class="pl-smi">animationCache</span>.<span class="pl-smi">prevKey</span><span class="pl-k">=</span>e[<span class="pl-c1">0</span>];<span class="pl-smi">f</span>.<span class="pl-smi">animationCache</span>.<span class="pl-smi">nextKey</span><span class="pl-k">=</span>e[<span class="pl-c1">1</span>];<span class="pl-c1">this</span>.<span class="pl-smi">startTime</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(e[<span class="pl-c1">0</span>].<span class="pl-smi">time</span>,<span class="pl-c1">this</span>.<span class="pl-smi">startTime</span>);<span class="pl-c1">this</span>.<span class="pl-smi">endTime</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(e[<span class="pl-smi">e</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>].<span class="pl-smi">time</span>,<span class="pl-c1">this</span>.<span class="pl-smi">endTime</span>)}}<span class="pl-c1">this</span>.<span class="pl-en">update</span>(<span class="pl-c1">0</span>)}<span class="pl-c1">this</span>.<span class="pl-smi">isPaused</span><span class="pl-k">=</span><span class="pl-c1">false</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">AnimationHandler</span>.<span class="pl-en">addToUpdate</span>(<span class="pl-c1">this</span>)};<span class="pl-c1">THREE</span>.<span class="pl-smi">KeyFrameAnimation</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">pause</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">isPaused</span><span class="pl-k">?</span><span class="pl-c1">THREE</span>.<span class="pl-smi">AnimationHandler</span>.<span class="pl-en">addToUpdate</span>(<span class="pl-c1">this</span>)<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">AnimationHandler</span>.<span class="pl-en">removeFromUpdate</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-smi">isPaused</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">this</span>.<span class="pl-smi">isPaused</span>};</td>
      </tr>
      <tr>
        <td id="L607" class="blob-num js-line-number" data-line-number="607"></td>
        <td id="LC607" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">KeyFrameAnimation</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">stop</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">isPaused</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">isPlaying</span><span class="pl-k">=</span><span class="pl-c1">false</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">AnimationHandler</span>.<span class="pl-en">removeFromUpdate</span>(<span class="pl-c1">this</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">0</span>;a<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-c1">data</span>.<span class="pl-smi">hierarchy</span>.<span class="pl-c1">length</span>;a<span class="pl-k">++</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">hierarchy</span>[a],c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">data</span>.<span class="pl-smi">hierarchy</span>[a];<span class="pl-k">if</span>(<span class="pl-smi">c</span>.<span class="pl-smi">animationCache</span><span class="pl-k">!==</span><span class="pl-k">void</span> <span class="pl-c1">0</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">animationCache</span>.<span class="pl-smi">originalMatrix</span>;<span class="pl-k">if</span>(b <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Bone</span>){<span class="pl-smi">d</span>.<span class="pl-en">copy</span>(<span class="pl-smi">b</span>.<span class="pl-smi">skinMatrix</span>);<span class="pl-smi">b</span>.<span class="pl-smi">skinMatrix</span><span class="pl-k">=</span>d}<span class="pl-k">else</span>{<span class="pl-smi">d</span>.<span class="pl-en">copy</span>(<span class="pl-smi">b</span>.<span class="pl-smi">matrix</span>);<span class="pl-smi">b</span>.<span class="pl-smi">matrix</span><span class="pl-k">=</span>d}<span class="pl-k">delete</span> <span class="pl-smi">c</span>.<span class="pl-smi">animationCache</span>}}};</td>
      </tr>
      <tr>
        <td id="L608" class="blob-num js-line-number" data-line-number="608"></td>
        <td id="LC608" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">KeyFrameAnimation</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">update</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">isPlaying</span>){<span class="pl-k">var</span> b,c,d,e,f<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">data</span>.<span class="pl-c1">JIT</span>.<span class="pl-smi">hierarchy</span>,g,h,i;h<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">currentTime</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">currentTime</span><span class="pl-k">+</span>a<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">timeScale</span>;g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">currentTime</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">currentTime</span><span class="pl-k">%</span><span class="pl-c1">this</span>.<span class="pl-c1">data</span>.<span class="pl-c1">length</span>;<span class="pl-k">if</span>(g<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">startTimeMs</span>)g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">currentTime</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">startTimeMs</span><span class="pl-k">+</span>g;e<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(g<span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-c1">data</span>.<span class="pl-smi">fps</span>,<span class="pl-c1">this</span>.<span class="pl-c1">data</span>.<span class="pl-c1">length</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-c1">data</span>.<span class="pl-smi">fps</span>),<span class="pl-c1">10</span>);<span class="pl-k">if</span>((i<span class="pl-k">=</span>g<span class="pl-k">&lt;</span>h)<span class="pl-k">&amp;&amp;!</span><span class="pl-c1">this</span>.<span class="pl-smi">loop</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">0</span>,j<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">hierarchy</span>.<span class="pl-c1">length</span>;a<span class="pl-k">&lt;</span>j;a<span class="pl-k">++</span>){<span class="pl-k">var</span> l<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">data</span>.<span class="pl-smi">hierarchy</span>[a].<span class="pl-smi">keys</span>,f<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">data</span>.<span class="pl-smi">hierarchy</span>[a].<span class="pl-smi">sids</span>;d<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>;e<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L609" class="blob-num js-line-number" data-line-number="609"></td>
        <td id="LC609" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">hierarchy</span>[a];<span class="pl-k">if</span>(<span class="pl-smi">l</span>.<span class="pl-c1">length</span>){<span class="pl-k">for</span>(l<span class="pl-k">=</span><span class="pl-c1">0</span>;l<span class="pl-k">&lt;</span><span class="pl-smi">f</span>.<span class="pl-c1">length</span>;l<span class="pl-k">++</span>){g<span class="pl-k">=</span>f[l];(h<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-en">getPrevKeyWith</span>(g,a,d))<span class="pl-k">&amp;&amp;</span><span class="pl-smi">h</span>.<span class="pl-c1">apply</span>(g)}<span class="pl-c1">this</span>.<span class="pl-c1">data</span>.<span class="pl-smi">hierarchy</span>[a].<span class="pl-smi">node</span>.<span class="pl-en">updateMatrix</span>();<span class="pl-smi">e</span>.<span class="pl-smi">matrixWorldNeedsUpdate</span><span class="pl-k">=</span><span class="pl-c1">true</span>}}<span class="pl-c1">this</span>.<span class="pl-c1">stop</span>()}<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-k">!</span>(g<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">startTime</span>)){a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(j<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">hierarchy</span>.<span class="pl-c1">length</span>;a<span class="pl-k">&lt;</span>j;a<span class="pl-k">++</span>){d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">hierarchy</span>[a];b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">data</span>.<span class="pl-smi">hierarchy</span>[a];<span class="pl-k">var</span> l<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">keys</span>,m<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">animationCache</span>;<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">JITCompile</span><span class="pl-k">&amp;&amp;</span>f[a][e]<span class="pl-k">!==</span><span class="pl-k">void</span> <span class="pl-c1">0</span>)<span class="pl-k">if</span>(d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Bone</span>){<span class="pl-smi">d</span>.<span class="pl-smi">skinMatrix</span><span class="pl-k">=</span>f[a][e];<span class="pl-smi">d</span>.<span class="pl-smi">matrixWorldNeedsUpdate</span><span class="pl-k">=</span><span class="pl-c1">false</span>}<span class="pl-k">else</span>{<span class="pl-smi">d</span>.<span class="pl-smi">matrix</span><span class="pl-k">=</span>f[a][e];<span class="pl-smi">d</span>.<span class="pl-smi">matrixWorldNeedsUpdate</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L610" class="blob-num js-line-number" data-line-number="610"></td>
        <td id="LC610" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">true</span>}<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-smi">l</span>.<span class="pl-c1">length</span>){<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">JITCompile</span><span class="pl-k">&amp;&amp;</span>m)d <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Bone</span><span class="pl-k">?</span><span class="pl-smi">d</span>.<span class="pl-smi">skinMatrix</span><span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-smi">originalMatrix</span><span class="pl-k">:</span><span class="pl-smi">d</span>.<span class="pl-smi">matrix</span><span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-smi">originalMatrix</span>;b<span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-smi">prevKey</span>;c<span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-smi">nextKey</span>;<span class="pl-k">if</span>(b<span class="pl-k">&amp;&amp;</span>c){<span class="pl-k">if</span>(<span class="pl-smi">c</span>.<span class="pl-smi">time</span><span class="pl-k">&lt;=</span>h){<span class="pl-k">if</span>(i<span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-smi">loop</span>){b<span class="pl-k">=</span>l[<span class="pl-c1">0</span>];<span class="pl-k">for</span>(c<span class="pl-k">=</span>l[<span class="pl-c1">1</span>];<span class="pl-smi">c</span>.<span class="pl-smi">time</span><span class="pl-k">&lt;</span>g;){b<span class="pl-k">=</span>c;c<span class="pl-k">=</span>l[<span class="pl-smi">b</span>.<span class="pl-c1">index</span><span class="pl-k">+</span><span class="pl-c1">1</span>]}}<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-k">!</span>i)<span class="pl-k">for</span>(<span class="pl-k">var</span> n<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-smi">c</span>.<span class="pl-smi">time</span><span class="pl-k">&lt;</span>g<span class="pl-k">&amp;&amp;</span><span class="pl-smi">c</span>.<span class="pl-c1">index</span><span class="pl-k">!==</span>n;){b<span class="pl-k">=</span>c;c<span class="pl-k">=</span>l[<span class="pl-smi">b</span>.<span class="pl-c1">index</span><span class="pl-k">+</span><span class="pl-c1">1</span>]}<span class="pl-smi">m</span>.<span class="pl-smi">prevKey</span><span class="pl-k">=</span>b;<span class="pl-smi">m</span>.<span class="pl-smi">nextKey</span><span class="pl-k">=</span>c}<span class="pl-smi">c</span>.<span class="pl-smi">time</span><span class="pl-k">&gt;=</span>g<span class="pl-k">?</span><span class="pl-smi">b</span>.<span class="pl-en">interpolate</span>(c,g)<span class="pl-k">:</span><span class="pl-smi">b</span>.<span class="pl-en">interpolate</span>(c,<span class="pl-smi">c</span>.<span class="pl-smi">time</span>)}<span class="pl-c1">this</span>.<span class="pl-c1">data</span>.<span class="pl-smi">hierarchy</span>[a].<span class="pl-smi">node</span>.<span class="pl-en">updateMatrix</span>();<span class="pl-smi">d</span>.<span class="pl-smi">matrixWorldNeedsUpdate</span><span class="pl-k">=</span><span class="pl-c1">true</span>}}<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">JITCompile</span><span class="pl-k">&amp;&amp;</span>f[<span class="pl-c1">0</span>][e]<span class="pl-k">===</span><span class="pl-k">void</span> <span class="pl-c1">0</span>){<span class="pl-c1">this</span>.<span class="pl-smi">hierarchy</span>[<span class="pl-c1">0</span>].<span class="pl-en">updateMatrixWorld</span>(<span class="pl-c1">true</span>);</td>
      </tr>
      <tr>
        <td id="L611" class="blob-num js-line-number" data-line-number="611"></td>
        <td id="LC611" class="blob-code blob-code-inner js-file-line"><span class="pl-k">for</span>(a<span class="pl-k">=</span><span class="pl-c1">0</span>;a<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">hierarchy</span>.<span class="pl-c1">length</span>;a<span class="pl-k">++</span>)f[a][e]<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">hierarchy</span>[a]<span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Bone</span><span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-smi">hierarchy</span>[a].<span class="pl-smi">skinMatrix</span>.<span class="pl-en">clone</span>()<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-smi">hierarchy</span>[a].<span class="pl-smi">matrix</span>.<span class="pl-en">clone</span>()}}}};<span class="pl-c1">THREE</span>.<span class="pl-smi">KeyFrameAnimation</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getNextKeyWith</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">data</span>.<span class="pl-smi">hierarchy</span>[b].<span class="pl-smi">keys</span>;<span class="pl-k">for</span>(c<span class="pl-k">=</span>c<span class="pl-k">%</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span>;c<span class="pl-k">++</span>)<span class="pl-k">if</span>(b[c].<span class="pl-en">hasTarget</span>(a))<span class="pl-k">return</span> b[c];<span class="pl-k">return</span> b[<span class="pl-c1">0</span>]};</td>
      </tr>
      <tr>
        <td id="L612" class="blob-num js-line-number" data-line-number="612"></td>
        <td id="LC612" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">KeyFrameAnimation</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getPrevKeyWith</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-c1">data</span>.<span class="pl-smi">hierarchy</span>[b].<span class="pl-smi">keys</span>;<span class="pl-k">for</span>(c<span class="pl-k">=</span>c<span class="pl-k">&gt;=</span><span class="pl-c1">0</span><span class="pl-k">?</span>c<span class="pl-k">:</span>c<span class="pl-k">+</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span>;c<span class="pl-k">&gt;=</span><span class="pl-c1">0</span>;c<span class="pl-k">--</span>)<span class="pl-k">if</span>(b[c].<span class="pl-en">hasTarget</span>(a))<span class="pl-k">return</span> b[c];<span class="pl-k">return</span> b[<span class="pl-smi">b</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>]};</td>
      </tr>
      <tr>
        <td id="L613" class="blob-num js-line-number" data-line-number="613"></td>
        <td id="LC613" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">CubeCamera</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.PerspectiveCamera</span>(<span class="pl-c1">90</span>,<span class="pl-c1">1</span>,a,b);<span class="pl-smi">d</span>.<span class="pl-smi">up</span>.<span class="pl-c1">set</span>(<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>);<span class="pl-smi">d</span>.<span class="pl-en">lookAt</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>));<span class="pl-c1">this</span>.<span class="pl-c1">add</span>(d);<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.PerspectiveCamera</span>(<span class="pl-c1">90</span>,<span class="pl-c1">1</span>,a,b);<span class="pl-smi">e</span>.<span class="pl-smi">up</span>.<span class="pl-c1">set</span>(<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>);<span class="pl-smi">e</span>.<span class="pl-en">lookAt</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>));<span class="pl-c1">this</span>.<span class="pl-c1">add</span>(e);<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.PerspectiveCamera</span>(<span class="pl-c1">90</span>,<span class="pl-c1">1</span>,a,b);<span class="pl-smi">f</span>.<span class="pl-smi">up</span>.<span class="pl-c1">set</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);<span class="pl-smi">f</span>.<span class="pl-en">lookAt</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>));<span class="pl-c1">this</span>.<span class="pl-c1">add</span>(f);<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.PerspectiveCamera</span>(<span class="pl-c1">90</span>,<span class="pl-c1">1</span>,a,b);<span class="pl-smi">g</span>.<span class="pl-smi">up</span>.<span class="pl-c1">set</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>);<span class="pl-smi">g</span>.<span class="pl-en">lookAt</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>));<span class="pl-c1">this</span>.<span class="pl-c1">add</span>(g);<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.PerspectiveCamera</span>(<span class="pl-c1">90</span>,</td>
      </tr>
      <tr>
        <td id="L614" class="blob-num js-line-number" data-line-number="614"></td>
        <td id="LC614" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">1</span>,a,b);<span class="pl-smi">h</span>.<span class="pl-smi">up</span>.<span class="pl-c1">set</span>(<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>);<span class="pl-smi">h</span>.<span class="pl-en">lookAt</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>));<span class="pl-c1">this</span>.<span class="pl-c1">add</span>(h);<span class="pl-k">var</span> i<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.PerspectiveCamera</span>(<span class="pl-c1">90</span>,<span class="pl-c1">1</span>,a,b);<span class="pl-smi">i</span>.<span class="pl-smi">up</span>.<span class="pl-c1">set</span>(<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>);<span class="pl-smi">i</span>.<span class="pl-en">lookAt</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>));<span class="pl-c1">this</span>.<span class="pl-c1">add</span>(i);<span class="pl-c1">this</span>.<span class="pl-smi">renderTarget</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.WebGLRenderTargetCube</span>(c,c,{format<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">RGBFormat</span>,magFilter<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">LinearFilter</span>,minFilter<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">LinearFilter</span>});<span class="pl-c1">this</span>.<span class="pl-en">updateCubeMap</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">renderTarget</span>,n<span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">generateMipmaps</span>;<span class="pl-smi">c</span>.<span class="pl-smi">generateMipmaps</span><span class="pl-k">=</span><span class="pl-c1">false</span>;<span class="pl-smi">c</span>.<span class="pl-smi">activeCubeFace</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-smi">a</span>.<span class="pl-en">render</span>(b,d,c);<span class="pl-smi">c</span>.<span class="pl-smi">activeCubeFace</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-smi">a</span>.<span class="pl-en">render</span>(b,e,c);<span class="pl-smi">c</span>.<span class="pl-smi">activeCubeFace</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L615" class="blob-num js-line-number" data-line-number="615"></td>
        <td id="LC615" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">2</span>;<span class="pl-smi">a</span>.<span class="pl-en">render</span>(b,f,c);<span class="pl-smi">c</span>.<span class="pl-smi">activeCubeFace</span><span class="pl-k">=</span><span class="pl-c1">3</span>;<span class="pl-smi">a</span>.<span class="pl-en">render</span>(b,g,c);<span class="pl-smi">c</span>.<span class="pl-smi">activeCubeFace</span><span class="pl-k">=</span><span class="pl-c1">4</span>;<span class="pl-smi">a</span>.<span class="pl-en">render</span>(b,h,c);<span class="pl-smi">c</span>.<span class="pl-smi">generateMipmaps</span><span class="pl-k">=</span>n;<span class="pl-smi">c</span>.<span class="pl-smi">activeCubeFace</span><span class="pl-k">=</span><span class="pl-c1">5</span>;<span class="pl-smi">a</span>.<span class="pl-en">render</span>(b,i,c)}};<span class="pl-c1">THREE</span>.<span class="pl-smi">CubeCamera</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-en">CombinedCamera</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>,<span class="pl-smi">g</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Camera</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-smi">fov</span><span class="pl-k">=</span>c;<span class="pl-c1">this</span>.<span class="pl-c1">left</span><span class="pl-k">=</span><span class="pl-k">-</span>a<span class="pl-k">/</span><span class="pl-c1">2</span>;<span class="pl-c1">this</span>.<span class="pl-c1">right</span><span class="pl-k">=</span>a<span class="pl-k">/</span><span class="pl-c1">2</span>;<span class="pl-c1">this</span>.<span class="pl-c1">top</span><span class="pl-k">=</span>b<span class="pl-k">/</span><span class="pl-c1">2</span>;<span class="pl-c1">this</span>.<span class="pl-c1">bottom</span><span class="pl-k">=</span><span class="pl-k">-</span>b<span class="pl-k">/</span><span class="pl-c1">2</span>;<span class="pl-c1">this</span>.<span class="pl-smi">cameraO</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.OrthographicCamera</span>(a<span class="pl-k">/-</span><span class="pl-c1">2</span>,a<span class="pl-k">/</span><span class="pl-c1">2</span>,b<span class="pl-k">/</span><span class="pl-c1">2</span>,b<span class="pl-k">/-</span><span class="pl-c1">2</span>,f,g);<span class="pl-c1">this</span>.<span class="pl-smi">cameraP</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.PerspectiveCamera</span>(c,a<span class="pl-k">/</span>b,d,e);<span class="pl-c1">this</span>.<span class="pl-smi">zoom</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-en">toPerspective</span>()};</td>
      </tr>
      <tr>
        <td id="L616" class="blob-num js-line-number" data-line-number="616"></td>
        <td id="LC616" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">CombinedCamera</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Camera</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">CombinedCamera</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">toPerspective</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">near</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">cameraP</span>.<span class="pl-smi">near</span>;<span class="pl-c1">this</span>.<span class="pl-smi">far</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">cameraP</span>.<span class="pl-smi">far</span>;<span class="pl-c1">this</span>.<span class="pl-smi">cameraP</span>.<span class="pl-smi">fov</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">fov</span><span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-smi">zoom</span>;<span class="pl-c1">this</span>.<span class="pl-smi">cameraP</span>.<span class="pl-en">updateProjectionMatrix</span>();<span class="pl-c1">this</span>.<span class="pl-smi">projectionMatrix</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">cameraP</span>.<span class="pl-smi">projectionMatrix</span>;<span class="pl-c1">this</span>.<span class="pl-smi">inPerspectiveMode</span><span class="pl-k">=</span><span class="pl-c1">true</span>;<span class="pl-c1">this</span>.<span class="pl-smi">inOrthographicMode</span><span class="pl-k">=</span><span class="pl-c1">false</span>};</td>
      </tr>
      <tr>
        <td id="L617" class="blob-num js-line-number" data-line-number="617"></td>
        <td id="LC617" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">CombinedCamera</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">toOrthographic</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">cameraP</span>.<span class="pl-smi">aspect</span>,b<span class="pl-k">=</span>(<span class="pl-c1">this</span>.<span class="pl-smi">cameraP</span>.<span class="pl-smi">near</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">cameraP</span>.<span class="pl-smi">far</span>)<span class="pl-k">/</span><span class="pl-c1">2</span>,b<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">tan</span>(<span class="pl-c1">this</span>.<span class="pl-smi">fov</span><span class="pl-k">/</span><span class="pl-c1">2</span>)<span class="pl-k">*</span>b,a<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">*</span>b<span class="pl-k">*</span>a<span class="pl-k">/</span><span class="pl-c1">2</span>,b<span class="pl-k">=</span>b<span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-smi">zoom</span>,a<span class="pl-k">=</span>a<span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-smi">zoom</span>;<span class="pl-c1">this</span>.<span class="pl-smi">cameraO</span>.<span class="pl-c1">left</span><span class="pl-k">=</span><span class="pl-k">-</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">cameraO</span>.<span class="pl-c1">right</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">cameraO</span>.<span class="pl-c1">top</span><span class="pl-k">=</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">cameraO</span>.<span class="pl-c1">bottom</span><span class="pl-k">=</span><span class="pl-k">-</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">cameraO</span>.<span class="pl-en">updateProjectionMatrix</span>();<span class="pl-c1">this</span>.<span class="pl-smi">near</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">cameraO</span>.<span class="pl-smi">near</span>;<span class="pl-c1">this</span>.<span class="pl-smi">far</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">cameraO</span>.<span class="pl-smi">far</span>;<span class="pl-c1">this</span>.<span class="pl-smi">projectionMatrix</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">cameraO</span>.<span class="pl-smi">projectionMatrix</span>;<span class="pl-c1">this</span>.<span class="pl-smi">inPerspectiveMode</span><span class="pl-k">=</span><span class="pl-c1">false</span>;<span class="pl-c1">this</span>.<span class="pl-smi">inOrthographicMode</span><span class="pl-k">=</span><span class="pl-c1">true</span>};</td>
      </tr>
      <tr>
        <td id="L618" class="blob-num js-line-number" data-line-number="618"></td>
        <td id="LC618" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">CombinedCamera</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setSize</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-smi">cameraP</span>.<span class="pl-smi">aspect</span><span class="pl-k">=</span>a<span class="pl-k">/</span>b;<span class="pl-c1">this</span>.<span class="pl-c1">left</span><span class="pl-k">=</span><span class="pl-k">-</span>a<span class="pl-k">/</span><span class="pl-c1">2</span>;<span class="pl-c1">this</span>.<span class="pl-c1">right</span><span class="pl-k">=</span>a<span class="pl-k">/</span><span class="pl-c1">2</span>;<span class="pl-c1">this</span>.<span class="pl-c1">top</span><span class="pl-k">=</span>b<span class="pl-k">/</span><span class="pl-c1">2</span>;<span class="pl-c1">this</span>.<span class="pl-c1">bottom</span><span class="pl-k">=</span><span class="pl-k">-</span>b<span class="pl-k">/</span><span class="pl-c1">2</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">CombinedCamera</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setFov</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">fov</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">inPerspectiveMode</span><span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-en">toPerspective</span>()<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-en">toOrthographic</span>()};<span class="pl-c1">THREE</span>.<span class="pl-smi">CombinedCamera</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">updateProjectionMatrix</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">inPerspectiveMode</span>)<span class="pl-c1">this</span>.<span class="pl-en">toPerspective</span>();<span class="pl-k">else</span>{<span class="pl-c1">this</span>.<span class="pl-en">toPerspective</span>();<span class="pl-c1">this</span>.<span class="pl-en">toOrthographic</span>()}};</td>
      </tr>
      <tr>
        <td id="L619" class="blob-num js-line-number" data-line-number="619"></td>
        <td id="LC619" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">CombinedCamera</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setLens</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){b<span class="pl-k">===</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-c1">24</span>);<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan</span>(b<span class="pl-k">/</span>(a<span class="pl-k">*</span><span class="pl-c1">2</span>))<span class="pl-k">*</span>(<span class="pl-c1">180</span><span class="pl-k">/</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span>);<span class="pl-c1">this</span>.<span class="pl-en">setFov</span>(c);<span class="pl-k">return</span> c};<span class="pl-c1">THREE</span>.<span class="pl-smi">CombinedCamera</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setZoom</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">zoom</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">inPerspectiveMode</span><span class="pl-k">?</span><span class="pl-c1">this</span>.<span class="pl-en">toPerspective</span>()<span class="pl-k">:</span><span class="pl-c1">this</span>.<span class="pl-en">toOrthographic</span>()};<span class="pl-c1">THREE</span>.<span class="pl-smi">CombinedCamera</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">toFrontView</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">rotation</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">rotation</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">rotation</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">rotationAutoUpdate</span><span class="pl-k">=</span><span class="pl-c1">false</span>};</td>
      </tr>
      <tr>
        <td id="L620" class="blob-num js-line-number" data-line-number="620"></td>
        <td id="LC620" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">CombinedCamera</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">toBackView</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">rotation</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">rotation</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span>;<span class="pl-c1">this</span>.<span class="pl-smi">rotation</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">rotationAutoUpdate</span><span class="pl-k">=</span><span class="pl-c1">false</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">CombinedCamera</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">toLeftView</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">rotation</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">rotation</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span><span class="pl-k">/</span><span class="pl-c1">2</span>;<span class="pl-c1">this</span>.<span class="pl-smi">rotation</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">rotationAutoUpdate</span><span class="pl-k">=</span><span class="pl-c1">false</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">CombinedCamera</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">toRightView</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">rotation</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">rotation</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span><span class="pl-k">/</span><span class="pl-c1">2</span>;<span class="pl-c1">this</span>.<span class="pl-smi">rotation</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">rotationAutoUpdate</span><span class="pl-k">=</span><span class="pl-c1">false</span>};</td>
      </tr>
      <tr>
        <td id="L621" class="blob-num js-line-number" data-line-number="621"></td>
        <td id="LC621" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">CombinedCamera</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">toTopView</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">rotation</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span><span class="pl-k">/</span><span class="pl-c1">2</span>;<span class="pl-c1">this</span>.<span class="pl-smi">rotation</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">rotation</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">rotationAutoUpdate</span><span class="pl-k">=</span><span class="pl-c1">false</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">CombinedCamera</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">toBottomView</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">rotation</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span><span class="pl-k">/</span><span class="pl-c1">2</span>;<span class="pl-c1">this</span>.<span class="pl-smi">rotation</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">rotation</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">rotationAutoUpdate</span><span class="pl-k">=</span><span class="pl-c1">false</span>};</td>
      </tr>
      <tr>
        <td id="L622" class="blob-num js-line-number" data-line-number="622"></td>
        <td id="LC622" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">CircleGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-k">var</span> a<span class="pl-k">=</span>a<span class="pl-k">||</span><span class="pl-c1">50</span>,c<span class="pl-k">=</span>c<span class="pl-k">!==</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">?</span>c<span class="pl-k">:</span><span class="pl-c1">0</span>,d<span class="pl-k">=</span>d<span class="pl-k">!==</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">?</span>d<span class="pl-k">:</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span><span class="pl-k">*</span><span class="pl-c1">2</span>,b<span class="pl-k">=</span>b<span class="pl-k">!==</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">?</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-c1">3</span>,b)<span class="pl-k">:</span><span class="pl-c1">8</span>,e,f<span class="pl-k">=</span>[];e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.UV</span>(<span class="pl-c1">0.5</span>,<span class="pl-c1">0.5</span>);<span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">push</span>(e);<span class="pl-smi">f</span>.<span class="pl-c1">push</span>(g);<span class="pl-k">for</span>(e<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">&lt;=</span>b;e<span class="pl-k">++</span>){<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-smi">h</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>a<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(c<span class="pl-k">+</span>e<span class="pl-k">/</span>b<span class="pl-k">*</span>d);<span class="pl-smi">h</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>a<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(c<span class="pl-k">+</span>e<span class="pl-k">/</span>b<span class="pl-k">*</span>d);<span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">push</span>(h);<span class="pl-smi">f</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.UV</span>((<span class="pl-smi">h</span>.<span class="pl-c1">x</span><span class="pl-k">/</span>a<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span><span class="pl-c1">2</span>,<span class="pl-k">-</span>(<span class="pl-smi">h</span>.<span class="pl-c1">y</span><span class="pl-k">/</span>a<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span><span class="pl-c1">2</span><span class="pl-k">+</span><span class="pl-c1">1</span>))}c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>);<span class="pl-k">for</span>(e<span class="pl-k">=</span><span class="pl-c1">1</span>;e<span class="pl-k">&lt;=</span>b;e<span class="pl-k">++</span>){<span class="pl-c1">this</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(e,e<span class="pl-k">+</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,[c,c,c]));<span class="pl-c1">this</span>.<span class="pl-smi">faceVertexUvs</span>[<span class="pl-c1">0</span>].<span class="pl-c1">push</span>([f[e],</td>
      </tr>
      <tr>
        <td id="L623" class="blob-num js-line-number" data-line-number="623"></td>
        <td id="LC623" class="blob-code blob-code-inner js-file-line">f[e<span class="pl-k">+</span><span class="pl-c1">1</span>],g])}<span class="pl-c1">this</span>.<span class="pl-en">computeCentroids</span>();<span class="pl-c1">this</span>.<span class="pl-en">computeFaceNormals</span>();<span class="pl-c1">this</span>.<span class="pl-smi">boundingSphere</span><span class="pl-k">=</span>{radius<span class="pl-k">:</span>a}};<span class="pl-c1">THREE</span>.<span class="pl-smi">CircleGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L624" class="blob-num js-line-number" data-line-number="624"></td>
        <td id="LC624" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">CubeGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>,<span class="pl-smi">g</span>,<span class="pl-smi">h</span>){<span class="pl-k">function</span> <span class="pl-en">i</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">g</span>,<span class="pl-smi">h</span>,<span class="pl-smi">i</span>,<span class="pl-smi">l</span>,<span class="pl-smi">m</span>){<span class="pl-k">var</span> n,o<span class="pl-k">=</span>d<span class="pl-k">||</span><span class="pl-c1">1</span>,p<span class="pl-k">=</span>e<span class="pl-k">||</span><span class="pl-c1">1</span>,q<span class="pl-k">=</span>h<span class="pl-k">/</span><span class="pl-c1">2</span>,r<span class="pl-k">=</span>i<span class="pl-k">/</span><span class="pl-c1">2</span>,t<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">length</span>;<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>x<span class="pl-pds">&quot;</span></span><span class="pl-k">&amp;&amp;</span>b<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>y<span class="pl-pds">&quot;</span></span><span class="pl-k">||</span>a<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>y<span class="pl-pds">&quot;</span></span><span class="pl-k">&amp;&amp;</span>b<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>x<span class="pl-pds">&quot;</span></span>)n<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>z<span class="pl-pds">&quot;</span></span>;<span class="pl-k">else</span> <span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>x<span class="pl-pds">&quot;</span></span><span class="pl-k">&amp;&amp;</span>b<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>z<span class="pl-pds">&quot;</span></span><span class="pl-k">||</span>a<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>z<span class="pl-pds">&quot;</span></span><span class="pl-k">&amp;&amp;</span>b<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>x<span class="pl-pds">&quot;</span></span>){n<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>y<span class="pl-pds">&quot;</span></span>;p<span class="pl-k">=</span>f<span class="pl-k">||</span><span class="pl-c1">1</span>}<span class="pl-k">else</span> <span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>z<span class="pl-pds">&quot;</span></span><span class="pl-k">&amp;&amp;</span>b<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>y<span class="pl-pds">&quot;</span></span><span class="pl-k">||</span>a<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>y<span class="pl-pds">&quot;</span></span><span class="pl-k">&amp;&amp;</span>b<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>z<span class="pl-pds">&quot;</span></span>){n<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>x<span class="pl-pds">&quot;</span></span>;o<span class="pl-k">=</span>f<span class="pl-k">||</span><span class="pl-c1">1</span>}<span class="pl-k">var</span> u<span class="pl-k">=</span>o<span class="pl-k">+</span><span class="pl-c1">1</span>,<span class="pl-c1">B</span><span class="pl-k">=</span>p<span class="pl-k">+</span><span class="pl-c1">1</span>,$<span class="pl-k">=</span>h<span class="pl-k">/</span>o,<span class="pl-c1">Y</span><span class="pl-k">=</span>i<span class="pl-k">/</span>p,<span class="pl-c1">N</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-c1">N</span>[n]<span class="pl-k">=</span>l<span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">?</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-k">for</span>(h<span class="pl-k">=</span><span class="pl-c1">0</span>;h<span class="pl-k">&lt;</span><span class="pl-c1">B</span>;h<span class="pl-k">++</span>)<span class="pl-k">for</span>(i<span class="pl-k">=</span><span class="pl-c1">0</span>;i<span class="pl-k">&lt;</span>u;i<span class="pl-k">++</span>){<span class="pl-k">var</span> ea<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;ea[a]<span class="pl-k">=</span>(i<span class="pl-k">*</span>$<span class="pl-k">-</span>q)<span class="pl-k">*</span>c;ea[b]<span class="pl-k">=</span>(h<span class="pl-k">*</span><span class="pl-c1">Y</span><span class="pl-k">-</span>r)<span class="pl-k">*</span>g;ea[n]<span class="pl-k">=</span>l;<span class="pl-smi">j</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">push</span>(ea)}<span class="pl-k">for</span>(h<span class="pl-k">=</span><span class="pl-c1">0</span>;h<span class="pl-k">&lt;</span>p;h<span class="pl-k">++</span>)<span class="pl-k">for</span>(i<span class="pl-k">=</span><span class="pl-c1">0</span>;i<span class="pl-k">&lt;</span>o;i<span class="pl-k">++</span>){a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Face4</span>(i<span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L625" class="blob-num js-line-number" data-line-number="625"></td>
        <td id="LC625" class="blob-code blob-code-inner js-file-line">u<span class="pl-k">*</span>h<span class="pl-k">+</span>t,i<span class="pl-k">+</span>u<span class="pl-k">*</span>(h<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">+</span>t,i<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">+</span>u<span class="pl-k">*</span>(h<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">+</span>t,i<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">+</span>u<span class="pl-k">*</span>h<span class="pl-k">+</span>t);<span class="pl-smi">a</span>.<span class="pl-smi">normal</span>.<span class="pl-en">copy</span>(<span class="pl-c1">N</span>);<span class="pl-smi">a</span>.<span class="pl-smi">vertexNormals</span>.<span class="pl-c1">push</span>(<span class="pl-c1">N</span>.<span class="pl-en">clone</span>(),<span class="pl-c1">N</span>.<span class="pl-en">clone</span>(),<span class="pl-c1">N</span>.<span class="pl-en">clone</span>(),<span class="pl-c1">N</span>.<span class="pl-en">clone</span>());<span class="pl-smi">a</span>.<span class="pl-smi">materialIndex</span><span class="pl-k">=</span>m;<span class="pl-smi">j</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">push</span>(a);<span class="pl-smi">j</span>.<span class="pl-smi">faceVertexUvs</span>[<span class="pl-c1">0</span>].<span class="pl-c1">push</span>([<span class="pl-k">new</span> <span class="pl-en">THREE.UV</span>(i<span class="pl-k">/</span>o,<span class="pl-c1">1</span><span class="pl-k">-</span>h<span class="pl-k">/</span>p),<span class="pl-k">new</span> <span class="pl-en">THREE.UV</span>(i<span class="pl-k">/</span>o,<span class="pl-c1">1</span><span class="pl-k">-</span>(h<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span>p),<span class="pl-k">new</span> <span class="pl-en">THREE.UV</span>((i<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span>o,<span class="pl-c1">1</span><span class="pl-k">-</span>(h<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span>p),<span class="pl-k">new</span> <span class="pl-en">THREE.UV</span>((i<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span>o,<span class="pl-c1">1</span><span class="pl-k">-</span>h<span class="pl-k">/</span>p)])}}<span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-k">var</span> j<span class="pl-k">=</span><span class="pl-c1">this</span>,l<span class="pl-k">=</span>a<span class="pl-k">/</span><span class="pl-c1">2</span>,m<span class="pl-k">=</span>b<span class="pl-k">/</span><span class="pl-c1">2</span>,n<span class="pl-k">=</span>c<span class="pl-k">/</span><span class="pl-c1">2</span>,p,o,q,r,t,<span class="pl-c1">B</span>;<span class="pl-k">if</span>(g<span class="pl-k">!==</span><span class="pl-k">void</span> <span class="pl-c1">0</span>){<span class="pl-k">if</span>(g <span class="pl-k">instanceof</span> <span class="pl-c1">Array</span>)<span class="pl-c1">this</span>.<span class="pl-smi">materials</span><span class="pl-k">=</span>g;<span class="pl-k">else</span>{<span class="pl-c1">this</span>.<span class="pl-smi">materials</span><span class="pl-k">=</span>[];<span class="pl-k">for</span>(p<span class="pl-k">=</span><span class="pl-c1">0</span>;p<span class="pl-k">&lt;</span><span class="pl-c1">6</span>;p<span class="pl-k">++</span>)<span class="pl-c1">this</span>.<span class="pl-smi">materials</span>.<span class="pl-c1">push</span>(g)}p<span class="pl-k">=</span><span class="pl-c1">0</span>;r<span class="pl-k">=</span><span class="pl-c1">1</span>;o<span class="pl-k">=</span><span class="pl-c1">2</span>;t<span class="pl-k">=</span><span class="pl-c1">3</span>;q<span class="pl-k">=</span><span class="pl-c1">4</span>;<span class="pl-c1">B</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L626" class="blob-num js-line-number" data-line-number="626"></td>
        <td id="LC626" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">5</span>}<span class="pl-k">else</span> <span class="pl-c1">this</span>.<span class="pl-smi">materials</span><span class="pl-k">=</span>[];<span class="pl-c1">this</span>.<span class="pl-smi">sides</span><span class="pl-k">=</span>{px<span class="pl-k">:</span><span class="pl-c1">true</span>,nx<span class="pl-k">:</span><span class="pl-c1">true</span>,py<span class="pl-k">:</span><span class="pl-c1">true</span>,ny<span class="pl-k">:</span><span class="pl-c1">true</span>,pz<span class="pl-k">:</span><span class="pl-c1">true</span>,nz<span class="pl-k">:</span><span class="pl-c1">true</span>};<span class="pl-k">if</span>(h<span class="pl-k">!=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> u <span class="pl-k">in</span> h)<span class="pl-c1">this</span>.<span class="pl-smi">sides</span>[u]<span class="pl-k">!==</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">this</span>.<span class="pl-smi">sides</span>[u]<span class="pl-k">=</span>h[u]);<span class="pl-c1">this</span>.<span class="pl-smi">sides</span>.<span class="pl-smi">px</span><span class="pl-k">&amp;&amp;</span><span class="pl-en">i</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>z<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>y<span class="pl-pds">&quot;</span></span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,c,b,l,p);<span class="pl-c1">this</span>.<span class="pl-smi">sides</span>.<span class="pl-smi">nx</span><span class="pl-k">&amp;&amp;</span><span class="pl-en">i</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>z<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>y<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,c,b,<span class="pl-k">-</span>l,r);<span class="pl-c1">this</span>.<span class="pl-smi">sides</span>.<span class="pl-smi">py</span><span class="pl-k">&amp;&amp;</span><span class="pl-en">i</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>x<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>z<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,a,c,m,o);<span class="pl-c1">this</span>.<span class="pl-smi">sides</span>.<span class="pl-smi">ny</span><span class="pl-k">&amp;&amp;</span><span class="pl-en">i</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>x<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>z<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,a,c,<span class="pl-k">-</span>m,t);<span class="pl-c1">this</span>.<span class="pl-smi">sides</span>.<span class="pl-smi">pz</span><span class="pl-k">&amp;&amp;</span><span class="pl-en">i</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>x<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>y<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,a,b,n,q);<span class="pl-c1">this</span>.<span class="pl-smi">sides</span>.<span class="pl-smi">nz</span><span class="pl-k">&amp;&amp;</span><span class="pl-en">i</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>x<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>y<span class="pl-pds">&quot;</span></span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,a,b,<span class="pl-k">-</span>n,<span class="pl-c1">B</span>);<span class="pl-c1">this</span>.<span class="pl-en">computeCentroids</span>();<span class="pl-c1">this</span>.<span class="pl-en">mergeVertices</span>()};<span class="pl-c1">THREE</span>.<span class="pl-smi">CubeGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L627" class="blob-num js-line-number" data-line-number="627"></td>
        <td id="LC627" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">CylinderGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-k">var</span> a<span class="pl-k">=</span>a<span class="pl-k">!==</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-c1">20</span>,b<span class="pl-k">=</span>b<span class="pl-k">!==</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-c1">20</span>,c<span class="pl-k">=</span>c<span class="pl-k">!==</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">?</span>c<span class="pl-k">:</span><span class="pl-c1">100</span>,g<span class="pl-k">=</span>c<span class="pl-k">/</span><span class="pl-c1">2</span>,d<span class="pl-k">=</span>d<span class="pl-k">||</span><span class="pl-c1">8</span>,e<span class="pl-k">=</span>e<span class="pl-k">||</span><span class="pl-c1">1</span>,h,i,j<span class="pl-k">=</span>[],l<span class="pl-k">=</span>[];<span class="pl-k">for</span>(i<span class="pl-k">=</span><span class="pl-c1">0</span>;i<span class="pl-k">&lt;=</span>e;i<span class="pl-k">++</span>){<span class="pl-k">var</span> m<span class="pl-k">=</span>[],n<span class="pl-k">=</span>[],p<span class="pl-k">=</span>i<span class="pl-k">/</span>e,o<span class="pl-k">=</span>p<span class="pl-k">*</span>(b<span class="pl-k">-</span>a)<span class="pl-k">+</span>a;<span class="pl-k">for</span>(h<span class="pl-k">=</span><span class="pl-c1">0</span>;h<span class="pl-k">&lt;=</span>d;h<span class="pl-k">++</span>){<span class="pl-k">var</span> q<span class="pl-k">=</span>h<span class="pl-k">/</span>d,r<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-smi">r</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>o<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(q<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span><span class="pl-k">*</span><span class="pl-c1">2</span>);<span class="pl-smi">r</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-k">-</span>p<span class="pl-k">*</span>c<span class="pl-k">+</span>g;<span class="pl-smi">r</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>o<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(q<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span><span class="pl-k">*</span><span class="pl-c1">2</span>);<span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">push</span>(r);<span class="pl-smi">m</span>.<span class="pl-c1">push</span>(<span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>);<span class="pl-smi">n</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.UV</span>(q,<span class="pl-c1">1</span><span class="pl-k">-</span>p))}<span class="pl-smi">j</span>.<span class="pl-c1">push</span>(m);<span class="pl-smi">l</span>.<span class="pl-c1">push</span>(n)}c<span class="pl-k">=</span>(b<span class="pl-k">-</span>a)<span class="pl-k">/</span>c;<span class="pl-k">for</span>(h<span class="pl-k">=</span><span class="pl-c1">0</span>;h<span class="pl-k">&lt;</span>d;h<span class="pl-k">++</span>){<span class="pl-k">if</span>(a<span class="pl-k">!==</span><span class="pl-c1">0</span>){m<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>[j[<span class="pl-c1">0</span>][h]].<span class="pl-en">clone</span>();n<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L628" class="blob-num js-line-number" data-line-number="628"></td>
        <td id="LC628" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>[j[<span class="pl-c1">0</span>][h<span class="pl-k">+</span><span class="pl-c1">1</span>]].<span class="pl-en">clone</span>()}<span class="pl-k">else</span>{m<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>[j[<span class="pl-c1">1</span>][h]].<span class="pl-en">clone</span>();n<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>[j[<span class="pl-c1">1</span>][h<span class="pl-k">+</span><span class="pl-c1">1</span>]].<span class="pl-en">clone</span>()}<span class="pl-smi">m</span>.<span class="pl-en">setY</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-smi">m</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">m</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">m</span>.<span class="pl-c1">z</span><span class="pl-k">*</span><span class="pl-smi">m</span>.<span class="pl-c1">z</span>)<span class="pl-k">*</span>c).<span class="pl-c1">normalize</span>();<span class="pl-smi">n</span>.<span class="pl-en">setY</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-smi">n</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">n</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">n</span>.<span class="pl-c1">z</span><span class="pl-k">*</span><span class="pl-smi">n</span>.<span class="pl-c1">z</span>)<span class="pl-k">*</span>c).<span class="pl-c1">normalize</span>();<span class="pl-k">for</span>(i<span class="pl-k">=</span><span class="pl-c1">0</span>;i<span class="pl-k">&lt;</span>e;i<span class="pl-k">++</span>){<span class="pl-k">var</span> p<span class="pl-k">=</span>j[i][h],o<span class="pl-k">=</span>j[i<span class="pl-k">+</span><span class="pl-c1">1</span>][h],q<span class="pl-k">=</span>j[i<span class="pl-k">+</span><span class="pl-c1">1</span>][h<span class="pl-k">+</span><span class="pl-c1">1</span>],r<span class="pl-k">=</span>j[i][h<span class="pl-k">+</span><span class="pl-c1">1</span>],t<span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-en">clone</span>(),<span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-en">clone</span>(),u<span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-en">clone</span>(),s<span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-en">clone</span>(),z<span class="pl-k">=</span>l[i][h].<span class="pl-en">clone</span>(),<span class="pl-c1">A</span><span class="pl-k">=</span>l[i<span class="pl-k">+</span><span class="pl-c1">1</span>][h].<span class="pl-en">clone</span>(),v<span class="pl-k">=</span>l[i<span class="pl-k">+</span><span class="pl-c1">1</span>][h<span class="pl-k">+</span><span class="pl-c1">1</span>].<span class="pl-en">clone</span>(),y<span class="pl-k">=</span>l[i][h<span class="pl-k">+</span><span class="pl-c1">1</span>].<span class="pl-en">clone</span>();<span class="pl-c1">this</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Face4</span>(p,o,q,r,[t,<span class="pl-c1">B</span>,u,s]));<span class="pl-c1">this</span>.<span class="pl-smi">faceVertexUvs</span>[<span class="pl-c1">0</span>].<span class="pl-c1">push</span>([z,<span class="pl-c1">A</span>,v,y])}}<span class="pl-k">if</span>(<span class="pl-k">!</span>f<span class="pl-k">&amp;&amp;</span>a<span class="pl-k">&gt;</span></td>
      </tr>
      <tr>
        <td id="L629" class="blob-num js-line-number" data-line-number="629"></td>
        <td id="LC629" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>){<span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,g,<span class="pl-c1">0</span>));<span class="pl-k">for</span>(h<span class="pl-k">=</span><span class="pl-c1">0</span>;h<span class="pl-k">&lt;</span>d;h<span class="pl-k">++</span>){p<span class="pl-k">=</span>j[<span class="pl-c1">0</span>][h];o<span class="pl-k">=</span>j[<span class="pl-c1">0</span>][h<span class="pl-k">+</span><span class="pl-c1">1</span>];q<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>;t<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>);<span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>);u<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>);z<span class="pl-k">=</span>l[<span class="pl-c1">0</span>][h].<span class="pl-en">clone</span>();<span class="pl-c1">A</span><span class="pl-k">=</span>l[<span class="pl-c1">0</span>][h<span class="pl-k">+</span><span class="pl-c1">1</span>].<span class="pl-en">clone</span>();v<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.UV</span>(<span class="pl-c1">A</span>.<span class="pl-smi">u</span>,<span class="pl-c1">0</span>);<span class="pl-c1">this</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(p,o,q,[t,<span class="pl-c1">B</span>,u]));<span class="pl-c1">this</span>.<span class="pl-smi">faceVertexUvs</span>[<span class="pl-c1">0</span>].<span class="pl-c1">push</span>([z,<span class="pl-c1">A</span>,v])}}<span class="pl-k">if</span>(<span class="pl-k">!</span>f<span class="pl-k">&amp;&amp;</span>b<span class="pl-k">&gt;</span><span class="pl-c1">0</span>){<span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-k">-</span>g,<span class="pl-c1">0</span>));<span class="pl-k">for</span>(h<span class="pl-k">=</span><span class="pl-c1">0</span>;h<span class="pl-k">&lt;</span>d;h<span class="pl-k">++</span>){p<span class="pl-k">=</span>j[i][h<span class="pl-k">+</span><span class="pl-c1">1</span>];o<span class="pl-k">=</span>j[i][h];q<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>;t<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>);<span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,</td>
      </tr>
      <tr>
        <td id="L630" class="blob-num js-line-number" data-line-number="630"></td>
        <td id="LC630" class="blob-code blob-code-inner js-file-line"><span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>);u<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>);z<span class="pl-k">=</span>l[i][h<span class="pl-k">+</span><span class="pl-c1">1</span>].<span class="pl-en">clone</span>();<span class="pl-c1">A</span><span class="pl-k">=</span>l[i][h].<span class="pl-en">clone</span>();v<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.UV</span>(<span class="pl-c1">A</span>.<span class="pl-smi">u</span>,<span class="pl-c1">1</span>);<span class="pl-c1">this</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(p,o,q,[t,<span class="pl-c1">B</span>,u]));<span class="pl-c1">this</span>.<span class="pl-smi">faceVertexUvs</span>[<span class="pl-c1">0</span>].<span class="pl-c1">push</span>([z,<span class="pl-c1">A</span>,v])}}<span class="pl-c1">this</span>.<span class="pl-en">computeCentroids</span>();<span class="pl-c1">this</span>.<span class="pl-en">computeFaceNormals</span>()};<span class="pl-c1">THREE</span>.<span class="pl-smi">CylinderGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L631" class="blob-num js-line-number" data-line-number="631"></td>
        <td id="LC631" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">ExtrudeGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">if</span>(<span class="pl-k">typeof</span> a<span class="pl-k">!==</span><span class="pl-s"><span class="pl-pds">&quot;</span>undefined<span class="pl-pds">&quot;</span></span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);a<span class="pl-k">=</span>a <span class="pl-k">instanceof</span> <span class="pl-c1">Array</span><span class="pl-k">?</span>a<span class="pl-k">:</span>[a];<span class="pl-c1">this</span>.<span class="pl-smi">shapebb</span><span class="pl-k">=</span>a[<span class="pl-smi">a</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>].<span class="pl-en">getBoundingBox</span>();<span class="pl-c1">this</span>.<span class="pl-en">addShapeList</span>(a,b);<span class="pl-c1">this</span>.<span class="pl-en">computeCentroids</span>();<span class="pl-c1">this</span>.<span class="pl-en">computeFaceNormals</span>()}};<span class="pl-c1">THREE</span>.<span class="pl-smi">ExtrudeGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">ExtrudeGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">addShapeList</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>,d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span>c;d<span class="pl-k">++</span>)<span class="pl-c1">this</span>.<span class="pl-en">addShape</span>(a[d],b)};</td>
      </tr>
      <tr>
        <td id="L632" class="blob-num js-line-number" data-line-number="632"></td>
        <td id="LC632" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ExtrudeGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">addShape</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">function</span> <span class="pl-en">c</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){b<span class="pl-k">||</span><span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>die<span class="pl-pds">&quot;</span></span>);<span class="pl-k">return</span> <span class="pl-smi">b</span>.<span class="pl-en">clone</span>().<span class="pl-en">multiplyScalar</span>(c).<span class="pl-en">addSelf</span>(a)}function d(a,b,c){var d=THREE.ExtrudeGeometry.__v1,e=THREE.ExtrudeGeometry.__v2,f=THREE.ExtrudeGeometry.__v3,g=THREE.ExtrudeGeometry.__v4,h=THREE.ExtrudeGeometry.__v5,i=THREE.ExtrudeGeometry.__v6;d.set(a.x-b.x,a.y-b.y);e.set(a.x-c.x,a.y-c.y);d=d.normalize();e=e.normalize();f.set(-d.y,d.x);g.set(e.y,-e.x);h.copy(a).addSelf(f);i.copy(a).addSelf(g);if(h.equals(i))return g.clone();</td>
      </tr>
      <tr>
        <td id="L633" class="blob-num js-line-number" data-line-number="633"></td>
        <td id="LC633" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">h</span>.<span class="pl-en">copy</span>(b).<span class="pl-en">addSelf</span>(f);<span class="pl-smi">i</span>.<span class="pl-en">copy</span>(c).<span class="pl-en">addSelf</span>(g);f<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-en">dot</span>(g);g<span class="pl-k">=</span><span class="pl-smi">i</span>.<span class="pl-en">subSelf</span>(h).<span class="pl-en">dot</span>(g);<span class="pl-k">if</span>(f<span class="pl-k">===</span><span class="pl-c1">0</span>){<span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>Either infinite or no solutions!<span class="pl-pds">&quot;</span></span>);g<span class="pl-k">===</span><span class="pl-c1">0</span><span class="pl-k">?</span><span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>Its finite solutions.<span class="pl-pds">&quot;</span></span>)<span class="pl-k">:</span><span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>Too bad, no solutions.<span class="pl-pds">&quot;</span></span>)}g<span class="pl-k">=</span>g<span class="pl-k">/</span>f;<span class="pl-k">if</span>(g<span class="pl-k">&lt;</span><span class="pl-c1">0</span>){b<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(<span class="pl-smi">b</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>,<span class="pl-smi">b</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>);a<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>,<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>);b<span class="pl-k">&gt;</span>a<span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span>a<span class="pl-k">+</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span><span class="pl-k">*</span><span class="pl-c1">2</span>);c<span class="pl-k">=</span>(b<span class="pl-k">+</span>a)<span class="pl-k">/</span><span class="pl-c1">2</span>;a<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(c);c<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(c);<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(a,c)}<span class="pl-k">return</span> <span class="pl-smi">d</span>.<span class="pl-en">multiplyScalar</span>(g).<span class="pl-en">addSelf</span>(h).<span class="pl-en">subSelf</span>(a).<span class="pl-en">clone</span>()}function e(c,d){var e,f;for(N=c.length;--N&gt;=0;){e=N;f=N-1;f&lt;0&amp;&amp;(f=</td>
      </tr>
      <tr>
        <td id="L634" class="blob-num js-line-number" data-line-number="634"></td>
        <td id="LC634" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">c</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-c1">0</span>,h<span class="pl-k">=</span>n<span class="pl-k">+</span>l<span class="pl-k">*</span><span class="pl-c1">2</span>,g<span class="pl-k">=</span><span class="pl-c1">0</span>;g<span class="pl-k">&lt;</span>h;g<span class="pl-k">++</span>){<span class="pl-k">var</span> i<span class="pl-k">=</span><span class="pl-c1">R</span><span class="pl-k">*</span>g,j<span class="pl-k">=</span><span class="pl-c1">R</span><span class="pl-k">*</span>(g<span class="pl-k">+</span><span class="pl-c1">1</span>),m<span class="pl-k">=</span>d<span class="pl-k">+</span>e<span class="pl-k">+</span>i,i<span class="pl-k">=</span>d<span class="pl-k">+</span>f<span class="pl-k">+</span>i,o<span class="pl-k">=</span>d<span class="pl-k">+</span>f<span class="pl-k">+</span>j,j<span class="pl-k">=</span>d<span class="pl-k">+</span>e<span class="pl-k">+</span>j,p<span class="pl-k">=</span>c,q<span class="pl-k">=</span>g,r<span class="pl-k">=</span>h,s<span class="pl-k">=</span>e,u<span class="pl-k">=</span>f,m<span class="pl-k">=</span>m<span class="pl-k">+</span><span class="pl-c1">H</span>,i<span class="pl-k">=</span>i<span class="pl-k">+</span><span class="pl-c1">H</span>,o<span class="pl-k">=</span>o<span class="pl-k">+</span><span class="pl-c1">H</span>,j<span class="pl-k">=</span>j<span class="pl-k">+</span><span class="pl-c1">H</span>;<span class="pl-c1">G</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Face4</span>(m,i,o,j,<span class="pl-c1">null</span>,<span class="pl-c1">null</span>,t));m<span class="pl-k">=</span><span class="pl-c1">B</span>.<span class="pl-en">generateSideWallUV</span>(<span class="pl-c1">G</span>,a,p,b,m,i,o,j,q,r,s,u);<span class="pl-c1">G</span>.<span class="pl-smi">faceVertexUvs</span>[<span class="pl-c1">0</span>].<span class="pl-c1">push</span>(m)}}}function f(a,b,c){G.vertices.push(new THREE.Vector3(a,b,c))}function g(c,d,e,f){c=c+H;d=d+H;e=e+H;G.faces.push(new THREE.Face3(c,d,e,null,null,r));c=f?B.generateBottomUV(G,a,b,c,d,e):B.generateTopUV(G,a,b,c,d,e);G.faceVertexUvs[0].push(c)}</td>
      </tr>
      <tr>
        <td id="L635" class="blob-num js-line-number" data-line-number="635"></td>
        <td id="LC635" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">amount</span><span class="pl-k">!==</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">?</span><span class="pl-smi">b</span>.<span class="pl-smi">amount</span><span class="pl-k">:</span><span class="pl-c1">100</span>,i<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">bevelThickness</span><span class="pl-k">!==</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">?</span><span class="pl-smi">b</span>.<span class="pl-smi">bevelThickness</span><span class="pl-k">:</span><span class="pl-c1">6</span>,j<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">bevelSize</span><span class="pl-k">!==</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">?</span><span class="pl-smi">b</span>.<span class="pl-smi">bevelSize</span><span class="pl-k">:</span>i<span class="pl-k">-</span><span class="pl-c1">2</span>,l<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">bevelSegments</span><span class="pl-k">!==</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">?</span><span class="pl-smi">b</span>.<span class="pl-smi">bevelSegments</span><span class="pl-k">:</span><span class="pl-c1">3</span>,m<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">bevelEnabled</span><span class="pl-k">!==</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">?</span><span class="pl-smi">b</span>.<span class="pl-smi">bevelEnabled</span><span class="pl-k">:</span><span class="pl-c1">true</span>,n<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">steps</span><span class="pl-k">!==</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">?</span><span class="pl-smi">b</span>.<span class="pl-smi">steps</span><span class="pl-k">:</span><span class="pl-c1">1</span>,p<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">extrudePath</span>,o,q<span class="pl-k">=</span><span class="pl-c1">false</span>,r<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">material</span>,t<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">extrudeMaterial</span>,<span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">UVGenerator</span><span class="pl-k">!==</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">?</span><span class="pl-smi">b</span>.<span class="pl-smi">UVGenerator</span><span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">ExtrudeGeometry</span>.<span class="pl-smi">WorldUVGenerator</span>,u,s,z,<span class="pl-c1">A</span>;<span class="pl-k">if</span>(p){o<span class="pl-k">=</span><span class="pl-smi">p</span>.<span class="pl-en">getSpacedPoints</span>(n);q<span class="pl-k">=</span><span class="pl-c1">true</span>;m<span class="pl-k">=</span><span class="pl-c1">false</span>;u<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">frames</span><span class="pl-k">!==</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">?</span><span class="pl-smi">b</span>.<span class="pl-c1">frames</span><span class="pl-k">:</span><span class="pl-k">new</span> <span class="pl-en">THREE.TubeGeometry.FrenetFrames</span>(p,n,</td>
      </tr>
      <tr>
        <td id="L636" class="blob-num js-line-number" data-line-number="636"></td>
        <td id="LC636" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">false</span>);s<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;z<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-c1">A</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>}<span class="pl-k">if</span>(<span class="pl-k">!</span>m)j<span class="pl-k">=</span>i<span class="pl-k">=</span>l<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> v,y,<span class="pl-c1">C</span>,<span class="pl-c1">G</span><span class="pl-k">=</span><span class="pl-c1">this</span>,<span class="pl-c1">H</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">length</span>,p<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-en">extractPoints</span>(),<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-smi">p</span>.<span class="pl-c1">shape</span>,p<span class="pl-k">=</span><span class="pl-smi">p</span>.<span class="pl-smi">holes</span>,<span class="pl-c1">E</span><span class="pl-k">=</span><span class="pl-k">!</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Shape</span>.<span class="pl-smi">Utils</span>.<span class="pl-en">isClockWise</span>(<span class="pl-c1">J</span>);<span class="pl-k">if</span>(<span class="pl-c1">E</span>){<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-c1">J</span>.<span class="pl-c1">reverse</span>();y<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-smi">p</span>.<span class="pl-c1">length</span>;y<span class="pl-k">&lt;</span><span class="pl-c1">C</span>;y<span class="pl-k">++</span>){v<span class="pl-k">=</span>p[y];<span class="pl-c1">THREE</span>.<span class="pl-smi">Shape</span>.<span class="pl-smi">Utils</span>.<span class="pl-en">isClockWise</span>(v)<span class="pl-k">&amp;&amp;</span>(p[y]<span class="pl-k">=</span><span class="pl-smi">v</span>.<span class="pl-c1">reverse</span>())}<span class="pl-c1">E</span><span class="pl-k">=</span><span class="pl-c1">false</span>}<span class="pl-k">var</span> <span class="pl-c1">M</span><span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Shape</span>.<span class="pl-smi">Utils</span>.<span class="pl-en">triangulateShape</span>(<span class="pl-c1">J</span>,p),<span class="pl-c1">E</span><span class="pl-k">=</span><span class="pl-c1">J</span>;y<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-smi">p</span>.<span class="pl-c1">length</span>;y<span class="pl-k">&lt;</span><span class="pl-c1">C</span>;y<span class="pl-k">++</span>){v<span class="pl-k">=</span>p[y];<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-c1">J</span>.<span class="pl-c1">concat</span>(v)}<span class="pl-k">var</span> <span class="pl-c1">K</span>,<span class="pl-c1">F</span>,<span class="pl-c1">I</span>,<span class="pl-c1">L</span>,<span class="pl-c1">R</span><span class="pl-k">=</span><span class="pl-c1">J</span>.<span class="pl-c1">length</span>,$<span class="pl-k">=</span><span class="pl-c1">M</span>.<span class="pl-c1">length</span>,<span class="pl-c1">Y</span><span class="pl-k">=</span>[],<span class="pl-c1">N</span><span class="pl-k">=</span><span class="pl-c1">0</span>,ea<span class="pl-k">=</span><span class="pl-c1">E</span>.<span class="pl-c1">length</span>;<span class="pl-c1">K</span><span class="pl-k">=</span>ea<span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-k">for</span>(<span class="pl-c1">F</span><span class="pl-k">=</span><span class="pl-c1">N</span><span class="pl-k">+</span><span class="pl-c1">1</span>;<span class="pl-c1">N</span><span class="pl-k">&lt;</span>ea;<span class="pl-c1">N</span><span class="pl-k">++</span>,<span class="pl-c1">K</span><span class="pl-k">++</span>,<span class="pl-c1">F</span><span class="pl-k">++</span>){<span class="pl-c1">K</span><span class="pl-k">===</span></td>
      </tr>
      <tr>
        <td id="L637" class="blob-num js-line-number" data-line-number="637"></td>
        <td id="LC637" class="blob-code blob-code-inner js-file-line">ea<span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">K</span><span class="pl-k">=</span><span class="pl-c1">0</span>);<span class="pl-c1">F</span><span class="pl-k">===</span>ea<span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">F</span><span class="pl-k">=</span><span class="pl-c1">0</span>);<span class="pl-c1">Y</span>[<span class="pl-c1">N</span>]<span class="pl-k">=</span><span class="pl-en">d</span>(<span class="pl-c1">E</span>[<span class="pl-c1">N</span>],<span class="pl-c1">E</span>[<span class="pl-c1">K</span>],<span class="pl-c1">E</span>[<span class="pl-c1">F</span>])}<span class="pl-k">var</span> <span class="pl-c1">Q</span><span class="pl-k">=</span>[],qa,la<span class="pl-k">=</span><span class="pl-c1">Y</span>.<span class="pl-c1">concat</span>();y<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-smi">p</span>.<span class="pl-c1">length</span>;y<span class="pl-k">&lt;</span><span class="pl-c1">C</span>;y<span class="pl-k">++</span>){v<span class="pl-k">=</span>p[y];qa<span class="pl-k">=</span>[];<span class="pl-c1">N</span><span class="pl-k">=</span><span class="pl-c1">0</span>;ea<span class="pl-k">=</span><span class="pl-smi">v</span>.<span class="pl-c1">length</span>;<span class="pl-c1">K</span><span class="pl-k">=</span>ea<span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-k">for</span>(<span class="pl-c1">F</span><span class="pl-k">=</span><span class="pl-c1">N</span><span class="pl-k">+</span><span class="pl-c1">1</span>;<span class="pl-c1">N</span><span class="pl-k">&lt;</span>ea;<span class="pl-c1">N</span><span class="pl-k">++</span>,<span class="pl-c1">K</span><span class="pl-k">++</span>,<span class="pl-c1">F</span><span class="pl-k">++</span>){<span class="pl-c1">K</span><span class="pl-k">===</span>ea<span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">K</span><span class="pl-k">=</span><span class="pl-c1">0</span>);<span class="pl-c1">F</span><span class="pl-k">===</span>ea<span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">F</span><span class="pl-k">=</span><span class="pl-c1">0</span>);qa[<span class="pl-c1">N</span>]<span class="pl-k">=</span><span class="pl-en">d</span>(v[<span class="pl-c1">N</span>],v[<span class="pl-c1">K</span>],v[<span class="pl-c1">F</span>])}<span class="pl-c1">Q</span>.<span class="pl-c1">push</span>(qa);la<span class="pl-k">=</span><span class="pl-smi">la</span>.<span class="pl-c1">concat</span>(qa)}<span class="pl-k">for</span>(<span class="pl-c1">K</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">K</span><span class="pl-k">&lt;</span>l;<span class="pl-c1">K</span><span class="pl-k">++</span>){v<span class="pl-k">=</span><span class="pl-c1">K</span><span class="pl-k">/</span>l;<span class="pl-c1">I</span><span class="pl-k">=</span>i<span class="pl-k">*</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>v);<span class="pl-c1">F</span><span class="pl-k">=</span>j<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(v<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span><span class="pl-k">/</span><span class="pl-c1">2</span>);<span class="pl-c1">N</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(ea<span class="pl-k">=</span><span class="pl-c1">E</span>.<span class="pl-c1">length</span>;<span class="pl-c1">N</span><span class="pl-k">&lt;</span>ea;<span class="pl-c1">N</span><span class="pl-k">++</span>){<span class="pl-c1">L</span><span class="pl-k">=</span><span class="pl-en">c</span>(<span class="pl-c1">E</span>[<span class="pl-c1">N</span>],<span class="pl-c1">Y</span>[<span class="pl-c1">N</span>],<span class="pl-c1">F</span>);<span class="pl-en">f</span>(<span class="pl-c1">L</span>.<span class="pl-c1">x</span>,<span class="pl-c1">L</span>.<span class="pl-c1">y</span>,<span class="pl-k">-</span><span class="pl-c1">I</span>)}y<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-smi">p</span>.<span class="pl-c1">length</span>;y<span class="pl-k">&lt;</span><span class="pl-c1">C</span>;y<span class="pl-k">++</span>){v<span class="pl-k">=</span>p[y];qa<span class="pl-k">=</span><span class="pl-c1">Q</span>[y];<span class="pl-c1">N</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(ea<span class="pl-k">=</span><span class="pl-smi">v</span>.<span class="pl-c1">length</span>;<span class="pl-c1">N</span><span class="pl-k">&lt;</span>ea;<span class="pl-c1">N</span><span class="pl-k">++</span>){<span class="pl-c1">L</span><span class="pl-k">=</span><span class="pl-en">c</span>(v[<span class="pl-c1">N</span>],qa[<span class="pl-c1">N</span>],<span class="pl-c1">F</span>);<span class="pl-en">f</span>(<span class="pl-c1">L</span>.<span class="pl-c1">x</span>,<span class="pl-c1">L</span>.<span class="pl-c1">y</span>,<span class="pl-k">-</span><span class="pl-c1">I</span>)}}}<span class="pl-c1">F</span><span class="pl-k">=</span>j;<span class="pl-k">for</span>(<span class="pl-c1">N</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">N</span><span class="pl-k">&lt;</span><span class="pl-c1">R</span>;<span class="pl-c1">N</span><span class="pl-k">++</span>){<span class="pl-c1">L</span><span class="pl-k">=</span>m<span class="pl-k">?</span><span class="pl-en">c</span>(<span class="pl-c1">J</span>[<span class="pl-c1">N</span>],</td>
      </tr>
      <tr>
        <td id="L638" class="blob-num js-line-number" data-line-number="638"></td>
        <td id="LC638" class="blob-code blob-code-inner js-file-line">la[<span class="pl-c1">N</span>],<span class="pl-c1">F</span>)<span class="pl-k">:</span><span class="pl-c1">J</span>[<span class="pl-c1">N</span>];<span class="pl-k">if</span>(q){<span class="pl-smi">z</span>.<span class="pl-en">copy</span>(<span class="pl-smi">u</span>.<span class="pl-smi">normals</span>[<span class="pl-c1">0</span>]).<span class="pl-en">multiplyScalar</span>(<span class="pl-c1">L</span>.<span class="pl-c1">x</span>);<span class="pl-smi">s</span>.<span class="pl-en">copy</span>(<span class="pl-smi">u</span>.<span class="pl-smi">binormals</span>[<span class="pl-c1">0</span>]).<span class="pl-en">multiplyScalar</span>(<span class="pl-c1">L</span>.<span class="pl-c1">y</span>);<span class="pl-c1">A</span>.<span class="pl-en">copy</span>(o[<span class="pl-c1">0</span>]).<span class="pl-en">addSelf</span>(z).<span class="pl-en">addSelf</span>(s);<span class="pl-en">f</span>(<span class="pl-c1">A</span>.<span class="pl-c1">x</span>,<span class="pl-c1">A</span>.<span class="pl-c1">y</span>,<span class="pl-c1">A</span>.<span class="pl-c1">z</span>)}<span class="pl-k">else</span> <span class="pl-en">f</span>(<span class="pl-c1">L</span>.<span class="pl-c1">x</span>,<span class="pl-c1">L</span>.<span class="pl-c1">y</span>,<span class="pl-c1">0</span>)}<span class="pl-k">for</span>(v<span class="pl-k">=</span><span class="pl-c1">1</span>;v<span class="pl-k">&lt;=</span>n;v<span class="pl-k">++</span>)<span class="pl-k">for</span>(<span class="pl-c1">N</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">N</span><span class="pl-k">&lt;</span><span class="pl-c1">R</span>;<span class="pl-c1">N</span><span class="pl-k">++</span>){<span class="pl-c1">L</span><span class="pl-k">=</span>m<span class="pl-k">?</span><span class="pl-en">c</span>(<span class="pl-c1">J</span>[<span class="pl-c1">N</span>],la[<span class="pl-c1">N</span>],<span class="pl-c1">F</span>)<span class="pl-k">:</span><span class="pl-c1">J</span>[<span class="pl-c1">N</span>];<span class="pl-k">if</span>(q){<span class="pl-smi">z</span>.<span class="pl-en">copy</span>(<span class="pl-smi">u</span>.<span class="pl-smi">normals</span>[v]).<span class="pl-en">multiplyScalar</span>(<span class="pl-c1">L</span>.<span class="pl-c1">x</span>);<span class="pl-smi">s</span>.<span class="pl-en">copy</span>(<span class="pl-smi">u</span>.<span class="pl-smi">binormals</span>[v]).<span class="pl-en">multiplyScalar</span>(<span class="pl-c1">L</span>.<span class="pl-c1">y</span>);<span class="pl-c1">A</span>.<span class="pl-en">copy</span>(o[v]).<span class="pl-en">addSelf</span>(z).<span class="pl-en">addSelf</span>(s);<span class="pl-en">f</span>(<span class="pl-c1">A</span>.<span class="pl-c1">x</span>,<span class="pl-c1">A</span>.<span class="pl-c1">y</span>,<span class="pl-c1">A</span>.<span class="pl-c1">z</span>)}<span class="pl-k">else</span> <span class="pl-en">f</span>(<span class="pl-c1">L</span>.<span class="pl-c1">x</span>,<span class="pl-c1">L</span>.<span class="pl-c1">y</span>,h<span class="pl-k">/</span>n<span class="pl-k">*</span>v)}<span class="pl-k">for</span>(<span class="pl-c1">K</span><span class="pl-k">=</span>l<span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-c1">K</span><span class="pl-k">&gt;=</span><span class="pl-c1">0</span>;<span class="pl-c1">K</span><span class="pl-k">--</span>){v<span class="pl-k">=</span><span class="pl-c1">K</span><span class="pl-k">/</span>l;<span class="pl-c1">I</span><span class="pl-k">=</span>i<span class="pl-k">*</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>v);<span class="pl-c1">F</span><span class="pl-k">=</span>j<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(v<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span><span class="pl-k">/</span><span class="pl-c1">2</span>);<span class="pl-c1">N</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(ea<span class="pl-k">=</span><span class="pl-c1">E</span>.<span class="pl-c1">length</span>;<span class="pl-c1">N</span><span class="pl-k">&lt;</span>ea;<span class="pl-c1">N</span><span class="pl-k">++</span>){<span class="pl-c1">L</span><span class="pl-k">=</span><span class="pl-en">c</span>(<span class="pl-c1">E</span>[<span class="pl-c1">N</span>],<span class="pl-c1">Y</span>[<span class="pl-c1">N</span>],<span class="pl-c1">F</span>);</td>
      </tr>
      <tr>
        <td id="L639" class="blob-num js-line-number" data-line-number="639"></td>
        <td id="LC639" class="blob-code blob-code-inner js-file-line"><span class="pl-en">f</span>(<span class="pl-c1">L</span>.<span class="pl-c1">x</span>,<span class="pl-c1">L</span>.<span class="pl-c1">y</span>,h<span class="pl-k">+</span><span class="pl-c1">I</span>)}y<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-smi">p</span>.<span class="pl-c1">length</span>;y<span class="pl-k">&lt;</span><span class="pl-c1">C</span>;y<span class="pl-k">++</span>){v<span class="pl-k">=</span>p[y];qa<span class="pl-k">=</span><span class="pl-c1">Q</span>[y];<span class="pl-c1">N</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(ea<span class="pl-k">=</span><span class="pl-smi">v</span>.<span class="pl-c1">length</span>;<span class="pl-c1">N</span><span class="pl-k">&lt;</span>ea;<span class="pl-c1">N</span><span class="pl-k">++</span>){<span class="pl-c1">L</span><span class="pl-k">=</span><span class="pl-en">c</span>(v[<span class="pl-c1">N</span>],qa[<span class="pl-c1">N</span>],<span class="pl-c1">F</span>);q<span class="pl-k">?</span><span class="pl-en">f</span>(<span class="pl-c1">L</span>.<span class="pl-c1">x</span>,<span class="pl-c1">L</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>o[n<span class="pl-k">-</span><span class="pl-c1">1</span>].<span class="pl-c1">y</span>,o[n<span class="pl-k">-</span><span class="pl-c1">1</span>].<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-c1">I</span>)<span class="pl-k">:</span><span class="pl-en">f</span>(<span class="pl-c1">L</span>.<span class="pl-c1">x</span>,<span class="pl-c1">L</span>.<span class="pl-c1">y</span>,h<span class="pl-k">+</span><span class="pl-c1">I</span>)}}}<span class="pl-k">if</span>(m){i<span class="pl-k">=</span><span class="pl-c1">R</span><span class="pl-k">*</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">N</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">N</span><span class="pl-k">&lt;</span>$;<span class="pl-c1">N</span><span class="pl-k">++</span>){h<span class="pl-k">=</span><span class="pl-c1">M</span>[<span class="pl-c1">N</span>];<span class="pl-en">g</span>(h[<span class="pl-c1">2</span>]<span class="pl-k">+</span>i,h[<span class="pl-c1">1</span>]<span class="pl-k">+</span>i,h[<span class="pl-c1">0</span>]<span class="pl-k">+</span>i,<span class="pl-c1">true</span>)}i<span class="pl-k">=</span><span class="pl-c1">R</span><span class="pl-k">*</span>(n<span class="pl-k">+</span>l<span class="pl-k">*</span><span class="pl-c1">2</span>);<span class="pl-k">for</span>(<span class="pl-c1">N</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">N</span><span class="pl-k">&lt;</span>$;<span class="pl-c1">N</span><span class="pl-k">++</span>){h<span class="pl-k">=</span><span class="pl-c1">M</span>[<span class="pl-c1">N</span>];<span class="pl-en">g</span>(h[<span class="pl-c1">0</span>]<span class="pl-k">+</span>i,h[<span class="pl-c1">1</span>]<span class="pl-k">+</span>i,h[<span class="pl-c1">2</span>]<span class="pl-k">+</span>i,<span class="pl-c1">false</span>)}}<span class="pl-k">else</span>{<span class="pl-k">for</span>(<span class="pl-c1">N</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">N</span><span class="pl-k">&lt;</span>$;<span class="pl-c1">N</span><span class="pl-k">++</span>){h<span class="pl-k">=</span><span class="pl-c1">M</span>[<span class="pl-c1">N</span>];<span class="pl-en">g</span>(h[<span class="pl-c1">2</span>],h[<span class="pl-c1">1</span>],h[<span class="pl-c1">0</span>],<span class="pl-c1">true</span>)}<span class="pl-k">for</span>(<span class="pl-c1">N</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">N</span><span class="pl-k">&lt;</span>$;<span class="pl-c1">N</span><span class="pl-k">++</span>){h<span class="pl-k">=</span><span class="pl-c1">M</span>[<span class="pl-c1">N</span>];<span class="pl-en">g</span>(h[<span class="pl-c1">0</span>]<span class="pl-k">+</span><span class="pl-c1">R</span><span class="pl-k">*</span>n,h[<span class="pl-c1">1</span>]<span class="pl-k">+</span><span class="pl-c1">R</span><span class="pl-k">*</span>n,h[<span class="pl-c1">2</span>]<span class="pl-k">+</span><span class="pl-c1">R</span><span class="pl-k">*</span>n,<span class="pl-c1">false</span>)}}h<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-en">e</span>(<span class="pl-c1">E</span>,h);h<span class="pl-k">=</span>h<span class="pl-k">+</span><span class="pl-c1">E</span>.<span class="pl-c1">length</span>;y<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-smi">p</span>.<span class="pl-c1">length</span>;y<span class="pl-k">&lt;</span><span class="pl-c1">C</span>;y<span class="pl-k">++</span>){v<span class="pl-k">=</span>p[y];<span class="pl-en">e</span>(v,h);h<span class="pl-k">=</span>h<span class="pl-k">+</span><span class="pl-smi">v</span>.<span class="pl-c1">length</span>}};</td>
      </tr>
      <tr>
        <td id="L640" class="blob-num js-line-number" data-line-number="640"></td>
        <td id="LC640" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ExtrudeGeometry</span>.<span class="pl-smi">WorldUVGenerator</span><span class="pl-k">=</span>{<span class="pl-en">generateTopUV</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>){b<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertices</span>[e].<span class="pl-c1">x</span>;e<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertices</span>[e].<span class="pl-c1">y</span>;c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertices</span>[f].<span class="pl-c1">x</span>;f<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertices</span>[f].<span class="pl-c1">y</span>;<span class="pl-k">return</span>[<span class="pl-k">new</span> <span class="pl-en">THREE.UV</span>(<span class="pl-smi">a</span>.<span class="pl-smi">vertices</span>[d].<span class="pl-c1">x</span>,<span class="pl-smi">a</span>.<span class="pl-smi">vertices</span>[d].<span class="pl-c1">y</span>),<span class="pl-k">new</span> <span class="pl-en">THREE.UV</span>(b,e),<span class="pl-k">new</span> <span class="pl-en">THREE.UV</span>(c,f)]},<span class="pl-en">generateBottomUV</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>){<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">generateTopUV</span>(a,b,c,d,e,f)},<span class="pl-en">generateSideWallUV</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>,<span class="pl-smi">g</span>,<span class="pl-smi">h</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertices</span>[e].<span class="pl-c1">x</span>,c<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertices</span>[e].<span class="pl-c1">y</span>,e<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertices</span>[e].<span class="pl-c1">z</span>,d<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertices</span>[f].<span class="pl-c1">x</span>,i<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertices</span>[f].<span class="pl-c1">y</span>,f<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertices</span>[f].<span class="pl-c1">z</span>,j<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertices</span>[g].<span class="pl-c1">x</span>,l<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertices</span>[g].<span class="pl-c1">y</span>,</td>
      </tr>
      <tr>
        <td id="L641" class="blob-num js-line-number" data-line-number="641"></td>
        <td id="LC641" class="blob-code blob-code-inner js-file-line">g<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertices</span>[g].<span class="pl-c1">z</span>,m<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertices</span>[h].<span class="pl-c1">x</span>,n<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertices</span>[h].<span class="pl-c1">y</span>,a<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertices</span>[h].<span class="pl-c1">z</span>;<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(c<span class="pl-k">-</span>i)<span class="pl-k">&lt;</span><span class="pl-c1">0.01</span><span class="pl-k">?</span>[<span class="pl-k">new</span> <span class="pl-en">THREE.UV</span>(b,<span class="pl-c1">1</span><span class="pl-k">-</span>e),<span class="pl-k">new</span> <span class="pl-en">THREE.UV</span>(d,<span class="pl-c1">1</span><span class="pl-k">-</span>f),<span class="pl-k">new</span> <span class="pl-en">THREE.UV</span>(j,<span class="pl-c1">1</span><span class="pl-k">-</span>g),<span class="pl-k">new</span> <span class="pl-en">THREE.UV</span>(m,<span class="pl-c1">1</span><span class="pl-k">-</span>a)]<span class="pl-k">:</span>[<span class="pl-k">new</span> <span class="pl-en">THREE.UV</span>(c,<span class="pl-c1">1</span><span class="pl-k">-</span>e),<span class="pl-k">new</span> <span class="pl-en">THREE.UV</span>(i,<span class="pl-c1">1</span><span class="pl-k">-</span>f),<span class="pl-k">new</span> <span class="pl-en">THREE.UV</span>(l,<span class="pl-c1">1</span><span class="pl-k">-</span>g),<span class="pl-k">new</span> <span class="pl-en">THREE.UV</span>(n,<span class="pl-c1">1</span><span class="pl-k">-</span>a)]}};<span class="pl-c1">THREE</span>.<span class="pl-smi">ExtrudeGeometry</span>.<span class="pl-smi">__v1</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">ExtrudeGeometry</span>.<span class="pl-smi">__v2</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">ExtrudeGeometry</span>.<span class="pl-smi">__v3</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">ExtrudeGeometry</span>.<span class="pl-smi">__v4</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">ExtrudeGeometry</span>.<span class="pl-smi">__v5</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>;</td>
      </tr>
      <tr>
        <td id="L642" class="blob-num js-line-number" data-line-number="642"></td>
        <td id="LC642" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ExtrudeGeometry</span>.<span class="pl-smi">__v6</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>;<span class="pl-c1">THREE</span>.<span class="pl-en">ShapeGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);a <span class="pl-k">instanceof</span> <span class="pl-c1">Array</span><span class="pl-k">===</span><span class="pl-c1">false</span><span class="pl-k">&amp;&amp;</span>(a<span class="pl-k">=</span>[a]);<span class="pl-c1">this</span>.<span class="pl-smi">shapebb</span><span class="pl-k">=</span>a[<span class="pl-smi">a</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>].<span class="pl-en">getBoundingBox</span>();<span class="pl-c1">this</span>.<span class="pl-en">addShapeList</span>(a,b);<span class="pl-c1">this</span>.<span class="pl-en">computeCentroids</span>();<span class="pl-c1">this</span>.<span class="pl-en">computeFaceNormals</span>()};<span class="pl-c1">THREE</span>.<span class="pl-smi">ShapeGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">ShapeGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">addShapeList</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">0</span>,d<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>d;c<span class="pl-k">++</span>)<span class="pl-c1">this</span>.<span class="pl-en">addShape</span>(a[c],b);<span class="pl-k">return</span> <span class="pl-c1">this</span>};</td>
      </tr>
      <tr>
        <td id="L643" class="blob-num js-line-number" data-line-number="643"></td>
        <td id="LC643" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ShapeGeometry</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">addShape</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){b<span class="pl-k">===</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span>{});<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">material</span>,d<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">UVGenerator</span><span class="pl-k">===</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">?</span><span class="pl-c1">THREE</span>.<span class="pl-smi">ExtrudeGeometry</span>.<span class="pl-smi">WorldUVGenerator</span><span class="pl-k">:</span><span class="pl-smi">b</span>.<span class="pl-smi">UVGenerator</span>,e,f,g,h<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">length</span>;e<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-en">extractPoints</span>();<span class="pl-k">var</span> i<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-c1">shape</span>,j<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">holes</span>;<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Shape</span>.<span class="pl-smi">Utils</span>.<span class="pl-en">isClockWise</span>(i)){i<span class="pl-k">=</span><span class="pl-smi">i</span>.<span class="pl-c1">reverse</span>();e<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(f<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-c1">length</span>;e<span class="pl-k">&lt;</span>f;e<span class="pl-k">++</span>){g<span class="pl-k">=</span>j[e];<span class="pl-c1">THREE</span>.<span class="pl-smi">Shape</span>.<span class="pl-smi">Utils</span>.<span class="pl-en">isClockWise</span>(g)<span class="pl-k">&amp;&amp;</span>(j[e]<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-c1">reverse</span>())}}<span class="pl-k">var</span> l<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Shape</span>.<span class="pl-smi">Utils</span>.<span class="pl-en">triangulateShape</span>(i,j);e<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(f<span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-c1">length</span>;e<span class="pl-k">&lt;</span>f;e<span class="pl-k">++</span>){g<span class="pl-k">=</span>j[e];i<span class="pl-k">=</span><span class="pl-smi">i</span>.<span class="pl-c1">concat</span>(g)}j<span class="pl-k">=</span><span class="pl-smi">i</span>.<span class="pl-c1">length</span>;f<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-c1">length</span>;<span class="pl-k">for</span>(e<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L644" class="blob-num js-line-number" data-line-number="644"></td>
        <td id="LC644" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span>j;e<span class="pl-k">++</span>){g<span class="pl-k">=</span>i[e];<span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-smi">g</span>.<span class="pl-c1">x</span>,<span class="pl-smi">g</span>.<span class="pl-c1">y</span>,<span class="pl-c1">0</span>))}<span class="pl-k">for</span>(e<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span>f;e<span class="pl-k">++</span>){j<span class="pl-k">=</span>l[e];i<span class="pl-k">=</span>j[<span class="pl-c1">0</span>]<span class="pl-k">+</span>h;g<span class="pl-k">=</span>j[<span class="pl-c1">1</span>]<span class="pl-k">+</span>h;j<span class="pl-k">=</span>j[<span class="pl-c1">2</span>]<span class="pl-k">+</span>h;<span class="pl-c1">this</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(i,g,j,<span class="pl-c1">null</span>,<span class="pl-c1">null</span>,c));<span class="pl-c1">this</span>.<span class="pl-smi">faceVertexUvs</span>[<span class="pl-c1">0</span>].<span class="pl-c1">push</span>(<span class="pl-smi">d</span>.<span class="pl-en">generateBottomUV</span>(<span class="pl-c1">this</span>,a,b,i,g,j))}};</td>
      </tr>
      <tr>
        <td id="L645" class="blob-num js-line-number" data-line-number="645"></td>
        <td id="LC645" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">LatheGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span>b<span class="pl-k">||</span><span class="pl-c1">12</span>,c<span class="pl-k">=</span>c<span class="pl-k">||</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span>,d<span class="pl-k">=</span>[],e<span class="pl-k">=</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>).<span class="pl-en">makeRotationZ</span>(c<span class="pl-k">/</span>b),f<span class="pl-k">=</span><span class="pl-c1">0</span>;f<span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>;f<span class="pl-k">++</span>){d[f]<span class="pl-k">=</span>a[f].<span class="pl-en">clone</span>();<span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">push</span>(d[f])}<span class="pl-k">for</span>(<span class="pl-k">var</span> g<span class="pl-k">=</span>b<span class="pl-k">+</span><span class="pl-c1">1</span>,c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span>g;c<span class="pl-k">++</span>)<span class="pl-k">for</span>(f<span class="pl-k">=</span><span class="pl-c1">0</span>;f<span class="pl-k">&lt;</span><span class="pl-smi">d</span>.<span class="pl-c1">length</span>;f<span class="pl-k">++</span>){d[f]<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-en">multiplyVector3</span>(d[f].<span class="pl-en">clone</span>());<span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">push</span>(d[f])}<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span>b;c<span class="pl-k">++</span>){d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(e<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>;d<span class="pl-k">&lt;</span>e<span class="pl-k">-</span><span class="pl-c1">1</span>;d<span class="pl-k">++</span>){<span class="pl-c1">this</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Face4</span>(c<span class="pl-k">*</span>e<span class="pl-k">+</span>d,(c<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">%</span>g<span class="pl-k">*</span>e<span class="pl-k">+</span>d,(c<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">%</span>g<span class="pl-k">*</span>e<span class="pl-k">+</span>(d<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">%</span>e,c<span class="pl-k">*</span>e<span class="pl-k">+</span>(d<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">%</span>e));<span class="pl-c1">this</span>.<span class="pl-smi">faceVertexUvs</span>[<span class="pl-c1">0</span>].<span class="pl-c1">push</span>([<span class="pl-k">new</span> <span class="pl-en">THREE.UV</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>c<span class="pl-k">/</span>b,d<span class="pl-k">/</span>e),<span class="pl-k">new</span> <span class="pl-en">THREE.UV</span>(<span class="pl-c1">1</span><span class="pl-k">-</span></td>
      </tr>
      <tr>
        <td id="L646" class="blob-num js-line-number" data-line-number="646"></td>
        <td id="LC646" class="blob-code blob-code-inner js-file-line">(c<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span>b,d<span class="pl-k">/</span>e),<span class="pl-k">new</span> <span class="pl-en">THREE.UV</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>(c<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span>b,(d<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span>e),<span class="pl-k">new</span> <span class="pl-en">THREE.UV</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>c<span class="pl-k">/</span>b,(d<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span>e)])}}<span class="pl-c1">this</span>.<span class="pl-en">computeCentroids</span>();<span class="pl-c1">this</span>.<span class="pl-en">computeFaceNormals</span>();<span class="pl-c1">this</span>.<span class="pl-en">computeVertexNormals</span>()};<span class="pl-c1">THREE</span>.<span class="pl-smi">LatheGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L647" class="blob-num js-line-number" data-line-number="647"></td>
        <td id="LC647" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">PlaneGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span>a<span class="pl-k">/</span><span class="pl-c1">2</span>,f<span class="pl-k">=</span>b<span class="pl-k">/</span><span class="pl-c1">2</span>,c<span class="pl-k">=</span>c<span class="pl-k">||</span><span class="pl-c1">1</span>,d<span class="pl-k">=</span>d<span class="pl-k">||</span><span class="pl-c1">1</span>,g<span class="pl-k">=</span>c<span class="pl-k">+</span><span class="pl-c1">1</span>,h<span class="pl-k">=</span>d<span class="pl-k">+</span><span class="pl-c1">1</span>,i<span class="pl-k">=</span>a<span class="pl-k">/</span>c,j<span class="pl-k">=</span>b<span class="pl-k">/</span>d,l<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>),a<span class="pl-k">=</span><span class="pl-c1">0</span>;a<span class="pl-k">&lt;</span>h;a<span class="pl-k">++</span>)<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span>g;b<span class="pl-k">++</span>)<span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(b<span class="pl-k">*</span>i<span class="pl-k">-</span>e,<span class="pl-k">-</span>(a<span class="pl-k">*</span>j<span class="pl-k">-</span>f),<span class="pl-c1">0</span>));<span class="pl-k">for</span>(a<span class="pl-k">=</span><span class="pl-c1">0</span>;a<span class="pl-k">&lt;</span>d;a<span class="pl-k">++</span>)<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span>c;b<span class="pl-k">++</span>){e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Face4</span>(b<span class="pl-k">+</span>g<span class="pl-k">*</span>a,b<span class="pl-k">+</span>g<span class="pl-k">*</span>(a<span class="pl-k">+</span><span class="pl-c1">1</span>),b<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">+</span>g<span class="pl-k">*</span>(a<span class="pl-k">+</span><span class="pl-c1">1</span>),b<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">+</span>g<span class="pl-k">*</span>a);<span class="pl-smi">e</span>.<span class="pl-smi">normal</span>.<span class="pl-en">copy</span>(l);<span class="pl-smi">e</span>.<span class="pl-smi">vertexNormals</span>.<span class="pl-c1">push</span>(<span class="pl-smi">l</span>.<span class="pl-en">clone</span>(),<span class="pl-smi">l</span>.<span class="pl-en">clone</span>(),<span class="pl-smi">l</span>.<span class="pl-en">clone</span>(),<span class="pl-smi">l</span>.<span class="pl-en">clone</span>());<span class="pl-c1">this</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">push</span>(e);<span class="pl-c1">this</span>.<span class="pl-smi">faceVertexUvs</span>[<span class="pl-c1">0</span>].<span class="pl-c1">push</span>([<span class="pl-k">new</span> <span class="pl-en">THREE.UV</span>(b<span class="pl-k">/</span>c,<span class="pl-c1">1</span><span class="pl-k">-</span>a<span class="pl-k">/</span>d),<span class="pl-k">new</span> <span class="pl-en">THREE.UV</span>(b<span class="pl-k">/</span>c,<span class="pl-c1">1</span><span class="pl-k">-</span>(a<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span>d),<span class="pl-k">new</span> <span class="pl-en">THREE.UV</span>((b<span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L648" class="blob-num js-line-number" data-line-number="648"></td>
        <td id="LC648" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">1</span>)<span class="pl-k">/</span>c,<span class="pl-c1">1</span><span class="pl-k">-</span>(a<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span>d),<span class="pl-k">new</span> <span class="pl-en">THREE.UV</span>((b<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span>c,<span class="pl-c1">1</span><span class="pl-k">-</span>a<span class="pl-k">/</span>d)])}<span class="pl-c1">this</span>.<span class="pl-en">computeCentroids</span>()};<span class="pl-c1">THREE</span>.<span class="pl-smi">PlaneGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L649" class="blob-num js-line-number" data-line-number="649"></td>
        <td id="LC649" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">SphereGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>,<span class="pl-smi">g</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-k">var</span> a<span class="pl-k">=</span>a<span class="pl-k">||</span><span class="pl-c1">50</span>,d<span class="pl-k">=</span>d<span class="pl-k">!==</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">?</span>d<span class="pl-k">:</span><span class="pl-c1">0</span>,e<span class="pl-k">=</span>e<span class="pl-k">!==</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">?</span>e<span class="pl-k">:</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span><span class="pl-k">*</span><span class="pl-c1">2</span>,f<span class="pl-k">=</span>f<span class="pl-k">!==</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">?</span>f<span class="pl-k">:</span><span class="pl-c1">0</span>,g<span class="pl-k">=</span>g<span class="pl-k">!==</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">?</span>g<span class="pl-k">:</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span>,b<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-c1">3</span>,<span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(b)<span class="pl-k">||</span><span class="pl-c1">8</span>),c<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-c1">2</span>,<span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(c)<span class="pl-k">||</span><span class="pl-c1">6</span>),h,i,j<span class="pl-k">=</span>[],l<span class="pl-k">=</span>[];<span class="pl-k">for</span>(i<span class="pl-k">=</span><span class="pl-c1">0</span>;i<span class="pl-k">&lt;=</span>c;i<span class="pl-k">++</span>){<span class="pl-k">var</span> m<span class="pl-k">=</span>[],n<span class="pl-k">=</span>[];<span class="pl-k">for</span>(h<span class="pl-k">=</span><span class="pl-c1">0</span>;h<span class="pl-k">&lt;=</span>b;h<span class="pl-k">++</span>){<span class="pl-k">var</span> p<span class="pl-k">=</span>h<span class="pl-k">/</span>b,o<span class="pl-k">=</span>i<span class="pl-k">/</span>c,q<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-smi">q</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-k">-</span>a<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(d<span class="pl-k">+</span>p<span class="pl-k">*</span>e)<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(f<span class="pl-k">+</span>o<span class="pl-k">*</span>g);<span class="pl-smi">q</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>a<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(f<span class="pl-k">+</span>o<span class="pl-k">*</span>g);<span class="pl-smi">q</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>a<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(d<span class="pl-k">+</span>p<span class="pl-k">*</span>e)<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(f<span class="pl-k">+</span>o<span class="pl-k">*</span>g);<span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">push</span>(q);<span class="pl-smi">m</span>.<span class="pl-c1">push</span>(<span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>);<span class="pl-smi">n</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.UV</span>(p,</td>
      </tr>
      <tr>
        <td id="L650" class="blob-num js-line-number" data-line-number="650"></td>
        <td id="LC650" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">1</span><span class="pl-k">-</span>o))}<span class="pl-smi">j</span>.<span class="pl-c1">push</span>(m);<span class="pl-smi">l</span>.<span class="pl-c1">push</span>(n)}<span class="pl-k">for</span>(i<span class="pl-k">=</span><span class="pl-c1">0</span>;i<span class="pl-k">&lt;</span>c;i<span class="pl-k">++</span>)<span class="pl-k">for</span>(h<span class="pl-k">=</span><span class="pl-c1">0</span>;h<span class="pl-k">&lt;</span>b;h<span class="pl-k">++</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span>j[i][h<span class="pl-k">+</span><span class="pl-c1">1</span>],e<span class="pl-k">=</span>j[i][h],f<span class="pl-k">=</span>j[i<span class="pl-k">+</span><span class="pl-c1">1</span>][h],g<span class="pl-k">=</span>j[i<span class="pl-k">+</span><span class="pl-c1">1</span>][h<span class="pl-k">+</span><span class="pl-c1">1</span>],m<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>[d].<span class="pl-en">clone</span>().<span class="pl-c1">normalize</span>(),n<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>[e].<span class="pl-en">clone</span>().<span class="pl-c1">normalize</span>(),p<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>[f].<span class="pl-en">clone</span>().<span class="pl-c1">normalize</span>(),o<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>[g].<span class="pl-en">clone</span>().<span class="pl-c1">normalize</span>(),q<span class="pl-k">=</span>l[i][h<span class="pl-k">+</span><span class="pl-c1">1</span>].<span class="pl-en">clone</span>(),r<span class="pl-k">=</span>l[i][h].<span class="pl-en">clone</span>(),t<span class="pl-k">=</span>l[i<span class="pl-k">+</span><span class="pl-c1">1</span>][h].<span class="pl-en">clone</span>(),<span class="pl-c1">B</span><span class="pl-k">=</span>l[i<span class="pl-k">+</span><span class="pl-c1">1</span>][h<span class="pl-k">+</span><span class="pl-c1">1</span>].<span class="pl-en">clone</span>();<span class="pl-k">if</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(<span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>[d].<span class="pl-c1">y</span>)<span class="pl-k">==</span>a){<span class="pl-c1">this</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(d,f,g,[m,p,o]));<span class="pl-c1">this</span>.<span class="pl-smi">faceVertexUvs</span>[<span class="pl-c1">0</span>].<span class="pl-c1">push</span>([q,t,<span class="pl-c1">B</span>])}<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(<span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>[f].<span class="pl-c1">y</span>)<span class="pl-k">==</span></td>
      </tr>
      <tr>
        <td id="L651" class="blob-num js-line-number" data-line-number="651"></td>
        <td id="LC651" class="blob-code blob-code-inner js-file-line">a){<span class="pl-c1">this</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(d,e,f,[m,n,p]));<span class="pl-c1">this</span>.<span class="pl-smi">faceVertexUvs</span>[<span class="pl-c1">0</span>].<span class="pl-c1">push</span>([q,r,t])}<span class="pl-k">else</span>{<span class="pl-c1">this</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Face4</span>(d,e,f,g,[m,n,p,o]));<span class="pl-c1">this</span>.<span class="pl-smi">faceVertexUvs</span>[<span class="pl-c1">0</span>].<span class="pl-c1">push</span>([q,r,t,<span class="pl-c1">B</span>])}}<span class="pl-c1">this</span>.<span class="pl-en">computeCentroids</span>();<span class="pl-c1">this</span>.<span class="pl-en">computeFaceNormals</span>();<span class="pl-c1">this</span>.<span class="pl-smi">boundingSphere</span><span class="pl-k">=</span>{radius<span class="pl-k">:</span>a}};<span class="pl-c1">THREE</span>.<span class="pl-smi">SphereGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L652" class="blob-num js-line-number" data-line-number="652"></td>
        <td id="LC652" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">TextGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">FontUtils</span>.<span class="pl-en">generateShapes</span>(a,b);<span class="pl-smi">b</span>.<span class="pl-smi">amount</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">height</span><span class="pl-k">!==</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">?</span><span class="pl-smi">b</span>.<span class="pl-c1">height</span><span class="pl-k">:</span><span class="pl-c1">50</span>;<span class="pl-k">if</span>(<span class="pl-smi">b</span>.<span class="pl-smi">bevelThickness</span><span class="pl-k">===</span><span class="pl-k">void</span> <span class="pl-c1">0</span>)<span class="pl-smi">b</span>.<span class="pl-smi">bevelThickness</span><span class="pl-k">=</span><span class="pl-c1">10</span>;<span class="pl-k">if</span>(<span class="pl-smi">b</span>.<span class="pl-smi">bevelSize</span><span class="pl-k">===</span><span class="pl-k">void</span> <span class="pl-c1">0</span>)<span class="pl-smi">b</span>.<span class="pl-smi">bevelSize</span><span class="pl-k">=</span><span class="pl-c1">8</span>;<span class="pl-k">if</span>(<span class="pl-smi">b</span>.<span class="pl-smi">bevelEnabled</span><span class="pl-k">===</span><span class="pl-k">void</span> <span class="pl-c1">0</span>)<span class="pl-smi">b</span>.<span class="pl-smi">bevelEnabled</span><span class="pl-k">=</span><span class="pl-c1">false</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">ExtrudeGeometry</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,c,b)};<span class="pl-c1">THREE</span>.<span class="pl-smi">TextGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">ExtrudeGeometry</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L653" class="blob-num js-line-number" data-line-number="653"></td>
        <td id="LC653" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">TorusGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-smi">radius</span><span class="pl-k">=</span>a<span class="pl-k">||</span><span class="pl-c1">100</span>;<span class="pl-c1">this</span>.<span class="pl-smi">tube</span><span class="pl-k">=</span>b<span class="pl-k">||</span><span class="pl-c1">40</span>;<span class="pl-c1">this</span>.<span class="pl-smi">radialSegments</span><span class="pl-k">=</span>c<span class="pl-k">||</span><span class="pl-c1">8</span>;<span class="pl-c1">this</span>.<span class="pl-smi">tubularSegments</span><span class="pl-k">=</span>d<span class="pl-k">||</span><span class="pl-c1">6</span>;<span class="pl-c1">this</span>.<span class="pl-smi">arc</span><span class="pl-k">=</span>e<span class="pl-k">||</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span><span class="pl-k">*</span><span class="pl-c1">2</span>;e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;a<span class="pl-k">=</span>[];b<span class="pl-k">=</span>[];<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;=</span><span class="pl-c1">this</span>.<span class="pl-smi">radialSegments</span>;c<span class="pl-k">++</span>)<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;=</span><span class="pl-c1">this</span>.<span class="pl-smi">tubularSegments</span>;d<span class="pl-k">++</span>){<span class="pl-k">var</span> f<span class="pl-k">=</span>d<span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-smi">tubularSegments</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">arc</span>,g<span class="pl-k">=</span>c<span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-smi">radialSegments</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span><span class="pl-k">*</span><span class="pl-c1">2</span>;<span class="pl-smi">e</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">radius</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(f);<span class="pl-smi">e</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">radius</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(f);<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-smi">h</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>(<span class="pl-c1">this</span>.<span class="pl-smi">radius</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">tube</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(g))<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(f);<span class="pl-smi">h</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>(<span class="pl-c1">this</span>.<span class="pl-smi">radius</span><span class="pl-k">+</span><span class="pl-c1">this</span>.<span class="pl-smi">tube</span><span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L654" class="blob-num js-line-number" data-line-number="654"></td>
        <td id="LC654" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(g))<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(f);<span class="pl-smi">h</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">tube</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(g);<span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">push</span>(h);<span class="pl-smi">a</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.UV</span>(d<span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-smi">tubularSegments</span>,c<span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-smi">radialSegments</span>));<span class="pl-smi">b</span>.<span class="pl-c1">push</span>(<span class="pl-smi">h</span>.<span class="pl-en">clone</span>().<span class="pl-en">subSelf</span>(e).<span class="pl-c1">normalize</span>())}<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">1</span>;c<span class="pl-k">&lt;=</span><span class="pl-c1">this</span>.<span class="pl-smi">radialSegments</span>;c<span class="pl-k">++</span>)<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">1</span>;d<span class="pl-k">&lt;=</span><span class="pl-c1">this</span>.<span class="pl-smi">tubularSegments</span>;d<span class="pl-k">++</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span>(<span class="pl-c1">this</span>.<span class="pl-smi">tubularSegments</span><span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">*</span>c<span class="pl-k">+</span>d<span class="pl-k">-</span><span class="pl-c1">1</span>,f<span class="pl-k">=</span>(<span class="pl-c1">this</span>.<span class="pl-smi">tubularSegments</span><span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">*</span>(c<span class="pl-k">-</span><span class="pl-c1">1</span>)<span class="pl-k">+</span>d<span class="pl-k">-</span><span class="pl-c1">1</span>,g<span class="pl-k">=</span>(<span class="pl-c1">this</span>.<span class="pl-smi">tubularSegments</span><span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">*</span>(c<span class="pl-k">-</span><span class="pl-c1">1</span>)<span class="pl-k">+</span>d,h<span class="pl-k">=</span>(<span class="pl-c1">this</span>.<span class="pl-smi">tubularSegments</span><span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">*</span>c<span class="pl-k">+</span>d,i<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Face4</span>(e,f,g,h,[b[e],b[f],b[g],b[h]]);<span class="pl-smi">i</span>.<span class="pl-smi">normal</span>.<span class="pl-en">addSelf</span>(b[e]);<span class="pl-smi">i</span>.<span class="pl-smi">normal</span>.<span class="pl-en">addSelf</span>(b[f]);<span class="pl-smi">i</span>.<span class="pl-smi">normal</span>.<span class="pl-en">addSelf</span>(b[g]);</td>
      </tr>
      <tr>
        <td id="L655" class="blob-num js-line-number" data-line-number="655"></td>
        <td id="LC655" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">i</span>.<span class="pl-smi">normal</span>.<span class="pl-en">addSelf</span>(b[h]);<span class="pl-smi">i</span>.<span class="pl-smi">normal</span>.<span class="pl-c1">normalize</span>();<span class="pl-c1">this</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">push</span>(i);<span class="pl-c1">this</span>.<span class="pl-smi">faceVertexUvs</span>[<span class="pl-c1">0</span>].<span class="pl-c1">push</span>([a[e].<span class="pl-en">clone</span>(),a[f].<span class="pl-en">clone</span>(),a[g].<span class="pl-en">clone</span>(),a[h].<span class="pl-en">clone</span>()])}<span class="pl-c1">this</span>.<span class="pl-en">computeCentroids</span>()};<span class="pl-c1">THREE</span>.<span class="pl-smi">TorusGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L656" class="blob-num js-line-number" data-line-number="656"></td>
        <td id="LC656" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">TorusKnotGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>,<span class="pl-smi">g</span>){<span class="pl-k">function</span> <span class="pl-en">h</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(a);<span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(b);b<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(a);a<span class="pl-k">=</span>c<span class="pl-k">/</span>d<span class="pl-k">*</span>a;c<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(a);g<span class="pl-k">=</span>e<span class="pl-k">*</span>(<span class="pl-c1">2</span><span class="pl-k">+</span>c)<span class="pl-k">*</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>g;b<span class="pl-k">=</span>e<span class="pl-k">*</span>(<span class="pl-c1">2</span><span class="pl-k">+</span>c)<span class="pl-k">*</span>b<span class="pl-k">*</span><span class="pl-c1">0.5</span>;e<span class="pl-k">=</span>f<span class="pl-k">*</span>e<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(a)<span class="pl-k">*</span><span class="pl-c1">0.5</span>;<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(g,b,e)}<span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-smi">radius</span><span class="pl-k">=</span>a<span class="pl-k">||</span><span class="pl-c1">200</span>;<span class="pl-c1">this</span>.<span class="pl-smi">tube</span><span class="pl-k">=</span>b<span class="pl-k">||</span><span class="pl-c1">40</span>;<span class="pl-c1">this</span>.<span class="pl-smi">radialSegments</span><span class="pl-k">=</span>c<span class="pl-k">||</span><span class="pl-c1">64</span>;<span class="pl-c1">this</span>.<span class="pl-smi">tubularSegments</span><span class="pl-k">=</span>d<span class="pl-k">||</span><span class="pl-c1">8</span>;<span class="pl-c1">this</span>.<span class="pl-smi">p</span><span class="pl-k">=</span>e<span class="pl-k">||</span><span class="pl-c1">2</span>;<span class="pl-c1">this</span>.<span class="pl-smi">q</span><span class="pl-k">=</span>f<span class="pl-k">||</span><span class="pl-c1">3</span>;<span class="pl-c1">this</span>.<span class="pl-smi">heightScale</span><span class="pl-k">=</span>g<span class="pl-k">||</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">grid</span><span class="pl-k">=</span><span class="pl-c1">Array</span>(<span class="pl-c1">this</span>.<span class="pl-smi">radialSegments</span>);c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;d<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">for</span>(a<span class="pl-k">=</span><span class="pl-c1">0</span>;a<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">radialSegments</span>;<span class="pl-k">++</span>a){<span class="pl-c1">this</span>.<span class="pl-smi">grid</span>[a]<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L657" class="blob-num js-line-number" data-line-number="657"></td>
        <td id="LC657" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">Array</span>(<span class="pl-c1">this</span>.<span class="pl-smi">tubularSegments</span>);<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">tubularSegments</span>;<span class="pl-k">++</span>b){<span class="pl-k">var</span> i<span class="pl-k">=</span>a<span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-smi">radialSegments</span><span class="pl-k">*</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">this</span>.<span class="pl-smi">p</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span>,g<span class="pl-k">=</span>b<span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-smi">tubularSegments</span><span class="pl-k">*</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span>,f<span class="pl-k">=</span><span class="pl-en">h</span>(i,g,<span class="pl-c1">this</span>.<span class="pl-smi">q</span>,<span class="pl-c1">this</span>.<span class="pl-smi">p</span>,<span class="pl-c1">this</span>.<span class="pl-smi">radius</span>,<span class="pl-c1">this</span>.<span class="pl-smi">heightScale</span>),i<span class="pl-k">=</span><span class="pl-en">h</span>(i<span class="pl-k">+</span><span class="pl-c1">0.01</span>,g,<span class="pl-c1">this</span>.<span class="pl-smi">q</span>,<span class="pl-c1">this</span>.<span class="pl-smi">p</span>,<span class="pl-c1">this</span>.<span class="pl-smi">radius</span>,<span class="pl-c1">this</span>.<span class="pl-smi">heightScale</span>);<span class="pl-smi">c</span>.<span class="pl-c1">sub</span>(i,f);<span class="pl-smi">d</span>.<span class="pl-c1">add</span>(i,f);<span class="pl-smi">e</span>.<span class="pl-en">cross</span>(c,d);<span class="pl-smi">d</span>.<span class="pl-en">cross</span>(e,c);<span class="pl-smi">e</span>.<span class="pl-c1">normalize</span>();<span class="pl-smi">d</span>.<span class="pl-c1">normalize</span>();i<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">tube</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(g);g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">tube</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(g);<span class="pl-smi">f</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>(i<span class="pl-k">*</span><span class="pl-smi">d</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>g<span class="pl-k">*</span><span class="pl-smi">e</span>.<span class="pl-c1">x</span>);<span class="pl-smi">f</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>(i<span class="pl-k">*</span><span class="pl-smi">d</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>g<span class="pl-k">*</span><span class="pl-smi">e</span>.<span class="pl-c1">y</span>);<span class="pl-smi">f</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">z</span><span class="pl-k">+</span>(i<span class="pl-k">*</span><span class="pl-smi">d</span>.<span class="pl-c1">z</span><span class="pl-k">+</span>g<span class="pl-k">*</span><span class="pl-smi">e</span>.<span class="pl-c1">z</span>);<span class="pl-c1">this</span>.<span class="pl-smi">grid</span>[a][b]<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-smi">f</span>.<span class="pl-c1">x</span>,</td>
      </tr>
      <tr>
        <td id="L658" class="blob-num js-line-number" data-line-number="658"></td>
        <td id="LC658" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">f</span>.<span class="pl-c1">y</span>,<span class="pl-smi">f</span>.<span class="pl-c1">z</span>))<span class="pl-k">-</span><span class="pl-c1">1</span>}}<span class="pl-k">for</span>(a<span class="pl-k">=</span><span class="pl-c1">0</span>;a<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">radialSegments</span>;<span class="pl-k">++</span>a)<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">tubularSegments</span>;<span class="pl-k">++</span>b){<span class="pl-k">var</span> e<span class="pl-k">=</span>(a<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">%</span><span class="pl-c1">this</span>.<span class="pl-smi">radialSegments</span>,f<span class="pl-k">=</span>(b<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">%</span><span class="pl-c1">this</span>.<span class="pl-smi">tubularSegments</span>,c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">grid</span>[a][b],d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">grid</span>[e][b],e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">grid</span>[e][f],f<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">grid</span>[a][f],g<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.UV</span>(a<span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-smi">radialSegments</span>,b<span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-smi">tubularSegments</span>),i<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.UV</span>((a<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-smi">radialSegments</span>,b<span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-smi">tubularSegments</span>),j<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.UV</span>((a<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-smi">radialSegments</span>,(b<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-smi">tubularSegments</span>),l<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.UV</span>(a<span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-smi">radialSegments</span>,(b<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-smi">tubularSegments</span>);<span class="pl-c1">this</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Face4</span>(c,</td>
      </tr>
      <tr>
        <td id="L659" class="blob-num js-line-number" data-line-number="659"></td>
        <td id="LC659" class="blob-code blob-code-inner js-file-line">d,e,f));<span class="pl-c1">this</span>.<span class="pl-smi">faceVertexUvs</span>[<span class="pl-c1">0</span>].<span class="pl-c1">push</span>([g,i,j,l])}<span class="pl-c1">this</span>.<span class="pl-en">computeCentroids</span>();<span class="pl-c1">this</span>.<span class="pl-en">computeFaceNormals</span>();<span class="pl-c1">this</span>.<span class="pl-en">computeVertexNormals</span>()};<span class="pl-c1">THREE</span>.<span class="pl-smi">TorusKnotGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L660" class="blob-num js-line-number" data-line-number="660"></td>
        <td id="LC660" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">TubeGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-smi">path</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">segments</span><span class="pl-k">=</span>b<span class="pl-k">||</span><span class="pl-c1">64</span>;<span class="pl-c1">this</span>.<span class="pl-smi">radius</span><span class="pl-k">=</span>c<span class="pl-k">||</span><span class="pl-c1">1</span>;<span class="pl-c1">this</span>.<span class="pl-smi">radiusSegments</span><span class="pl-k">=</span>d<span class="pl-k">||</span><span class="pl-c1">8</span>;<span class="pl-c1">this</span>.<span class="pl-c1">closed</span><span class="pl-k">=</span>e<span class="pl-k">||</span><span class="pl-c1">false</span>;<span class="pl-k">if</span>(f)<span class="pl-c1">this</span>.<span class="pl-smi">debug</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Object3D</span>;<span class="pl-c1">this</span>.<span class="pl-smi">grid</span><span class="pl-k">=</span>[];<span class="pl-k">var</span> g,h,f<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">segments</span><span class="pl-k">+</span><span class="pl-c1">1</span>,i,j,l,m<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,n,p,o,b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.TubeGeometry.FrenetFrames</span>(a,b,e);n<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">tangents</span>;p<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">normals</span>;o<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">binormals</span>;<span class="pl-c1">this</span>.<span class="pl-smi">tangents</span><span class="pl-k">=</span>n;<span class="pl-c1">this</span>.<span class="pl-smi">normals</span><span class="pl-k">=</span>p;<span class="pl-c1">this</span>.<span class="pl-smi">binormals</span><span class="pl-k">=</span>o;<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span>f;b<span class="pl-k">++</span>){<span class="pl-c1">this</span>.<span class="pl-smi">grid</span>[b]<span class="pl-k">=</span>[];d<span class="pl-k">=</span>b<span class="pl-k">/</span>(f<span class="pl-k">-</span><span class="pl-c1">1</span>);l<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-en">getPointAt</span>(d);d<span class="pl-k">=</span>n[b];g<span class="pl-k">=</span>p[b];h<span class="pl-k">=</span>o[b];<span class="pl-k">if</span>(<span class="pl-c1">this</span>.<span class="pl-smi">debug</span>){<span class="pl-c1">this</span>.<span class="pl-smi">debug</span>.<span class="pl-c1">add</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.ArrowHelper</span>(d,</td>
      </tr>
      <tr>
        <td id="L661" class="blob-num js-line-number" data-line-number="661"></td>
        <td id="LC661" class="blob-code blob-code-inner js-file-line">l,c,<span class="pl-c1">255</span>));<span class="pl-c1">this</span>.<span class="pl-smi">debug</span>.<span class="pl-c1">add</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.ArrowHelper</span>(g,l,c,<span class="pl-c1">16711680</span>));<span class="pl-c1">this</span>.<span class="pl-smi">debug</span>.<span class="pl-c1">add</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.ArrowHelper</span>(h,l,c,<span class="pl-c1">65280</span>))}<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">radiusSegments</span>;d<span class="pl-k">++</span>){i<span class="pl-k">=</span>d<span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-smi">radiusSegments</span><span class="pl-k">*</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span>;j<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">radius</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(i);i<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">radius</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(i);<span class="pl-smi">m</span>.<span class="pl-en">copy</span>(l);<span class="pl-smi">m</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>(j<span class="pl-k">*</span><span class="pl-smi">g</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>i<span class="pl-k">*</span><span class="pl-smi">h</span>.<span class="pl-c1">x</span>);<span class="pl-smi">m</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>(j<span class="pl-k">*</span><span class="pl-smi">g</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>i<span class="pl-k">*</span><span class="pl-smi">h</span>.<span class="pl-c1">y</span>);<span class="pl-smi">m</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-c1">z</span><span class="pl-k">+</span>(j<span class="pl-k">*</span><span class="pl-smi">g</span>.<span class="pl-c1">z</span><span class="pl-k">+</span>i<span class="pl-k">*</span><span class="pl-smi">h</span>.<span class="pl-c1">z</span>);<span class="pl-c1">this</span>.<span class="pl-smi">grid</span>[b][d]<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-smi">m</span>.<span class="pl-c1">x</span>,<span class="pl-smi">m</span>.<span class="pl-c1">y</span>,<span class="pl-smi">m</span>.<span class="pl-c1">z</span>))<span class="pl-k">-</span><span class="pl-c1">1</span>}}<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">segments</span>;b<span class="pl-k">++</span>)<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">radiusSegments</span>;d<span class="pl-k">++</span>){f<span class="pl-k">=</span>e<span class="pl-k">?</span>(b<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">%</span><span class="pl-c1">this</span>.<span class="pl-smi">segments</span><span class="pl-k">:</span>b<span class="pl-k">+</span><span class="pl-c1">1</span>;m<span class="pl-k">=</span>(d<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">%</span><span class="pl-c1">this</span>.<span class="pl-smi">radiusSegments</span>;</td>
      </tr>
      <tr>
        <td id="L662" class="blob-num js-line-number" data-line-number="662"></td>
        <td id="LC662" class="blob-code blob-code-inner js-file-line">a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">grid</span>[b][d];c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">grid</span>[f][d];f<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">grid</span>[f][m];m<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">grid</span>[b][m];n<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.UV</span>(b<span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-smi">segments</span>,d<span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-smi">radiusSegments</span>);p<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.UV</span>((b<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-smi">segments</span>,d<span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-smi">radiusSegments</span>);o<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.UV</span>((b<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-smi">segments</span>,(d<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-smi">radiusSegments</span>);g<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.UV</span>(b<span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-smi">segments</span>,(d<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span><span class="pl-c1">this</span>.<span class="pl-smi">radiusSegments</span>);<span class="pl-c1">this</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Face4</span>(a,c,f,m));<span class="pl-c1">this</span>.<span class="pl-smi">faceVertexUvs</span>[<span class="pl-c1">0</span>].<span class="pl-c1">push</span>([n,p,o,g])}<span class="pl-c1">this</span>.<span class="pl-en">computeCentroids</span>();<span class="pl-c1">this</span>.<span class="pl-en">computeFaceNormals</span>();<span class="pl-c1">this</span>.<span class="pl-en">computeVertexNormals</span>()};<span class="pl-c1">THREE</span>.<span class="pl-smi">TubeGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L663" class="blob-num js-line-number" data-line-number="663"></td>
        <td id="LC663" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">TubeGeometry</span>.<span class="pl-en">FrenetFrames</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>){<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-k">var</span> e<span class="pl-k">=</span>[],f<span class="pl-k">=</span>[],g<span class="pl-k">=</span>[],h<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,i<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>,b<span class="pl-k">=</span>b<span class="pl-k">+</span><span class="pl-c1">1</span>,j,l,m;<span class="pl-c1">this</span>.<span class="pl-smi">tangents</span><span class="pl-k">=</span>e;<span class="pl-c1">this</span>.<span class="pl-smi">normals</span><span class="pl-k">=</span>f;<span class="pl-c1">this</span>.<span class="pl-smi">binormals</span><span class="pl-k">=</span>g;<span class="pl-k">for</span>(j<span class="pl-k">=</span><span class="pl-c1">0</span>;j<span class="pl-k">&lt;</span>b;j<span class="pl-k">++</span>){l<span class="pl-k">=</span>j<span class="pl-k">/</span>(b<span class="pl-k">-</span><span class="pl-c1">1</span>);e[j]<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-en">getTangentAt</span>(l);e[j].<span class="pl-c1">normalize</span>()}f[<span class="pl-c1">0</span>]<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;g[<span class="pl-c1">0</span>]<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;a<span class="pl-k">=</span><span class="pl-c1">Number</span>.<span class="pl-c1">MAX_VALUE</span>;j<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(e[<span class="pl-c1">0</span>].<span class="pl-c1">x</span>);l<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(e[<span class="pl-c1">0</span>].<span class="pl-c1">y</span>);m<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(e[<span class="pl-c1">0</span>].<span class="pl-c1">z</span>);<span class="pl-k">if</span>(j<span class="pl-k">&lt;=</span>a){a<span class="pl-k">=</span>j;<span class="pl-smi">d</span>.<span class="pl-c1">set</span>(<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>)}<span class="pl-k">if</span>(l<span class="pl-k">&lt;=</span>a){a<span class="pl-k">=</span>l;<span class="pl-smi">d</span>.<span class="pl-c1">set</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>)}m<span class="pl-k">&lt;=</span>a<span class="pl-k">&amp;&amp;</span><span class="pl-smi">d</span>.<span class="pl-c1">set</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);<span class="pl-smi">h</span>.<span class="pl-en">cross</span>(e[<span class="pl-c1">0</span>],d).<span class="pl-c1">normalize</span>();</td>
      </tr>
      <tr>
        <td id="L664" class="blob-num js-line-number" data-line-number="664"></td>
        <td id="LC664" class="blob-code blob-code-inner js-file-line">f[<span class="pl-c1">0</span>].<span class="pl-en">cross</span>(e[<span class="pl-c1">0</span>],h);g[<span class="pl-c1">0</span>].<span class="pl-en">cross</span>(e[<span class="pl-c1">0</span>],f[<span class="pl-c1">0</span>]);<span class="pl-k">for</span>(j<span class="pl-k">=</span><span class="pl-c1">1</span>;j<span class="pl-k">&lt;</span>b;j<span class="pl-k">++</span>){f[j]<span class="pl-k">=</span>f[j<span class="pl-k">-</span><span class="pl-c1">1</span>].<span class="pl-en">clone</span>();g[j]<span class="pl-k">=</span>g[j<span class="pl-k">-</span><span class="pl-c1">1</span>].<span class="pl-en">clone</span>();<span class="pl-smi">h</span>.<span class="pl-en">cross</span>(e[j<span class="pl-k">-</span><span class="pl-c1">1</span>],e[j]);<span class="pl-k">if</span>(<span class="pl-smi">h</span>.<span class="pl-c1">length</span>()<span class="pl-k">&gt;</span><span class="pl-c1">1E-4</span>){<span class="pl-smi">h</span>.<span class="pl-c1">normalize</span>();d<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">acos</span>(e[j<span class="pl-k">-</span><span class="pl-c1">1</span>].<span class="pl-en">dot</span>(e[j]));<span class="pl-smi">i</span>.<span class="pl-en">makeRotationAxis</span>(h,d).<span class="pl-en">multiplyVector3</span>(f[j])}g[j].<span class="pl-en">cross</span>(e[j],f[j])}<span class="pl-k">if</span>(c){d<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">acos</span>(f[<span class="pl-c1">0</span>].<span class="pl-en">dot</span>(f[b<span class="pl-k">-</span><span class="pl-c1">1</span>]));d<span class="pl-k">=</span>d<span class="pl-k">/</span>(b<span class="pl-k">-</span><span class="pl-c1">1</span>);e[<span class="pl-c1">0</span>].<span class="pl-en">dot</span>(<span class="pl-smi">h</span>.<span class="pl-en">cross</span>(f[<span class="pl-c1">0</span>],f[b<span class="pl-k">-</span><span class="pl-c1">1</span>]))<span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span>(d<span class="pl-k">=</span><span class="pl-k">-</span>d);<span class="pl-k">for</span>(j<span class="pl-k">=</span><span class="pl-c1">1</span>;j<span class="pl-k">&lt;</span>b;j<span class="pl-k">++</span>){<span class="pl-smi">i</span>.<span class="pl-en">makeRotationAxis</span>(e[j],d<span class="pl-k">*</span>j).<span class="pl-en">multiplyVector3</span>(f[j]);g[j].<span class="pl-en">cross</span>(e[j],f[j])}}};</td>
      </tr>
      <tr>
        <td id="L665" class="blob-num js-line-number" data-line-number="665"></td>
        <td id="LC665" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">PolyhedronGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-k">function</span> <span class="pl-en">e</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">normalize</span>().<span class="pl-en">clone</span>();<span class="pl-smi">b</span>.<span class="pl-c1">index</span><span class="pl-k">=</span><span class="pl-smi">i</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">push</span>(b)<span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(<span class="pl-smi">a</span>.<span class="pl-c1">z</span>,<span class="pl-k">-</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span>)<span class="pl-k">/</span><span class="pl-c1">2</span><span class="pl-k">/</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span><span class="pl-k">+</span><span class="pl-c1">0.5</span>,a<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(<span class="pl-k">-</span><span class="pl-smi">a</span>.<span class="pl-c1">y</span>,<span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span><span class="pl-k">*</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>))<span class="pl-k">/</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span><span class="pl-k">+</span><span class="pl-c1">0.5</span>;<span class="pl-smi">b</span>.<span class="pl-smi">uv</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.UV</span>(c,<span class="pl-c1">1</span><span class="pl-k">-</span>a);<span class="pl-k">return</span> b}function f(a,b,c,d){if(d&lt;1){d=new THREE.Face3(a.index,b.index,c.index,[a.clone(),b.clone(),c.clone()]);d.centroid.addSelf(a).addSelf(b).addSelf(c).divideScalar(3);d.normal=d.centroid.clone().normalize();i.faces.push(d);d=Math.atan2(d.centroid.z,-d.centroid.x);</td>
      </tr>
      <tr>
        <td id="L666" class="blob-num js-line-number" data-line-number="666"></td>
        <td id="LC666" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">i</span>.<span class="pl-smi">faceVertexUvs</span>[<span class="pl-c1">0</span>].<span class="pl-c1">push</span>([<span class="pl-en">h</span>(<span class="pl-smi">a</span>.<span class="pl-smi">uv</span>,a,d),<span class="pl-en">h</span>(<span class="pl-smi">b</span>.<span class="pl-smi">uv</span>,b,d),<span class="pl-en">h</span>(<span class="pl-smi">c</span>.<span class="pl-smi">uv</span>,c,d)])}<span class="pl-k">else</span>{d<span class="pl-k">=</span>d<span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-en">f</span>(a,<span class="pl-en">g</span>(a,b),<span class="pl-en">g</span>(a,c),d);<span class="pl-en">f</span>(<span class="pl-en">g</span>(a,b),b,<span class="pl-en">g</span>(b,c),d);<span class="pl-en">f</span>(<span class="pl-en">g</span>(a,c),<span class="pl-en">g</span>(b,c),c,d);<span class="pl-en">f</span>(<span class="pl-en">g</span>(a,b),<span class="pl-en">g</span>(b,c),<span class="pl-en">g</span>(a,c),d)}}function g(a,b){m[a.index]||(m[a.index]=[]);m[b.index]||(m[b.index]=[]);var c=m[a.index][b.index];c===void 0&amp;&amp;(m[a.index][b.index]=m[b.index][a.index]=c=e((new THREE.Vector3).add(a,b).divideScalar(2)));return c}function h(a,b,c){c&lt;0&amp;&amp;a.u===1&amp;&amp;(a=new THREE.UV(a.u-1,a.v));b.x===0&amp;&amp;b.z===0&amp;&amp;(a=new THREE.UV(c/2/Math.PI+0.5,a.v));return a}THREE.Geometry.call(this);</td>
      </tr>
      <tr>
        <td id="L667" class="blob-num js-line-number" data-line-number="667"></td>
        <td id="LC667" class="blob-code blob-code-inner js-file-line"><span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span>c<span class="pl-k">||</span><span class="pl-c1">1</span>,d<span class="pl-k">=</span>d<span class="pl-k">||</span><span class="pl-c1">0</span>,i<span class="pl-k">=</span><span class="pl-c1">this</span>,j<span class="pl-k">=</span><span class="pl-c1">0</span>,l<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>;j<span class="pl-k">&lt;</span>l;j<span class="pl-k">++</span>)<span class="pl-en">e</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(a[j][<span class="pl-c1">0</span>],a[j][<span class="pl-c1">1</span>],a[j][<span class="pl-c1">2</span>]));<span class="pl-k">for</span>(<span class="pl-k">var</span> m<span class="pl-k">=</span>[],a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>,j<span class="pl-k">=</span><span class="pl-c1">0</span>,l<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-c1">length</span>;j<span class="pl-k">&lt;</span>l;j<span class="pl-k">++</span>)<span class="pl-en">f</span>(a[b[j][<span class="pl-c1">0</span>]],a[b[j][<span class="pl-c1">1</span>]],a[b[j][<span class="pl-c1">2</span>]],d);<span class="pl-c1">this</span>.<span class="pl-en">mergeVertices</span>();j<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(l<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">length</span>;j<span class="pl-k">&lt;</span>l;j<span class="pl-k">++</span>)<span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>[j].<span class="pl-en">multiplyScalar</span>(c);<span class="pl-c1">this</span>.<span class="pl-en">computeCentroids</span>();<span class="pl-c1">this</span>.<span class="pl-smi">boundingSphere</span><span class="pl-k">=</span>{radius<span class="pl-k">:</span>c}};<span class="pl-c1">THREE</span>.<span class="pl-smi">PolyhedronGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L668" class="blob-num js-line-number" data-line-number="668"></td>
        <td id="LC668" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">IcosahedronGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span>(<span class="pl-c1">1</span><span class="pl-k">+</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-c1">5</span>))<span class="pl-k">/</span><span class="pl-c1">2</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">PolyhedronGeometry</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,[[<span class="pl-k">-</span><span class="pl-c1">1</span>,c,<span class="pl-c1">0</span>],[<span class="pl-c1">1</span>,c,<span class="pl-c1">0</span>],[<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span>c,<span class="pl-c1">0</span>],[<span class="pl-c1">1</span>,<span class="pl-k">-</span>c,<span class="pl-c1">0</span>],[<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,c],[<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,c],[<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span>c],[<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span>c],[c,<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>],[c,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>],[<span class="pl-k">-</span>c,<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>],[<span class="pl-k">-</span>c,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>]],[[<span class="pl-c1">0</span>,<span class="pl-c1">11</span>,<span class="pl-c1">5</span>],[<span class="pl-c1">0</span>,<span class="pl-c1">5</span>,<span class="pl-c1">1</span>],[<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">7</span>],[<span class="pl-c1">0</span>,<span class="pl-c1">7</span>,<span class="pl-c1">10</span>],[<span class="pl-c1">0</span>,<span class="pl-c1">10</span>,<span class="pl-c1">11</span>],[<span class="pl-c1">1</span>,<span class="pl-c1">5</span>,<span class="pl-c1">9</span>],[<span class="pl-c1">5</span>,<span class="pl-c1">11</span>,<span class="pl-c1">4</span>],[<span class="pl-c1">11</span>,<span class="pl-c1">10</span>,<span class="pl-c1">2</span>],[<span class="pl-c1">10</span>,<span class="pl-c1">7</span>,<span class="pl-c1">6</span>],[<span class="pl-c1">7</span>,<span class="pl-c1">1</span>,<span class="pl-c1">8</span>],[<span class="pl-c1">3</span>,<span class="pl-c1">9</span>,<span class="pl-c1">4</span>],[<span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">2</span>],[<span class="pl-c1">3</span>,<span class="pl-c1">2</span>,<span class="pl-c1">6</span>],[<span class="pl-c1">3</span>,<span class="pl-c1">6</span>,<span class="pl-c1">8</span>],[<span class="pl-c1">3</span>,<span class="pl-c1">8</span>,<span class="pl-c1">9</span>],[<span class="pl-c1">4</span>,<span class="pl-c1">9</span>,<span class="pl-c1">5</span>],[<span class="pl-c1">2</span>,<span class="pl-c1">4</span>,<span class="pl-c1">11</span>],[<span class="pl-c1">6</span>,<span class="pl-c1">2</span>,<span class="pl-c1">10</span>],[<span class="pl-c1">8</span>,<span class="pl-c1">6</span>,<span class="pl-c1">7</span>],[<span class="pl-c1">9</span>,<span class="pl-c1">8</span>,<span class="pl-c1">1</span>]],a,b)};<span class="pl-c1">THREE</span>.<span class="pl-smi">IcosahedronGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L669" class="blob-num js-line-number" data-line-number="669"></td>
        <td id="LC669" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">OctahedronGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">PolyhedronGeometry</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,[[<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>],[<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>],[<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>],[<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>],[<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>],[<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>]],[[<span class="pl-c1">0</span>,<span class="pl-c1">2</span>,<span class="pl-c1">4</span>],[<span class="pl-c1">0</span>,<span class="pl-c1">4</span>,<span class="pl-c1">3</span>],[<span class="pl-c1">0</span>,<span class="pl-c1">3</span>,<span class="pl-c1">5</span>],[<span class="pl-c1">0</span>,<span class="pl-c1">5</span>,<span class="pl-c1">2</span>],[<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">5</span>],[<span class="pl-c1">1</span>,<span class="pl-c1">5</span>,<span class="pl-c1">3</span>],[<span class="pl-c1">1</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>],[<span class="pl-c1">1</span>,<span class="pl-c1">4</span>,<span class="pl-c1">2</span>]],a,b)};<span class="pl-c1">THREE</span>.<span class="pl-smi">OctahedronGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-en">TetrahedronGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">PolyhedronGeometry</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,[[<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>],[<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>],[<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>],[<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>]],[[<span class="pl-c1">2</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>],[<span class="pl-c1">0</span>,<span class="pl-c1">3</span>,<span class="pl-c1">2</span>],[<span class="pl-c1">1</span>,<span class="pl-c1">3</span>,<span class="pl-c1">0</span>],[<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">1</span>]],a,b)};<span class="pl-c1">THREE</span>.<span class="pl-smi">TetrahedronGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L670" class="blob-num js-line-number" data-line-number="670"></td>
        <td id="LC670" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">ParametricGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>,f<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faces</span>,g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faceVertexUvs</span>[<span class="pl-c1">0</span>],d<span class="pl-k">=</span>d<span class="pl-k">===</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">?</span><span class="pl-c1">false</span><span class="pl-k">:</span>d,h,i,j,l,m<span class="pl-k">=</span>b<span class="pl-k">+</span><span class="pl-c1">1</span>;<span class="pl-k">for</span>(h<span class="pl-k">=</span><span class="pl-c1">0</span>;h<span class="pl-k">&lt;=</span>c;h<span class="pl-k">++</span>){l<span class="pl-k">=</span>h<span class="pl-k">/</span>c;<span class="pl-k">for</span>(i<span class="pl-k">=</span><span class="pl-c1">0</span>;i<span class="pl-k">&lt;=</span>b;i<span class="pl-k">++</span>){j<span class="pl-k">=</span>i<span class="pl-k">/</span>b;j<span class="pl-k">=</span><span class="pl-en">a</span>(j,l);<span class="pl-smi">e</span>.<span class="pl-c1">push</span>(j)}}<span class="pl-k">var</span> n,p,o,q;<span class="pl-k">for</span>(h<span class="pl-k">=</span><span class="pl-c1">0</span>;h<span class="pl-k">&lt;</span>c;h<span class="pl-k">++</span>)<span class="pl-k">for</span>(i<span class="pl-k">=</span><span class="pl-c1">0</span>;i<span class="pl-k">&lt;</span>b;i<span class="pl-k">++</span>){a<span class="pl-k">=</span>h<span class="pl-k">*</span>m<span class="pl-k">+</span>i;e<span class="pl-k">=</span>h<span class="pl-k">*</span>m<span class="pl-k">+</span>i<span class="pl-k">+</span><span class="pl-c1">1</span>;l<span class="pl-k">=</span>(h<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">*</span>m<span class="pl-k">+</span>i;j<span class="pl-k">=</span>(h<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">*</span>m<span class="pl-k">+</span>i<span class="pl-k">+</span><span class="pl-c1">1</span>;n<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.UV</span>(i<span class="pl-k">/</span>b,h<span class="pl-k">/</span>c);p<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.UV</span>((i<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span>b,h<span class="pl-k">/</span>c);o<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.UV</span>(i<span class="pl-k">/</span>b,(h<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span>c);q<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.UV</span>((i<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span>b,(h<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span>c);<span class="pl-k">if</span>(d){<span class="pl-smi">f</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(a,e,l));<span class="pl-smi">f</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(e,j,l));<span class="pl-smi">g</span>.<span class="pl-c1">push</span>([n,</td>
      </tr>
      <tr>
        <td id="L671" class="blob-num js-line-number" data-line-number="671"></td>
        <td id="LC671" class="blob-code blob-code-inner js-file-line">p,o]);<span class="pl-smi">g</span>.<span class="pl-c1">push</span>([p,q,o])}<span class="pl-k">else</span>{<span class="pl-smi">f</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Face4</span>(a,e,j,l));<span class="pl-smi">g</span>.<span class="pl-c1">push</span>([n,p,q,o])}}<span class="pl-c1">this</span>.<span class="pl-en">computeCentroids</span>();<span class="pl-c1">this</span>.<span class="pl-en">computeFaceNormals</span>();<span class="pl-c1">this</span>.<span class="pl-en">computeVertexNormals</span>()};<span class="pl-c1">THREE</span>.<span class="pl-smi">ParametricGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L672" class="blob-num js-line-number" data-line-number="672"></td>
        <td id="LC672" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">ConvexGeometry</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">function</span> <span class="pl-en">b</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>();<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">THREE.UV</span>(<span class="pl-smi">a</span>.<span class="pl-c1">x</span><span class="pl-k">/</span>b,<span class="pl-smi">a</span>.<span class="pl-c1">y</span><span class="pl-k">/</span>b)}<span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span>[[<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>],[<span class="pl-c1">0</span>,<span class="pl-c1">2</span>,<span class="pl-c1">1</span>]],d<span class="pl-k">=</span><span class="pl-c1">3</span>;d<span class="pl-k">&lt;</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>;d<span class="pl-k">++</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span>d,f<span class="pl-k">=</span>a[e].<span class="pl-en">clone</span>(),g<span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">length</span>();<span class="pl-smi">f</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>g<span class="pl-k">*</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">random</span>()<span class="pl-k">-</span><span class="pl-c1">0.5</span>)<span class="pl-k">*</span><span class="pl-c1">2E-6</span>;<span class="pl-smi">f</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>g<span class="pl-k">*</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">random</span>()<span class="pl-k">-</span><span class="pl-c1">0.5</span>)<span class="pl-k">*</span><span class="pl-c1">2E-6</span>;<span class="pl-smi">f</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-smi">f</span>.<span class="pl-c1">z</span><span class="pl-k">+</span>g<span class="pl-k">*</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">random</span>()<span class="pl-k">-</span><span class="pl-c1">0.5</span>)<span class="pl-k">*</span><span class="pl-c1">2E-6</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> g<span class="pl-k">=</span>[],h<span class="pl-k">=</span><span class="pl-c1">0</span>;h<span class="pl-k">&lt;</span><span class="pl-smi">c</span>.<span class="pl-c1">length</span>;){<span class="pl-k">var</span> i<span class="pl-k">=</span>c[h],j<span class="pl-k">=</span>f,l<span class="pl-k">=</span>a[i[<span class="pl-c1">0</span>]],m;m<span class="pl-k">=</span>l;<span class="pl-k">var</span> n<span class="pl-k">=</span>a[i[<span class="pl-c1">1</span>]],p<span class="pl-k">=</span>a[i[<span class="pl-c1">2</span>]],o<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,q<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-smi">o</span>.<span class="pl-c1">sub</span>(p,n);<span class="pl-smi">q</span>.<span class="pl-c1">sub</span>(m,n);<span class="pl-smi">o</span>.<span class="pl-en">crossSelf</span>(q);<span class="pl-smi">o</span>.<span class="pl-en">isZero</span>()<span class="pl-k">||</span><span class="pl-smi">o</span>.<span class="pl-c1">normalize</span>();m<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L673" class="blob-num js-line-number" data-line-number="673"></td>
        <td id="LC673" class="blob-code blob-code-inner js-file-line">o;l<span class="pl-k">=</span><span class="pl-smi">m</span>.<span class="pl-en">dot</span>(l);<span class="pl-k">if</span>(<span class="pl-smi">m</span>.<span class="pl-en">dot</span>(j)<span class="pl-k">&gt;=</span>l){<span class="pl-k">for</span>(j<span class="pl-k">=</span><span class="pl-c1">0</span>;j<span class="pl-k">&lt;</span><span class="pl-c1">3</span>;j<span class="pl-k">++</span>){l<span class="pl-k">=</span>[i[j],i[(j<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">%</span><span class="pl-c1">3</span>]];m<span class="pl-k">=</span><span class="pl-c1">true</span>;<span class="pl-k">for</span>(n<span class="pl-k">=</span><span class="pl-c1">0</span>;n<span class="pl-k">&lt;</span><span class="pl-smi">g</span>.<span class="pl-c1">length</span>;n<span class="pl-k">++</span>)<span class="pl-k">if</span>(g[n][<span class="pl-c1">0</span>]<span class="pl-k">===</span>l[<span class="pl-c1">1</span>]<span class="pl-k">&amp;&amp;</span>g[n][<span class="pl-c1">1</span>]<span class="pl-k">===</span>l[<span class="pl-c1">0</span>]){g[n]<span class="pl-k">=</span>g[<span class="pl-smi">g</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>];<span class="pl-smi">g</span>.<span class="pl-c1">pop</span>();m<span class="pl-k">=</span><span class="pl-c1">false</span>;<span class="pl-k">break</span>}m<span class="pl-k">&amp;&amp;</span><span class="pl-smi">g</span>.<span class="pl-c1">push</span>(l)}c[h]<span class="pl-k">=</span>c[<span class="pl-smi">c</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>];<span class="pl-smi">c</span>.<span class="pl-c1">pop</span>()}<span class="pl-k">else</span> h<span class="pl-k">++</span>}<span class="pl-k">for</span>(n<span class="pl-k">=</span><span class="pl-c1">0</span>;n<span class="pl-k">&lt;</span><span class="pl-smi">g</span>.<span class="pl-c1">length</span>;n<span class="pl-k">++</span>)<span class="pl-smi">c</span>.<span class="pl-c1">push</span>([g[n][<span class="pl-c1">0</span>],g[n][<span class="pl-c1">1</span>],e])}e<span class="pl-k">=</span><span class="pl-c1">0</span>;f<span class="pl-k">=</span><span class="pl-c1">Array</span>(<span class="pl-smi">a</span>.<span class="pl-c1">length</span>);<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span><span class="pl-smi">c</span>.<span class="pl-c1">length</span>;d<span class="pl-k">++</span>){g<span class="pl-k">=</span>c[d];<span class="pl-k">for</span>(h<span class="pl-k">=</span><span class="pl-c1">0</span>;h<span class="pl-k">&lt;</span><span class="pl-c1">3</span>;h<span class="pl-k">++</span>){<span class="pl-k">if</span>(f[g[h]]<span class="pl-k">===</span><span class="pl-k">void</span> <span class="pl-c1">0</span>){f[g[h]]<span class="pl-k">=</span>e<span class="pl-k">++</span>;<span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">push</span>(a[g[h]])}g[h]<span class="pl-k">=</span>f[g[h]]}}<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span><span class="pl-smi">c</span>.<span class="pl-c1">length</span>;d<span class="pl-k">++</span>)<span class="pl-c1">this</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Face3</span>(c[d][<span class="pl-c1">0</span>],c[d][<span class="pl-c1">1</span>],c[d][<span class="pl-c1">2</span>]));<span class="pl-k">for</span>(d<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L674" class="blob-num js-line-number" data-line-number="674"></td>
        <td id="LC674" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span><span class="pl-c1">this</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">length</span>;d<span class="pl-k">++</span>){g<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">faces</span>[d];<span class="pl-c1">this</span>.<span class="pl-smi">faceVertexUvs</span>[<span class="pl-c1">0</span>].<span class="pl-c1">push</span>([<span class="pl-en">b</span>(<span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>[<span class="pl-smi">g</span>.<span class="pl-smi">a</span>]),<span class="pl-en">b</span>(<span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>[<span class="pl-smi">g</span>.<span class="pl-smi">b</span>]),<span class="pl-en">b</span>(<span class="pl-c1">this</span>.<span class="pl-smi">vertices</span>[<span class="pl-smi">g</span>.<span class="pl-smi">c</span>])])}<span class="pl-c1">this</span>.<span class="pl-en">computeCentroids</span>();<span class="pl-c1">this</span>.<span class="pl-en">computeFaceNormals</span>();<span class="pl-c1">this</span>.<span class="pl-en">computeVertexNormals</span>()};<span class="pl-c1">THREE</span>.<span class="pl-smi">ConvexGeometry</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Geometry</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L675" class="blob-num js-line-number" data-line-number="675"></td>
        <td id="LC675" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">AxisHelper</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Geometry</span>;<span class="pl-smi">b</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(a<span class="pl-k">||</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,a<span class="pl-k">||</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>),<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,a<span class="pl-k">||</span><span class="pl-c1">1</span>));<span class="pl-smi">b</span>.<span class="pl-smi">colors</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">16711680</span>),<span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">16755200</span>),<span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">65280</span>),<span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">11206400</span>),<span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">255</span>),<span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">43775</span>));a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.LineBasicMaterial</span>({vertexColors<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">VertexColors</span>});<span class="pl-c1">THREE</span>.<span class="pl-smi">Line</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,b,a,<span class="pl-c1">THREE</span>.<span class="pl-smi">LinePieces</span>)};</td>
      </tr>
      <tr>
        <td id="L676" class="blob-num js-line-number" data-line-number="676"></td>
        <td id="LC676" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">AxisHelper</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Line</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L677" class="blob-num js-line-number" data-line-number="677"></td>
        <td id="LC677" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">ArrowHelper</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);d<span class="pl-k">===</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span>(d<span class="pl-k">=</span><span class="pl-c1">16776960</span>);c<span class="pl-k">===</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span>(c<span class="pl-k">=</span><span class="pl-c1">20</span>);<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Geometry</span>;<span class="pl-smi">e</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>));<span class="pl-smi">e</span>.<span class="pl-smi">vertices</span>.<span class="pl-c1">push</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>));<span class="pl-c1">this</span>.<span class="pl-smi">line</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Line</span>(e,<span class="pl-k">new</span> <span class="pl-en">THREE.LineBasicMaterial</span>({color<span class="pl-k">:</span>d}));<span class="pl-c1">this</span>.<span class="pl-c1">add</span>(<span class="pl-c1">this</span>.<span class="pl-smi">line</span>);e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.CylinderGeometry</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0.05</span>,<span class="pl-c1">0.25</span>,<span class="pl-c1">5</span>,<span class="pl-c1">1</span>);<span class="pl-c1">this</span>.<span class="pl-smi">cone</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Mesh</span>(e,<span class="pl-k">new</span> <span class="pl-en">THREE.MeshBasicMaterial</span>({color<span class="pl-k">:</span>d}));<span class="pl-c1">this</span>.<span class="pl-smi">cone</span>.<span class="pl-smi">position</span>.<span class="pl-c1">set</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>);<span class="pl-c1">this</span>.<span class="pl-c1">add</span>(<span class="pl-c1">this</span>.<span class="pl-smi">cone</span>);<span class="pl-k">if</span>(b <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Vector3</span>)<span class="pl-c1">this</span>.<span class="pl-smi">position</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L678" class="blob-num js-line-number" data-line-number="678"></td>
        <td id="LC678" class="blob-code blob-code-inner js-file-line">b;<span class="pl-c1">this</span>.<span class="pl-en">setDirection</span>(a);<span class="pl-c1">this</span>.<span class="pl-en">setLength</span>(c)};<span class="pl-c1">THREE</span>.<span class="pl-smi">ArrowHelper</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">prototype</span>);<span class="pl-c1">THREE</span>.<span class="pl-smi">ArrowHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setDirection</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>)).<span class="pl-en">crossSelf</span>(a),a<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">acos</span>((<span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>)).<span class="pl-en">dot</span>(<span class="pl-smi">a</span>.<span class="pl-en">clone</span>().<span class="pl-c1">normalize</span>()));<span class="pl-c1">this</span>.<span class="pl-smi">matrix</span><span class="pl-k">=</span>(<span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>).<span class="pl-en">makeRotationAxis</span>(<span class="pl-smi">b</span>.<span class="pl-c1">normalize</span>(),a);<span class="pl-c1">this</span>.<span class="pl-smi">rotation</span>.<span class="pl-en">setEulerFromRotationMatrix</span>(<span class="pl-c1">this</span>.<span class="pl-smi">matrix</span>,<span class="pl-c1">this</span>.<span class="pl-smi">eulerOrder</span>)};<span class="pl-c1">THREE</span>.<span class="pl-smi">ArrowHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setLength</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">scale</span>.<span class="pl-c1">set</span>(a,a,a)};</td>
      </tr>
      <tr>
        <td id="L679" class="blob-num js-line-number" data-line-number="679"></td>
        <td id="LC679" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">ArrowHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setColor</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">line</span>.<span class="pl-smi">material</span>.<span class="pl-c1">color</span>.<span class="pl-en">setHex</span>(a);<span class="pl-c1">this</span>.<span class="pl-smi">cone</span>.<span class="pl-smi">material</span>.<span class="pl-c1">color</span>.<span class="pl-en">setHex</span>(a)};</td>
      </tr>
      <tr>
        <td id="L680" class="blob-num js-line-number" data-line-number="680"></td>
        <td id="LC680" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">CameraHelper</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">function</span> <span class="pl-en">b</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">d</span>){<span class="pl-en">c</span>(a,d);<span class="pl-en">c</span>(b,d)}function c(a,b){d.geometry.vertices.push(new THREE.Vector3);d.geometry.colors.push(new THREE.Color(b));d.pointMap[a]===void 0&amp;&amp;(d.pointMap[a]=[]);d.pointMap[a].push(d.geometry.vertices.length-1)}THREE.Line.call(this);var d=this;this.geometry=new THREE.Geometry;this.material=new THREE.LineBasicMaterial({color:16777215,vertexColors:THREE.FaceColors});this.type=THREE.LinePieces;this.matrixWorld=a.matrixWorld;this.matrixAutoUpdate=false;this.pointMap=</td>
      </tr>
      <tr>
        <td id="L681" class="blob-num js-line-number" data-line-number="681"></td>
        <td id="LC681" class="blob-code blob-code-inner js-file-line">{};<span class="pl-en">b</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>n1<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>n2<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">16755200</span>);<span class="pl-en">b</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>n2<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>n4<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">16755200</span>);<span class="pl-en">b</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>n4<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>n3<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">16755200</span>);<span class="pl-en">b</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>n3<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>n1<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">16755200</span>);<span class="pl-en">b</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>f1<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>f2<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">16755200</span>);<span class="pl-en">b</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>f2<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>f4<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">16755200</span>);<span class="pl-en">b</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>f4<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>f3<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">16755200</span>);<span class="pl-en">b</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>f3<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>f1<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">16755200</span>);<span class="pl-en">b</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>n1<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>f1<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">16755200</span>);<span class="pl-en">b</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>n2<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>f2<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">16755200</span>);<span class="pl-en">b</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>n3<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>f3<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">16755200</span>);<span class="pl-en">b</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>n4<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>f4<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">16755200</span>);<span class="pl-en">b</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>p<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>n1<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">16711680</span>);<span class="pl-en">b</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>p<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>n2<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">16711680</span>);<span class="pl-en">b</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>p<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>n3<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">16711680</span>);<span class="pl-en">b</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>p<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>n4<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">16711680</span>);<span class="pl-en">b</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>u1<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>u2<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">43775</span>);<span class="pl-en">b</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>u2<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>u3<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">43775</span>);<span class="pl-en">b</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>u3<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>u1<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">43775</span>);<span class="pl-en">b</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>c<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>t<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">16777215</span>);<span class="pl-en">b</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>p<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>c<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">3355443</span>);<span class="pl-en">b</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>cn1<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>cn2<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">3355443</span>);<span class="pl-en">b</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>cn3<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>cn4<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">3355443</span>);<span class="pl-en">b</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>cf1<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L682" class="blob-num js-line-number" data-line-number="682"></td>
        <td id="LC682" class="blob-code blob-code-inner js-file-line"><span class="pl-s"><span class="pl-pds">&quot;</span>cf2<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">3355443</span>);<span class="pl-en">b</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>cf3<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>cf4<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">3355443</span>);<span class="pl-c1">this</span>.<span class="pl-smi">camera</span><span class="pl-k">=</span>a;<span class="pl-c1">this</span>.<span class="pl-en">update</span>(a)};<span class="pl-c1">THREE</span>.<span class="pl-smi">CameraHelper</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Line</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L683" class="blob-num js-line-number" data-line-number="683"></td>
        <td id="LC683" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">CameraHelper</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">update</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">function</span> <span class="pl-en">a</span>(<span class="pl-smi">a</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">CameraHelper</span>.<span class="pl-smi">__v</span>.<span class="pl-c1">set</span>(d,e,f);<span class="pl-c1">THREE</span>.<span class="pl-smi">CameraHelper</span>.<span class="pl-smi">__projector</span>.<span class="pl-en">unprojectVector</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">CameraHelper</span>.<span class="pl-smi">__v</span>,<span class="pl-c1">THREE</span>.<span class="pl-smi">CameraHelper</span>.<span class="pl-smi">__c</span>);a<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-smi">pointMap</span>[a];<span class="pl-k">if</span>(a<span class="pl-k">!==</span><span class="pl-k">void</span> <span class="pl-c1">0</span>){d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(e<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>;d<span class="pl-k">&lt;</span>e;d<span class="pl-k">++</span>)<span class="pl-smi">b</span>.<span class="pl-smi">geometry</span>.<span class="pl-smi">vertices</span>[a[d]].<span class="pl-en">copy</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">CameraHelper</span>.<span class="pl-smi">__v</span>)}}<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">CameraHelper</span>.<span class="pl-smi">__c</span>.<span class="pl-smi">projectionMatrix</span>.<span class="pl-en">copy</span>(<span class="pl-c1">this</span>.<span class="pl-smi">camera</span>.<span class="pl-smi">projectionMatrix</span>);<span class="pl-en">a</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>c<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>);<span class="pl-en">a</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>t<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);<span class="pl-en">a</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>n1<span class="pl-pds">&quot;</span></span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>);<span class="pl-en">a</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>n2<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>);<span class="pl-en">a</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>n3<span class="pl-pds">&quot;</span></span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>);<span class="pl-en">a</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>n4<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>);<span class="pl-en">a</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>f1<span class="pl-pds">&quot;</span></span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L684" class="blob-num js-line-number" data-line-number="684"></td>
        <td id="LC684" class="blob-code blob-code-inner js-file-line"><span class="pl-en">a</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>f2<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>);<span class="pl-en">a</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>f3<span class="pl-pds">&quot;</span></span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>);<span class="pl-en">a</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>f4<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>);<span class="pl-en">a</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>u1<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">0.7</span>,<span class="pl-c1">1.1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>);<span class="pl-en">a</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>u2<span class="pl-pds">&quot;</span></span>,<span class="pl-k">-</span><span class="pl-c1">0.7</span>,<span class="pl-c1">1.1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>);<span class="pl-en">a</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>u3<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">0</span>,<span class="pl-c1">2</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>);<span class="pl-en">a</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>cf1<span class="pl-pds">&quot;</span></span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);<span class="pl-en">a</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>cf2<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);<span class="pl-en">a</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>cf3<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>);<span class="pl-en">a</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>cf4<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>);<span class="pl-en">a</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>cn1<span class="pl-pds">&quot;</span></span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>);<span class="pl-en">a</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>cn2<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>);<span class="pl-en">a</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>cn3<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>);<span class="pl-en">a</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>cn4<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>);<span class="pl-c1">this</span>.<span class="pl-smi">geometry</span>.<span class="pl-smi">verticesNeedUpdate</span><span class="pl-k">=</span><span class="pl-c1">true</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">CameraHelper</span>.<span class="pl-smi">__projector</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Projector</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">CameraHelper</span>.<span class="pl-smi">__v</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-c1">THREE</span>.<span class="pl-smi">CameraHelper</span>.<span class="pl-smi">__c</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Camera</span>;</td>
      </tr>
      <tr>
        <td id="L685" class="blob-num js-line-number" data-line-number="685"></td>
        <td id="LC685" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">SubdivisionModifier</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-c1">this</span>.<span class="pl-smi">subdivisions</span><span class="pl-k">=</span>a<span class="pl-k">===</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">?</span><span class="pl-c1">1</span><span class="pl-k">:</span>a;<span class="pl-c1">this</span>.<span class="pl-smi">useOldVertexColors</span><span class="pl-k">=</span><span class="pl-c1">false</span>;<span class="pl-c1">this</span>.<span class="pl-smi">supportUVs</span><span class="pl-k">=</span><span class="pl-c1">true</span>;<span class="pl-c1">this</span>.<span class="pl-smi">debug</span><span class="pl-k">=</span><span class="pl-c1">false</span>};<span class="pl-c1">THREE</span>.<span class="pl-smi">SubdivisionModifier</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">modify</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">subdivisions</span>;b<span class="pl-k">--</span> <span class="pl-k">&gt;</span><span class="pl-c1">0</span>;)<span class="pl-c1">this</span>.<span class="pl-en">smooth</span>(a)};<span class="pl-c1">THREE</span>.<span class="pl-smi">GeometryUtils</span>.<span class="pl-en">orderedKey</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(a,b)<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>_<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(a,b)};</td>
      </tr>
      <tr>
        <td id="L686" class="blob-num js-line-number" data-line-number="686"></td>
        <td id="LC686" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">GeometryUtils</span>.<span class="pl-en">computeEdgeFaces</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">function</span> <span class="pl-en">b</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){g[a]<span class="pl-k">===</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span>(g[a]<span class="pl-k">=</span>[]);g[a].<span class="pl-c1">push</span>(b)}<span class="pl-k">var</span> c,d,e,f,g<span class="pl-k">=</span>{},h<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">GeometryUtils</span>.<span class="pl-smi">orderedKey</span>;c<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(d<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">faces</span>.<span class="pl-c1">length</span>;c<span class="pl-k">&lt;</span>d;c<span class="pl-k">++</span>){e<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">faces</span>[c];<span class="pl-k">if</span>(e <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Face3</span>){f<span class="pl-k">=</span><span class="pl-en">h</span>(<span class="pl-smi">e</span>.<span class="pl-smi">a</span>,<span class="pl-smi">e</span>.<span class="pl-smi">b</span>);<span class="pl-en">b</span>(f,c);f<span class="pl-k">=</span><span class="pl-en">h</span>(<span class="pl-smi">e</span>.<span class="pl-smi">b</span>,<span class="pl-smi">e</span>.<span class="pl-smi">c</span>);<span class="pl-en">b</span>(f,c);f<span class="pl-k">=</span><span class="pl-en">h</span>(<span class="pl-smi">e</span>.<span class="pl-smi">c</span>,<span class="pl-smi">e</span>.<span class="pl-smi">a</span>);<span class="pl-en">b</span>(f,c)}<span class="pl-k">else</span> <span class="pl-k">if</span>(e <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Face4</span>){f<span class="pl-k">=</span><span class="pl-en">h</span>(<span class="pl-smi">e</span>.<span class="pl-smi">a</span>,<span class="pl-smi">e</span>.<span class="pl-smi">b</span>);<span class="pl-en">b</span>(f,c);f<span class="pl-k">=</span><span class="pl-en">h</span>(<span class="pl-smi">e</span>.<span class="pl-smi">b</span>,<span class="pl-smi">e</span>.<span class="pl-smi">c</span>);<span class="pl-en">b</span>(f,c);f<span class="pl-k">=</span><span class="pl-en">h</span>(<span class="pl-smi">e</span>.<span class="pl-smi">c</span>,<span class="pl-smi">e</span>.<span class="pl-smi">d</span>);<span class="pl-en">b</span>(f,c);f<span class="pl-k">=</span><span class="pl-en">h</span>(<span class="pl-smi">e</span>.<span class="pl-smi">d</span>,<span class="pl-smi">e</span>.<span class="pl-smi">a</span>);<span class="pl-en">b</span>(f,c)}}<span class="pl-k">return</span> g};</td>
      </tr>
      <tr>
        <td id="L687" class="blob-num js-line-number" data-line-number="687"></td>
        <td id="LC687" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">SubdivisionModifier</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">smooth</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">function</span> <span class="pl-en">b</span>(){<span class="pl-smi">l</span>.<span class="pl-smi">debug</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-en">console</span><span class="pl-k">&amp;&amp;</span><span class="pl-en">console</span>.<span class="pl-smi">assert</span>)<span class="pl-k">&amp;&amp;</span><span class="pl-en">console</span>.<span class="pl-smi">assert</span>.<span class="pl-c1">apply</span>(<span class="pl-en">console</span>,<span class="pl-c1">arguments</span>)}function c(){l.debug&amp;&amp;console.log.apply(console,arguments)}function d(){console&amp;&amp;console.log.apply(console,arguments)}function e(a,b,d,e,g,h,m){var n=new THREE.Face4(a,b,d,e,null,g.color,g.materialIndex);if(l.useOldVertexColors){n.vertexColors=[];for(var o,p,q,r=0;r&lt;4;r++){q=h[r];o=new THREE.Color;o.setRGB(0,0,0);for(var s=0;s&lt;q.length;s++){p=g.vertexColors[q[s]-</td>
      </tr>
      <tr>
        <td id="L688" class="blob-num js-line-number" data-line-number="688"></td>
        <td id="LC688" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">1</span>];<span class="pl-smi">o</span>.<span class="pl-smi">r</span><span class="pl-k">=</span><span class="pl-smi">o</span>.<span class="pl-smi">r</span><span class="pl-k">+</span><span class="pl-smi">p</span>.<span class="pl-smi">r</span>;<span class="pl-smi">o</span>.<span class="pl-smi">g</span><span class="pl-k">=</span><span class="pl-smi">o</span>.<span class="pl-smi">g</span><span class="pl-k">+</span><span class="pl-smi">p</span>.<span class="pl-smi">g</span>;<span class="pl-smi">o</span>.<span class="pl-smi">b</span><span class="pl-k">=</span><span class="pl-smi">o</span>.<span class="pl-smi">b</span><span class="pl-k">+</span><span class="pl-smi">p</span>.<span class="pl-smi">b</span>}<span class="pl-smi">o</span>.<span class="pl-smi">r</span><span class="pl-k">=</span><span class="pl-smi">o</span>.<span class="pl-smi">r</span><span class="pl-k">/</span><span class="pl-smi">q</span>.<span class="pl-c1">length</span>;<span class="pl-smi">o</span>.<span class="pl-smi">g</span><span class="pl-k">=</span><span class="pl-smi">o</span>.<span class="pl-smi">g</span><span class="pl-k">/</span><span class="pl-smi">q</span>.<span class="pl-c1">length</span>;<span class="pl-smi">o</span>.<span class="pl-smi">b</span><span class="pl-k">=</span><span class="pl-smi">o</span>.<span class="pl-smi">b</span><span class="pl-k">/</span><span class="pl-smi">q</span>.<span class="pl-c1">length</span>;<span class="pl-smi">n</span>.<span class="pl-smi">vertexColors</span>[r]<span class="pl-k">=</span>o}}<span class="pl-smi">i</span>.<span class="pl-c1">push</span>(n);<span class="pl-k">if</span>(<span class="pl-smi">l</span>.<span class="pl-smi">supportUVs</span>){g<span class="pl-k">=</span>[<span class="pl-en">f</span>(a,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>),<span class="pl-en">f</span>(b,m),<span class="pl-en">f</span>(d,m),<span class="pl-en">f</span>(e,m)];g[<span class="pl-c1">0</span>]<span class="pl-k">?</span>g[<span class="pl-c1">1</span>]<span class="pl-k">?</span>g[<span class="pl-c1">2</span>]<span class="pl-k">?</span>g[<span class="pl-c1">3</span>]<span class="pl-k">?</span><span class="pl-smi">j</span>.<span class="pl-c1">push</span>(g)<span class="pl-k">:</span><span class="pl-en">c</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>d :( <span class="pl-pds">&quot;</span></span>,e<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>:<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>m)<span class="pl-k">:</span><span class="pl-en">c</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>c :( <span class="pl-pds">&quot;</span></span>,d<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>:<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>m)<span class="pl-k">:</span><span class="pl-en">c</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>b :( <span class="pl-pds">&quot;</span></span>,b<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>:<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>m)<span class="pl-k">:</span><span class="pl-en">c</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>a :( <span class="pl-pds">&quot;</span></span>,a<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>:<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>m)}}function f(a,b){var e=a+&quot;:&quot;+b,f=u[e];if(!f){a&gt;=q&amp;&amp;a&lt;q+o.length?c(&quot;face pt&quot;):c(&quot;edge pt&quot;);d(&quot;warning, UV not found for&quot;,e);return null}return f}function g(a,b,c){var e=a+&quot;:&quot;+b;e in u?d(&quot;dup vertexNo&quot;,a,&quot;oldFaceNo&quot;,b,&quot;value&quot;,</td>
      </tr>
      <tr>
        <td id="L689" class="blob-num js-line-number" data-line-number="689"></td>
        <td id="LC689" class="blob-code blob-code-inner js-file-line">c,<span class="pl-s"><span class="pl-pds">&quot;</span>key<span class="pl-pds">&quot;</span></span>,e,u[e])<span class="pl-k">:</span>u[e]<span class="pl-k">=</span>c}<span class="pl-k">var</span> h<span class="pl-k">=</span>[],i<span class="pl-k">=</span>[],j<span class="pl-k">=</span>[],l<span class="pl-k">=</span><span class="pl-c1">this</span>,m<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">GeometryUtils</span>.<span class="pl-smi">orderedKey</span>,n<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">GeometryUtils</span>.<span class="pl-smi">computeEdgeFaces</span>,p<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">vertices</span>,o<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">faces</span>,q<span class="pl-k">=</span><span class="pl-smi">p</span>.<span class="pl-c1">length</span>,h<span class="pl-k">=</span><span class="pl-smi">p</span>.<span class="pl-c1">concat</span>(),r<span class="pl-k">=</span>[],t<span class="pl-k">=</span>{},<span class="pl-c1">B</span><span class="pl-k">=</span>{},u<span class="pl-k">=</span>{},s,z,<span class="pl-c1">A</span>,v,y,<span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">faceVertexUvs</span>[<span class="pl-c1">0</span>],<span class="pl-c1">G</span>;<span class="pl-en">c</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>originalFaces, uvs, originalVerticesLength<span class="pl-pds">&quot;</span></span>,<span class="pl-smi">o</span>.<span class="pl-c1">length</span>,<span class="pl-c1">C</span>.<span class="pl-c1">length</span>,q);<span class="pl-k">if</span>(<span class="pl-smi">l</span>.<span class="pl-smi">supportUVs</span>){s<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(z<span class="pl-k">=</span><span class="pl-c1">C</span>.<span class="pl-c1">length</span>;s<span class="pl-k">&lt;</span>z;s<span class="pl-k">++</span>){<span class="pl-c1">A</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(v<span class="pl-k">=</span><span class="pl-c1">C</span>[s].<span class="pl-c1">length</span>;<span class="pl-c1">A</span><span class="pl-k">&lt;</span>v;<span class="pl-c1">A</span><span class="pl-k">++</span>){<span class="pl-c1">G</span><span class="pl-k">=</span>o[s][<span class="pl-s"><span class="pl-pds">&quot;</span>abcd<span class="pl-pds">&quot;</span></span>.<span class="pl-c1">charAt</span>(<span class="pl-c1">A</span>)];<span class="pl-en">g</span>(<span class="pl-c1">G</span>,s,<span class="pl-c1">C</span>[s][<span class="pl-c1">A</span>])}}}<span class="pl-k">if</span>(<span class="pl-c1">C</span>.<span class="pl-c1">length</span><span class="pl-k">==</span><span class="pl-c1">0</span>)<span class="pl-smi">l</span>.<span class="pl-smi">supportUVs</span><span class="pl-k">=</span><span class="pl-c1">false</span>;s<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> <span class="pl-c1">H</span> <span class="pl-k">in</span> u)s<span class="pl-k">++</span>;<span class="pl-k">if</span>(<span class="pl-k">!</span>s){<span class="pl-smi">l</span>.<span class="pl-smi">supportUVs</span><span class="pl-k">=</span><span class="pl-c1">false</span>;<span class="pl-en">c</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>no uvs<span class="pl-pds">&quot;</span></span>)}s<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L690" class="blob-num js-line-number" data-line-number="690"></td>
        <td id="LC690" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>;<span class="pl-k">for</span>(z<span class="pl-k">=</span><span class="pl-smi">o</span>.<span class="pl-c1">length</span>;s<span class="pl-k">&lt;</span>z;s<span class="pl-k">++</span>){y<span class="pl-k">=</span>o[s];<span class="pl-smi">r</span>.<span class="pl-c1">push</span>(<span class="pl-smi">y</span>.<span class="pl-smi">centroid</span>);<span class="pl-smi">h</span>.<span class="pl-c1">push</span>(<span class="pl-smi">y</span>.<span class="pl-smi">centroid</span>);<span class="pl-k">if</span>(<span class="pl-smi">l</span>.<span class="pl-smi">supportUVs</span>){v<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.UV</span>;<span class="pl-k">if</span>(y <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Face3</span>){<span class="pl-smi">v</span>.<span class="pl-smi">u</span><span class="pl-k">=</span><span class="pl-en">f</span>(<span class="pl-smi">y</span>.<span class="pl-smi">a</span>,s).<span class="pl-smi">u</span><span class="pl-k">+</span><span class="pl-en">f</span>(<span class="pl-smi">y</span>.<span class="pl-smi">b</span>,s).<span class="pl-smi">u</span><span class="pl-k">+</span><span class="pl-en">f</span>(<span class="pl-smi">y</span>.<span class="pl-smi">c</span>,s).<span class="pl-smi">u</span>;<span class="pl-smi">v</span>.<span class="pl-smi">v</span><span class="pl-k">=</span><span class="pl-en">f</span>(<span class="pl-smi">y</span>.<span class="pl-smi">a</span>,s).<span class="pl-smi">v</span><span class="pl-k">+</span><span class="pl-en">f</span>(<span class="pl-smi">y</span>.<span class="pl-smi">b</span>,s).<span class="pl-smi">v</span><span class="pl-k">+</span><span class="pl-en">f</span>(<span class="pl-smi">y</span>.<span class="pl-smi">c</span>,s).<span class="pl-smi">v</span>;<span class="pl-smi">v</span>.<span class="pl-smi">u</span><span class="pl-k">=</span><span class="pl-smi">v</span>.<span class="pl-smi">u</span><span class="pl-k">/</span><span class="pl-c1">3</span>;<span class="pl-smi">v</span>.<span class="pl-smi">v</span><span class="pl-k">=</span><span class="pl-smi">v</span>.<span class="pl-smi">v</span><span class="pl-k">/</span><span class="pl-c1">3</span>}<span class="pl-k">else</span> <span class="pl-k">if</span>(y <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Face4</span>){<span class="pl-smi">v</span>.<span class="pl-smi">u</span><span class="pl-k">=</span><span class="pl-en">f</span>(<span class="pl-smi">y</span>.<span class="pl-smi">a</span>,s).<span class="pl-smi">u</span><span class="pl-k">+</span><span class="pl-en">f</span>(<span class="pl-smi">y</span>.<span class="pl-smi">b</span>,s).<span class="pl-smi">u</span><span class="pl-k">+</span><span class="pl-en">f</span>(<span class="pl-smi">y</span>.<span class="pl-smi">c</span>,s).<span class="pl-smi">u</span><span class="pl-k">+</span><span class="pl-en">f</span>(<span class="pl-smi">y</span>.<span class="pl-smi">d</span>,s).<span class="pl-smi">u</span>;<span class="pl-smi">v</span>.<span class="pl-smi">v</span><span class="pl-k">=</span><span class="pl-en">f</span>(<span class="pl-smi">y</span>.<span class="pl-smi">a</span>,s).<span class="pl-smi">v</span><span class="pl-k">+</span><span class="pl-en">f</span>(<span class="pl-smi">y</span>.<span class="pl-smi">b</span>,s).<span class="pl-smi">v</span><span class="pl-k">+</span><span class="pl-en">f</span>(<span class="pl-smi">y</span>.<span class="pl-smi">c</span>,s).<span class="pl-smi">v</span><span class="pl-k">+</span><span class="pl-en">f</span>(<span class="pl-smi">y</span>.<span class="pl-smi">d</span>,s).<span class="pl-smi">v</span>;<span class="pl-smi">v</span>.<span class="pl-smi">u</span><span class="pl-k">=</span><span class="pl-smi">v</span>.<span class="pl-smi">u</span><span class="pl-k">/</span><span class="pl-c1">4</span>;<span class="pl-smi">v</span>.<span class="pl-smi">v</span><span class="pl-k">=</span><span class="pl-smi">v</span>.<span class="pl-smi">v</span><span class="pl-k">/</span><span class="pl-c1">4</span>}<span class="pl-en">g</span>(q<span class="pl-k">+</span>s,<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,v)}}<span class="pl-k">var</span> n<span class="pl-k">=</span><span class="pl-en">n</span>(a),<span class="pl-c1">J</span>;z<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> <span class="pl-c1">E</span>,<span class="pl-c1">M</span>;<span class="pl-c1">H</span><span class="pl-k">=</span>{};<span class="pl-c1">C</span><span class="pl-k">=</span>{};<span class="pl-k">for</span>(s <span class="pl-k">in</span> n){<span class="pl-c1">G</span><span class="pl-k">=</span>n[s];<span class="pl-c1">E</span><span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-c1">split</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>_<span class="pl-pds">&quot;</span></span>);<span class="pl-c1">M</span><span class="pl-k">=</span><span class="pl-c1">E</span>[<span class="pl-c1">0</span>];<span class="pl-c1">E</span><span class="pl-k">=</span><span class="pl-c1">E</span>[<span class="pl-c1">1</span>];<span class="pl-c1">A</span><span class="pl-k">=</span><span class="pl-c1">M</span>;y<span class="pl-k">=</span>[<span class="pl-c1">M</span>,<span class="pl-c1">E</span>];<span class="pl-c1">H</span>[<span class="pl-c1">A</span>]<span class="pl-k">===</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">H</span>[<span class="pl-c1">A</span>]<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L691" class="blob-num js-line-number" data-line-number="691"></td>
        <td id="LC691" class="blob-code blob-code-inner js-file-line">[]);<span class="pl-c1">H</span>[<span class="pl-c1">A</span>].<span class="pl-c1">push</span>(y);<span class="pl-c1">A</span><span class="pl-k">=</span><span class="pl-c1">E</span>;y<span class="pl-k">=</span>[<span class="pl-c1">M</span>,<span class="pl-c1">E</span>];<span class="pl-c1">H</span>[<span class="pl-c1">A</span>]<span class="pl-k">===</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">H</span>[<span class="pl-c1">A</span>]<span class="pl-k">=</span>[]);<span class="pl-c1">H</span>[<span class="pl-c1">A</span>].<span class="pl-c1">push</span>(y);<span class="pl-c1">A</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(v<span class="pl-k">=</span><span class="pl-c1">G</span>.<span class="pl-c1">length</span>;<span class="pl-c1">A</span><span class="pl-k">&lt;</span>v;<span class="pl-c1">A</span><span class="pl-k">++</span>){y<span class="pl-k">=</span><span class="pl-c1">G</span>[<span class="pl-c1">A</span>];<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-c1">M</span>;<span class="pl-k">var</span> <span class="pl-c1">K</span><span class="pl-k">=</span>y,<span class="pl-c1">F</span><span class="pl-k">=</span>s;<span class="pl-c1">C</span>[<span class="pl-c1">J</span>]<span class="pl-k">===</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">C</span>[<span class="pl-c1">J</span>]<span class="pl-k">=</span>{});<span class="pl-c1">C</span>[<span class="pl-c1">J</span>][<span class="pl-c1">K</span>]<span class="pl-k">=</span><span class="pl-c1">F</span>;<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-c1">E</span>;<span class="pl-c1">K</span><span class="pl-k">=</span>s;<span class="pl-c1">C</span>[<span class="pl-c1">J</span>]<span class="pl-k">===</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">C</span>[<span class="pl-c1">J</span>]<span class="pl-k">=</span>{});<span class="pl-c1">C</span>[<span class="pl-c1">J</span>][y]<span class="pl-k">=</span><span class="pl-c1">K</span>}<span class="pl-c1">G</span>.<span class="pl-c1">length</span><span class="pl-k">&lt;</span><span class="pl-c1">2</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-c1">B</span>[s]<span class="pl-k">=</span><span class="pl-c1">true</span>)}<span class="pl-k">for</span>(s <span class="pl-k">in</span> n){<span class="pl-c1">G</span><span class="pl-k">=</span>n[s];y<span class="pl-k">=</span><span class="pl-c1">G</span>[<span class="pl-c1">0</span>];<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-c1">G</span>[<span class="pl-c1">1</span>];<span class="pl-c1">E</span><span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-c1">split</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>_<span class="pl-pds">&quot;</span></span>);<span class="pl-c1">M</span><span class="pl-k">=</span><span class="pl-c1">E</span>[<span class="pl-c1">0</span>];<span class="pl-c1">E</span><span class="pl-k">=</span><span class="pl-c1">E</span>[<span class="pl-c1">1</span>];v<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-en">b</span>(<span class="pl-c1">G</span>.<span class="pl-c1">length</span><span class="pl-k">&gt;</span><span class="pl-c1">0</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>an edge without faces?!<span class="pl-pds">&quot;</span></span>);<span class="pl-k">if</span>(<span class="pl-c1">G</span>.<span class="pl-c1">length</span><span class="pl-k">==</span><span class="pl-c1">1</span>){<span class="pl-smi">v</span>.<span class="pl-en">addSelf</span>(p[<span class="pl-c1">M</span>]);<span class="pl-smi">v</span>.<span class="pl-en">addSelf</span>(p[<span class="pl-c1">E</span>]);<span class="pl-smi">v</span>.<span class="pl-en">multiplyScalar</span>(<span class="pl-c1">0.5</span>)}<span class="pl-k">else</span>{<span class="pl-smi">v</span>.<span class="pl-en">addSelf</span>(r[y]);<span class="pl-smi">v</span>.<span class="pl-en">addSelf</span>(r[<span class="pl-c1">J</span>]);<span class="pl-smi">v</span>.<span class="pl-en">addSelf</span>(p[<span class="pl-c1">M</span>]);<span class="pl-smi">v</span>.<span class="pl-en">addSelf</span>(p[<span class="pl-c1">E</span>]);<span class="pl-smi">v</span>.<span class="pl-en">multiplyScalar</span>(<span class="pl-c1">0.25</span>)}t[s]<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L692" class="blob-num js-line-number" data-line-number="692"></td>
        <td id="LC692" class="blob-code blob-code-inner js-file-line">q<span class="pl-k">+</span><span class="pl-smi">o</span>.<span class="pl-c1">length</span><span class="pl-k">+</span>z;<span class="pl-smi">h</span>.<span class="pl-c1">push</span>(v);z<span class="pl-k">++</span>;<span class="pl-k">if</span>(<span class="pl-smi">l</span>.<span class="pl-smi">supportUVs</span>){v<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.UV</span>;<span class="pl-smi">v</span>.<span class="pl-smi">u</span><span class="pl-k">=</span><span class="pl-en">f</span>(<span class="pl-c1">M</span>,y).<span class="pl-smi">u</span><span class="pl-k">+</span><span class="pl-en">f</span>(<span class="pl-c1">E</span>,y).<span class="pl-smi">u</span>;<span class="pl-smi">v</span>.<span class="pl-smi">v</span><span class="pl-k">=</span><span class="pl-en">f</span>(<span class="pl-c1">M</span>,y).<span class="pl-smi">v</span><span class="pl-k">+</span><span class="pl-en">f</span>(<span class="pl-c1">E</span>,y).<span class="pl-smi">v</span>;<span class="pl-smi">v</span>.<span class="pl-smi">u</span><span class="pl-k">=</span><span class="pl-smi">v</span>.<span class="pl-smi">u</span><span class="pl-k">/</span><span class="pl-c1">2</span>;<span class="pl-smi">v</span>.<span class="pl-smi">v</span><span class="pl-k">=</span><span class="pl-smi">v</span>.<span class="pl-smi">v</span><span class="pl-k">/</span><span class="pl-c1">2</span>;<span class="pl-en">g</span>(t[s],y,v);<span class="pl-k">if</span>(<span class="pl-c1">G</span>.<span class="pl-c1">length</span><span class="pl-k">&gt;=</span><span class="pl-c1">2</span>){<span class="pl-en">b</span>(<span class="pl-c1">G</span>.<span class="pl-c1">length</span><span class="pl-k">==</span><span class="pl-c1">2</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>did we plan for more than 2 edges?<span class="pl-pds">&quot;</span></span>);v<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.UV</span>;<span class="pl-smi">v</span>.<span class="pl-smi">u</span><span class="pl-k">=</span><span class="pl-en">f</span>(<span class="pl-c1">M</span>,<span class="pl-c1">J</span>).<span class="pl-smi">u</span><span class="pl-k">+</span><span class="pl-en">f</span>(<span class="pl-c1">E</span>,<span class="pl-c1">J</span>).<span class="pl-smi">u</span>;<span class="pl-smi">v</span>.<span class="pl-smi">v</span><span class="pl-k">=</span><span class="pl-en">f</span>(<span class="pl-c1">M</span>,<span class="pl-c1">J</span>).<span class="pl-smi">v</span><span class="pl-k">+</span><span class="pl-en">f</span>(<span class="pl-c1">E</span>,<span class="pl-c1">J</span>).<span class="pl-smi">v</span>;<span class="pl-smi">v</span>.<span class="pl-smi">u</span><span class="pl-k">=</span><span class="pl-smi">v</span>.<span class="pl-smi">u</span><span class="pl-k">/</span><span class="pl-c1">2</span>;<span class="pl-smi">v</span>.<span class="pl-smi">v</span><span class="pl-k">=</span><span class="pl-smi">v</span>.<span class="pl-smi">v</span><span class="pl-k">/</span><span class="pl-c1">2</span>;<span class="pl-en">g</span>(t[s],<span class="pl-c1">J</span>,v)}}}<span class="pl-en">c</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>-- Step 2 done<span class="pl-pds">&quot;</span></span>);<span class="pl-k">var</span> <span class="pl-c1">I</span>,<span class="pl-c1">L</span>;v<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>123<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>12<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>2<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>23<span class="pl-pds">&quot;</span></span>];<span class="pl-c1">J</span><span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>123<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>23<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>3<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>31<span class="pl-pds">&quot;</span></span>];<span class="pl-k">var</span> <span class="pl-c1">K</span><span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>123<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>31<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>1<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>12<span class="pl-pds">&quot;</span></span>],<span class="pl-c1">F</span><span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>1234<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>12<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>2<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>23<span class="pl-pds">&quot;</span></span>],<span class="pl-c1">R</span><span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>1234<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>23<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>3<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>34<span class="pl-pds">&quot;</span></span>],$<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>1234<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>34<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>4<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>41<span class="pl-pds">&quot;</span></span>],<span class="pl-c1">Y</span><span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>1234<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>41<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>1<span class="pl-pds">&quot;</span></span>,<span class="pl-s"><span class="pl-pds">&quot;</span>12<span class="pl-pds">&quot;</span></span>];s<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L693" class="blob-num js-line-number" data-line-number="693"></td>
        <td id="LC693" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>;<span class="pl-k">for</span>(z<span class="pl-k">=</span><span class="pl-smi">r</span>.<span class="pl-c1">length</span>;s<span class="pl-k">&lt;</span>z;s<span class="pl-k">++</span>){y<span class="pl-k">=</span>o[s];<span class="pl-c1">G</span><span class="pl-k">=</span>q<span class="pl-k">+</span>s;<span class="pl-k">if</span>(y <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Face3</span>){<span class="pl-c1">M</span><span class="pl-k">=</span><span class="pl-en">m</span>(<span class="pl-smi">y</span>.<span class="pl-smi">a</span>,<span class="pl-smi">y</span>.<span class="pl-smi">b</span>);<span class="pl-c1">E</span><span class="pl-k">=</span><span class="pl-en">m</span>(<span class="pl-smi">y</span>.<span class="pl-smi">b</span>,<span class="pl-smi">y</span>.<span class="pl-smi">c</span>);<span class="pl-c1">I</span><span class="pl-k">=</span><span class="pl-en">m</span>(<span class="pl-smi">y</span>.<span class="pl-smi">c</span>,<span class="pl-smi">y</span>.<span class="pl-smi">a</span>);<span class="pl-en">e</span>(<span class="pl-c1">G</span>,t[<span class="pl-c1">M</span>],<span class="pl-smi">y</span>.<span class="pl-smi">b</span>,t[<span class="pl-c1">E</span>],y,v,s);<span class="pl-en">e</span>(<span class="pl-c1">G</span>,t[<span class="pl-c1">E</span>],<span class="pl-smi">y</span>.<span class="pl-smi">c</span>,t[<span class="pl-c1">I</span>],y,<span class="pl-c1">J</span>,s);<span class="pl-en">e</span>(<span class="pl-c1">G</span>,t[<span class="pl-c1">I</span>],<span class="pl-smi">y</span>.<span class="pl-smi">a</span>,t[<span class="pl-c1">M</span>],y,<span class="pl-c1">K</span>,s)}<span class="pl-k">else</span> <span class="pl-k">if</span>(y <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Face4</span>){<span class="pl-c1">M</span><span class="pl-k">=</span><span class="pl-en">m</span>(<span class="pl-smi">y</span>.<span class="pl-smi">a</span>,<span class="pl-smi">y</span>.<span class="pl-smi">b</span>);<span class="pl-c1">E</span><span class="pl-k">=</span><span class="pl-en">m</span>(<span class="pl-smi">y</span>.<span class="pl-smi">b</span>,<span class="pl-smi">y</span>.<span class="pl-smi">c</span>);<span class="pl-c1">I</span><span class="pl-k">=</span><span class="pl-en">m</span>(<span class="pl-smi">y</span>.<span class="pl-smi">c</span>,<span class="pl-smi">y</span>.<span class="pl-smi">d</span>);<span class="pl-c1">L</span><span class="pl-k">=</span><span class="pl-en">m</span>(<span class="pl-smi">y</span>.<span class="pl-smi">d</span>,<span class="pl-smi">y</span>.<span class="pl-smi">a</span>);<span class="pl-en">e</span>(<span class="pl-c1">G</span>,t[<span class="pl-c1">M</span>],<span class="pl-smi">y</span>.<span class="pl-smi">b</span>,t[<span class="pl-c1">E</span>],y,<span class="pl-c1">F</span>,s);<span class="pl-en">e</span>(<span class="pl-c1">G</span>,t[<span class="pl-c1">E</span>],<span class="pl-smi">y</span>.<span class="pl-smi">c</span>,t[<span class="pl-c1">I</span>],y,<span class="pl-c1">R</span>,s);<span class="pl-en">e</span>(<span class="pl-c1">G</span>,t[<span class="pl-c1">I</span>],<span class="pl-smi">y</span>.<span class="pl-smi">d</span>,t[<span class="pl-c1">L</span>],y,$,s);<span class="pl-en">e</span>(<span class="pl-c1">G</span>,t[<span class="pl-c1">L</span>],<span class="pl-smi">y</span>.<span class="pl-smi">a</span>,t[<span class="pl-c1">M</span>],y,<span class="pl-c1">Y</span>,s)}<span class="pl-k">else</span> <span class="pl-en">c</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>face should be a face!<span class="pl-pds">&quot;</span></span>,y)}t<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;y<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;s<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(z<span class="pl-k">=</span><span class="pl-smi">p</span>.<span class="pl-c1">length</span>;s<span class="pl-k">&lt;</span>z;s<span class="pl-k">++</span>)<span class="pl-k">if</span>(<span class="pl-c1">H</span>[s]<span class="pl-k">!==</span><span class="pl-k">void</span> <span class="pl-c1">0</span>){<span class="pl-smi">t</span>.<span class="pl-c1">set</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L694" class="blob-num js-line-number" data-line-number="694"></td>
        <td id="LC694" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">y</span>.<span class="pl-c1">set</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>);<span class="pl-c1">E</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>);<span class="pl-c1">G</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">A</span> <span class="pl-k">in</span> <span class="pl-c1">C</span>[s]){<span class="pl-smi">t</span>.<span class="pl-en">addSelf</span>(r[<span class="pl-c1">A</span>]);<span class="pl-c1">G</span><span class="pl-k">++</span>}<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">M</span><span class="pl-k">=</span><span class="pl-c1">H</span>[s].<span class="pl-c1">length</span>;v<span class="pl-k">=</span><span class="pl-c1">G</span><span class="pl-k">!=</span><span class="pl-c1">M</span>;<span class="pl-k">for</span>(<span class="pl-c1">A</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">A</span><span class="pl-k">&lt;</span><span class="pl-c1">M</span>;<span class="pl-c1">A</span><span class="pl-k">++</span>)<span class="pl-c1">B</span>[<span class="pl-en">m</span>(<span class="pl-c1">H</span>[s][<span class="pl-c1">A</span>][<span class="pl-c1">0</span>],<span class="pl-c1">H</span>[s][<span class="pl-c1">A</span>][<span class="pl-c1">1</span>])]<span class="pl-k">&amp;&amp;</span><span class="pl-c1">J</span><span class="pl-k">++</span>;<span class="pl-smi">t</span>.<span class="pl-en">divideScalar</span>(<span class="pl-c1">G</span>);<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(v){<span class="pl-k">for</span>(<span class="pl-c1">A</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">A</span><span class="pl-k">&lt;</span><span class="pl-c1">M</span>;<span class="pl-c1">A</span><span class="pl-k">++</span>){<span class="pl-c1">G</span><span class="pl-k">=</span><span class="pl-c1">H</span>[s][<span class="pl-c1">A</span>];<span class="pl-k">if</span>(<span class="pl-c1">K</span><span class="pl-k">=</span>n[<span class="pl-en">m</span>(<span class="pl-c1">G</span>[<span class="pl-c1">0</span>],<span class="pl-c1">G</span>[<span class="pl-c1">1</span>])].<span class="pl-c1">length</span><span class="pl-k">==</span><span class="pl-c1">1</span>){<span class="pl-c1">G</span><span class="pl-k">=</span>p[<span class="pl-c1">G</span>[<span class="pl-c1">0</span>]].<span class="pl-en">clone</span>().<span class="pl-en">addSelf</span>(p[<span class="pl-c1">G</span>[<span class="pl-c1">1</span>]]).<span class="pl-en">divideScalar</span>(<span class="pl-c1">2</span>);<span class="pl-smi">y</span>.<span class="pl-en">addSelf</span>(<span class="pl-c1">G</span>);<span class="pl-c1">J</span><span class="pl-k">++</span>}}<span class="pl-smi">y</span>.<span class="pl-en">divideScalar</span>(<span class="pl-c1">4</span>);<span class="pl-en">b</span>(<span class="pl-c1">J</span><span class="pl-k">==</span><span class="pl-c1">2</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>should have only 2 boundary edges<span class="pl-pds">&quot;</span></span>)}<span class="pl-k">else</span>{<span class="pl-k">for</span>(<span class="pl-c1">A</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">A</span><span class="pl-k">&lt;</span><span class="pl-c1">M</span>;<span class="pl-c1">A</span><span class="pl-k">++</span>){<span class="pl-c1">G</span><span class="pl-k">=</span><span class="pl-c1">H</span>[s][<span class="pl-c1">A</span>];<span class="pl-c1">G</span><span class="pl-k">=</span>p[<span class="pl-c1">G</span>[<span class="pl-c1">0</span>]].<span class="pl-en">clone</span>().<span class="pl-en">addSelf</span>(p[<span class="pl-c1">G</span>[<span class="pl-c1">1</span>]]).<span class="pl-en">divideScalar</span>(<span class="pl-c1">2</span>);<span class="pl-smi">y</span>.<span class="pl-en">addSelf</span>(<span class="pl-c1">G</span>)}<span class="pl-smi">y</span>.<span class="pl-en">divideScalar</span>(<span class="pl-c1">M</span>)}<span class="pl-c1">E</span>.<span class="pl-en">addSelf</span>(p[s]);</td>
      </tr>
      <tr>
        <td id="L695" class="blob-num js-line-number" data-line-number="695"></td>
        <td id="LC695" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span>(v){<span class="pl-c1">E</span>.<span class="pl-en">divideScalar</span>(<span class="pl-c1">2</span>);<span class="pl-c1">E</span>.<span class="pl-en">addSelf</span>(y)}<span class="pl-k">else</span>{<span class="pl-c1">E</span>.<span class="pl-en">multiplyScalar</span>(<span class="pl-c1">M</span><span class="pl-k">-</span><span class="pl-c1">3</span>);<span class="pl-c1">E</span>.<span class="pl-en">addSelf</span>(t);<span class="pl-c1">E</span>.<span class="pl-en">addSelf</span>(<span class="pl-smi">y</span>.<span class="pl-en">multiplyScalar</span>(<span class="pl-c1">2</span>));<span class="pl-c1">E</span>.<span class="pl-en">divideScalar</span>(<span class="pl-c1">M</span>)}h[s]<span class="pl-k">=</span><span class="pl-c1">E</span>}<span class="pl-smi">a</span>.<span class="pl-smi">vertices</span><span class="pl-k">=</span>h;<span class="pl-smi">a</span>.<span class="pl-smi">faces</span><span class="pl-k">=</span>i;<span class="pl-smi">a</span>.<span class="pl-smi">faceVertexUvs</span>[<span class="pl-c1">0</span>]<span class="pl-k">=</span>j;<span class="pl-k">delete</span> <span class="pl-smi">a</span>.<span class="pl-smi">__tmpVertices</span>;<span class="pl-smi">a</span>.<span class="pl-en">computeCentroids</span>();<span class="pl-smi">a</span>.<span class="pl-en">computeFaceNormals</span>();<span class="pl-smi">a</span>.<span class="pl-en">computeVertexNormals</span>()};<span class="pl-c1">THREE</span>.<span class="pl-en">ImmediateRenderObject</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-en">render</span><span class="pl-k">=</span><span class="pl-k">function</span>(){}};<span class="pl-c1">THREE</span>.<span class="pl-smi">ImmediateRenderObject</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L696" class="blob-num js-line-number" data-line-number="696"></td>
        <td id="LC696" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">LensFlare</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);<span class="pl-c1">this</span>.<span class="pl-smi">lensFlares</span><span class="pl-k">=</span>[];<span class="pl-c1">this</span>.<span class="pl-smi">positionScreen</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-c1">this</span>.<span class="pl-smi">customUpdateCallback</span><span class="pl-k">=</span><span class="pl-k">void</span> <span class="pl-c1">0</span>;a<span class="pl-k">!==</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-c1">add</span>(a,b,c,d,e)};<span class="pl-c1">THREE</span>.<span class="pl-smi">LensFlare</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Object3D</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L697" class="blob-num js-line-number" data-line-number="697"></td>
        <td id="LC697" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">LensFlare</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">add</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>){b<span class="pl-k">===</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span>(b<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">1</span>);c<span class="pl-k">===</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span>(c<span class="pl-k">=</span><span class="pl-c1">0</span>);f<span class="pl-k">===</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span>(f<span class="pl-k">=</span><span class="pl-c1">1</span>);e<span class="pl-k">===</span><span class="pl-k">void</span> <span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span>(e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Color</span>(<span class="pl-c1">16777215</span>));<span class="pl-k">if</span>(d<span class="pl-k">===</span><span class="pl-k">void</span> <span class="pl-c1">0</span>)d<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">NormalBlending</span>;c<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(c,<span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-c1">0</span>,c));<span class="pl-c1">this</span>.<span class="pl-smi">lensFlares</span>.<span class="pl-c1">push</span>({texture<span class="pl-k">:</span>a,size<span class="pl-k">:</span>b,distance<span class="pl-k">:</span>c,x<span class="pl-k">:</span><span class="pl-c1">0</span>,y<span class="pl-k">:</span><span class="pl-c1">0</span>,z<span class="pl-k">:</span><span class="pl-c1">0</span>,scale<span class="pl-k">:</span><span class="pl-c1">1</span>,rotation<span class="pl-k">:</span><span class="pl-c1">1</span>,opacity<span class="pl-k">:</span>f,color<span class="pl-k">:</span>e,blending<span class="pl-k">:</span>d})};</td>
      </tr>
      <tr>
        <td id="L698" class="blob-num js-line-number" data-line-number="698"></td>
        <td id="LC698" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">LensFlare</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">updateLensFlares</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a,b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">lensFlares</span>.<span class="pl-c1">length</span>,c,d<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">2</span>,e<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">this</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">2</span>;<span class="pl-k">for</span>(a<span class="pl-k">=</span><span class="pl-c1">0</span>;a<span class="pl-k">&lt;</span>b;a<span class="pl-k">++</span>){c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">lensFlares</span>[a];<span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">x</span><span class="pl-k">+</span>d<span class="pl-k">*</span><span class="pl-smi">c</span>.<span class="pl-smi">distance</span>;<span class="pl-smi">c</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-c1">y</span><span class="pl-k">+</span>e<span class="pl-k">*</span><span class="pl-smi">c</span>.<span class="pl-smi">distance</span>;<span class="pl-smi">c</span>.<span class="pl-smi">wantedRotation</span><span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span><span class="pl-k">*</span><span class="pl-c1">0.25</span>;<span class="pl-smi">c</span>.<span class="pl-smi">rotation</span><span class="pl-k">=</span><span class="pl-smi">c</span>.<span class="pl-smi">rotation</span><span class="pl-k">+</span>(<span class="pl-smi">c</span>.<span class="pl-smi">wantedRotation</span><span class="pl-k">-</span><span class="pl-smi">c</span>.<span class="pl-smi">rotation</span>)<span class="pl-k">*</span><span class="pl-c1">0.25</span>}};</td>
      </tr>
      <tr>
        <td id="L699" class="blob-num js-line-number" data-line-number="699"></td>
        <td id="LC699" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">MorphBlendMesh</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">THREE</span>.<span class="pl-smi">Mesh</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>,a,b);<span class="pl-c1">this</span>.<span class="pl-smi">animationsMap</span><span class="pl-k">=</span>{};<span class="pl-c1">this</span>.<span class="pl-smi">animationsList</span><span class="pl-k">=</span>[];<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">geometry</span>.<span class="pl-smi">morphTargets</span>.<span class="pl-c1">length</span>;<span class="pl-c1">this</span>.<span class="pl-en">createAnimation</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>__default<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">0</span>,c<span class="pl-k">-</span><span class="pl-c1">1</span>,c<span class="pl-k">/</span><span class="pl-c1">1</span>);<span class="pl-c1">this</span>.<span class="pl-en">setAnimationWeight</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>__default<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">1</span>)};<span class="pl-c1">THREE</span>.<span class="pl-smi">MorphBlendMesh</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-c1">Object</span>.<span class="pl-en">create</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">Mesh</span>.<span class="pl-c1">prototype</span>);</td>
      </tr>
      <tr>
        <td id="L700" class="blob-num js-line-number" data-line-number="700"></td>
        <td id="LC700" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">MorphBlendMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">createAnimation</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>,<span class="pl-smi">c</span>,<span class="pl-smi">d</span>){b<span class="pl-k">=</span>{startFrame<span class="pl-k">:</span>b,endFrame<span class="pl-k">:</span>c,length<span class="pl-k">:</span>c<span class="pl-k">-</span>b<span class="pl-k">+</span><span class="pl-c1">1</span>,fps<span class="pl-k">:</span>d,duration<span class="pl-k">:</span>(c<span class="pl-k">-</span>b)<span class="pl-k">/</span>d,lastFrame<span class="pl-k">:</span><span class="pl-c1">0</span>,currentFrame<span class="pl-k">:</span><span class="pl-c1">0</span>,active<span class="pl-k">:</span><span class="pl-c1">false</span>,time<span class="pl-k">:</span><span class="pl-c1">0</span>,direction<span class="pl-k">:</span><span class="pl-c1">1</span>,weight<span class="pl-k">:</span><span class="pl-c1">1</span>,directionBackwards<span class="pl-k">:</span><span class="pl-c1">false</span>,mirroredLoop<span class="pl-k">:</span><span class="pl-c1">false</span>};<span class="pl-c1">this</span>.<span class="pl-smi">animationsMap</span>[a]<span class="pl-k">=</span>b;<span class="pl-c1">this</span>.<span class="pl-smi">animationsList</span>.<span class="pl-c1">push</span>(b)};</td>
      </tr>
      <tr>
        <td id="L701" class="blob-num js-line-number" data-line-number="701"></td>
        <td id="LC701" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">MorphBlendMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">autoCreateAnimations</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-sr"><span class="pl-pds">/</span>(<span class="pl-c1">[<span class="pl-c1">a-z</span>]</span><span class="pl-k">+</span>)(<span class="pl-c1">\d</span><span class="pl-k">+</span>)<span class="pl-pds">/</span></span>,c,d<span class="pl-k">=</span>{},e<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">geometry</span>,f<span class="pl-k">=</span><span class="pl-c1">0</span>,g<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">morphTargets</span>.<span class="pl-c1">length</span>;f<span class="pl-k">&lt;</span>g;f<span class="pl-k">++</span>){<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">morphTargets</span>[f].<span class="pl-c1">name</span>.<span class="pl-c1">match</span>(b);<span class="pl-k">if</span>(h<span class="pl-k">&amp;&amp;</span><span class="pl-smi">h</span>.<span class="pl-c1">length</span><span class="pl-k">&gt;</span><span class="pl-c1">1</span>){<span class="pl-k">var</span> i<span class="pl-k">=</span>h[<span class="pl-c1">1</span>];d[i]<span class="pl-k">||</span>(d[i]<span class="pl-k">=</span>{start<span class="pl-k">:</span><span class="pl-c1">Infinity</span>,end<span class="pl-k">:</span><span class="pl-k">-</span><span class="pl-c1">Infinity</span>});h<span class="pl-k">=</span>d[i];<span class="pl-k">if</span>(f<span class="pl-k">&lt;</span><span class="pl-smi">h</span>.<span class="pl-c1">start</span>)<span class="pl-smi">h</span>.<span class="pl-c1">start</span><span class="pl-k">=</span>f;<span class="pl-k">if</span>(f<span class="pl-k">&gt;</span><span class="pl-smi">h</span>.<span class="pl-smi">end</span>)<span class="pl-smi">h</span>.<span class="pl-smi">end</span><span class="pl-k">=</span>f;c<span class="pl-k">||</span>(c<span class="pl-k">=</span>i)}}<span class="pl-k">for</span>(i <span class="pl-k">in</span> d){h<span class="pl-k">=</span>d[i];<span class="pl-c1">this</span>.<span class="pl-en">createAnimation</span>(i,<span class="pl-smi">h</span>.<span class="pl-c1">start</span>,<span class="pl-smi">h</span>.<span class="pl-smi">end</span>,a)}<span class="pl-c1">this</span>.<span class="pl-smi">firstAnimation</span><span class="pl-k">=</span>c};</td>
      </tr>
      <tr>
        <td id="L702" class="blob-num js-line-number" data-line-number="702"></td>
        <td id="LC702" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">MorphBlendMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setAnimationDirectionForward</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">animationsMap</span>[a]){<span class="pl-smi">a</span>.<span class="pl-smi">direction</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-smi">a</span>.<span class="pl-smi">directionBackwards</span><span class="pl-k">=</span><span class="pl-c1">false</span>}};<span class="pl-c1">THREE</span>.<span class="pl-smi">MorphBlendMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setAnimationDirectionBackward</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">animationsMap</span>[a]){<span class="pl-smi">a</span>.<span class="pl-smi">direction</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-smi">a</span>.<span class="pl-smi">directionBackwards</span><span class="pl-k">=</span><span class="pl-c1">true</span>}};<span class="pl-c1">THREE</span>.<span class="pl-smi">MorphBlendMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setAnimationFPS</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">animationsMap</span>[a];<span class="pl-k">if</span>(c){<span class="pl-smi">c</span>.<span class="pl-smi">fps</span><span class="pl-k">=</span>b;<span class="pl-smi">c</span>.<span class="pl-smi">duration</span><span class="pl-k">=</span>(<span class="pl-smi">c</span>.<span class="pl-smi">end</span><span class="pl-k">-</span><span class="pl-smi">c</span>.<span class="pl-c1">start</span>)<span class="pl-k">/</span><span class="pl-smi">c</span>.<span class="pl-smi">fps</span>}};</td>
      </tr>
      <tr>
        <td id="L703" class="blob-num js-line-number" data-line-number="703"></td>
        <td id="LC703" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">MorphBlendMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setAnimationDuration</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">animationsMap</span>[a];<span class="pl-k">if</span>(c){<span class="pl-smi">c</span>.<span class="pl-smi">duration</span><span class="pl-k">=</span>b;<span class="pl-smi">c</span>.<span class="pl-smi">fps</span><span class="pl-k">=</span>(<span class="pl-smi">c</span>.<span class="pl-smi">end</span><span class="pl-k">-</span><span class="pl-smi">c</span>.<span class="pl-c1">start</span>)<span class="pl-k">/</span><span class="pl-smi">c</span>.<span class="pl-smi">duration</span>}};<span class="pl-c1">THREE</span>.<span class="pl-smi">MorphBlendMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setAnimationWeight</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">animationsMap</span>[a];<span class="pl-k">if</span>(c)<span class="pl-smi">c</span>.<span class="pl-smi">weight</span><span class="pl-k">=</span>b};<span class="pl-c1">THREE</span>.<span class="pl-smi">MorphBlendMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setAnimationTime</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">animationsMap</span>[a];<span class="pl-k">if</span>(c)<span class="pl-smi">c</span>.<span class="pl-smi">time</span><span class="pl-k">=</span>b};<span class="pl-c1">THREE</span>.<span class="pl-smi">MorphBlendMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getAnimationTime</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">animationsMap</span>[a])b<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">time</span>;<span class="pl-k">return</span> b};</td>
      </tr>
      <tr>
        <td id="L704" class="blob-num js-line-number" data-line-number="704"></td>
        <td id="LC704" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">MorphBlendMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getAnimationDuration</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-k">if</span>(a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">animationsMap</span>[a])b<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">duration</span>;<span class="pl-k">return</span> b};<span class="pl-c1">THREE</span>.<span class="pl-smi">MorphBlendMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">playAnimation</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">animationsMap</span>[a];<span class="pl-k">if</span>(b){<span class="pl-smi">b</span>.<span class="pl-smi">time</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-smi">b</span>.<span class="pl-smi">active</span><span class="pl-k">=</span><span class="pl-c1">true</span>}<span class="pl-k">else</span> <span class="pl-en">console</span>.<span class="pl-c1">warn</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>animation[<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>a<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>] undefined<span class="pl-pds">&quot;</span></span>)};<span class="pl-c1">THREE</span>.<span class="pl-smi">MorphBlendMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">stopAnimation</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(a<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">animationsMap</span>[a])<span class="pl-smi">a</span>.<span class="pl-smi">active</span><span class="pl-k">=</span><span class="pl-c1">false</span>};</td>
      </tr>
      <tr>
        <td id="L705" class="blob-num js-line-number" data-line-number="705"></td>
        <td id="LC705" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">MorphBlendMesh</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">update</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>,c<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">animationsList</span>.<span class="pl-c1">length</span>;b<span class="pl-k">&lt;</span>c;b<span class="pl-k">++</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">this</span>.<span class="pl-smi">animationsList</span>[b];<span class="pl-k">if</span>(<span class="pl-smi">d</span>.<span class="pl-smi">active</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">duration</span><span class="pl-k">/</span><span class="pl-smi">d</span>.<span class="pl-c1">length</span>;<span class="pl-smi">d</span>.<span class="pl-smi">time</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">time</span><span class="pl-k">+</span><span class="pl-smi">d</span>.<span class="pl-smi">direction</span><span class="pl-k">*</span>a;<span class="pl-k">if</span>(<span class="pl-smi">d</span>.<span class="pl-smi">mirroredLoop</span>){<span class="pl-k">if</span>(<span class="pl-smi">d</span>.<span class="pl-smi">time</span><span class="pl-k">&gt;</span><span class="pl-smi">d</span>.<span class="pl-smi">duration</span><span class="pl-k">||</span><span class="pl-smi">d</span>.<span class="pl-smi">time</span><span class="pl-k">&lt;</span><span class="pl-c1">0</span>){<span class="pl-smi">d</span>.<span class="pl-smi">direction</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">direction</span><span class="pl-k">*-</span><span class="pl-c1">1</span>;<span class="pl-k">if</span>(<span class="pl-smi">d</span>.<span class="pl-smi">time</span><span class="pl-k">&gt;</span><span class="pl-smi">d</span>.<span class="pl-smi">duration</span>){<span class="pl-smi">d</span>.<span class="pl-smi">time</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">duration</span>;<span class="pl-smi">d</span>.<span class="pl-smi">directionBackwards</span><span class="pl-k">=</span><span class="pl-c1">true</span>}<span class="pl-k">if</span>(<span class="pl-smi">d</span>.<span class="pl-smi">time</span><span class="pl-k">&lt;</span><span class="pl-c1">0</span>){<span class="pl-smi">d</span>.<span class="pl-smi">time</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-smi">d</span>.<span class="pl-smi">directionBackwards</span><span class="pl-k">=</span><span class="pl-c1">false</span>}}}<span class="pl-k">else</span>{<span class="pl-smi">d</span>.<span class="pl-smi">time</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">time</span><span class="pl-k">%</span><span class="pl-smi">d</span>.<span class="pl-smi">duration</span>;<span class="pl-k">if</span>(<span class="pl-smi">d</span>.<span class="pl-smi">time</span><span class="pl-k">&lt;</span><span class="pl-c1">0</span>)<span class="pl-smi">d</span>.<span class="pl-smi">time</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">time</span><span class="pl-k">+</span><span class="pl-smi">d</span>.<span class="pl-smi">duration</span>}<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">startFrame</span><span class="pl-k">+</span><span class="pl-c1">THREE</span>.<span class="pl-smi">Math</span>.<span class="pl-en">clamp</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-smi">d</span>.<span class="pl-smi">time</span><span class="pl-k">/</span></td>
      </tr>
      <tr>
        <td id="L706" class="blob-num js-line-number" data-line-number="706"></td>
        <td id="LC706" class="blob-code blob-code-inner js-file-line">e),<span class="pl-c1">0</span>,<span class="pl-smi">d</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>),g<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">weight</span>;<span class="pl-k">if</span>(f<span class="pl-k">!==</span><span class="pl-smi">d</span>.<span class="pl-smi">currentFrame</span>){<span class="pl-c1">this</span>.<span class="pl-smi">morphTargetInfluences</span>[<span class="pl-smi">d</span>.<span class="pl-smi">lastFrame</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">this</span>.<span class="pl-smi">morphTargetInfluences</span>[<span class="pl-smi">d</span>.<span class="pl-smi">currentFrame</span>]<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">*</span>g;<span class="pl-c1">this</span>.<span class="pl-smi">morphTargetInfluences</span>[f]<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-smi">d</span>.<span class="pl-smi">lastFrame</span><span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">currentFrame</span>;<span class="pl-smi">d</span>.<span class="pl-smi">currentFrame</span><span class="pl-k">=</span>f}e<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">time</span><span class="pl-k">%</span>e<span class="pl-k">/</span>e;<span class="pl-smi">d</span>.<span class="pl-smi">directionBackwards</span><span class="pl-k">&amp;&amp;</span>(e<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">-</span>e);<span class="pl-c1">this</span>.<span class="pl-smi">morphTargetInfluences</span>[<span class="pl-smi">d</span>.<span class="pl-smi">currentFrame</span>]<span class="pl-k">=</span>e<span class="pl-k">*</span>g;<span class="pl-c1">this</span>.<span class="pl-smi">morphTargetInfluences</span>[<span class="pl-smi">d</span>.<span class="pl-smi">lastFrame</span>]<span class="pl-k">=</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>e)<span class="pl-k">*</span>g}}};</td>
      </tr>
      <tr>
        <td id="L707" class="blob-num js-line-number" data-line-number="707"></td>
        <td id="LC707" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">LensFlarePlugin</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">function</span> <span class="pl-en">a</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">createProgram</span>(),d<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">createShader</span>(<span class="pl-smi">b</span>.<span class="pl-c1">FRAGMENT_SHADER</span>),e<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">createShader</span>(<span class="pl-smi">b</span>.<span class="pl-c1">VERTEX_SHADER</span>);<span class="pl-smi">b</span>.<span class="pl-en">shaderSource</span>(d,<span class="pl-smi">a</span>.<span class="pl-smi">fragmentShader</span>);<span class="pl-smi">b</span>.<span class="pl-en">shaderSource</span>(e,<span class="pl-smi">a</span>.<span class="pl-smi">vertexShader</span>);<span class="pl-smi">b</span>.<span class="pl-en">compileShader</span>(d);<span class="pl-smi">b</span>.<span class="pl-en">compileShader</span>(e);<span class="pl-smi">b</span>.<span class="pl-en">attachShader</span>(c,d);<span class="pl-smi">b</span>.<span class="pl-en">attachShader</span>(c,e);<span class="pl-smi">b</span>.<span class="pl-en">linkProgram</span>(c);<span class="pl-k">return</span> c}<span class="pl-k">var</span> b,c,d,e,f,g,h,i,j,l,m,n,p;<span class="pl-c1">this</span>.<span class="pl-en">init</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">o</span>){b<span class="pl-k">=</span><span class="pl-smi">o</span>.<span class="pl-smi">context</span>;c<span class="pl-k">=</span>o;d<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">16</span>);e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Uint16Array</span>(<span class="pl-c1">6</span>);o<span class="pl-k">=</span><span class="pl-c1">0</span>;d[o<span class="pl-k">++</span>]<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">1</span>;d[o<span class="pl-k">++</span>]<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">1</span>;d[o<span class="pl-k">++</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;d[o<span class="pl-k">++</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;d[o<span class="pl-k">++</span>]<span class="pl-k">=</span><span class="pl-c1">1</span>;d[o<span class="pl-k">++</span>]<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">1</span>;d[o<span class="pl-k">++</span>]<span class="pl-k">=</span><span class="pl-c1">1</span>;d[o<span class="pl-k">++</span>]<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L708" class="blob-num js-line-number" data-line-number="708"></td>
        <td id="LC708" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>;d[o<span class="pl-k">++</span>]<span class="pl-k">=</span><span class="pl-c1">1</span>;d[o<span class="pl-k">++</span>]<span class="pl-k">=</span><span class="pl-c1">1</span>;d[o<span class="pl-k">++</span>]<span class="pl-k">=</span><span class="pl-c1">1</span>;d[o<span class="pl-k">++</span>]<span class="pl-k">=</span><span class="pl-c1">1</span>;d[o<span class="pl-k">++</span>]<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">1</span>;d[o<span class="pl-k">++</span>]<span class="pl-k">=</span><span class="pl-c1">1</span>;d[o<span class="pl-k">++</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;d[o<span class="pl-k">++</span>]<span class="pl-k">=</span><span class="pl-c1">1</span>;o<span class="pl-k">=</span><span class="pl-c1">0</span>;e[o<span class="pl-k">++</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;e[o<span class="pl-k">++</span>]<span class="pl-k">=</span><span class="pl-c1">1</span>;e[o<span class="pl-k">++</span>]<span class="pl-k">=</span><span class="pl-c1">2</span>;e[o<span class="pl-k">++</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;e[o<span class="pl-k">++</span>]<span class="pl-k">=</span><span class="pl-c1">2</span>;e[o<span class="pl-k">++</span>]<span class="pl-k">=</span><span class="pl-c1">3</span>;f<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">createBuffer</span>();g<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">createBuffer</span>();<span class="pl-smi">b</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">b</span>.<span class="pl-c1">ARRAY_BUFFER</span>,f);<span class="pl-smi">b</span>.<span class="pl-en">bufferData</span>(<span class="pl-smi">b</span>.<span class="pl-c1">ARRAY_BUFFER</span>,d,<span class="pl-smi">b</span>.<span class="pl-c1">STATIC_DRAW</span>);<span class="pl-smi">b</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">b</span>.<span class="pl-c1">ELEMENT_ARRAY_BUFFER</span>,g);<span class="pl-smi">b</span>.<span class="pl-en">bufferData</span>(<span class="pl-smi">b</span>.<span class="pl-c1">ELEMENT_ARRAY_BUFFER</span>,e,<span class="pl-smi">b</span>.<span class="pl-c1">STATIC_DRAW</span>);h<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">createTexture</span>();i<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">createTexture</span>();<span class="pl-smi">b</span>.<span class="pl-en">bindTexture</span>(<span class="pl-smi">b</span>.<span class="pl-c1">TEXTURE_2D</span>,h);<span class="pl-smi">b</span>.<span class="pl-en">texImage2D</span>(<span class="pl-smi">b</span>.<span class="pl-c1">TEXTURE_2D</span>,<span class="pl-c1">0</span>,<span class="pl-smi">b</span>.<span class="pl-c1">RGB</span>,<span class="pl-c1">16</span>,<span class="pl-c1">16</span>,<span class="pl-c1">0</span>,<span class="pl-smi">b</span>.<span class="pl-c1">RGB</span>,<span class="pl-smi">b</span>.<span class="pl-c1">UNSIGNED_BYTE</span>,<span class="pl-c1">null</span>);<span class="pl-smi">b</span>.<span class="pl-en">texParameteri</span>(<span class="pl-smi">b</span>.<span class="pl-c1">TEXTURE_2D</span>,</td>
      </tr>
      <tr>
        <td id="L709" class="blob-num js-line-number" data-line-number="709"></td>
        <td id="LC709" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">b</span>.<span class="pl-c1">TEXTURE_WRAP_S</span>,<span class="pl-smi">b</span>.<span class="pl-c1">CLAMP_TO_EDGE</span>);<span class="pl-smi">b</span>.<span class="pl-en">texParameteri</span>(<span class="pl-smi">b</span>.<span class="pl-c1">TEXTURE_2D</span>,<span class="pl-smi">b</span>.<span class="pl-c1">TEXTURE_WRAP_T</span>,<span class="pl-smi">b</span>.<span class="pl-c1">CLAMP_TO_EDGE</span>);<span class="pl-smi">b</span>.<span class="pl-en">texParameteri</span>(<span class="pl-smi">b</span>.<span class="pl-c1">TEXTURE_2D</span>,<span class="pl-smi">b</span>.<span class="pl-c1">TEXTURE_MAG_FILTER</span>,<span class="pl-smi">b</span>.<span class="pl-c1">NEAREST</span>);<span class="pl-smi">b</span>.<span class="pl-en">texParameteri</span>(<span class="pl-smi">b</span>.<span class="pl-c1">TEXTURE_2D</span>,<span class="pl-smi">b</span>.<span class="pl-c1">TEXTURE_MIN_FILTER</span>,<span class="pl-smi">b</span>.<span class="pl-c1">NEAREST</span>);<span class="pl-smi">b</span>.<span class="pl-en">bindTexture</span>(<span class="pl-smi">b</span>.<span class="pl-c1">TEXTURE_2D</span>,i);<span class="pl-smi">b</span>.<span class="pl-en">texImage2D</span>(<span class="pl-smi">b</span>.<span class="pl-c1">TEXTURE_2D</span>,<span class="pl-c1">0</span>,<span class="pl-smi">b</span>.<span class="pl-c1">RGBA</span>,<span class="pl-c1">16</span>,<span class="pl-c1">16</span>,<span class="pl-c1">0</span>,<span class="pl-smi">b</span>.<span class="pl-c1">RGBA</span>,<span class="pl-smi">b</span>.<span class="pl-c1">UNSIGNED_BYTE</span>,<span class="pl-c1">null</span>);<span class="pl-smi">b</span>.<span class="pl-en">texParameteri</span>(<span class="pl-smi">b</span>.<span class="pl-c1">TEXTURE_2D</span>,<span class="pl-smi">b</span>.<span class="pl-c1">TEXTURE_WRAP_S</span>,<span class="pl-smi">b</span>.<span class="pl-c1">CLAMP_TO_EDGE</span>);<span class="pl-smi">b</span>.<span class="pl-en">texParameteri</span>(<span class="pl-smi">b</span>.<span class="pl-c1">TEXTURE_2D</span>,<span class="pl-smi">b</span>.<span class="pl-c1">TEXTURE_WRAP_T</span>,<span class="pl-smi">b</span>.<span class="pl-c1">CLAMP_TO_EDGE</span>);<span class="pl-smi">b</span>.<span class="pl-en">texParameteri</span>(<span class="pl-smi">b</span>.<span class="pl-c1">TEXTURE_2D</span>,<span class="pl-smi">b</span>.<span class="pl-c1">TEXTURE_MAG_FILTER</span>,<span class="pl-smi">b</span>.<span class="pl-c1">NEAREST</span>);</td>
      </tr>
      <tr>
        <td id="L710" class="blob-num js-line-number" data-line-number="710"></td>
        <td id="LC710" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">b</span>.<span class="pl-en">texParameteri</span>(<span class="pl-smi">b</span>.<span class="pl-c1">TEXTURE_2D</span>,<span class="pl-smi">b</span>.<span class="pl-c1">TEXTURE_MIN_FILTER</span>,<span class="pl-smi">b</span>.<span class="pl-c1">NEAREST</span>);<span class="pl-k">if</span>(<span class="pl-smi">b</span>.<span class="pl-en">getParameter</span>(<span class="pl-smi">b</span>.<span class="pl-c1">MAX_VERTEX_TEXTURE_IMAGE_UNITS</span>)<span class="pl-k">&lt;=</span><span class="pl-c1">0</span>){j<span class="pl-k">=</span><span class="pl-c1">false</span>;l<span class="pl-k">=</span><span class="pl-en">a</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderFlares</span>.<span class="pl-smi">lensFlare</span>)}<span class="pl-k">else</span>{j<span class="pl-k">=</span><span class="pl-c1">true</span>;l<span class="pl-k">=</span><span class="pl-en">a</span>(<span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderFlares</span>.<span class="pl-smi">lensFlareVertexTexture</span>)}m<span class="pl-k">=</span>{};n<span class="pl-k">=</span>{};<span class="pl-smi">m</span>.<span class="pl-smi">vertex</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">getAttribLocation</span>(l,<span class="pl-s"><span class="pl-pds">&quot;</span>position<span class="pl-pds">&quot;</span></span>);<span class="pl-smi">m</span>.<span class="pl-smi">uv</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">getAttribLocation</span>(l,<span class="pl-s"><span class="pl-pds">&quot;</span>uv<span class="pl-pds">&quot;</span></span>);<span class="pl-smi">n</span>.<span class="pl-smi">renderType</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">getUniformLocation</span>(l,<span class="pl-s"><span class="pl-pds">&quot;</span>renderType<span class="pl-pds">&quot;</span></span>);<span class="pl-smi">n</span>.<span class="pl-smi">map</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">getUniformLocation</span>(l,<span class="pl-s"><span class="pl-pds">&quot;</span>map<span class="pl-pds">&quot;</span></span>);<span class="pl-smi">n</span>.<span class="pl-smi">occlusionMap</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">getUniformLocation</span>(l,<span class="pl-s"><span class="pl-pds">&quot;</span>occlusionMap<span class="pl-pds">&quot;</span></span>);<span class="pl-smi">n</span>.<span class="pl-smi">opacity</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">getUniformLocation</span>(l,<span class="pl-s"><span class="pl-pds">&quot;</span>opacity<span class="pl-pds">&quot;</span></span>);<span class="pl-smi">n</span>.<span class="pl-c1">color</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">getUniformLocation</span>(l,</td>
      </tr>
      <tr>
        <td id="L711" class="blob-num js-line-number" data-line-number="711"></td>
        <td id="LC711" class="blob-code blob-code-inner js-file-line"><span class="pl-s"><span class="pl-pds">&quot;</span>color<span class="pl-pds">&quot;</span></span>);<span class="pl-smi">n</span>.<span class="pl-smi">scale</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">getUniformLocation</span>(l,<span class="pl-s"><span class="pl-pds">&quot;</span>scale<span class="pl-pds">&quot;</span></span>);<span class="pl-smi">n</span>.<span class="pl-smi">rotation</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">getUniformLocation</span>(l,<span class="pl-s"><span class="pl-pds">&quot;</span>rotation<span class="pl-pds">&quot;</span></span>);<span class="pl-smi">n</span>.<span class="pl-smi">screenPosition</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">getUniformLocation</span>(l,<span class="pl-s"><span class="pl-pds">&quot;</span>screenPosition<span class="pl-pds">&quot;</span></span>);p<span class="pl-k">=</span><span class="pl-c1">false</span>};<span class="pl-c1">this</span>.<span class="pl-en">render</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">t</span>){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">__webglFlares</span>,<span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-c1">length</span>;<span class="pl-k">if</span>(<span class="pl-c1">B</span>){<span class="pl-k">var</span> u<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,s<span class="pl-k">=</span>t<span class="pl-k">/</span>e,z<span class="pl-k">=</span>e<span class="pl-k">*</span><span class="pl-c1">0.5</span>,<span class="pl-c1">A</span><span class="pl-k">=</span>t<span class="pl-k">*</span><span class="pl-c1">0.5</span>,v<span class="pl-k">=</span><span class="pl-c1">16</span><span class="pl-k">/</span>t,y<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(v<span class="pl-k">*</span>s,v),<span class="pl-c1">C</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>(<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>),<span class="pl-c1">G</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(<span class="pl-c1">1</span>,<span class="pl-c1">1</span>),<span class="pl-c1">H</span><span class="pl-k">=</span>n,v<span class="pl-k">=</span>m;<span class="pl-smi">b</span>.<span class="pl-en">useProgram</span>(l);<span class="pl-k">if</span>(<span class="pl-k">!</span>p){<span class="pl-smi">b</span>.<span class="pl-en">enableVertexAttribArray</span>(<span class="pl-smi">m</span>.<span class="pl-smi">vertex</span>);<span class="pl-smi">b</span>.<span class="pl-en">enableVertexAttribArray</span>(<span class="pl-smi">m</span>.<span class="pl-smi">uv</span>);p<span class="pl-k">=</span><span class="pl-c1">true</span>}<span class="pl-smi">b</span>.<span class="pl-en">uniform1i</span>(<span class="pl-c1">H</span>.<span class="pl-smi">occlusionMap</span>,<span class="pl-c1">0</span>);<span class="pl-smi">b</span>.<span class="pl-en">uniform1i</span>(<span class="pl-c1">H</span>.<span class="pl-smi">map</span>,</td>
      </tr>
      <tr>
        <td id="L712" class="blob-num js-line-number" data-line-number="712"></td>
        <td id="LC712" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">1</span>);<span class="pl-smi">b</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">b</span>.<span class="pl-c1">ARRAY_BUFFER</span>,f);<span class="pl-smi">b</span>.<span class="pl-en">vertexAttribPointer</span>(<span class="pl-smi">v</span>.<span class="pl-smi">vertex</span>,<span class="pl-c1">2</span>,<span class="pl-smi">b</span>.<span class="pl-c1">FLOAT</span>,<span class="pl-c1">false</span>,<span class="pl-c1">16</span>,<span class="pl-c1">0</span>);<span class="pl-smi">b</span>.<span class="pl-en">vertexAttribPointer</span>(<span class="pl-smi">v</span>.<span class="pl-smi">uv</span>,<span class="pl-c1">2</span>,<span class="pl-smi">b</span>.<span class="pl-c1">FLOAT</span>,<span class="pl-c1">false</span>,<span class="pl-c1">16</span>,<span class="pl-c1">8</span>);<span class="pl-smi">b</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">b</span>.<span class="pl-c1">ELEMENT_ARRAY_BUFFER</span>,g);<span class="pl-smi">b</span>.<span class="pl-en">disable</span>(<span class="pl-smi">b</span>.<span class="pl-c1">CULL_FACE</span>);<span class="pl-smi">b</span>.<span class="pl-en">depthMask</span>(<span class="pl-c1">false</span>);<span class="pl-k">var</span> <span class="pl-c1">J</span>,<span class="pl-c1">E</span>,<span class="pl-c1">M</span>,<span class="pl-c1">K</span>,<span class="pl-c1">F</span>;<span class="pl-k">for</span>(<span class="pl-c1">J</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">J</span><span class="pl-k">&lt;</span><span class="pl-c1">B</span>;<span class="pl-c1">J</span><span class="pl-k">++</span>){v<span class="pl-k">=</span><span class="pl-c1">16</span><span class="pl-k">/</span>t;<span class="pl-smi">y</span>.<span class="pl-c1">set</span>(v<span class="pl-k">*</span>s,v);<span class="pl-c1">K</span><span class="pl-k">=</span>a[<span class="pl-c1">J</span>];<span class="pl-smi">u</span>.<span class="pl-c1">set</span>(<span class="pl-c1">K</span>.<span class="pl-smi">matrixWorld</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">12</span>],<span class="pl-c1">K</span>.<span class="pl-smi">matrixWorld</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">13</span>],<span class="pl-c1">K</span>.<span class="pl-smi">matrixWorld</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">14</span>]);<span class="pl-smi">d</span>.<span class="pl-smi">matrixWorldInverse</span>.<span class="pl-en">multiplyVector3</span>(u);<span class="pl-smi">d</span>.<span class="pl-smi">projectionMatrix</span>.<span class="pl-en">multiplyVector3</span>(u);<span class="pl-c1">C</span>.<span class="pl-en">copy</span>(u);<span class="pl-c1">G</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">C</span>.<span class="pl-c1">x</span><span class="pl-k">*</span>z<span class="pl-k">+</span>z;<span class="pl-c1">G</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">C</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">A</span><span class="pl-k">+</span><span class="pl-c1">A</span>;<span class="pl-k">if</span>(j<span class="pl-k">||</span><span class="pl-c1">G</span>.<span class="pl-c1">x</span><span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">G</span>.<span class="pl-c1">x</span><span class="pl-k">&lt;</span>e<span class="pl-k">&amp;&amp;</span><span class="pl-c1">G</span>.<span class="pl-c1">y</span><span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L713" class="blob-num js-line-number" data-line-number="713"></td>
        <td id="LC713" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">G</span>.<span class="pl-c1">y</span><span class="pl-k">&lt;</span>t){<span class="pl-smi">b</span>.<span class="pl-en">activeTexture</span>(<span class="pl-smi">b</span>.<span class="pl-c1">TEXTURE1</span>);<span class="pl-smi">b</span>.<span class="pl-en">bindTexture</span>(<span class="pl-smi">b</span>.<span class="pl-c1">TEXTURE_2D</span>,h);<span class="pl-smi">b</span>.<span class="pl-en">copyTexImage2D</span>(<span class="pl-smi">b</span>.<span class="pl-c1">TEXTURE_2D</span>,<span class="pl-c1">0</span>,<span class="pl-smi">b</span>.<span class="pl-c1">RGB</span>,<span class="pl-c1">G</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">8</span>,<span class="pl-c1">G</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">8</span>,<span class="pl-c1">16</span>,<span class="pl-c1">16</span>,<span class="pl-c1">0</span>);<span class="pl-smi">b</span>.<span class="pl-en">uniform1i</span>(<span class="pl-c1">H</span>.<span class="pl-smi">renderType</span>,<span class="pl-c1">0</span>);<span class="pl-smi">b</span>.<span class="pl-en">uniform2f</span>(<span class="pl-c1">H</span>.<span class="pl-smi">scale</span>,<span class="pl-smi">y</span>.<span class="pl-c1">x</span>,<span class="pl-smi">y</span>.<span class="pl-c1">y</span>);<span class="pl-smi">b</span>.<span class="pl-en">uniform3f</span>(<span class="pl-c1">H</span>.<span class="pl-smi">screenPosition</span>,<span class="pl-c1">C</span>.<span class="pl-c1">x</span>,<span class="pl-c1">C</span>.<span class="pl-c1">y</span>,<span class="pl-c1">C</span>.<span class="pl-c1">z</span>);<span class="pl-smi">b</span>.<span class="pl-en">disable</span>(<span class="pl-smi">b</span>.<span class="pl-c1">BLEND</span>);<span class="pl-smi">b</span>.<span class="pl-en">enable</span>(<span class="pl-smi">b</span>.<span class="pl-c1">DEPTH_TEST</span>);<span class="pl-smi">b</span>.<span class="pl-en">drawElements</span>(<span class="pl-smi">b</span>.<span class="pl-c1">TRIANGLES</span>,<span class="pl-c1">6</span>,<span class="pl-smi">b</span>.<span class="pl-c1">UNSIGNED_SHORT</span>,<span class="pl-c1">0</span>);<span class="pl-smi">b</span>.<span class="pl-en">activeTexture</span>(<span class="pl-smi">b</span>.<span class="pl-c1">TEXTURE0</span>);<span class="pl-smi">b</span>.<span class="pl-en">bindTexture</span>(<span class="pl-smi">b</span>.<span class="pl-c1">TEXTURE_2D</span>,i);<span class="pl-smi">b</span>.<span class="pl-en">copyTexImage2D</span>(<span class="pl-smi">b</span>.<span class="pl-c1">TEXTURE_2D</span>,<span class="pl-c1">0</span>,<span class="pl-smi">b</span>.<span class="pl-c1">RGBA</span>,<span class="pl-c1">G</span>.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">8</span>,<span class="pl-c1">G</span>.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">8</span>,<span class="pl-c1">16</span>,<span class="pl-c1">16</span>,<span class="pl-c1">0</span>);<span class="pl-smi">b</span>.<span class="pl-en">uniform1i</span>(<span class="pl-c1">H</span>.<span class="pl-smi">renderType</span>,<span class="pl-c1">1</span>);<span class="pl-smi">b</span>.<span class="pl-en">disable</span>(<span class="pl-smi">b</span>.<span class="pl-c1">DEPTH_TEST</span>);<span class="pl-smi">b</span>.<span class="pl-en">activeTexture</span>(<span class="pl-smi">b</span>.<span class="pl-c1">TEXTURE1</span>);</td>
      </tr>
      <tr>
        <td id="L714" class="blob-num js-line-number" data-line-number="714"></td>
        <td id="LC714" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">b</span>.<span class="pl-en">bindTexture</span>(<span class="pl-smi">b</span>.<span class="pl-c1">TEXTURE_2D</span>,h);<span class="pl-smi">b</span>.<span class="pl-en">drawElements</span>(<span class="pl-smi">b</span>.<span class="pl-c1">TRIANGLES</span>,<span class="pl-c1">6</span>,<span class="pl-smi">b</span>.<span class="pl-c1">UNSIGNED_SHORT</span>,<span class="pl-c1">0</span>);<span class="pl-c1">K</span>.<span class="pl-smi">positionScreen</span>.<span class="pl-en">copy</span>(<span class="pl-c1">C</span>);<span class="pl-c1">K</span>.<span class="pl-smi">customUpdateCallback</span><span class="pl-k">?</span><span class="pl-c1">K</span>.<span class="pl-en">customUpdateCallback</span>(<span class="pl-c1">K</span>)<span class="pl-k">:</span><span class="pl-c1">K</span>.<span class="pl-en">updateLensFlares</span>();<span class="pl-smi">b</span>.<span class="pl-en">uniform1i</span>(<span class="pl-c1">H</span>.<span class="pl-smi">renderType</span>,<span class="pl-c1">2</span>);<span class="pl-smi">b</span>.<span class="pl-en">enable</span>(<span class="pl-smi">b</span>.<span class="pl-c1">BLEND</span>);<span class="pl-c1">E</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-c1">M</span><span class="pl-k">=</span><span class="pl-c1">K</span>.<span class="pl-smi">lensFlares</span>.<span class="pl-c1">length</span>;<span class="pl-c1">E</span><span class="pl-k">&lt;</span><span class="pl-c1">M</span>;<span class="pl-c1">E</span><span class="pl-k">++</span>){<span class="pl-c1">F</span><span class="pl-k">=</span><span class="pl-c1">K</span>.<span class="pl-smi">lensFlares</span>[<span class="pl-c1">E</span>];<span class="pl-k">if</span>(<span class="pl-c1">F</span>.<span class="pl-smi">opacity</span><span class="pl-k">&gt;</span><span class="pl-c1">0.001</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">F</span>.<span class="pl-smi">scale</span><span class="pl-k">&gt;</span><span class="pl-c1">0.001</span>){<span class="pl-c1">C</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">F</span>.<span class="pl-c1">x</span>;<span class="pl-c1">C</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">F</span>.<span class="pl-c1">y</span>;<span class="pl-c1">C</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">F</span>.<span class="pl-c1">z</span>;v<span class="pl-k">=</span><span class="pl-c1">F</span>.<span class="pl-c1">size</span><span class="pl-k">*</span><span class="pl-c1">F</span>.<span class="pl-smi">scale</span><span class="pl-k">/</span>t;<span class="pl-smi">y</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>v<span class="pl-k">*</span>s;<span class="pl-smi">y</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>v;<span class="pl-smi">b</span>.<span class="pl-en">uniform3f</span>(<span class="pl-c1">H</span>.<span class="pl-smi">screenPosition</span>,<span class="pl-c1">C</span>.<span class="pl-c1">x</span>,<span class="pl-c1">C</span>.<span class="pl-c1">y</span>,<span class="pl-c1">C</span>.<span class="pl-c1">z</span>);<span class="pl-smi">b</span>.<span class="pl-en">uniform2f</span>(<span class="pl-c1">H</span>.<span class="pl-smi">scale</span>,<span class="pl-smi">y</span>.<span class="pl-c1">x</span>,<span class="pl-smi">y</span>.<span class="pl-c1">y</span>);<span class="pl-smi">b</span>.<span class="pl-en">uniform1f</span>(<span class="pl-c1">H</span>.<span class="pl-smi">rotation</span>,<span class="pl-c1">F</span>.<span class="pl-smi">rotation</span>);<span class="pl-smi">b</span>.<span class="pl-en">uniform1f</span>(<span class="pl-c1">H</span>.<span class="pl-smi">opacity</span>,<span class="pl-c1">F</span>.<span class="pl-smi">opacity</span>);</td>
      </tr>
      <tr>
        <td id="L715" class="blob-num js-line-number" data-line-number="715"></td>
        <td id="LC715" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">b</span>.<span class="pl-en">uniform3f</span>(<span class="pl-c1">H</span>.<span class="pl-c1">color</span>,<span class="pl-c1">F</span>.<span class="pl-c1">color</span>.<span class="pl-smi">r</span>,<span class="pl-c1">F</span>.<span class="pl-c1">color</span>.<span class="pl-smi">g</span>,<span class="pl-c1">F</span>.<span class="pl-c1">color</span>.<span class="pl-smi">b</span>);<span class="pl-smi">c</span>.<span class="pl-en">setBlending</span>(<span class="pl-c1">F</span>.<span class="pl-smi">blending</span>,<span class="pl-c1">F</span>.<span class="pl-smi">blendEquation</span>,<span class="pl-c1">F</span>.<span class="pl-smi">blendSrc</span>,<span class="pl-c1">F</span>.<span class="pl-smi">blendDst</span>);<span class="pl-smi">c</span>.<span class="pl-en">setTexture</span>(<span class="pl-c1">F</span>.<span class="pl-smi">texture</span>,<span class="pl-c1">1</span>);<span class="pl-smi">b</span>.<span class="pl-en">drawElements</span>(<span class="pl-smi">b</span>.<span class="pl-c1">TRIANGLES</span>,<span class="pl-c1">6</span>,<span class="pl-smi">b</span>.<span class="pl-c1">UNSIGNED_SHORT</span>,<span class="pl-c1">0</span>)}}}}<span class="pl-smi">b</span>.<span class="pl-en">enable</span>(<span class="pl-smi">b</span>.<span class="pl-c1">CULL_FACE</span>);<span class="pl-smi">b</span>.<span class="pl-en">enable</span>(<span class="pl-smi">b</span>.<span class="pl-c1">DEPTH_TEST</span>);<span class="pl-smi">b</span>.<span class="pl-en">depthMask</span>(<span class="pl-c1">true</span>)}}};</td>
      </tr>
      <tr>
        <td id="L716" class="blob-num js-line-number" data-line-number="716"></td>
        <td id="LC716" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">ShadowMapPlugin</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a,b,c,d,e,f,g<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Frustum</span>,h<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>,i<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>,j<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;<span class="pl-c1">this</span>.<span class="pl-en">init</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">g</span>){a<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">context</span>;b<span class="pl-k">=</span>g;<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderLib</span>.<span class="pl-smi">depthRGBA</span>,h<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">UniformsUtils</span>.<span class="pl-en">clone</span>(<span class="pl-smi">g</span>.<span class="pl-smi">uniforms</span>);c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.ShaderMaterial</span>({fragmentShader<span class="pl-k">:</span><span class="pl-smi">g</span>.<span class="pl-smi">fragmentShader</span>,vertexShader<span class="pl-k">:</span><span class="pl-smi">g</span>.<span class="pl-smi">vertexShader</span>,uniforms<span class="pl-k">:</span>h});d<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.ShaderMaterial</span>({fragmentShader<span class="pl-k">:</span><span class="pl-smi">g</span>.<span class="pl-smi">fragmentShader</span>,vertexShader<span class="pl-k">:</span><span class="pl-smi">g</span>.<span class="pl-smi">vertexShader</span>,uniforms<span class="pl-k">:</span>h,morphTargets<span class="pl-k">:</span><span class="pl-c1">true</span>});e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.ShaderMaterial</span>({fragmentShader<span class="pl-k">:</span><span class="pl-smi">g</span>.<span class="pl-smi">fragmentShader</span>,</td>
      </tr>
      <tr>
        <td id="L717" class="blob-num js-line-number" data-line-number="717"></td>
        <td id="LC717" class="blob-code blob-code-inner js-file-line">vertexShader<span class="pl-k">:</span><span class="pl-smi">g</span>.<span class="pl-smi">vertexShader</span>,uniforms<span class="pl-k">:</span>h,skinning<span class="pl-k">:</span><span class="pl-c1">true</span>});f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.ShaderMaterial</span>({fragmentShader<span class="pl-k">:</span><span class="pl-smi">g</span>.<span class="pl-smi">fragmentShader</span>,vertexShader<span class="pl-k">:</span><span class="pl-smi">g</span>.<span class="pl-smi">vertexShader</span>,uniforms<span class="pl-k">:</span>h,morphTargets<span class="pl-k">:</span><span class="pl-c1">true</span>,skinning<span class="pl-k">:</span><span class="pl-c1">true</span>});<span class="pl-smi">c</span>.<span class="pl-smi">_shadowPass</span><span class="pl-k">=</span><span class="pl-c1">true</span>;<span class="pl-smi">d</span>.<span class="pl-smi">_shadowPass</span><span class="pl-k">=</span><span class="pl-c1">true</span>;<span class="pl-smi">e</span>.<span class="pl-smi">_shadowPass</span><span class="pl-k">=</span><span class="pl-c1">true</span>;<span class="pl-smi">f</span>.<span class="pl-smi">_shadowPass</span><span class="pl-k">=</span><span class="pl-c1">true</span>};<span class="pl-c1">this</span>.<span class="pl-en">render</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">c</span>){<span class="pl-smi">b</span>.<span class="pl-smi">shadowMapEnabled</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">b</span>.<span class="pl-smi">shadowMapAutoUpdate</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-en">update</span>(a,c)};<span class="pl-c1">this</span>.<span class="pl-en">update</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">l</span>,<span class="pl-smi">m</span>){<span class="pl-k">var</span> n,p,o,q,r,t,<span class="pl-c1">B</span>,u,s,z<span class="pl-k">=</span>[];q<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-smi">a</span>.<span class="pl-en">clearColor</span>(<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>);<span class="pl-smi">a</span>.<span class="pl-en">disable</span>(<span class="pl-smi">a</span>.<span class="pl-c1">BLEND</span>);<span class="pl-smi">a</span>.<span class="pl-en">enable</span>(<span class="pl-smi">a</span>.<span class="pl-c1">CULL_FACE</span>);<span class="pl-smi">a</span>.<span class="pl-en">frontFace</span>(<span class="pl-smi">a</span>.<span class="pl-c1">CCW</span>);<span class="pl-smi">b</span>.<span class="pl-smi">shadowMapCullFrontFaces</span><span class="pl-k">?</span></td>
      </tr>
      <tr>
        <td id="L718" class="blob-num js-line-number" data-line-number="718"></td>
        <td id="LC718" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">a</span>.<span class="pl-en">cullFace</span>(<span class="pl-smi">a</span>.<span class="pl-c1">FRONT</span>)<span class="pl-k">:</span><span class="pl-smi">a</span>.<span class="pl-en">cullFace</span>(<span class="pl-smi">a</span>.<span class="pl-c1">BACK</span>);<span class="pl-smi">b</span>.<span class="pl-en">setDepthTest</span>(<span class="pl-c1">true</span>);n<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(p<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">__lights</span>.<span class="pl-c1">length</span>;n<span class="pl-k">&lt;</span>p;n<span class="pl-k">++</span>){o<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">__lights</span>[n];<span class="pl-k">if</span>(<span class="pl-smi">o</span>.<span class="pl-smi">castShadow</span>)<span class="pl-k">if</span>(o <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">DirectionalLight</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">o</span>.<span class="pl-smi">shadowCascade</span>)<span class="pl-k">for</span>(r<span class="pl-k">=</span><span class="pl-c1">0</span>;r<span class="pl-k">&lt;</span><span class="pl-smi">o</span>.<span class="pl-smi">shadowCascadeCount</span>;r<span class="pl-k">++</span>){<span class="pl-k">var</span> <span class="pl-c1">A</span>;<span class="pl-k">if</span>(<span class="pl-smi">o</span>.<span class="pl-smi">shadowCascadeArray</span>[r])<span class="pl-c1">A</span><span class="pl-k">=</span><span class="pl-smi">o</span>.<span class="pl-smi">shadowCascadeArray</span>[r];<span class="pl-k">else</span>{s<span class="pl-k">=</span>o;<span class="pl-c1">B</span><span class="pl-k">=</span>r;<span class="pl-c1">A</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.DirectionalLight</span>;<span class="pl-c1">A</span>.<span class="pl-smi">isVirtual</span><span class="pl-k">=</span><span class="pl-c1">true</span>;<span class="pl-c1">A</span>.<span class="pl-smi">onlyShadow</span><span class="pl-k">=</span><span class="pl-c1">true</span>;<span class="pl-c1">A</span>.<span class="pl-smi">castShadow</span><span class="pl-k">=</span><span class="pl-c1">true</span>;<span class="pl-c1">A</span>.<span class="pl-smi">shadowCameraNear</span><span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-smi">shadowCameraNear</span>;<span class="pl-c1">A</span>.<span class="pl-smi">shadowCameraFar</span><span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-smi">shadowCameraFar</span>;<span class="pl-c1">A</span>.<span class="pl-smi">shadowCameraLeft</span><span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-smi">shadowCameraLeft</span>;<span class="pl-c1">A</span>.<span class="pl-smi">shadowCameraRight</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L719" class="blob-num js-line-number" data-line-number="719"></td>
        <td id="LC719" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">s</span>.<span class="pl-smi">shadowCameraRight</span>;<span class="pl-c1">A</span>.<span class="pl-smi">shadowCameraBottom</span><span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-smi">shadowCameraBottom</span>;<span class="pl-c1">A</span>.<span class="pl-smi">shadowCameraTop</span><span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-smi">shadowCameraTop</span>;<span class="pl-c1">A</span>.<span class="pl-smi">shadowCameraVisible</span><span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-smi">shadowCameraVisible</span>;<span class="pl-c1">A</span>.<span class="pl-smi">shadowDarkness</span><span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-smi">shadowDarkness</span>;<span class="pl-c1">A</span>.<span class="pl-smi">shadowBias</span><span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-smi">shadowCascadeBias</span>[<span class="pl-c1">B</span>];<span class="pl-c1">A</span>.<span class="pl-smi">shadowMapWidth</span><span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-smi">shadowCascadeWidth</span>[<span class="pl-c1">B</span>];<span class="pl-c1">A</span>.<span class="pl-smi">shadowMapHeight</span><span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-smi">shadowCascadeHeight</span>[<span class="pl-c1">B</span>];<span class="pl-c1">A</span>.<span class="pl-smi">pointsWorld</span><span class="pl-k">=</span>[];<span class="pl-c1">A</span>.<span class="pl-smi">pointsFrustum</span><span class="pl-k">=</span>[];u<span class="pl-k">=</span><span class="pl-c1">A</span>.<span class="pl-smi">pointsWorld</span>;t<span class="pl-k">=</span><span class="pl-c1">A</span>.<span class="pl-smi">pointsFrustum</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> v<span class="pl-k">=</span><span class="pl-c1">0</span>;v<span class="pl-k">&lt;</span><span class="pl-c1">8</span>;v<span class="pl-k">++</span>){u[v]<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>;t[v]<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector3</span>}u<span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-smi">shadowCascadeNearZ</span>[<span class="pl-c1">B</span>];s<span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-smi">shadowCascadeFarZ</span>[<span class="pl-c1">B</span>];t[<span class="pl-c1">0</span>].<span class="pl-c1">set</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,u);</td>
      </tr>
      <tr>
        <td id="L720" class="blob-num js-line-number" data-line-number="720"></td>
        <td id="LC720" class="blob-code blob-code-inner js-file-line">t[<span class="pl-c1">1</span>].<span class="pl-c1">set</span>(<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,u);t[<span class="pl-c1">2</span>].<span class="pl-c1">set</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>,u);t[<span class="pl-c1">3</span>].<span class="pl-c1">set</span>(<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,u);t[<span class="pl-c1">4</span>].<span class="pl-c1">set</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,s);t[<span class="pl-c1">5</span>].<span class="pl-c1">set</span>(<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>,s);t[<span class="pl-c1">6</span>].<span class="pl-c1">set</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>,s);t[<span class="pl-c1">7</span>].<span class="pl-c1">set</span>(<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,s);<span class="pl-c1">A</span>.<span class="pl-smi">originalCamera</span><span class="pl-k">=</span>m;t<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Gyroscope</span>;<span class="pl-smi">t</span>.<span class="pl-smi">position</span><span class="pl-k">=</span><span class="pl-smi">o</span>.<span class="pl-smi">shadowCascadeOffset</span>;<span class="pl-smi">t</span>.<span class="pl-c1">add</span>(<span class="pl-c1">A</span>);<span class="pl-smi">t</span>.<span class="pl-c1">add</span>(<span class="pl-c1">A</span>.<span class="pl-c1">target</span>);<span class="pl-smi">m</span>.<span class="pl-c1">add</span>(t);<span class="pl-smi">o</span>.<span class="pl-smi">shadowCascadeArray</span>[r]<span class="pl-k">=</span><span class="pl-c1">A</span>;<span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>Created virtualLight<span class="pl-pds">&quot;</span></span>,<span class="pl-c1">A</span>)}<span class="pl-c1">B</span><span class="pl-k">=</span>o;u<span class="pl-k">=</span>r;s<span class="pl-k">=</span><span class="pl-c1">B</span>.<span class="pl-smi">shadowCascadeArray</span>[u];<span class="pl-smi">s</span>.<span class="pl-smi">position</span>.<span class="pl-en">copy</span>(<span class="pl-c1">B</span>.<span class="pl-smi">position</span>);<span class="pl-smi">s</span>.<span class="pl-c1">target</span>.<span class="pl-smi">position</span>.<span class="pl-en">copy</span>(<span class="pl-c1">B</span>.<span class="pl-c1">target</span>.<span class="pl-smi">position</span>);<span class="pl-smi">s</span>.<span class="pl-en">lookAt</span>(<span class="pl-smi">s</span>.<span class="pl-c1">target</span>);<span class="pl-smi">s</span>.<span class="pl-smi">shadowCameraVisible</span><span class="pl-k">=</span><span class="pl-c1">B</span>.<span class="pl-smi">shadowCameraVisible</span>;<span class="pl-smi">s</span>.<span class="pl-smi">shadowDarkness</span><span class="pl-k">=</span><span class="pl-c1">B</span>.<span class="pl-smi">shadowDarkness</span>;<span class="pl-smi">s</span>.<span class="pl-smi">shadowBias</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L721" class="blob-num js-line-number" data-line-number="721"></td>
        <td id="LC721" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">B</span>.<span class="pl-smi">shadowCascadeBias</span>[u];t<span class="pl-k">=</span><span class="pl-c1">B</span>.<span class="pl-smi">shadowCascadeNearZ</span>[u];<span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-c1">B</span>.<span class="pl-smi">shadowCascadeFarZ</span>[u];s<span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-smi">pointsFrustum</span>;s[<span class="pl-c1">0</span>].<span class="pl-c1">z</span><span class="pl-k">=</span>t;s[<span class="pl-c1">1</span>].<span class="pl-c1">z</span><span class="pl-k">=</span>t;s[<span class="pl-c1">2</span>].<span class="pl-c1">z</span><span class="pl-k">=</span>t;s[<span class="pl-c1">3</span>].<span class="pl-c1">z</span><span class="pl-k">=</span>t;s[<span class="pl-c1">4</span>].<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">B</span>;s[<span class="pl-c1">5</span>].<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">B</span>;s[<span class="pl-c1">6</span>].<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">B</span>;s[<span class="pl-c1">7</span>].<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">B</span>;z[q]<span class="pl-k">=</span><span class="pl-c1">A</span>;q<span class="pl-k">++</span>}<span class="pl-k">else</span>{z[q]<span class="pl-k">=</span>o;q<span class="pl-k">++</span>}}n<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(p<span class="pl-k">=</span><span class="pl-smi">z</span>.<span class="pl-c1">length</span>;n<span class="pl-k">&lt;</span>p;n<span class="pl-k">++</span>){o<span class="pl-k">=</span>z[n];<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-smi">o</span>.<span class="pl-smi">shadowMap</span>){<span class="pl-smi">o</span>.<span class="pl-smi">shadowMap</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.WebGLRenderTarget</span>(<span class="pl-smi">o</span>.<span class="pl-smi">shadowMapWidth</span>,<span class="pl-smi">o</span>.<span class="pl-smi">shadowMapHeight</span>,{minFilter<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">LinearFilter</span>,magFilter<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">LinearFilter</span>,format<span class="pl-k">:</span><span class="pl-c1">THREE</span>.<span class="pl-smi">RGBAFormat</span>});<span class="pl-smi">o</span>.<span class="pl-smi">shadowMapSize</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Vector2</span>(<span class="pl-smi">o</span>.<span class="pl-smi">shadowMapWidth</span>,<span class="pl-smi">o</span>.<span class="pl-smi">shadowMapHeight</span>);<span class="pl-smi">o</span>.<span class="pl-smi">shadowMatrix</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>}<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-smi">o</span>.<span class="pl-smi">shadowCamera</span>){<span class="pl-k">if</span>(o <span class="pl-k">instanceof</span></td>
      </tr>
      <tr>
        <td id="L722" class="blob-num js-line-number" data-line-number="722"></td>
        <td id="LC722" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-smi">SpotLight</span>)<span class="pl-smi">o</span>.<span class="pl-smi">shadowCamera</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.PerspectiveCamera</span>(<span class="pl-smi">o</span>.<span class="pl-smi">shadowCameraFov</span>,<span class="pl-smi">o</span>.<span class="pl-smi">shadowMapWidth</span><span class="pl-k">/</span><span class="pl-smi">o</span>.<span class="pl-smi">shadowMapHeight</span>,<span class="pl-smi">o</span>.<span class="pl-smi">shadowCameraNear</span>,<span class="pl-smi">o</span>.<span class="pl-smi">shadowCameraFar</span>);<span class="pl-k">else</span> <span class="pl-k">if</span>(o <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">DirectionalLight</span>)<span class="pl-smi">o</span>.<span class="pl-smi">shadowCamera</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.OrthographicCamera</span>(<span class="pl-smi">o</span>.<span class="pl-smi">shadowCameraLeft</span>,<span class="pl-smi">o</span>.<span class="pl-smi">shadowCameraRight</span>,<span class="pl-smi">o</span>.<span class="pl-smi">shadowCameraTop</span>,<span class="pl-smi">o</span>.<span class="pl-smi">shadowCameraBottom</span>,<span class="pl-smi">o</span>.<span class="pl-smi">shadowCameraNear</span>,<span class="pl-smi">o</span>.<span class="pl-smi">shadowCameraFar</span>);<span class="pl-k">else</span>{<span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>Unsupported light type for shadow<span class="pl-pds">&quot;</span></span>);<span class="pl-k">continue</span>}<span class="pl-smi">l</span>.<span class="pl-c1">add</span>(<span class="pl-smi">o</span>.<span class="pl-smi">shadowCamera</span>);<span class="pl-smi">b</span>.<span class="pl-smi">autoUpdateScene</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">l</span>.<span class="pl-en">updateMatrixWorld</span>()}<span class="pl-k">if</span>(<span class="pl-smi">o</span>.<span class="pl-smi">shadowCameraVisible</span><span class="pl-k">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L723" class="blob-num js-line-number" data-line-number="723"></td>
        <td id="LC723" class="blob-code blob-code-inner js-file-line"><span class="pl-k">!</span><span class="pl-smi">o</span>.<span class="pl-smi">cameraHelper</span>){<span class="pl-smi">o</span>.<span class="pl-smi">cameraHelper</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.CameraHelper</span>(<span class="pl-smi">o</span>.<span class="pl-smi">shadowCamera</span>);<span class="pl-smi">o</span>.<span class="pl-smi">shadowCamera</span>.<span class="pl-c1">add</span>(<span class="pl-smi">o</span>.<span class="pl-smi">cameraHelper</span>)}<span class="pl-k">if</span>(<span class="pl-smi">o</span>.<span class="pl-smi">isVirtual</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">A</span>.<span class="pl-smi">originalCamera</span><span class="pl-k">==</span>m){r<span class="pl-k">=</span>m;q<span class="pl-k">=</span><span class="pl-smi">o</span>.<span class="pl-smi">shadowCamera</span>;t<span class="pl-k">=</span><span class="pl-smi">o</span>.<span class="pl-smi">pointsFrustum</span>;s<span class="pl-k">=</span><span class="pl-smi">o</span>.<span class="pl-smi">pointsWorld</span>;<span class="pl-smi">i</span>.<span class="pl-c1">set</span>(<span class="pl-c1">Infinity</span>,<span class="pl-c1">Infinity</span>,<span class="pl-c1">Infinity</span>);<span class="pl-smi">j</span>.<span class="pl-c1">set</span>(<span class="pl-k">-</span><span class="pl-c1">Infinity</span>,<span class="pl-k">-</span><span class="pl-c1">Infinity</span>,<span class="pl-k">-</span><span class="pl-c1">Infinity</span>);<span class="pl-k">for</span>(<span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">B</span><span class="pl-k">&lt;</span><span class="pl-c1">8</span>;<span class="pl-c1">B</span><span class="pl-k">++</span>){u<span class="pl-k">=</span>s[<span class="pl-c1">B</span>];<span class="pl-smi">u</span>.<span class="pl-en">copy</span>(t[<span class="pl-c1">B</span>]);<span class="pl-c1">THREE</span>.<span class="pl-smi">ShadowMapPlugin</span>.<span class="pl-smi">__projector</span>.<span class="pl-en">unprojectVector</span>(u,r);<span class="pl-smi">q</span>.<span class="pl-smi">matrixWorldInverse</span>.<span class="pl-en">multiplyVector3</span>(u);<span class="pl-k">if</span>(<span class="pl-smi">u</span>.<span class="pl-c1">x</span><span class="pl-k">&lt;</span><span class="pl-smi">i</span>.<span class="pl-c1">x</span>)<span class="pl-smi">i</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">u</span>.<span class="pl-c1">x</span>;<span class="pl-k">if</span>(<span class="pl-smi">u</span>.<span class="pl-c1">x</span><span class="pl-k">&gt;</span><span class="pl-smi">j</span>.<span class="pl-c1">x</span>)<span class="pl-smi">j</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-smi">u</span>.<span class="pl-c1">x</span>;<span class="pl-k">if</span>(<span class="pl-smi">u</span>.<span class="pl-c1">y</span><span class="pl-k">&lt;</span><span class="pl-smi">i</span>.<span class="pl-c1">y</span>)<span class="pl-smi">i</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">u</span>.<span class="pl-c1">y</span>;<span class="pl-k">if</span>(<span class="pl-smi">u</span>.<span class="pl-c1">y</span><span class="pl-k">&gt;</span><span class="pl-smi">j</span>.<span class="pl-c1">y</span>)<span class="pl-smi">j</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-smi">u</span>.<span class="pl-c1">y</span>;<span class="pl-k">if</span>(<span class="pl-smi">u</span>.<span class="pl-c1">z</span><span class="pl-k">&lt;</span><span class="pl-smi">i</span>.<span class="pl-c1">z</span>)<span class="pl-smi">i</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-smi">u</span>.<span class="pl-c1">z</span>;<span class="pl-k">if</span>(<span class="pl-smi">u</span>.<span class="pl-c1">z</span><span class="pl-k">&gt;</span></td>
      </tr>
      <tr>
        <td id="L724" class="blob-num js-line-number" data-line-number="724"></td>
        <td id="LC724" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">j</span>.<span class="pl-c1">z</span>)<span class="pl-smi">j</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-smi">u</span>.<span class="pl-c1">z</span>}<span class="pl-smi">q</span>.<span class="pl-c1">left</span><span class="pl-k">=</span><span class="pl-smi">i</span>.<span class="pl-c1">x</span>;<span class="pl-smi">q</span>.<span class="pl-c1">right</span><span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-c1">x</span>;<span class="pl-smi">q</span>.<span class="pl-c1">top</span><span class="pl-k">=</span><span class="pl-smi">j</span>.<span class="pl-c1">y</span>;<span class="pl-smi">q</span>.<span class="pl-c1">bottom</span><span class="pl-k">=</span><span class="pl-smi">i</span>.<span class="pl-c1">y</span>;<span class="pl-smi">q</span>.<span class="pl-en">updateProjectionMatrix</span>()}q<span class="pl-k">=</span><span class="pl-smi">o</span>.<span class="pl-smi">shadowMap</span>;t<span class="pl-k">=</span><span class="pl-smi">o</span>.<span class="pl-smi">shadowMatrix</span>;r<span class="pl-k">=</span><span class="pl-smi">o</span>.<span class="pl-smi">shadowCamera</span>;<span class="pl-smi">r</span>.<span class="pl-smi">position</span>.<span class="pl-en">copy</span>(<span class="pl-smi">o</span>.<span class="pl-smi">matrixWorld</span>.<span class="pl-en">getPosition</span>());<span class="pl-smi">r</span>.<span class="pl-en">lookAt</span>(<span class="pl-smi">o</span>.<span class="pl-c1">target</span>.<span class="pl-smi">matrixWorld</span>.<span class="pl-en">getPosition</span>());<span class="pl-smi">r</span>.<span class="pl-en">updateMatrixWorld</span>();<span class="pl-smi">r</span>.<span class="pl-smi">matrixWorldInverse</span>.<span class="pl-en">getInverse</span>(<span class="pl-smi">r</span>.<span class="pl-smi">matrixWorld</span>);<span class="pl-k">if</span>(<span class="pl-smi">o</span>.<span class="pl-smi">cameraHelper</span>)<span class="pl-smi">o</span>.<span class="pl-smi">cameraHelper</span>.<span class="pl-smi">visible</span><span class="pl-k">=</span><span class="pl-smi">o</span>.<span class="pl-smi">shadowCameraVisible</span>;<span class="pl-smi">o</span>.<span class="pl-smi">shadowCameraVisible</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">o</span>.<span class="pl-smi">cameraHelper</span>.<span class="pl-en">update</span>();<span class="pl-smi">t</span>.<span class="pl-c1">set</span>(<span class="pl-c1">0.5</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0.5</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0.5</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0.5</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0.5</span>,<span class="pl-c1">0.5</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);<span class="pl-smi">t</span>.<span class="pl-en">multiplySelf</span>(<span class="pl-smi">r</span>.<span class="pl-smi">projectionMatrix</span>);<span class="pl-smi">t</span>.<span class="pl-en">multiplySelf</span>(<span class="pl-smi">r</span>.<span class="pl-smi">matrixWorldInverse</span>);</td>
      </tr>
      <tr>
        <td id="L725" class="blob-num js-line-number" data-line-number="725"></td>
        <td id="LC725" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-smi">r</span>.<span class="pl-smi">_viewMatrixArray</span>)<span class="pl-smi">r</span>.<span class="pl-smi">_viewMatrixArray</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">16</span>);<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-smi">r</span>.<span class="pl-smi">_projectionMatrixArray</span>)<span class="pl-smi">r</span>.<span class="pl-smi">_projectionMatrixArray</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">16</span>);<span class="pl-smi">r</span>.<span class="pl-smi">matrixWorldInverse</span>.<span class="pl-en">flattenToArray</span>(<span class="pl-smi">r</span>.<span class="pl-smi">_viewMatrixArray</span>);<span class="pl-smi">r</span>.<span class="pl-smi">projectionMatrix</span>.<span class="pl-en">flattenToArray</span>(<span class="pl-smi">r</span>.<span class="pl-smi">_projectionMatrixArray</span>);<span class="pl-smi">h</span>.<span class="pl-en">multiply</span>(<span class="pl-smi">r</span>.<span class="pl-smi">projectionMatrix</span>,<span class="pl-smi">r</span>.<span class="pl-smi">matrixWorldInverse</span>);<span class="pl-smi">g</span>.<span class="pl-en">setFromMatrix</span>(h);<span class="pl-smi">b</span>.<span class="pl-en">setRenderTarget</span>(q);<span class="pl-smi">b</span>.<span class="pl-c1">clear</span>();s<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">__webglObjects</span>;o<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(q<span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-c1">length</span>;o<span class="pl-k">&lt;</span>q;o<span class="pl-k">++</span>){<span class="pl-c1">B</span><span class="pl-k">=</span>s[o];t<span class="pl-k">=</span><span class="pl-c1">B</span>.<span class="pl-c1">object</span>;<span class="pl-c1">B</span>.<span class="pl-smi">render</span><span class="pl-k">=</span><span class="pl-c1">false</span>;<span class="pl-k">if</span>(<span class="pl-smi">t</span>.<span class="pl-smi">visible</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">t</span>.<span class="pl-smi">castShadow</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-k">!</span>(t <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Mesh</span>)<span class="pl-k">||!</span><span class="pl-smi">t</span>.<span class="pl-smi">frustumCulled</span><span class="pl-k">||</span></td>
      </tr>
      <tr>
        <td id="L726" class="blob-num js-line-number" data-line-number="726"></td>
        <td id="LC726" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">g</span>.<span class="pl-c1">contains</span>(t))){<span class="pl-smi">t</span>.<span class="pl-smi">_modelViewMatrix</span>.<span class="pl-en">multiply</span>(<span class="pl-smi">r</span>.<span class="pl-smi">matrixWorldInverse</span>,<span class="pl-smi">t</span>.<span class="pl-smi">matrixWorld</span>);<span class="pl-c1">B</span>.<span class="pl-smi">render</span><span class="pl-k">=</span><span class="pl-c1">true</span>}}o<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(q<span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-c1">length</span>;o<span class="pl-k">&lt;</span>q;o<span class="pl-k">++</span>){<span class="pl-c1">B</span><span class="pl-k">=</span>s[o];<span class="pl-k">if</span>(<span class="pl-c1">B</span>.<span class="pl-smi">render</span>){t<span class="pl-k">=</span><span class="pl-c1">B</span>.<span class="pl-c1">object</span>;<span class="pl-c1">B</span><span class="pl-k">=</span><span class="pl-c1">B</span>.<span class="pl-smi">buffer</span>;v<span class="pl-k">=</span><span class="pl-smi">t</span>.<span class="pl-smi">material</span> <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">MeshFaceMaterial</span><span class="pl-k">?</span><span class="pl-smi">t</span>.<span class="pl-smi">geometry</span>.<span class="pl-smi">materials</span>[<span class="pl-c1">0</span>]<span class="pl-k">:</span><span class="pl-smi">t</span>.<span class="pl-smi">material</span>;u<span class="pl-k">=</span><span class="pl-smi">t</span>.<span class="pl-smi">geometry</span>.<span class="pl-smi">morphTargets</span>.<span class="pl-c1">length</span><span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">v</span>.<span class="pl-smi">morphTargets</span>;v<span class="pl-k">=</span>t <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">SkinnedMesh</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">v</span>.<span class="pl-smi">skinning</span>;u<span class="pl-k">=</span><span class="pl-smi">t</span>.<span class="pl-smi">customDepthMaterial</span><span class="pl-k">?</span><span class="pl-smi">t</span>.<span class="pl-smi">customDepthMaterial</span><span class="pl-k">:</span>v<span class="pl-k">?</span>u<span class="pl-k">?</span>f<span class="pl-k">:</span>e<span class="pl-k">:</span>u<span class="pl-k">?</span>d<span class="pl-k">:</span>c;<span class="pl-c1">B</span> <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">BufferGeometry</span><span class="pl-k">?</span><span class="pl-smi">b</span>.<span class="pl-en">renderBufferDirect</span>(r,<span class="pl-smi">l</span>.<span class="pl-smi">__lights</span>,<span class="pl-c1">null</span>,u,<span class="pl-c1">B</span>,t)<span class="pl-k">:</span><span class="pl-smi">b</span>.<span class="pl-en">renderBuffer</span>(r,<span class="pl-smi">l</span>.<span class="pl-smi">__lights</span>,</td>
      </tr>
      <tr>
        <td id="L727" class="blob-num js-line-number" data-line-number="727"></td>
        <td id="LC727" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">null</span>,u,<span class="pl-c1">B</span>,t)}}s<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">__webglObjectsImmediate</span>;o<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(q<span class="pl-k">=</span><span class="pl-smi">s</span>.<span class="pl-c1">length</span>;o<span class="pl-k">&lt;</span>q;o<span class="pl-k">++</span>){<span class="pl-c1">B</span><span class="pl-k">=</span>s[o];t<span class="pl-k">=</span><span class="pl-c1">B</span>.<span class="pl-c1">object</span>;<span class="pl-k">if</span>(<span class="pl-smi">t</span>.<span class="pl-smi">visible</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">t</span>.<span class="pl-smi">castShadow</span>){<span class="pl-smi">t</span>.<span class="pl-smi">_modelViewMatrix</span>.<span class="pl-en">multiply</span>(<span class="pl-smi">r</span>.<span class="pl-smi">matrixWorldInverse</span>,<span class="pl-smi">t</span>.<span class="pl-smi">matrixWorld</span>);<span class="pl-smi">b</span>.<span class="pl-en">renderImmediateObject</span>(r,<span class="pl-smi">l</span>.<span class="pl-smi">__lights</span>,<span class="pl-c1">null</span>,c,t)}}}n<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">getClearColor</span>();p<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">getClearAlpha</span>();<span class="pl-smi">a</span>.<span class="pl-en">clearColor</span>(<span class="pl-smi">n</span>.<span class="pl-smi">r</span>,<span class="pl-smi">n</span>.<span class="pl-smi">g</span>,<span class="pl-smi">n</span>.<span class="pl-smi">b</span>,p);<span class="pl-smi">a</span>.<span class="pl-en">enable</span>(<span class="pl-smi">a</span>.<span class="pl-c1">BLEND</span>);<span class="pl-smi">b</span>.<span class="pl-smi">shadowMapCullFrontFaces</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">a</span>.<span class="pl-en">cullFace</span>(<span class="pl-smi">a</span>.<span class="pl-c1">BACK</span>)}};<span class="pl-c1">THREE</span>.<span class="pl-smi">ShadowMapPlugin</span>.<span class="pl-smi">__projector</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Projector</span>;</td>
      </tr>
      <tr>
        <td id="L728" class="blob-num js-line-number" data-line-number="728"></td>
        <td id="LC728" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">SpritePlugin</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">function</span> <span class="pl-en">a</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-smi">b</span>.<span class="pl-c1">z</span><span class="pl-k">-</span><span class="pl-smi">a</span>.<span class="pl-c1">z</span>}<span class="pl-k">var</span> b,c,d,e,f,g,h,i,j,l;<span class="pl-c1">this</span>.<span class="pl-en">init</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){b<span class="pl-k">=</span><span class="pl-smi">a</span>.<span class="pl-smi">context</span>;c<span class="pl-k">=</span>a;d<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">16</span>);e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Uint16Array</span>(<span class="pl-c1">6</span>);a<span class="pl-k">=</span><span class="pl-c1">0</span>;d[a<span class="pl-k">++</span>]<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">1</span>;d[a<span class="pl-k">++</span>]<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">1</span>;d[a<span class="pl-k">++</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;d[a<span class="pl-k">++</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;d[a<span class="pl-k">++</span>]<span class="pl-k">=</span><span class="pl-c1">1</span>;d[a<span class="pl-k">++</span>]<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">1</span>;d[a<span class="pl-k">++</span>]<span class="pl-k">=</span><span class="pl-c1">1</span>;d[a<span class="pl-k">++</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;d[a<span class="pl-k">++</span>]<span class="pl-k">=</span><span class="pl-c1">1</span>;d[a<span class="pl-k">++</span>]<span class="pl-k">=</span><span class="pl-c1">1</span>;d[a<span class="pl-k">++</span>]<span class="pl-k">=</span><span class="pl-c1">1</span>;d[a<span class="pl-k">++</span>]<span class="pl-k">=</span><span class="pl-c1">1</span>;d[a<span class="pl-k">++</span>]<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">1</span>;d[a<span class="pl-k">++</span>]<span class="pl-k">=</span><span class="pl-c1">1</span>;d[a<span class="pl-k">++</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;d[a<span class="pl-k">++</span>]<span class="pl-k">=</span><span class="pl-c1">1</span>;a<span class="pl-k">=</span><span class="pl-c1">0</span>;e[a<span class="pl-k">++</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;e[a<span class="pl-k">++</span>]<span class="pl-k">=</span><span class="pl-c1">1</span>;e[a<span class="pl-k">++</span>]<span class="pl-k">=</span><span class="pl-c1">2</span>;e[a<span class="pl-k">++</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;e[a<span class="pl-k">++</span>]<span class="pl-k">=</span><span class="pl-c1">2</span>;e[a<span class="pl-k">++</span>]<span class="pl-k">=</span><span class="pl-c1">3</span>;f<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">createBuffer</span>();g<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">createBuffer</span>();<span class="pl-smi">b</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">b</span>.<span class="pl-c1">ARRAY_BUFFER</span>,f);<span class="pl-smi">b</span>.<span class="pl-en">bufferData</span>(<span class="pl-smi">b</span>.<span class="pl-c1">ARRAY_BUFFER</span>,d,<span class="pl-smi">b</span>.<span class="pl-c1">STATIC_DRAW</span>);<span class="pl-smi">b</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">b</span>.<span class="pl-c1">ELEMENT_ARRAY_BUFFER</span>,</td>
      </tr>
      <tr>
        <td id="L729" class="blob-num js-line-number" data-line-number="729"></td>
        <td id="LC729" class="blob-code blob-code-inner js-file-line">g);<span class="pl-smi">b</span>.<span class="pl-en">bufferData</span>(<span class="pl-smi">b</span>.<span class="pl-c1">ELEMENT_ARRAY_BUFFER</span>,e,<span class="pl-smi">b</span>.<span class="pl-c1">STATIC_DRAW</span>);<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderSprite</span>.<span class="pl-smi">sprite</span>,n<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">createProgram</span>(),p<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">createShader</span>(<span class="pl-smi">b</span>.<span class="pl-c1">FRAGMENT_SHADER</span>),o<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">createShader</span>(<span class="pl-smi">b</span>.<span class="pl-c1">VERTEX_SHADER</span>);<span class="pl-smi">b</span>.<span class="pl-en">shaderSource</span>(p,<span class="pl-smi">a</span>.<span class="pl-smi">fragmentShader</span>);<span class="pl-smi">b</span>.<span class="pl-en">shaderSource</span>(o,<span class="pl-smi">a</span>.<span class="pl-smi">vertexShader</span>);<span class="pl-smi">b</span>.<span class="pl-en">compileShader</span>(p);<span class="pl-smi">b</span>.<span class="pl-en">compileShader</span>(o);<span class="pl-smi">b</span>.<span class="pl-en">attachShader</span>(n,p);<span class="pl-smi">b</span>.<span class="pl-en">attachShader</span>(n,o);<span class="pl-smi">b</span>.<span class="pl-en">linkProgram</span>(n);h<span class="pl-k">=</span>n;i<span class="pl-k">=</span>{};j<span class="pl-k">=</span>{};<span class="pl-smi">i</span>.<span class="pl-smi">position</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">getAttribLocation</span>(h,<span class="pl-s"><span class="pl-pds">&quot;</span>position<span class="pl-pds">&quot;</span></span>);<span class="pl-smi">i</span>.<span class="pl-smi">uv</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">getAttribLocation</span>(h,<span class="pl-s"><span class="pl-pds">&quot;</span>uv<span class="pl-pds">&quot;</span></span>);<span class="pl-smi">j</span>.<span class="pl-smi">uvOffset</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">getUniformLocation</span>(h,<span class="pl-s"><span class="pl-pds">&quot;</span>uvOffset<span class="pl-pds">&quot;</span></span>);<span class="pl-smi">j</span>.<span class="pl-smi">uvScale</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">getUniformLocation</span>(h,</td>
      </tr>
      <tr>
        <td id="L730" class="blob-num js-line-number" data-line-number="730"></td>
        <td id="LC730" class="blob-code blob-code-inner js-file-line"><span class="pl-s"><span class="pl-pds">&quot;</span>uvScale<span class="pl-pds">&quot;</span></span>);<span class="pl-smi">j</span>.<span class="pl-smi">rotation</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">getUniformLocation</span>(h,<span class="pl-s"><span class="pl-pds">&quot;</span>rotation<span class="pl-pds">&quot;</span></span>);<span class="pl-smi">j</span>.<span class="pl-smi">scale</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">getUniformLocation</span>(h,<span class="pl-s"><span class="pl-pds">&quot;</span>scale<span class="pl-pds">&quot;</span></span>);<span class="pl-smi">j</span>.<span class="pl-smi">alignment</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">getUniformLocation</span>(h,<span class="pl-s"><span class="pl-pds">&quot;</span>alignment<span class="pl-pds">&quot;</span></span>);<span class="pl-smi">j</span>.<span class="pl-c1">color</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">getUniformLocation</span>(h,<span class="pl-s"><span class="pl-pds">&quot;</span>color<span class="pl-pds">&quot;</span></span>);<span class="pl-smi">j</span>.<span class="pl-smi">map</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">getUniformLocation</span>(h,<span class="pl-s"><span class="pl-pds">&quot;</span>map<span class="pl-pds">&quot;</span></span>);<span class="pl-smi">j</span>.<span class="pl-smi">opacity</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">getUniformLocation</span>(h,<span class="pl-s"><span class="pl-pds">&quot;</span>opacity<span class="pl-pds">&quot;</span></span>);<span class="pl-smi">j</span>.<span class="pl-smi">useScreenCoordinates</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">getUniformLocation</span>(h,<span class="pl-s"><span class="pl-pds">&quot;</span>useScreenCoordinates<span class="pl-pds">&quot;</span></span>);<span class="pl-smi">j</span>.<span class="pl-smi">affectedByDistance</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">getUniformLocation</span>(h,<span class="pl-s"><span class="pl-pds">&quot;</span>affectedByDistance<span class="pl-pds">&quot;</span></span>);<span class="pl-smi">j</span>.<span class="pl-smi">screenPosition</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">getUniformLocation</span>(h,<span class="pl-s"><span class="pl-pds">&quot;</span>screenPosition<span class="pl-pds">&quot;</span></span>);<span class="pl-smi">j</span>.<span class="pl-smi">modelViewMatrix</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">getUniformLocation</span>(h,<span class="pl-s"><span class="pl-pds">&quot;</span>modelViewMatrix<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L731" class="blob-num js-line-number" data-line-number="731"></td>
        <td id="LC731" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">j</span>.<span class="pl-smi">projectionMatrix</span><span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">getUniformLocation</span>(h,<span class="pl-s"><span class="pl-pds">&quot;</span>projectionMatrix<span class="pl-pds">&quot;</span></span>);l<span class="pl-k">=</span><span class="pl-c1">false</span>};<span class="pl-c1">this</span>.<span class="pl-en">render</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>,<span class="pl-smi">e</span>,<span class="pl-smi">p</span>,<span class="pl-smi">o</span>){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-smi">__webglSprites</span>,q<span class="pl-k">=</span><span class="pl-smi">d</span>.<span class="pl-c1">length</span>;<span class="pl-k">if</span>(q){<span class="pl-k">var</span> r<span class="pl-k">=</span>i,t<span class="pl-k">=</span>j,<span class="pl-c1">B</span><span class="pl-k">=</span>o<span class="pl-k">/</span>p,p<span class="pl-k">=</span>p<span class="pl-k">*</span><span class="pl-c1">0.5</span>,u<span class="pl-k">=</span>o<span class="pl-k">*</span><span class="pl-c1">0.5</span>,s<span class="pl-k">=</span><span class="pl-c1">true</span>;<span class="pl-smi">b</span>.<span class="pl-en">useProgram</span>(h);<span class="pl-k">if</span>(<span class="pl-k">!</span>l){<span class="pl-smi">b</span>.<span class="pl-en">enableVertexAttribArray</span>(<span class="pl-smi">r</span>.<span class="pl-smi">position</span>);<span class="pl-smi">b</span>.<span class="pl-en">enableVertexAttribArray</span>(<span class="pl-smi">r</span>.<span class="pl-smi">uv</span>);l<span class="pl-k">=</span><span class="pl-c1">true</span>}<span class="pl-smi">b</span>.<span class="pl-en">disable</span>(<span class="pl-smi">b</span>.<span class="pl-c1">CULL_FACE</span>);<span class="pl-smi">b</span>.<span class="pl-en">enable</span>(<span class="pl-smi">b</span>.<span class="pl-c1">BLEND</span>);<span class="pl-smi">b</span>.<span class="pl-en">depthMask</span>(<span class="pl-c1">true</span>);<span class="pl-smi">b</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">b</span>.<span class="pl-c1">ARRAY_BUFFER</span>,f);<span class="pl-smi">b</span>.<span class="pl-en">vertexAttribPointer</span>(<span class="pl-smi">r</span>.<span class="pl-smi">position</span>,<span class="pl-c1">2</span>,<span class="pl-smi">b</span>.<span class="pl-c1">FLOAT</span>,<span class="pl-c1">false</span>,<span class="pl-c1">16</span>,<span class="pl-c1">0</span>);<span class="pl-smi">b</span>.<span class="pl-en">vertexAttribPointer</span>(<span class="pl-smi">r</span>.<span class="pl-smi">uv</span>,<span class="pl-c1">2</span>,<span class="pl-smi">b</span>.<span class="pl-c1">FLOAT</span>,<span class="pl-c1">false</span>,<span class="pl-c1">16</span>,<span class="pl-c1">8</span>);<span class="pl-smi">b</span>.<span class="pl-en">bindBuffer</span>(<span class="pl-smi">b</span>.<span class="pl-c1">ELEMENT_ARRAY_BUFFER</span>,</td>
      </tr>
      <tr>
        <td id="L732" class="blob-num js-line-number" data-line-number="732"></td>
        <td id="LC732" class="blob-code blob-code-inner js-file-line">g);<span class="pl-smi">b</span>.<span class="pl-en">uniformMatrix4fv</span>(<span class="pl-smi">t</span>.<span class="pl-smi">projectionMatrix</span>,<span class="pl-c1">false</span>,<span class="pl-smi">e</span>.<span class="pl-smi">_projectionMatrixArray</span>);<span class="pl-smi">b</span>.<span class="pl-en">activeTexture</span>(<span class="pl-smi">b</span>.<span class="pl-c1">TEXTURE0</span>);<span class="pl-smi">b</span>.<span class="pl-en">uniform1i</span>(<span class="pl-smi">t</span>.<span class="pl-smi">map</span>,<span class="pl-c1">0</span>);<span class="pl-k">for</span>(<span class="pl-k">var</span> z,<span class="pl-c1">A</span><span class="pl-k">=</span>[],r<span class="pl-k">=</span><span class="pl-c1">0</span>;r<span class="pl-k">&lt;</span>q;r<span class="pl-k">++</span>){z<span class="pl-k">=</span>d[r];<span class="pl-k">if</span>(<span class="pl-smi">z</span>.<span class="pl-smi">visible</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">z</span>.<span class="pl-smi">opacity</span><span class="pl-k">!==</span><span class="pl-c1">0</span>)<span class="pl-k">if</span>(<span class="pl-smi">z</span>.<span class="pl-smi">useScreenCoordinates</span>)<span class="pl-smi">z</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-smi">z</span>.<span class="pl-smi">position</span>.<span class="pl-c1">z</span>;<span class="pl-k">else</span>{<span class="pl-smi">z</span>.<span class="pl-smi">_modelViewMatrix</span>.<span class="pl-en">multiply</span>(<span class="pl-smi">e</span>.<span class="pl-smi">matrixWorldInverse</span>,<span class="pl-smi">z</span>.<span class="pl-smi">matrixWorld</span>);<span class="pl-smi">z</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-smi">z</span>.<span class="pl-smi">_modelViewMatrix</span>.<span class="pl-c1">elements</span>[<span class="pl-c1">14</span>]}}<span class="pl-smi">d</span>.<span class="pl-c1">sort</span>(a);<span class="pl-k">for</span>(r<span class="pl-k">=</span><span class="pl-c1">0</span>;r<span class="pl-k">&lt;</span>q;r<span class="pl-k">++</span>){z<span class="pl-k">=</span>d[r];<span class="pl-k">if</span>(<span class="pl-smi">z</span>.<span class="pl-smi">visible</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">z</span>.<span class="pl-smi">opacity</span><span class="pl-k">!==</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">z</span>.<span class="pl-smi">map</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">z</span>.<span class="pl-smi">map</span>.<span class="pl-smi">image</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">z</span>.<span class="pl-smi">map</span>.<span class="pl-smi">image</span>.<span class="pl-c1">width</span>){<span class="pl-k">if</span>(<span class="pl-smi">z</span>.<span class="pl-smi">useScreenCoordinates</span>){<span class="pl-smi">b</span>.<span class="pl-en">uniform1i</span>(<span class="pl-smi">t</span>.<span class="pl-smi">useScreenCoordinates</span>,<span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L733" class="blob-num js-line-number" data-line-number="733"></td>
        <td id="LC733" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">b</span>.<span class="pl-en">uniform3f</span>(<span class="pl-smi">t</span>.<span class="pl-smi">screenPosition</span>,(<span class="pl-smi">z</span>.<span class="pl-smi">position</span>.<span class="pl-c1">x</span><span class="pl-k">-</span>p)<span class="pl-k">/</span>p,(u<span class="pl-k">-</span><span class="pl-smi">z</span>.<span class="pl-smi">position</span>.<span class="pl-c1">y</span>)<span class="pl-k">/</span>u,<span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-c1">0</span>,<span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-c1">1</span>,<span class="pl-smi">z</span>.<span class="pl-smi">position</span>.<span class="pl-c1">z</span>)))}<span class="pl-k">else</span>{<span class="pl-smi">b</span>.<span class="pl-en">uniform1i</span>(<span class="pl-smi">t</span>.<span class="pl-smi">useScreenCoordinates</span>,<span class="pl-c1">0</span>);<span class="pl-smi">b</span>.<span class="pl-en">uniform1i</span>(<span class="pl-smi">t</span>.<span class="pl-smi">affectedByDistance</span>,<span class="pl-smi">z</span>.<span class="pl-smi">affectedByDistance</span><span class="pl-k">?</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">0</span>);<span class="pl-smi">b</span>.<span class="pl-en">uniformMatrix4fv</span>(<span class="pl-smi">t</span>.<span class="pl-smi">modelViewMatrix</span>,<span class="pl-c1">false</span>,<span class="pl-smi">z</span>.<span class="pl-smi">_modelViewMatrix</span>.<span class="pl-c1">elements</span>)}e<span class="pl-k">=</span><span class="pl-smi">z</span>.<span class="pl-smi">map</span>.<span class="pl-smi">image</span>.<span class="pl-c1">width</span><span class="pl-k">/</span>(<span class="pl-smi">z</span>.<span class="pl-smi">scaleByViewport</span><span class="pl-k">?</span>o<span class="pl-k">:</span><span class="pl-c1">1</span>);<span class="pl-c1">A</span>[<span class="pl-c1">0</span>]<span class="pl-k">=</span>e<span class="pl-k">*</span><span class="pl-c1">B</span><span class="pl-k">*</span><span class="pl-smi">z</span>.<span class="pl-smi">scale</span>.<span class="pl-c1">x</span>;<span class="pl-c1">A</span>[<span class="pl-c1">1</span>]<span class="pl-k">=</span>e<span class="pl-k">*</span><span class="pl-smi">z</span>.<span class="pl-smi">scale</span>.<span class="pl-c1">y</span>;<span class="pl-smi">b</span>.<span class="pl-en">uniform2f</span>(<span class="pl-smi">t</span>.<span class="pl-smi">uvScale</span>,<span class="pl-smi">z</span>.<span class="pl-smi">uvScale</span>.<span class="pl-c1">x</span>,<span class="pl-smi">z</span>.<span class="pl-smi">uvScale</span>.<span class="pl-c1">y</span>);<span class="pl-smi">b</span>.<span class="pl-en">uniform2f</span>(<span class="pl-smi">t</span>.<span class="pl-smi">uvOffset</span>,<span class="pl-smi">z</span>.<span class="pl-smi">uvOffset</span>.<span class="pl-c1">x</span>,<span class="pl-smi">z</span>.<span class="pl-smi">uvOffset</span>.<span class="pl-c1">y</span>);<span class="pl-smi">b</span>.<span class="pl-en">uniform2f</span>(<span class="pl-smi">t</span>.<span class="pl-smi">alignment</span>,<span class="pl-smi">z</span>.<span class="pl-smi">alignment</span>.<span class="pl-c1">x</span>,<span class="pl-smi">z</span>.<span class="pl-smi">alignment</span>.<span class="pl-c1">y</span>);</td>
      </tr>
      <tr>
        <td id="L734" class="blob-num js-line-number" data-line-number="734"></td>
        <td id="LC734" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">b</span>.<span class="pl-en">uniform1f</span>(<span class="pl-smi">t</span>.<span class="pl-smi">opacity</span>,<span class="pl-smi">z</span>.<span class="pl-smi">opacity</span>);<span class="pl-smi">b</span>.<span class="pl-en">uniform3f</span>(<span class="pl-smi">t</span>.<span class="pl-c1">color</span>,<span class="pl-smi">z</span>.<span class="pl-c1">color</span>.<span class="pl-smi">r</span>,<span class="pl-smi">z</span>.<span class="pl-c1">color</span>.<span class="pl-smi">g</span>,<span class="pl-smi">z</span>.<span class="pl-c1">color</span>.<span class="pl-smi">b</span>);<span class="pl-smi">b</span>.<span class="pl-en">uniform1f</span>(<span class="pl-smi">t</span>.<span class="pl-smi">rotation</span>,<span class="pl-smi">z</span>.<span class="pl-smi">rotation</span>);<span class="pl-smi">b</span>.<span class="pl-en">uniform2fv</span>(<span class="pl-smi">t</span>.<span class="pl-smi">scale</span>,<span class="pl-c1">A</span>);<span class="pl-k">if</span>(<span class="pl-smi">z</span>.<span class="pl-smi">mergeWith3D</span><span class="pl-k">&amp;&amp;!</span>s){<span class="pl-smi">b</span>.<span class="pl-en">enable</span>(<span class="pl-smi">b</span>.<span class="pl-c1">DEPTH_TEST</span>);s<span class="pl-k">=</span><span class="pl-c1">true</span>}<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-smi">z</span>.<span class="pl-smi">mergeWith3D</span><span class="pl-k">&amp;&amp;</span>s){<span class="pl-smi">b</span>.<span class="pl-en">disable</span>(<span class="pl-smi">b</span>.<span class="pl-c1">DEPTH_TEST</span>);s<span class="pl-k">=</span><span class="pl-c1">false</span>}<span class="pl-smi">c</span>.<span class="pl-en">setBlending</span>(<span class="pl-smi">z</span>.<span class="pl-smi">blending</span>,<span class="pl-smi">z</span>.<span class="pl-smi">blendEquation</span>,<span class="pl-smi">z</span>.<span class="pl-smi">blendSrc</span>,<span class="pl-smi">z</span>.<span class="pl-smi">blendDst</span>);<span class="pl-smi">c</span>.<span class="pl-en">setTexture</span>(<span class="pl-smi">z</span>.<span class="pl-smi">map</span>,<span class="pl-c1">0</span>);<span class="pl-smi">b</span>.<span class="pl-en">drawElements</span>(<span class="pl-smi">b</span>.<span class="pl-c1">TRIANGLES</span>,<span class="pl-c1">6</span>,<span class="pl-smi">b</span>.<span class="pl-c1">UNSIGNED_SHORT</span>,<span class="pl-c1">0</span>)}}<span class="pl-smi">b</span>.<span class="pl-en">enable</span>(<span class="pl-smi">b</span>.<span class="pl-c1">CULL_FACE</span>);<span class="pl-smi">b</span>.<span class="pl-en">enable</span>(<span class="pl-smi">b</span>.<span class="pl-c1">DEPTH_TEST</span>);<span class="pl-smi">b</span>.<span class="pl-en">depthMask</span>(<span class="pl-c1">true</span>)}}};</td>
      </tr>
      <tr>
        <td id="L735" class="blob-num js-line-number" data-line-number="735"></td>
        <td id="LC735" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">THREE</span>.<span class="pl-en">DepthPassPlugin</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-c1">this</span>.<span class="pl-smi">enabled</span><span class="pl-k">=</span><span class="pl-c1">false</span>;<span class="pl-c1">this</span>.<span class="pl-smi">renderTarget</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">var</span> a,b,c,d,e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Frustum</span>,f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.Matrix4</span>;<span class="pl-c1">this</span>.<span class="pl-en">init</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">e</span>){a<span class="pl-k">=</span><span class="pl-smi">e</span>.<span class="pl-smi">context</span>;b<span class="pl-k">=</span>e;<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">ShaderLib</span>.<span class="pl-smi">depthRGBA</span>,f<span class="pl-k">=</span><span class="pl-c1">THREE</span>.<span class="pl-smi">UniformsUtils</span>.<span class="pl-en">clone</span>(<span class="pl-smi">e</span>.<span class="pl-smi">uniforms</span>);c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.ShaderMaterial</span>({fragmentShader<span class="pl-k">:</span><span class="pl-smi">e</span>.<span class="pl-smi">fragmentShader</span>,vertexShader<span class="pl-k">:</span><span class="pl-smi">e</span>.<span class="pl-smi">vertexShader</span>,uniforms<span class="pl-k">:</span>f});d<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">THREE.ShaderMaterial</span>({fragmentShader<span class="pl-k">:</span><span class="pl-smi">e</span>.<span class="pl-smi">fragmentShader</span>,vertexShader<span class="pl-k">:</span><span class="pl-smi">e</span>.<span class="pl-smi">vertexShader</span>,uniforms<span class="pl-k">:</span>f,morphTargets<span class="pl-k">:</span><span class="pl-c1">true</span>});<span class="pl-smi">c</span>.<span class="pl-smi">_shadowPass</span><span class="pl-k">=</span><span class="pl-c1">true</span>;<span class="pl-smi">d</span>.<span class="pl-smi">_shadowPass</span><span class="pl-k">=</span><span class="pl-c1">true</span>};<span class="pl-c1">this</span>.<span class="pl-smi">render</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L736" class="blob-num js-line-number" data-line-number="736"></td>
        <td id="LC736" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>){<span class="pl-c1">this</span>.<span class="pl-smi">enabled</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">this</span>.<span class="pl-en">update</span>(a,b)};<span class="pl-c1">this</span>.<span class="pl-en">update</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">g</span>,<span class="pl-smi">h</span>){<span class="pl-k">var</span> i,j,l,m,n,p;<span class="pl-smi">a</span>.<span class="pl-en">clearColor</span>(<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>);<span class="pl-smi">a</span>.<span class="pl-en">disable</span>(<span class="pl-smi">a</span>.<span class="pl-c1">BLEND</span>);<span class="pl-smi">b</span>.<span class="pl-en">setDepthTest</span>(<span class="pl-c1">true</span>);<span class="pl-smi">b</span>.<span class="pl-smi">autoUpdateScene</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">g</span>.<span class="pl-en">updateMatrixWorld</span>();<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-smi">h</span>.<span class="pl-smi">_viewMatrixArray</span>)<span class="pl-smi">h</span>.<span class="pl-smi">_viewMatrixArray</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">16</span>);<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-smi">h</span>.<span class="pl-smi">_projectionMatrixArray</span>)<span class="pl-smi">h</span>.<span class="pl-smi">_projectionMatrixArray</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(<span class="pl-c1">16</span>);<span class="pl-smi">h</span>.<span class="pl-smi">matrixWorldInverse</span>.<span class="pl-en">getInverse</span>(<span class="pl-smi">h</span>.<span class="pl-smi">matrixWorld</span>);<span class="pl-smi">h</span>.<span class="pl-smi">matrixWorldInverse</span>.<span class="pl-en">flattenToArray</span>(<span class="pl-smi">h</span>.<span class="pl-smi">_viewMatrixArray</span>);<span class="pl-smi">h</span>.<span class="pl-smi">projectionMatrix</span>.<span class="pl-en">flattenToArray</span>(<span class="pl-smi">h</span>.<span class="pl-smi">_projectionMatrixArray</span>);<span class="pl-smi">f</span>.<span class="pl-en">multiply</span>(<span class="pl-smi">h</span>.<span class="pl-smi">projectionMatrix</span>,</td>
      </tr>
      <tr>
        <td id="L737" class="blob-num js-line-number" data-line-number="737"></td>
        <td id="LC737" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">h</span>.<span class="pl-smi">matrixWorldInverse</span>);<span class="pl-smi">e</span>.<span class="pl-en">setFromMatrix</span>(f);<span class="pl-smi">b</span>.<span class="pl-en">setRenderTarget</span>(<span class="pl-c1">this</span>.<span class="pl-smi">renderTarget</span>);<span class="pl-smi">b</span>.<span class="pl-c1">clear</span>();p<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">__webglObjects</span>;i<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(j<span class="pl-k">=</span><span class="pl-smi">p</span>.<span class="pl-c1">length</span>;i<span class="pl-k">&lt;</span>j;i<span class="pl-k">++</span>){l<span class="pl-k">=</span>p[i];n<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-c1">object</span>;<span class="pl-smi">l</span>.<span class="pl-smi">render</span><span class="pl-k">=</span><span class="pl-c1">false</span>;<span class="pl-k">if</span>(<span class="pl-smi">n</span>.<span class="pl-smi">visible</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-k">!</span>(n <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">Mesh</span>)<span class="pl-k">||!</span><span class="pl-smi">n</span>.<span class="pl-smi">frustumCulled</span><span class="pl-k">||</span><span class="pl-smi">e</span>.<span class="pl-c1">contains</span>(n))){<span class="pl-smi">n</span>.<span class="pl-smi">_modelViewMatrix</span>.<span class="pl-en">multiply</span>(<span class="pl-smi">h</span>.<span class="pl-smi">matrixWorldInverse</span>,<span class="pl-smi">n</span>.<span class="pl-smi">matrixWorld</span>);<span class="pl-smi">l</span>.<span class="pl-smi">render</span><span class="pl-k">=</span><span class="pl-c1">true</span>}}i<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(j<span class="pl-k">=</span><span class="pl-smi">p</span>.<span class="pl-c1">length</span>;i<span class="pl-k">&lt;</span>j;i<span class="pl-k">++</span>){l<span class="pl-k">=</span>p[i];<span class="pl-k">if</span>(<span class="pl-smi">l</span>.<span class="pl-smi">render</span>){n<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-c1">object</span>;l<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-smi">buffer</span>;<span class="pl-smi">n</span>.<span class="pl-smi">material</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">b</span>.<span class="pl-en">setMaterialFaces</span>(<span class="pl-smi">n</span>.<span class="pl-smi">material</span>);m<span class="pl-k">=</span><span class="pl-smi">n</span>.<span class="pl-smi">customDepthMaterial</span><span class="pl-k">?</span><span class="pl-smi">n</span>.<span class="pl-smi">customDepthMaterial</span><span class="pl-k">:</span><span class="pl-smi">n</span>.<span class="pl-smi">geometry</span>.<span class="pl-smi">morphTargets</span>.<span class="pl-c1">length</span><span class="pl-k">?</span></td>
      </tr>
      <tr>
        <td id="L738" class="blob-num js-line-number" data-line-number="738"></td>
        <td id="LC738" class="blob-code blob-code-inner js-file-line">d<span class="pl-k">:</span>c;l <span class="pl-k">instanceof</span> <span class="pl-c1">THREE</span>.<span class="pl-smi">BufferGeometry</span><span class="pl-k">?</span><span class="pl-smi">b</span>.<span class="pl-en">renderBufferDirect</span>(h,<span class="pl-smi">g</span>.<span class="pl-smi">__lights</span>,<span class="pl-c1">null</span>,m,l,n)<span class="pl-k">:</span><span class="pl-smi">b</span>.<span class="pl-en">renderBuffer</span>(h,<span class="pl-smi">g</span>.<span class="pl-smi">__lights</span>,<span class="pl-c1">null</span>,m,l,n)}}p<span class="pl-k">=</span><span class="pl-smi">g</span>.<span class="pl-smi">__webglObjectsImmediate</span>;i<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(j<span class="pl-k">=</span><span class="pl-smi">p</span>.<span class="pl-c1">length</span>;i<span class="pl-k">&lt;</span>j;i<span class="pl-k">++</span>){l<span class="pl-k">=</span>p[i];n<span class="pl-k">=</span><span class="pl-smi">l</span>.<span class="pl-c1">object</span>;<span class="pl-k">if</span>(<span class="pl-smi">n</span>.<span class="pl-smi">visible</span><span class="pl-k">&amp;&amp;</span><span class="pl-smi">n</span>.<span class="pl-smi">castShadow</span>){<span class="pl-smi">n</span>.<span class="pl-smi">_modelViewMatrix</span>.<span class="pl-en">multiply</span>(<span class="pl-smi">h</span>.<span class="pl-smi">matrixWorldInverse</span>,<span class="pl-smi">n</span>.<span class="pl-smi">matrixWorld</span>);<span class="pl-smi">b</span>.<span class="pl-en">renderImmediateObject</span>(h,<span class="pl-smi">g</span>.<span class="pl-smi">__lights</span>,<span class="pl-c1">null</span>,c,n)}}i<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">getClearColor</span>();j<span class="pl-k">=</span><span class="pl-smi">b</span>.<span class="pl-en">getClearAlpha</span>();<span class="pl-smi">a</span>.<span class="pl-en">clearColor</span>(<span class="pl-smi">i</span>.<span class="pl-smi">r</span>,<span class="pl-smi">i</span>.<span class="pl-smi">g</span>,<span class="pl-smi">i</span>.<span class="pl-smi">b</span>,j);<span class="pl-smi">a</span>.<span class="pl-en">enable</span>(<span class="pl-smi">a</span>.<span class="pl-c1">BLEND</span>)}};</td>
      </tr>
      <tr>
        <td id="L739" class="blob-num js-line-number" data-line-number="739"></td>
        <td id="LC739" class="blob-code blob-code-inner js-file-line">THREE.ShaderFlares={lensFlareVertexTexture:{vertexShader:&quot;uniform vec3 screenPosition;\nuniform vec2 scale;\nuniform float rotation;\nuniform int renderType;\nuniform sampler2D occlusionMap;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\nvUV = uv;\nvec2 pos = position;\nif( renderType == 2 ) {\nvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) ) +\ntexture2D( occlusionMap, vec2( 0.5, 0.1 ) ) +\ntexture2D( occlusionMap, vec2( 0.9, 0.1 ) ) +\ntexture2D( occlusionMap, vec2( 0.9, 0.5 ) ) +\ntexture2D( occlusionMap, vec2( 0.9, 0.9 ) ) +\ntexture2D( occlusionMap, vec2( 0.5, 0.9 ) ) +\ntexture2D( occlusionMap, vec2( 0.1, 0.9 ) ) +\ntexture2D( occlusionMap, vec2( 0.1, 0.5 ) ) +\ntexture2D( occlusionMap, vec2( 0.5, 0.5 ) );\nvVisibility = (       visibility.r / 9.0 ) *\n( 1.0 - visibility.g / 9.0 ) *\n(       visibility.b / 9.0 ) *\n( 1.0 - visibility.a / 9.0 );\npos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\npos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\n}\ngl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n}&quot;,fragmentShader:&quot;precision mediump float;\nuniform sampler2D map;\nuniform float opacity;\nuniform int renderType;\nuniform vec3 color;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\nif( renderType == 0 ) {\ngl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );\n} else if( renderType == 1 ) {\ngl_FragColor = texture2D( map, vUV );\n} else {\nvec4 texture = texture2D( map, vUV );\ntexture.a *= opacity * vVisibility;\ngl_FragColor = texture;\ngl_FragColor.rgb *= color;\n}\n}&quot;},</td>
      </tr>
      <tr>
        <td id="L740" class="blob-num js-line-number" data-line-number="740"></td>
        <td id="LC740" class="blob-code blob-code-inner js-file-line">lensFlare:{vertexShader:&quot;uniform vec3 screenPosition;\nuniform vec2 scale;\nuniform float rotation;\nuniform int renderType;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvoid main() {\nvUV = uv;\nvec2 pos = position;\nif( renderType == 2 ) {\npos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\npos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\n}\ngl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n}&quot;,fragmentShader:&quot;precision mediump float;\nuniform sampler2D map;\nuniform sampler2D occlusionMap;\nuniform float opacity;\nuniform int renderType;\nuniform vec3 color;\nvarying vec2 vUV;\nvoid main() {\nif( renderType == 0 ) {\ngl_FragColor = vec4( texture2D( map, vUV ).rgb, 0.0 );\n} else if( renderType == 1 ) {\ngl_FragColor = texture2D( map, vUV );\n} else {\nfloat visibility = texture2D( occlusionMap, vec2( 0.5, 0.1 ) ).a +\ntexture2D( occlusionMap, vec2( 0.9, 0.5 ) ).a +\ntexture2D( occlusionMap, vec2( 0.5, 0.9 ) ).a +\ntexture2D( occlusionMap, vec2( 0.1, 0.5 ) ).a;\nvisibility = ( 1.0 - visibility / 4.0 );\nvec4 texture = texture2D( map, vUV );\ntexture.a *= opacity * visibility;\ngl_FragColor = texture;\ngl_FragColor.rgb *= color;\n}\n}&quot;}};</td>
      </tr>
      <tr>
        <td id="L741" class="blob-num js-line-number" data-line-number="741"></td>
        <td id="LC741" class="blob-code blob-code-inner js-file-line">THREE.ShaderSprite={sprite:{vertexShader:&quot;uniform int useScreenCoordinates;\nuniform int affectedByDistance;\nuniform vec3 screenPosition;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float rotation;\nuniform vec2 scale;\nuniform vec2 alignment;\nuniform vec2 uvOffset;\nuniform vec2 uvScale;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvoid main() {\nvUV = uvOffset + uv * uvScale;\nvec2 alignedPosition = position + alignment;\nvec2 rotatedPosition;\nrotatedPosition.x = ( cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y ) * scale.x;\nrotatedPosition.y = ( sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y ) * scale.y;\nvec4 finalPosition;\nif( useScreenCoordinates != 0 ) {\nfinalPosition = vec4( screenPosition.xy + rotatedPosition, screenPosition.z, 1.0 );\n} else {\nfinalPosition = projectionMatrix * modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\nfinalPosition.xy += rotatedPosition * ( affectedByDistance == 1 ? 1.0 : finalPosition.z );\n}\ngl_Position = finalPosition;\n}&quot;,</td>
      </tr>
      <tr>
        <td id="L742" class="blob-num js-line-number" data-line-number="742"></td>
        <td id="LC742" class="blob-code blob-code-inner js-file-line">fragmentShader<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>precision mediump float;<span class="pl-cce">\n</span>uniform vec3 color;<span class="pl-cce">\n</span>uniform sampler2D map;<span class="pl-cce">\n</span>uniform float opacity;<span class="pl-cce">\n</span>varying vec2 vUV;<span class="pl-cce">\n</span>void main() {<span class="pl-cce">\n</span>vec4 texture = texture2D( map, vUV );<span class="pl-cce">\n</span>gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );<span class="pl-cce">\n</span>}<span class="pl-pds">&quot;</span></span>}};</td>
      </tr>
</table>

  <div class="BlobToolbar position-absolute js-file-line-actions dropdown js-menu-container js-select-menu d-none" aria-hidden="true">
    <button class="btn-octicon ml-0 px-2 p-0 bg-white border border-gray-dark rounded-1 dropdown-toggle js-menu-target" id="js-file-line-action-button" type="button" aria-expanded="false" aria-haspopup="true" aria-label="Inline file action toolbar" aria-controls="inline-file-actions">
      <svg aria-hidden="true" class="octicon" height="16" version="1.1" viewBox="0 0 13 4" width="14">
        <g stroke="none" stroke-width="1" fill-rule="evenodd">
            <g transform="translate(-1.000000, -6.000000)">
                <path d="M2.5,9.5 C1.67157288,9.5 1,8.82842712 1,8 C1,7.17157288 1.67157288,6.5 2.5,6.5 C3.32842712,6.5 4,7.17157288 4,8 C4,8.82842712 3.32842712,9.5 2.5,9.5 Z M7.5,9.5 C6.67157288,9.5 6,8.82842712 6,8 C6,7.17157288 6.67157288,6.5 7.5,6.5 C8.32842712,6.5 9,7.17157288 9,8 C9,8.82842712 8.32842712,9.5 7.5,9.5 Z M12.5,9.5 C11.6715729,9.5 11,8.82842712 11,8 C11,7.17157288 11.6715729,6.5 12.5,6.5 C13.3284271,6.5 14,7.17157288 14,8 C14,8.82842712 13.3284271,9.5 12.5,9.5 Z"></path>
            </g>
        </g>
      </svg>
    </button>
    <div class="dropdown-menu-content js-menu-content" id="inline-file-actions">
      <ul class="BlobToolbar-dropdown dropdown-menu dropdown-menu-se mt-2">
        <li><a class="js-zeroclipboard dropdown-item" style="cursor:pointer;" id="js-copy-lines" data-original-text="Copy lines">Copy lines</a></li>
        <li><a class="js-zeroclipboard dropdown-item" id= "js-copy-permalink" style="cursor:pointer;" data-original-text="Copy permalink">Copy permalink</a></li>
        <li><a href="/jtubert/labs/blame/acf1b9f277a9bd511141f7075552754fcfa072d7/three_js/js/three.min.js" class="dropdown-item js-update-url-with-hash" id="js-view-git-blame">View git blame</a></li>
          <li><a href="/jtubert/labs/issues/new" class="dropdown-item" id="js-new-issue">Open new issue</a></li>
      </ul>
    </div>
  </div>

  </div>

  </div>

  <button type="button" data-facebox="#jump-to-line" data-facebox-class="linejump" data-hotkey="l" class="d-none">Jump to Line</button>
  <div id="jump-to-line" style="display:none">
    <!-- '"` --><!-- </textarea></xmp> --></option></form><form accept-charset="UTF-8" action="" class="js-jump-to-line-form" method="get"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /></div>
      <input class="form-control linejump-input js-jump-to-line-field" type="text" placeholder="Jump to line&hellip;" aria-label="Jump to line" autofocus>
      <button type="submit" class="btn">Go</button>
</form>  </div>

  </div>
  <div class="modal-backdrop js-touch-events"></div>
</div>

    </div>
  </div>

  </div>

      
<div class="footer container-lg px-3" role="contentinfo">
  <div class="position-relative d-flex flex-justify-between py-6 mt-6 f6 text-gray border-top border-gray-light ">
    <ul class="list-style-none d-flex flex-wrap ">
      <li class="mr-3">&copy; 2017 <span title="2.08154s from unicorn-874196579-02msx">GitHub</span>, Inc.</li>
        <li class="mr-3"><a href="https://github.com/site/terms" data-ga-click="Footer, go to terms, text:terms">Terms</a></li>
        <li class="mr-3"><a href="https://github.com/site/privacy" data-ga-click="Footer, go to privacy, text:privacy">Privacy</a></li>
        <li class="mr-3"><a href="https://github.com/security" data-ga-click="Footer, go to security, text:security">Security</a></li>
        <li class="mr-3"><a href="https://status.github.com/" data-ga-click="Footer, go to status, text:status">Status</a></li>
        <li><a href="https://help.github.com" data-ga-click="Footer, go to help, text:help">Help</a></li>
    </ul>

    <a href="https://github.com" aria-label="Homepage" class="footer-octicon" title="GitHub">
      <svg aria-hidden="true" class="octicon octicon-mark-github" height="24" version="1.1" viewBox="0 0 16 16" width="24"><path fill-rule="evenodd" d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0 0 16 8c0-4.42-3.58-8-8-8z"/></svg>
</a>
    <ul class="list-style-none d-flex flex-wrap ">
        <li class="mr-3"><a href="https://github.com/contact" data-ga-click="Footer, go to contact, text:contact">Contact GitHub</a></li>
      <li class="mr-3"><a href="https://developer.github.com" data-ga-click="Footer, go to api, text:api">API</a></li>
      <li class="mr-3"><a href="https://training.github.com" data-ga-click="Footer, go to training, text:training">Training</a></li>
      <li class="mr-3"><a href="https://shop.github.com" data-ga-click="Footer, go to shop, text:shop">Shop</a></li>
        <li class="mr-3"><a href="https://github.com/blog" data-ga-click="Footer, go to blog, text:blog">Blog</a></li>
        <li><a href="https://github.com/about" data-ga-click="Footer, go to about, text:about">About</a></li>

    </ul>
  </div>
</div>



  <div id="ajax-error-message" class="ajax-error-message flash flash-error">
    <svg aria-hidden="true" class="octicon octicon-alert" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M8.865 1.52c-.18-.31-.51-.5-.87-.5s-.69.19-.87.5L.275 13.5c-.18.31-.18.69 0 1 .19.31.52.5.87.5h13.7c.36 0 .69-.19.86-.5.17-.31.18-.69.01-1L8.865 1.52zM8.995 13h-2v-2h2v2zm0-3h-2V6h2v4z"/></svg>
    <button type="button" class="flash-close js-flash-close js-ajax-error-dismiss" aria-label="Dismiss error">
      <svg aria-hidden="true" class="octicon octicon-x" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M7.48 8l3.75 3.75-1.48 1.48L6 9.48l-3.75 3.75-1.48-1.48L4.52 8 .77 4.25l1.48-1.48L6 6.52l3.75-3.75 1.48 1.48z"/></svg>
    </button>
    You can't perform that action at this time.
  </div>


    
    <script crossorigin="anonymous" integrity="sha256-dnzP47v4ExBZ2b/KDxJV9pmtXKcB8Chys1Je65HqGIE=" src="https://assets-cdn.github.com/assets/frameworks-767ccfe3bbf8131059d9bfca0f1255f699ad5ca701f02872b3525eeb91ea1881.js"></script>
    
    <script async="async" crossorigin="anonymous" integrity="sha256-AlZypSuYCzlJ6JUsyx0bra11bkKtQvymoaAAI2WkPEU=" src="https://assets-cdn.github.com/assets/github-025672a52b980b3949e8952ccb1d1badad756e42ad42fca6a1a0002365a43c45.js"></script>
    
    
    
    
  <div class="js-stale-session-flash stale-session-flash flash flash-warn flash-banner d-none">
    <svg aria-hidden="true" class="octicon octicon-alert" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M8.865 1.52c-.18-.31-.51-.5-.87-.5s-.69.19-.87.5L.275 13.5c-.18.31-.18.69 0 1 .19.31.52.5.87.5h13.7c.36 0 .69-.19.86-.5.17-.31.18-.69.01-1L8.865 1.52zM8.995 13h-2v-2h2v2zm0-3h-2V6h2v4z"/></svg>
    <span class="signed-in-tab-flash">You signed in with another tab or window. <a href="">Reload</a> to refresh your session.</span>
    <span class="signed-out-tab-flash">You signed out in another tab or window. <a href="">Reload</a> to refresh your session.</span>
  </div>
  <div class="facebox" id="facebox" style="display:none;">
  <div class="facebox-popup">
    <div class="facebox-content" role="dialog" aria-labelledby="facebox-header" aria-describedby="facebox-description">
    </div>
    <button type="button" class="facebox-close js-facebox-close" aria-label="Close modal">
      <svg aria-hidden="true" class="octicon octicon-x" height="16" version="1.1" viewBox="0 0 12 16" width="12"><path fill-rule="evenodd" d="M7.48 8l3.75 3.75-1.48 1.48L6 9.48l-3.75 3.75-1.48-1.48L4.52 8 .77 4.25l1.48-1.48L6 6.52l3.75-3.75 1.48 1.48z"/></svg>
    </button>
  </div>
</div>


  </body>
</html>

